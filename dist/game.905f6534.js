// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"fjhts":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "f1da0e86905f6534";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"5JiMD":[function(require,module,exports) {
//Source for this was course material and Leevi Lautanen
// Including the form for asking player to insert username: https://www.thepolyglotdeveloper.com/2020/09/accept-text-input-user-phaser-game/
// How to get user input with Phaser 3 plugin called rexUI: https://blog.ourcade.co/posts/2020/phaser-3-add-text-input-rexui/
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _startScene = require("./src/startScene");
var _startSceneDefault = parcelHelpers.interopDefault(_startScene);
var _levelScene1 = require("./src/levelScene1");
var _levelScene1Default = parcelHelpers.interopDefault(_levelScene1);
var _levelScene2 = require("./src/levelScene2");
var _levelScene2Default = parcelHelpers.interopDefault(_levelScene2);
var _levelScene3 = require("./src/levelScene3");
var _levelScene3Default = parcelHelpers.interopDefault(_levelScene3);
var _finishScene = require("./src/finishScene");
var _finishSceneDefault = parcelHelpers.interopDefault(_finishScene);
var _uiPlugin = require("phaser3-rex-plugins/templates/ui/ui-plugin");
var _uiPluginDefault = parcelHelpers.interopDefault(_uiPlugin);
var _stylesCss = require("./src/styles.css");
var _phaser = require("phaser");
var _phaserDefault = parcelHelpers.interopDefault(_phaser);
let game;
let phaserConfig;
window.onload = ()=>{
    phaserConfig = {
        type: (0, _phaserDefault.default).AUTO,
        scale: {
            mode: (0, _phaserDefault.default).Scale.Fit,
            autoCenter: (0, _phaserDefault.default).Scale.CENTER_BOTH,
            width: 800,
            height: 1000
        },
        dom: {
            createContainer: true
        },
        parent: "gameContainer",
        transparent: true,
        pixelArt: true,
        physics: {
            default: "arcade",
            debug: false,
            arcade: {
                gravity: {
                    y: 0
                }
            }
        },
        plugins: {
            scene: [
                {
                    key: "rexUI",
                    plugin: (0, _uiPluginDefault.default),
                    mapping: "rexUI"
                }
            ]
        },
        scene: [
            BootScene,
            (0, _startSceneDefault.default),
            (0, _levelScene1Default.default),
            (0, _levelScene2Default.default),
            (0, _levelScene3Default.default),
            (0, _finishSceneDefault.default)
        ]
    };
    game = new (0, _phaserDefault.default).Game(phaserConfig);
    window.focus();
};
const gameOptions = {
    playerGravity: 800,
    playerSpeed: 300
};
class BootScene extends (0, _phaserDefault.default).Scene {
    constructor(){
        super("BootScene");
    }
    create() {
        this.data = {
            config: phaserConfig,
            options: gameOptions,
            totalScore: [
                {
                    name: "level1",
                    score: 0
                },
                {
                    name: "level2",
                    score: 0
                },
                {
                    name: "level3",
                    score: 0
                }
            ],
            playerName: ""
        };
        this.scene.start("StartScene", this.data);
    }
}

},{"./src/startScene":"loePq","./src/levelScene1":"4cF2E","./src/levelScene2":"fNmku","./src/levelScene3":"ccm34","./src/finishScene":"5rk9W","phaser3-rex-plugins/templates/ui/ui-plugin":"kCKu7","./src/styles.css":"lW6qc","phaser":"d1pJ3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ccm34":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _phaser = require("phaser");
var _phaserDefault = parcelHelpers.interopDefault(_phaser);
var _moonplatformPng = require("./assets/moonplatform.png");
var _moonplatformPngDefault = parcelHelpers.interopDefault(_moonplatformPng);
var _smallmoonPlatformPng = require("./assets/smallmoon_platform.png");
var _smallmoonPlatformPngDefault = parcelHelpers.interopDefault(_smallmoonPlatformPng);
let gameData;
let gameConfig;
let gameOptions;
let gameWidth;
let gameHeight;
let gameScore;
class LevelScene3 extends (0, _phaserDefault.default).Scene {
    constructor(){
        super("LevelScene3");
        this.score = 0;
    }
    preload() {
        this.load.image("moonplatform", (0, _moonplatformPngDefault.default));
        this.load.image("smallmoonPlatform", (0, _smallmoonPlatformPngDefault.default));
        this.load.image("moonplatform2", "./assets/moonplatform2.png");
        //this.load.image("mountainsmallSkeletonPlatform", "./assets/smallSkeletonplatform.png");
        this.load.image("fireball", "./assets/fireball.png");
        this.load.image("arrows", "./assets/arrows.png");
        this.load.image("spaceBar", "./assets/spaceBar.png");
        this.load.image("blackhole", "./assets/blackhole.png");
        this.load.image("finish", "./assets/finish.png");
        this.load.image("alien", "./assets/alien.png");
        this.load.image("star1", "./assets/star1.png");
        this.load.image("star2", "./assets/star2.png");
        this.load.image("star3", "./assets/star3.png");
        this.load.image("star4", "./assets/star4.png");
        this.load.image("shootkeys", "./assets/shootkeys.png");
        // Loading the player
        this.load.spritesheet("player", "./assets/player.png", {
            frameWidth: 32,
            frameHeight: 48
        });
    }
    create(gameData) {
        this.data = gameData;
        gameConfig = gameData.config;
        gameWidth = gameConfig.scale.width;
        gameHeight = gameConfig.scale.height;
        gameOptions = gameData.options;
        gameScore = gameData.totalScore;
        //This is based on this website: https://www.html5gamedevs.com/topic/42460-how-to-stretch-background-image-on-full-screen/
        //const windowWidth = window.innerWidth; 
        //const windowHeight = window.innerHeight;
        //this.background = this.add.image(windowWidth / 2, windowHeight / 2, "background")
        //this.background.setDisplaySize(windowWidth, windowHeight);
        let div = document.getElementById("gameContainer");
        div.style.background = "linear-gradient(#0a0529, #180a5f, #170766, #450181,  #410377, #2b0050, #160129)";
        // Things to collet information: 
        this.text = this.add.text(gameWidth - 775, gameHeight - 995, "SCORE: ", {
            fontSize: "25px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        const star1 = this.physics.add.image(30, 60, "star1");
        this.add.text(45, 50, "3 points ", {
            fontSize: "20px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        this.add.text(45, 90, "5 points", {
            fontSize: "20px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        const star2 = this.physics.add.image(30, 100, "star2");
        this.add.text(45, 140, "10 points", {
            fontSize: "20px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        const star3 = this.physics.add.image(30, 140, "star3");
        this.add.text(45, 190, "20 points", {
            fontSize: "20px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        const star4 = this.physics.add.image(30, 200, "star4");
        this.scoreText = this.add.text(gameWidth - 685, gameHeight - 995, "0", {
            fontSize: "25px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        //How to play instructions: 
        this.keys = this.add.text(gameWidth - 605, gameHeight - 995, "KEYS: ", {
            fontSize: "25px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        this.add.image(gameWidth - 570, gameHeight - 945, "arrows");
        this.move = this.add.text(gameWidth - 525, gameHeight - 945, "Move", {
            fontSize: "18px",
            fill: "#ffffff"
        });
        this.spaceBar = this.add.image(gameWidth - 570, gameHeight - 900, "spaceBar");
        this.jump = this.add.text(gameWidth - 525, gameHeight - 910, "Jump higher", {
            fontSize: "18px",
            fill: "#ffffff"
        });
        this.add.text(gameWidth - 525, gameHeight - 870, "Shoot", {
            fontSize: "18px",
            fill: "#ffffff"
        });
        this.shoot = this.add.image(gameWidth - 570, gameHeight - 860, "shootkeys");
        this.info = this.add.text(gameWidth - 470, gameHeight - 995, "Collect at least 50 points to succeed!", {
            fontSize: "20px",
            fill: "#ffffff",
            fontStyle: "bold"
        });
        // Platforms: 
        this.platformGroup = this.physics.add.group({
            immovable: true,
            allowGravity: false
        });
        this.moonplatformGroup = this.physics.add.group({
            immovable: false,
            allowGravity: true
        });
        //Smaller platforms
        this.smallPlatformGroup = this.physics.add.group({
            immovable: true,
            allowGravity: false
        });
        this.alienGroup = this.physics.add.group({
            immovable: false,
            allowGravity: true
        });
        //Fire balls: 
        this.fireBalls = this.physics.add.group({
            defaultKey: "fireball",
            maxSize: 50
        });
        this.startplatform = this.physics.add.staticSprite(gameWidth / 5.5, gameHeight / (1 / 0.87), "moonplatform");
        this.endPlatform = this.physics.add.staticSprite(gameWidth - 100, gameHeight - 850, "moonplatform");
        this.finishLine = this.physics.add.staticSprite(gameWidth - 75, gameHeight - 885, "finish_line");
        let platformNum = (0, _phaserDefault.default).Math.Between(0, 12);
        let smallPlatformNum = (0, _phaserDefault.default).Math.Between(5, 10);
        for(let i = 0; i < platformNum; i++)this.platformGroup.create((0, _phaserDefault.default).Math.Between(30, gameWidth), (0, _phaserDefault.default).Math.Between(210, gameHeight), "moonplatform");
        for(let i = 0; i < smallPlatformNum; i++)this.smallPlatformGroup.create((0, _phaserDefault.default).Math.Between(210, gameWidth), (0, _phaserDefault.default).Math.Between(180, gameHeight), "smallmoonPlatform");
        for(let i = 0; i < smallPlatformNum; i++)this.moonplatformGroup.create((0, _phaserDefault.default).Math.Between(210, gameWidth), (0, _phaserDefault.default).Math.Between(180, gameHeight), "smallmoonPlatform");
        for(let i = 0; i < smallPlatformNum; i++)this.moonplatformGroup.create((0, _phaserDefault.default).Math.Between(210, gameWidth), (0, _phaserDefault.default).Math.Between(180, gameHeight), "smallmoonPlatform");
        let alienNum = (0, _phaserDefault.default).Math.Between(10, 15);
        /*for(let i = 0; i < alienNum; i++) {
      this.alien = this.add.spritesheet(Phaser.Math.Between(210, gameWidth), Phaser.Math.Between(180, gameHeight), "alien")
      //this.alienGroup.create(Phaser.Math.Between(210, gameWidth), Phaser.Math.Between(180, gameHeight), "alien");
      this.alien.setActive(true);
      this.alien.setVelocityX(Phaser.Math.Between(-50, 50));
      this.alien.setVelocityY(Phaser.Math.Between(-50, 50));
    }*/ this.player = this.physics.add.sprite(gameWidth / 5.5, gameHeight / 1.25, "player");
        this.player.body.gravity.y = gameOptions.playerGravity;
        this.physics.add.collider(this.player, this.startplatform);
        this.physics.add.collider(this.player, this.platformGroup);
        this.physics.add.collider(this.player, this.smallPlatformGroup);
        this.physics.add.collider(this.player, this.moonplatformGroup, this.movePlatform, null, this);
        this.physics.add.collider(this.player, this.finishLine, this.finishLevel, null, this);
        this.physics.add.collider(this.player, this.endPlatform);
        // Things to collect: 
        let starNum = (0, _phaserDefault.default).Math.Between(5, 10);
        let starNum2 = (0, _phaserDefault.default).Math.Between(7, 14);
        let starNum3 = (0, _phaserDefault.default).Math.Between(4, 8);
        let starNum4 = (0, _phaserDefault.default).Math.Between(2, 4);
        this.starGroup1 = this.physics.add.group({});
        this.starGroup2 = this.physics.add.group({});
        this.starGroup3 = this.physics.add.group({});
        this.starGroup4 = this.physics.add.group({});
        for(let i = 0; i < starNum; i++)this.starGroup1.create((0, _phaserDefault.default).Math.Between(30, gameWidth), (0, _phaserDefault.default).Math.Between(210, gameHeight), "star1");
        for(let i = 0; i < starNum2; i++)this.starGroup2.create((0, _phaserDefault.default).Math.Between(30, gameWidth), (0, _phaserDefault.default).Math.Between(210, gameHeight), "star2");
        for(let i = 0; i < starNum3; i++)this.starGroup3.create((0, _phaserDefault.default).Math.Between(30, gameWidth), (0, _phaserDefault.default).Math.Between(210, gameHeight), "star3");
        for(let i = 0; i < starNum4; i++)this.starGroup4.create((0, _phaserDefault.default).Math.Between(30, gameWidth), (0, _phaserDefault.default).Math.Between(210, gameHeight), "star4");
        this.physics.add.overlap(this.player, this.starGroup1, this.collectStar1, null, this);
        this.physics.add.overlap(this.player, this.starGroup2, this.collectStar2, null, this);
        this.physics.add.overlap(this.player, this.starGroup3, this.collectStar3, null, this);
        this.physics.add.overlap(this.player, this.starGroup4, this.collectStar4, null, this);
        //this.physics.add.collider(this.player, this.skeletonPlatformGroup);
        this.cursors = this.input.keyboard.createCursorKeys();
    }
    collectStar1(player, start) {
        start.disableBody(true, true);
        this.score += 3;
        this.scoreText.setText(this.score);
    }
    collectStar2(player, start) {
        start.disableBody(true, true);
        this.score += 5;
        this.scoreText.setText(this.score);
    }
    collectStar3(player, start) {
        start.disableBody(true, true);
        this.score += 15;
        this.scoreText.setText(this.score);
    }
    collectStar4(player, start) {
        start.disableBody(true, true);
        this.score += 20;
        this.scoreText.setText(this.score);
    }
    //Based on this: https://phasergames.com/phaser-3-physics-beginners/ 
    shootLeft(player) {
        let fireBall = this.fireBalls.get(this.player.x, this.player.y);
        if (fireBall) {
            fireBall.setActive(true);
            fireBall.setVisible(true);
            fireBall.body.velocity.x = -200;
        }
    }
    shootRight(player) {
        let fireBall = this.fireBalls.get(this.player.x, this.player.y);
        if (fireBall) {
            fireBall.setActive(true);
            fireBall.setVisible(true);
            fireBall.body.velocity.x = 200;
        }
    }
    finishLevel(player, start, gameData) {
        if (this.score < 150) this.info.setText("Collect more points");
        else if (this.score >= 1) {
            this.info.setText("You won!");
            this.player.body.velocity.x = 0;
            this.player.body.velocity.y = 0;
            gameScore[2].score = this.score;
            this.scene.start("FinishScene", this.data);
        }
    }
    update() {
        if (this.cursors.left.isDown) {
            this.player.body.velocity.x = -gameOptions.playerSpeed;
            this.player.anims.play("left", true);
        } else if (this.cursors.right.isDown) {
            this.player.body.velocity.x = gameOptions.playerSpeed;
            this.player.anims.play("right", true);
        } else {
            this.player.body.velocity.x = 0;
            this.player.anims.play("turn", true);
        }
        //Shooting options (First two are shooting while player is moving)
        if (this.cursors.left.isDown) {
            this.shootLeft();
            this.player.anims.play("shootLeft", true);
        }
        if (this.cursors.right.isDown) {
            this.shootRight();
            this.player.anims.play("shootRight", true);
        }
        // When shift is pressed while shooting and player is on platform, player stays at one position
        if (this.cursors.left.isDown && this.cursors.shift.isDown && this.player.body.touching.down) {
            this.player.body.velocity.y = 0;
            this.player.body.velocity.x = 0;
            this.shootLeft();
            this.player.anims.play("shootLeft", true);
        }
        if (this.cursors.right.isDown && this.cursors.shift.isDown && this.player.body.touching.down) {
            this.player.body.velocity.y = 0;
            this.player.body.velocity.x = 0;
            this.shootRight();
            this.player.anims.play("shootRight", true);
        }
        // Based on this website: https://phasergames.com/phaser-3-physics-beginners/
        this.fireBalls.children.each((function(b) {
            if (b.active) {
                if (b.x < 0 || b.x > gameWidth) b.setActive(false);
            }
        }).bind(this));
        if (this.cursors.up.isDown && this.player.body.touching.down) this.player.body.velocity.y = -gameOptions.playerGravity / 1.6;
        if (this.cursors.space.isDown) this.player.body.velocity.y = -gameOptions.playerGravity / 1.6;
        if (this.player.y > gameHeight) {
            this.scene.start("LevelScene3");
            this.score = 0;
        }
        //this.physics.add.overlap(this.player, this.finish, this.finishLevel, null, this)
        if (this.player.x > gameWidth || this.player.x < 0) {
            this.player.x = this.startplatform.x;
            this.player.y = this.startplatform.y;
        }
    }
}
exports.default = LevelScene3;

},{"phaser":"d1pJ3","./assets/moonplatform.png":"fwrSy","./assets/smallmoon_platform.png":"8LWmS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fwrSy":[function(require,module,exports) {
module.exports = require("183e614ac695e4ea").getBundleURL("kLn1y") + "moonplatform.9aa2a664.png" + "?" + Date.now();

},{"183e614ac695e4ea":"lgJ39"}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
}
// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"8LWmS":[function(require,module,exports) {
module.exports = require("7d3eee754efad779").getBundleURL("kLn1y") + "smallmoon_platform.ccf4245b.png" + "?" + Date.now();

},{"7d3eee754efad779":"lgJ39"}],"5rk9W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _phaser = require("phaser");
var _phaserDefault = parcelHelpers.interopDefault(_phaser);
class FinishScene extends (0, _phaserDefault.default).Scene {
    constructor(){
        super("FinishScene");
    //this.score=0;
    }
    preload() {}
    create() {}
    update() {}
}
exports.default = FinishScene;

},{"phaser":"d1pJ3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCKu7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectFactoryJs = require("./ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _factoryJs = require("./ninepatch/Factory.js");
var _factoryJsDefault = parcelHelpers.interopDefault(_factoryJs);
var _factoryJs1 = require("./ninepatch2/Factory.js");
var _factoryJsDefault1 = parcelHelpers.interopDefault(_factoryJs1);
var _factoryJs2 = require("./roundrectangle/Factory.js");
var _factoryJsDefault2 = parcelHelpers.interopDefault(_factoryJs2);
var _factoryJs3 = require("./statesroundrectangle/Factory.js");
var _factoryJsDefault3 = parcelHelpers.interopDefault(_factoryJs3);
var _factoryJs4 = require("./roundrectanglecanvas/Factory.js");
var _factoryJsDefault4 = parcelHelpers.interopDefault(_factoryJs4);
var _factoryJs5 = require("./bbcodetext/Factory.js");
var _factoryJsDefault5 = parcelHelpers.interopDefault(_factoryJs5);
var _factoryJs6 = require("./tagtext/Factory.js");
var _factoryJsDefault6 = parcelHelpers.interopDefault(_factoryJs6);
var _factoryJs7 = require("./dynamictext/Factory.js");
var _factoryJsDefault7 = parcelHelpers.interopDefault(_factoryJs7);
var _factoryJs8 = require("./textplayer/Factory.js");
var _factoryJsDefault8 = parcelHelpers.interopDefault(_factoryJs8);
var _factoryJs9 = require("./canvasinput/Factory.js");
var _factoryJsDefault9 = parcelHelpers.interopDefault(_factoryJs9);
var _factoryJs10 = require("./hiddenedit/Factory.js");
var _factoryJsDefault10 = parcelHelpers.interopDefault(_factoryJs10);
var _factoryJs11 = require("./checkbox/Factory.js");
var _factoryJsDefault11 = parcelHelpers.interopDefault(_factoryJs11);
var _factoryJs12 = require("./toggleswitch/Factory.js");
var _factoryJsDefault12 = parcelHelpers.interopDefault(_factoryJs12);
var _factoryJs13 = require("./canvas/Factory.js");
var _factoryJsDefault13 = parcelHelpers.interopDefault(_factoryJs13);
var _factoryJs14 = require("./circlemaskimage/Factory.js");
var _factoryJsDefault14 = parcelHelpers.interopDefault(_factoryJs14);
var _factoryJs15 = require("./alphamaskimage/Factory.js");
var _factoryJsDefault15 = parcelHelpers.interopDefault(_factoryJs15);
var _factoryJs16 = require("./circularprogress/Factory.js");
var _factoryJsDefault16 = parcelHelpers.interopDefault(_factoryJs16);
var _factoryJs17 = require("./circularprogresscanvas/Factory.js");
var _factoryJsDefault17 = parcelHelpers.interopDefault(_factoryJs17);
var _factoryJs18 = require("./lineprogress/Factory.js");
var _factoryJsDefault18 = parcelHelpers.interopDefault(_factoryJs18);
var _factoryJs19 = require("./lineprogresscanvas/Factory.js");
var _factoryJsDefault19 = parcelHelpers.interopDefault(_factoryJs19);
var _factoryJs20 = require("./triangle/Factory.js");
var _factoryJsDefault20 = parcelHelpers.interopDefault(_factoryJs20);
var _factoryJs21 = require("./knob/Factory.js");
var _factoryJsDefault21 = parcelHelpers.interopDefault(_factoryJs21);
var _factoryJs22 = require("./customshapes/Factory.js");
var _factoryJsDefault22 = parcelHelpers.interopDefault(_factoryJs22);
var _factoryJs23 = require("./customprogress/Factory.js");
var _factoryJsDefault23 = parcelHelpers.interopDefault(_factoryJs23);
var _factoryJs24 = require("./transitionimage/Factory.js");
var _factoryJsDefault24 = parcelHelpers.interopDefault(_factoryJs24);
var _factoryJs25 = require("./transitionimagepack/Factory.js");
var _factoryJsDefault25 = parcelHelpers.interopDefault(_factoryJs25);
var _factoryJs26 = require("./imagebox/Factory.js");
var _factoryJsDefault26 = parcelHelpers.interopDefault(_factoryJs26);
var _factoryJs27 = require("./fullwindowrectangle/Factory.js");
var _factoryJsDefault27 = parcelHelpers.interopDefault(_factoryJs27);
var _factoryJs28 = require("./cover/Factory.js");
var _factoryJsDefault28 = parcelHelpers.interopDefault(_factoryJs28);
var _factory = require("./inputtext/Factory");
var _factoryDefault = parcelHelpers.interopDefault(_factory);
var _factoryJs29 = require("./filechooser/Factory.js");
var _factoryJsDefault29 = parcelHelpers.interopDefault(_factoryJs29);
var _factoryJs30 = require("./filedropzone/Factory.js");
var _factoryJsDefault30 = parcelHelpers.interopDefault(_factoryJs30);
var _factoryJs31 = require("./chart/Factory.js");
var _factoryJsDefault31 = parcelHelpers.interopDefault(_factoryJs31);
var _factoryJs32 = require("./container/Factory.js");
var _factoryJsDefault32 = parcelHelpers.interopDefault(_factoryJs32);
var _factoryJs33 = require("./sizer/Factory.js");
var _factoryJsDefault33 = parcelHelpers.interopDefault(_factoryJs33);
var _factoryJs34 = require("./gridsizer/Factory.js");
var _factoryJsDefault34 = parcelHelpers.interopDefault(_factoryJs34);
var _factoryJs35 = require("./fixwidthsizer/Factory.js");
var _factoryJsDefault35 = parcelHelpers.interopDefault(_factoryJs35);
var _factoryJs36 = require("./overlapsizer/Factory.js");
var _factoryJsDefault36 = parcelHelpers.interopDefault(_factoryJs36);
var _factoryJs37 = require("./space/Factory.js");
var _factoryJsDefault37 = parcelHelpers.interopDefault(_factoryJs37);
var _factoryJs38 = require("./label/Factory.js");
var _factoryJsDefault38 = parcelHelpers.interopDefault(_factoryJs38);
var _factoryJs39 = require("./simplelabel/Factory.js");
var _factoryJsDefault39 = parcelHelpers.interopDefault(_factoryJs39);
var _factoryJs40 = require("./titlelabel/Factory.js");
var _factoryJsDefault40 = parcelHelpers.interopDefault(_factoryJs40);
var _factoryJs41 = require("./namevaluelabel/Factory.js");
var _factoryJsDefault41 = parcelHelpers.interopDefault(_factoryJs41);
var _factoryJs42 = require("./buttons/Factory.js");
var _factoryJsDefault42 = parcelHelpers.interopDefault(_factoryJs42);
var _factoryJs43 = require("./gridbuttons/Factory.js");
var _factoryJsDefault43 = parcelHelpers.interopDefault(_factoryJs43);
var _factoryJs44 = require("./fixwidthbuttons/Factory.js");
var _factoryJsDefault44 = parcelHelpers.interopDefault(_factoryJs44);
var _factoryJs45 = require("./fileselectorbutton/Factory.js");
var _factoryJsDefault45 = parcelHelpers.interopDefault(_factoryJs45);
var _factoryJs46 = require("./dialog/Factory.js");
var _factoryJsDefault46 = parcelHelpers.interopDefault(_factoryJs46);
var _factoryJs47 = require("./confirmdialog/Factory.js");
var _factoryJsDefault47 = parcelHelpers.interopDefault(_factoryJs47);
var _factoryJs48 = require("./holygrail/Factory.js");
var _factoryJsDefault48 = parcelHelpers.interopDefault(_factoryJs48);
var _factoryJs49 = require("./tabs/Factory.js");
var _factoryJsDefault49 = parcelHelpers.interopDefault(_factoryJs49);
var _factoryJs50 = require("./slider/Factory.js");
var _factoryJsDefault50 = parcelHelpers.interopDefault(_factoryJs50);
var _factoryJs51 = require("./gridtable/Factory.js");
var _factoryJsDefault51 = parcelHelpers.interopDefault(_factoryJs51);
var _factoryJs52 = require("./menu/Factory.js");
var _factoryJsDefault52 = parcelHelpers.interopDefault(_factoryJs52);
var _factoryJs53 = require("./dropdownlist/Factory.js");
var _factoryJsDefault53 = parcelHelpers.interopDefault(_factoryJs53);
var _factoryJs54 = require("./simpledropdownlist/Factory.js");
var _factoryJsDefault54 = parcelHelpers.interopDefault(_factoryJs54);
var _factoryJs55 = require("./textbox/Factory.js");
var _factoryJsDefault55 = parcelHelpers.interopDefault(_factoryJs55);
var _factoryJs56 = require("./numberbar/Factory.js");
var _factoryJsDefault56 = parcelHelpers.interopDefault(_factoryJs56);
var _factoryJs57 = require("./scrollbar/Factory.js");
var _factoryJsDefault57 = parcelHelpers.interopDefault(_factoryJs57);
var _factoryJs58 = require("./badgelabel/Factory.js");
var _factoryJsDefault58 = parcelHelpers.interopDefault(_factoryJs58);
var _factoryJs59 = require("./pages/Factory.js");
var _factoryJsDefault59 = parcelHelpers.interopDefault(_factoryJs59);
var _factoryJs60 = require("./perspectivecard/Factory.js");
var _factoryJsDefault60 = parcelHelpers.interopDefault(_factoryJs60);
var _factoryJs61 = require("./tabpages/Factory.js");
var _factoryJsDefault61 = parcelHelpers.interopDefault(_factoryJs61);
var _factoryJs62 = require("./folder/Factory.js");
var _factoryJsDefault62 = parcelHelpers.interopDefault(_factoryJs62);
var _factoryJs63 = require("./textarea/Factory.js");
var _factoryJsDefault63 = parcelHelpers.interopDefault(_factoryJs63);
var _factoryJs64 = require("./scrollablepanel/Factory.js");
var _factoryJsDefault64 = parcelHelpers.interopDefault(_factoryJs64);
var _factoryJs65 = require("./toast/Factory.js");
var _factoryJsDefault65 = parcelHelpers.interopDefault(_factoryJs65);
var _factoryJs66 = require("./colorinput/colorinput/Factory.js");
var _factoryJsDefault66 = parcelHelpers.interopDefault(_factoryJs66);
var _factoryJs67 = require("./colorinput/colorinputbase/Factory.js");
var _factoryJsDefault67 = parcelHelpers.interopDefault(_factoryJs67);
var _factoryJs68 = require("./colorinput/colorpicker/Factory.js");
var _factoryJsDefault68 = parcelHelpers.interopDefault(_factoryJs68);
var _factoryJs69 = require("./colorinput/colorcomponents/Factory.js");
var _factoryJsDefault69 = parcelHelpers.interopDefault(_factoryJs69);
var _factoryJs70 = require("./sides/Factory.js");
var _factoryJsDefault70 = parcelHelpers.interopDefault(_factoryJs70);
var _factoryJs71 = require("./tweaker/Factory.js");
var _factoryJsDefault71 = parcelHelpers.interopDefault(_factoryJs71);
// import MakerFactory from './maker/Factory.js';
var _factoryJs72 = require("./click/Factory.js");
var _factoryJsDefault72 = parcelHelpers.interopDefault(_factoryJs72);
var _factoryJs73 = require("./clickoutside/Factory.js");
var _factoryJsDefault73 = parcelHelpers.interopDefault(_factoryJs73);
var _factoryJs74 = require("./intouching/Factory.js");
var _factoryJsDefault74 = parcelHelpers.interopDefault(_factoryJs74);
var _factoryJs75 = require("./tap/Factory.js");
var _factoryJsDefault75 = parcelHelpers.interopDefault(_factoryJs75);
var _factoryJs76 = require("./press/Factory.js");
var _factoryJsDefault76 = parcelHelpers.interopDefault(_factoryJs76);
var _factoryJs77 = require("./swipe/Factory.js");
var _factoryJsDefault77 = parcelHelpers.interopDefault(_factoryJs77);
var _factoryJs78 = require("./pan/Factory.js");
var _factoryJsDefault78 = parcelHelpers.interopDefault(_factoryJs78);
var _factoryJs79 = require("./drag/Factory.js");
var _factoryJsDefault79 = parcelHelpers.interopDefault(_factoryJs79);
var _factoryJs80 = require("./pinch/Factory.js");
var _factoryJsDefault80 = parcelHelpers.interopDefault(_factoryJs80);
var _factoryJs81 = require("./rotate/Factory.js");
var _factoryJsDefault81 = parcelHelpers.interopDefault(_factoryJs81);
var _factoryJs82 = require("./flip/Factory.js");
var _factoryJsDefault82 = parcelHelpers.interopDefault(_factoryJs82);
var _factoryJs83 = require("./shake/Factory.js");
var _factoryJsDefault83 = parcelHelpers.interopDefault(_factoryJs83);
var _factoryJs84 = require("./toucheventstop/Factory.js");
var _factoryJsDefault84 = parcelHelpers.interopDefault(_factoryJs84);
var _factoryJs85 = require("./perspective/Factory.js");
var _factoryJsDefault85 = parcelHelpers.interopDefault(_factoryJs85);
var _factoryJs86 = require("./skew/Factory.js");
var _factoryJsDefault86 = parcelHelpers.interopDefault(_factoryJs86);
var _factoryJs87 = require("./anchor/Factory.js");
var _factoryJsDefault87 = parcelHelpers.interopDefault(_factoryJs87);
var _factoryJs88 = require("./texttyping/Factory.js");
var _factoryJsDefault88 = parcelHelpers.interopDefault(_factoryJs88);
var _factoryJs89 = require("./textpage/Factory.js");
var _factoryJsDefault89 = parcelHelpers.interopDefault(_factoryJs89);
var _factoryJs90 = require("./textedit/Factory.js");
var _factoryJsDefault90 = parcelHelpers.interopDefault(_factoryJs90);
var _getParentSizerJs = require("./utils/GetParentSizer.js");
var _isPointerInBoundsJs = require("../../plugins/utils/input/IsPointerInBounds.js");
var _isPointerInBoundsJsDefault = parcelHelpers.interopDefault(_isPointerInBoundsJs);
var _hideJs = require("./utils/Hide.js");
var _editJs = require("./textedit/Edit.js");
var _editJsDefault = parcelHelpers.interopDefault(_editJs);
var _wrapExpandTextJs = require("./utils/wrapexpandtext/WrapExpandText.js");
var _wrapExpandTextJsDefault = parcelHelpers.interopDefault(_wrapExpandTextJs);
var _fontSizeExpandTextJs = require("./utils/fontsizeexpandtext/FontSizeExpandText.js");
var _fontSizeExpandTextJsDefault = parcelHelpers.interopDefault(_fontSizeExpandTextJs);
var _fontSizeFitJs = require("../../plugins/utils/text/fontsizefit/FontSizeFit.js");
var _fontSizeFitJsDefault = parcelHelpers.interopDefault(_fontSizeFitJs);
var _waitEventJs = require("./utils/WaitEvent.js");
var _delayJs = require("../../plugins/utils/promise/Delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _getViewportJs = require("../../plugins/utils/system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
var _setChildrenInteractiveJs = require("./utils/setchildreninteractive/SetChildrenInteractive.js");
var _setChildrenInteractiveJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveJs);
var _fadeJs = require("./fade/Fade.js");
var _easeMoveJs = require("./easemove/EaseMove.js");
var _modalJs = require("./modal/Modal.js");
var _requestDragJs = require("../../plugins/utils/input/RequestDrag.js");
var _requestDragJsDefault = parcelHelpers.interopDefault(_requestDragJs);
var _fileChooserJs = require("./filechooser/FileChooser.js");
class UIPlugin extends Phaser.Plugins.ScenePlugin {
    constructor(scene, pluginManager){
        super(scene, pluginManager);
        this.add = new (0, _objectFactoryJsDefault.default)(scene);
    }
    start() {
        var eventEmitter = this.scene.events;
        eventEmitter.on("destroy", this.destroy, this);
    }
    isInTouching(gameObject, pointer, preTest, postTest) {
        if (!gameObject.visible) return false;
        return (0, _isPointerInBoundsJsDefault.default)(gameObject, pointer, preTest, postTest);
    }
    get viewport() {
        return (0, _getViewportJsDefault.default)(this.scene, this.scene.cameras.main, true);
    }
}
var methods = {
    getParentSizer: (0, _getParentSizerJs.GetParentSizer),
    getTopmostSizer: (0, _getParentSizerJs.GetTopmostSizer),
    hide: (0, _hideJs.Hide),
    show: (0, _hideJs.Show),
    isShown: (0, _hideJs.IsShown),
    edit: (0, _editJsDefault.default),
    wrapExpandText: (0, _wrapExpandTextJsDefault.default),
    fontSizeExpandText: (0, _fontSizeExpandTextJsDefault.default),
    fontSizeResize: (0, _fontSizeFitJsDefault.default),
    setFontSizeToFitWidth: (0, _fontSizeFitJsDefault.default),
    waitEvent: (0, _waitEventJs.WaitEvent),
    waitComplete: (0, _waitEventJs.WaitComplete),
    delayPromise: (0, _delayJsDefault.default),
    setChildrenInteractive: (0, _setChildrenInteractiveJsDefault.default),
    fadeIn: (0, _fadeJs.FadeIn),
    fadeOutDestroy: (0, _fadeJs.FadeOutDestroy),
    easeMoveTo: (0, _easeMoveJs.EaseMoveTo),
    easeMoveFrom: (0, _easeMoveJs.EaseMoveFrom),
    modal: (0, _modalJs.Modal),
    modalPromise: (0, _modalJs.ModalPromise),
    modalClose: (0, _modalJs.ModalClose),
    requestDrag: (0, _requestDragJsDefault.default),
    openFileChooser: (0, _fileChooserJs.OpenFileChooser)
};
Object.assign(UIPlugin.prototype, methods);
exports.default = UIPlugin;

},{"./ObjectFactory.js":"g2ISQ","./ninepatch/Factory.js":"eQoBZ","./ninepatch2/Factory.js":"fbVXv","./roundrectangle/Factory.js":"lLqco","./statesroundrectangle/Factory.js":"9k3Ck","./roundrectanglecanvas/Factory.js":"lvSbO","./bbcodetext/Factory.js":"iAX4f","./tagtext/Factory.js":"9BHr7","./dynamictext/Factory.js":"4O36N","./textplayer/Factory.js":"gZbxl","./canvasinput/Factory.js":"hKib9","./hiddenedit/Factory.js":"4X8zR","./checkbox/Factory.js":"9PauM","./toggleswitch/Factory.js":"8dBjH","./canvas/Factory.js":"dv9Ud","./circlemaskimage/Factory.js":"6VXX4","./alphamaskimage/Factory.js":"bx3Hs","./circularprogress/Factory.js":"3g6QB","./circularprogresscanvas/Factory.js":"8zOyv","./lineprogress/Factory.js":"aKSQs","./lineprogresscanvas/Factory.js":"2a8jQ","./triangle/Factory.js":"aZjEE","./knob/Factory.js":"46rJc","./customshapes/Factory.js":"g0Zx5","./customprogress/Factory.js":"910VV","./transitionimage/Factory.js":"dYXly","./transitionimagepack/Factory.js":"2oUi4","./imagebox/Factory.js":"3MAf3","./fullwindowrectangle/Factory.js":"c1Tnj","./cover/Factory.js":"3ZxxK","./inputtext/Factory":"7sap6","./filechooser/Factory.js":"fcq8w","./filedropzone/Factory.js":"66ZxL","./chart/Factory.js":"cutMJ","./container/Factory.js":"ieff5","./sizer/Factory.js":"3C33e","./gridsizer/Factory.js":"aeGQ5","./fixwidthsizer/Factory.js":"dg8gT","./overlapsizer/Factory.js":"aydNB","./space/Factory.js":"fP17b","./label/Factory.js":"dmy1D","./simplelabel/Factory.js":"ltuqA","./titlelabel/Factory.js":"hv1Df","./namevaluelabel/Factory.js":"fabIX","./buttons/Factory.js":"3mY1L","./gridbuttons/Factory.js":"5PyiM","./fixwidthbuttons/Factory.js":"6j2bp","./fileselectorbutton/Factory.js":"6Hx5D","./dialog/Factory.js":"cP1Mg","./confirmdialog/Factory.js":"2bfrS","./holygrail/Factory.js":"6PTpy","./tabs/Factory.js":"gpphG","./slider/Factory.js":"jq4oS","./gridtable/Factory.js":"eVgf3","./menu/Factory.js":"dbhqd","./dropdownlist/Factory.js":"58i2X","./simpledropdownlist/Factory.js":"8rbFv","./textbox/Factory.js":"kj1sK","./numberbar/Factory.js":"b8BGc","./scrollbar/Factory.js":"3I3ha","./badgelabel/Factory.js":"kcq2G","./pages/Factory.js":"fW1NC","./perspectivecard/Factory.js":"fzrSw","./tabpages/Factory.js":"cZj4O","./folder/Factory.js":"79rp9","./textarea/Factory.js":"3sp8c","./scrollablepanel/Factory.js":"i876g","./toast/Factory.js":"cyQWb","./colorinput/colorinput/Factory.js":"kOCHz","./colorinput/colorinputbase/Factory.js":"l2ZXu","./colorinput/colorpicker/Factory.js":"IFy7Q","./colorinput/colorcomponents/Factory.js":"9BAs9","./sides/Factory.js":"fqHm6","./tweaker/Factory.js":"eGVrd","./click/Factory.js":"lTB47","./clickoutside/Factory.js":"ichqZ","./intouching/Factory.js":"lfp9C","./tap/Factory.js":"dvT6P","./press/Factory.js":"7C3oa","./swipe/Factory.js":"662sF","./pan/Factory.js":"3N66S","./drag/Factory.js":"83TDr","./pinch/Factory.js":"8rFT9","./rotate/Factory.js":"l0L1m","./flip/Factory.js":"bvrWA","./shake/Factory.js":"hB7ZO","./toucheventstop/Factory.js":"kkAsd","./perspective/Factory.js":"bcbzI","./skew/Factory.js":"btSwg","./anchor/Factory.js":"5zGh8","./texttyping/Factory.js":"ji7B5","./textpage/Factory.js":"bJoPs","./textedit/Factory.js":"31ljd","./utils/GetParentSizer.js":"9nvis","../../plugins/utils/input/IsPointerInBounds.js":"5Oc1O","./utils/Hide.js":"jy7YF","./textedit/Edit.js":"gMqpT","./utils/wrapexpandtext/WrapExpandText.js":"7xNUi","./utils/fontsizeexpandtext/FontSizeExpandText.js":"7QedL","../../plugins/utils/text/fontsizefit/FontSizeFit.js":"jOvZH","./utils/WaitEvent.js":"39jq1","../../plugins/utils/promise/Delay.js":"ctnEK","../../plugins/utils/system/GetViewport.js":"2Aw1Q","./utils/setchildreninteractive/SetChildrenInteractive.js":"1E3PM","./fade/Fade.js":"6AdBr","./easemove/EaseMove.js":"limoQ","./modal/Modal.js":"d1OFC","../../plugins/utils/input/RequestDrag.js":"9XOwp","./filechooser/FileChooser.js":"cgKZ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2ISQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class ObjectFactory {
    constructor(scene){
        this.scene = scene;
        this.displayList = scene.sys.displayList;
        this.updateList = scene.sys.updateList;
        scene.events.once("destroy", this.destroy, this);
    }
    destroy() {
        this.scene = null;
        this.displayList = null;
        this.updateList = null;
    }
    static register(type, callback) {
        ObjectFactory.prototype[type] = callback;
    }
}
exports.default = ObjectFactory;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQoBZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninePatchJs = require("./NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("ninePatch", function(x, y, width, height, key, columns, rows, config) {
    var gameObject = new (0, _ninePatchJsDefault.default)(this.scene, x, y, width, height, key, columns, rows, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.NinePatch", (0, _ninePatchJsDefault.default));
exports.default = (0, _ninePatchJsDefault.default);

},{"./NinePatch.js":"aOTKM","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aOTKM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninepatchJs = require("../../../plugins/ninepatch.js");
var _ninepatchJsDefault = parcelHelpers.interopDefault(_ninepatchJs);
exports.default = (0, _ninepatchJsDefault.default);

},{"../../../plugins/ninepatch.js":"iW573","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iW573":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninePatchJs = require("./gameobjects/rendertexture/ninepatch/NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
exports.default = (0, _ninePatchJsDefault.default);

},{"./gameobjects/rendertexture/ninepatch/NinePatch.js":"9raYW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9raYW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninePatchJs = require("../../../utils/ninepatch/NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
var _drawImageJs = require("../utils/DrawImage.js");
var _drawImageJsDefault = parcelHelpers.interopDefault(_drawImageJs);
var _drawTileSpriteJs = require("../utils/DrawTileSprite.js");
var _drawTileSpriteJsDefault = parcelHelpers.interopDefault(_drawTileSpriteJs);
const RenderTexture = Phaser.GameObjects.RenderTexture;
class NinePatch extends (0, _ninePatchJsDefault.default)(RenderTexture, "rexNinePatch") {
}
var Methods = {
    _beginDraw: RenderTexture.prototype.beginDraw,
    _endDraw: RenderTexture.prototype.endDraw,
    _drawImage: (0, _drawImageJsDefault.default),
    _drawTileSprite: (0, _drawTileSpriteJsDefault.default)
};
Object.assign(NinePatch.prototype, Methods);
exports.default = NinePatch;

},{"../../../utils/ninepatch/NinePatch.js":"3Z8rb","../utils/DrawImage.js":"pKy4U","../utils/DrawTileSprite.js":"3702x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Z8rb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var NinePatchBase = function(GOClass, type) {
    class NinePatch extends GOClass {
        constructor(scene, x, y, width, height, key, baseFrame, columns, rows, config){
            if (IsPlainObject(x)) {
                config = x;
                x = GetValue(config, "x", 0);
                y = GetValue(config, "y", 0);
                width = GetValue(config, "width", 1);
                height = GetValue(config, "height", 1);
                key = GetValue(config, "key", undefined);
                baseFrame = GetValue(config, "baseFrame", undefined);
                columns = GetValue(config, "columns", undefined);
                rows = GetValue(config, "rows", undefined);
            } else if (IsPlainObject(width)) {
                config = width;
                width = GetValue(config, "width", 1);
                height = GetValue(config, "height", 1);
                key = GetValue(config, "key", undefined);
                baseFrame = GetValue(config, "baseFrame", undefined);
                columns = GetValue(config, "columns", undefined);
                rows = GetValue(config, "rows", undefined);
            } else if (IsPlainObject(key)) {
                config = key;
                key = GetValue(config, "key", undefined);
                baseFrame = GetValue(config, "baseFrame", undefined);
                columns = GetValue(config, "columns", undefined);
                rows = GetValue(config, "rows", undefined);
            } else if (IsPlainObject(baseFrame)) {
                config = baseFrame;
                baseFrame = GetValue(config, "baseFrame", undefined);
                columns = GetValue(config, "columns", undefined);
                rows = GetValue(config, "rows", undefined);
            } else if (Array.isArray(baseFrame)) {
                config = rows;
                rows = columns;
                columns = baseFrame;
                baseFrame = GetValue(config, "baseFrame", undefined);
            } else if (IsPlainObject(columns)) {
                config = columns;
                columns = GetValue(config, "columns", undefined);
                rows = GetValue(config, "rows", undefined);
            }
            if (columns === undefined) {
                var leftWidth = GetValue(config, "leftWidth", undefined);
                var rightWidth = GetValue(config, "rightWidth", undefined);
                if (leftWidth !== undefined && rightWidth !== undefined) columns = [
                    leftWidth,
                    undefined,
                    rightWidth
                ];
            }
            if (rows === undefined) {
                var topHeight = GetValue(config, "topHeight", undefined);
                var bottomHeight = GetValue(config, "bottomHeight", undefined);
                if (topHeight !== undefined && bottomHeight !== undefined) rows = [
                    topHeight,
                    undefined,
                    bottomHeight
                ];
            }
            super(scene);
            this.type = type;
            this.setPosition(x, y).setSize(width, height).setOrigin(0.5, 0.5);
            this.columns = {};
            this.rows = {};
            this.stretchMode = {};
            this._tileSprite = undefined; // Reserved for drawing image
            this._image = undefined; // Reserved for drawing image
            this.setGetFrameNameCallback(GetValue(config, "getFrameNameCallback", undefined));
            this.setStretchMode(GetValue(config, "stretchMode", 0));
            this.setPreserveRatio(GetValue(config, "preserveRatio", true));
            var maxFixedPartScale = GetValue(config, "maxFixedPartScale", 1);
            var maxFixedPartScaleX = GetValue(config, "maxFixedPartScaleX", maxFixedPartScale);
            var maxFixedPartScaleY = GetValue(config, "maxFixedPartScaleY", undefined);
            this.setMaxFixedPartScale(maxFixedPartScaleX, maxFixedPartScaleY);
            this.setBaseTexture(key, baseFrame, columns, rows);
        }
        get minWidth() {
            return this.columns.minWidth;
        }
        get minHeight() {
            return this.rows.minHeight;
        }
        get fixedPartScaleX() {
            return this.columns.scale;
        }
        get fixedPartScaleY() {
            return this.rows.scale;
        }
        resize(width, height) {
            if (this.width === width && this.height === height) return this;
            if (super.resize) super.resize(width, height);
            else // Use setSize method for alternative 
            super.setSize(width, height);
            this.updateTexture();
            return this;
        }
    }
    Object.assign(NinePatch.prototype, (0, _methodsJsDefault.default));
    return NinePatch;
};
exports.default = NinePatchBase;

},{"./Methods.js":"1Cxvw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Cxvw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setGetFrameNameCallbackJs = require("./texture/SetGetFrameNameCallback.js");
var _setGetFrameNameCallbackJsDefault = parcelHelpers.interopDefault(_setGetFrameNameCallbackJs);
var _setBaseTextureJs = require("./texture/SetBaseTexture.js");
var _setBaseTextureJsDefault = parcelHelpers.interopDefault(_setBaseTextureJs);
var _updateTextureJs = require("./texture/UpdateTexture.js");
var _updateTextureJsDefault = parcelHelpers.interopDefault(_updateTextureJs);
var _setStretchModeJs = require("./texture/SetStretchMode.js");
var _setStretchModeJsDefault = parcelHelpers.interopDefault(_setStretchModeJs);
var _getStretchModeJs = require("./texture/GetStretchMode.js");
var _getStretchModeJsDefault = parcelHelpers.interopDefault(_getStretchModeJs);
var _setPreserveRatioJs = require("./texture/SetPreserveRatio.js");
var _setPreserveRatioJsDefault = parcelHelpers.interopDefault(_setPreserveRatioJs);
var _setMaxFixedPartScaleJs = require("./texture/SetMaxFixedPartScale.js");
var _setMaxFixedPartScaleJsDefault = parcelHelpers.interopDefault(_setMaxFixedPartScaleJs);
var _noop = require("../object/NOOP");
var _noopDefault = parcelHelpers.interopDefault(_noop);
exports.default = {
    _beginDraw: (0, _noopDefault.default),
    _drawImage: (0, _noopDefault.default),
    _drawTileSprite: (0, _noopDefault.default),
    _endDraw: (0, _noopDefault.default),
    setGetFrameNameCallback: (0, _setGetFrameNameCallbackJsDefault.default),
    setBaseTexture: (0, _setBaseTextureJsDefault.default),
    updateTexture: (0, _updateTextureJsDefault.default),
    setStretchMode: (0, _setStretchModeJsDefault.default),
    getStretchMode: (0, _getStretchModeJsDefault.default),
    setPreserveRatio: (0, _setPreserveRatioJsDefault.default),
    setMaxFixedPartScale: (0, _setMaxFixedPartScaleJsDefault.default)
};

},{"./texture/SetGetFrameNameCallback.js":"caApu","./texture/SetBaseTexture.js":"39erw","./texture/UpdateTexture.js":"ezmuS","./texture/SetStretchMode.js":"31aX9","./texture/GetStretchMode.js":"l8L3Q","./texture/SetPreserveRatio.js":"3CO2m","./texture/SetMaxFixedPartScale.js":"dglrK","../object/NOOP":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"caApu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetGetFrameNameCallback = function(callback) {
    if (callback === undefined) callback = DefaultGetFrameNameCallback;
    this.getFrameNameCallback = callback;
    return this;
};
var DefaultGetFrameNameCallback = function(colIndex, rowIndex, baseFrameName) {
    if (baseFrameName === "__BASE") return `${colIndex},${rowIndex}`;
    else return `${baseFrameName}_${colIndex},${rowIndex}`;
};
exports.default = SetGetFrameNameCallback;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"39erw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepCloneJs = require("../../object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var SetBaseTexture = function(key, baseFrameName, columns, rows) {
    if (Array.isArray(baseFrameName)) {
        rows = columns;
        columns = baseFrameName;
        baseFrameName = undefined;
    }
    if (baseFrameName == null) baseFrameName = "__BASE";
    if (typeof columns === "number" && arguments.length >= 6) {
        columns = [
            arguments[2],
            undefined,
            arguments[3]
        ];
        rows = [
            arguments[4],
            undefined,
            arguments[5]
        ];
    } else {
        columns = (0, _deepCloneJsDefault.default)(columns);
        rows = (0, _deepCloneJsDefault.default)(rows);
    }
    this.textureKey = key;
    this.baseFrameName = baseFrameName;
    this.columns.data = columns;
    this.columns.count = columns ? columns.length : 0;
    this.columns.stretch = 0;
    this.columns.minWidth = 0;
    this.columns.scale = 1;
    this.rows.data = rows;
    this.rows.count = rows ? rows.length : 0;
    this.rows.stretch = 0;
    this.rows.minHeight = 0;
    this.rows.scale = 1;
    var texture = this.scene.sys.textures.get(key);
    if (!texture) {
        this.clear();
        return this;
    }
    if (!columns || !rows) {
        this.clear();
        return this;
    }
    // Get remainder width/height for unknown width/height
    var baseFrame = texture.get(baseFrameName);
    var remainderTextureWidth = baseFrame.width;
    var unknownColumnWidthCount = 0;
    for(var i = 0, cnt = columns.length; i < cnt; i++){
        if (columns[i] === undefined) unknownColumnWidthCount++;
        else if (typeof columns[i] === "number") remainderTextureWidth -= columns[i];
        else remainderTextureWidth -= columns[i].width;
    }
    var unknownColumnWidth = remainderTextureWidth / unknownColumnWidthCount;
    var remainderTextureHeight = baseFrame.height;
    var unknownRowHeightCount = 0;
    for(var i = 0, cnt = rows.length; i < cnt; i++){
        if (rows[i] === undefined) unknownRowHeightCount++;
        else if (typeof rows[i] === "number") remainderTextureHeight -= rows[i];
        else remainderTextureHeight -= rows[i].width;
    }
    var unknownRowHeight = remainderTextureHeight / unknownRowHeightCount;
    var row, col, rowHeight, colWidth, frameName;
    var offsetX = 0, offsetY = 0;
    for(var j = 0, jcnt = rows.length; j < jcnt; j++){
        // Unknown height
        if (rows[j] === undefined) rows[j] = unknownRowHeight;
        if (typeof rows[j] === "number") rows[j] = {
            height: rows[j],
            stretch: j % 2
        };
        row = rows[j];
        rowHeight = row.height;
        this.rows.stretch += row.stretch | 0;
        this.rows.minHeight += row.stretch > 0 ? 0 : rowHeight;
        offsetX = 0;
        for(var i = 0, icnt = columns.length; i < icnt; i++){
            // Unknown width
            if (columns[i] === undefined) columns[i] = unknownColumnWidth;
            if (typeof columns[i] === "number") columns[i] = {
                width: columns[i],
                stretch: i % 2
            };
            col = columns[i];
            colWidth = col.width;
            if (j === 0) {
                this.columns.stretch += col.stretch | 0;
                this.columns.minWidth += col.stretch > 0 ? 0 : colWidth;
            }
            if (colWidth >= 1 && rowHeight >= 1) {
                frameName = this.getFrameNameCallback(i, j, baseFrameName);
                var frameNameType = typeof frameName;
                if (frameNameType === "string" || frameNameType === "number") texture.add(frameName, 0, offsetX + baseFrame.cutX, offsetY + baseFrame.cutY, colWidth, rowHeight);
            }
            offsetX += colWidth;
        }
        offsetY += rowHeight;
    }
    this.updateTexture();
    return this;
};
exports.default = SetBaseTexture;

},{"../../object/DeepClone.js":"7G9ja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7G9ja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPlainObjectJs = require("./IsPlainObject.js");
var _isPlainObjectJsDefault = parcelHelpers.interopDefault(_isPlainObjectJs);
var DeepClone = function(inObject) {
    var outObject;
    var value;
    var key;
    if (inObject == null || typeof inObject !== "object") //  inObject is not an object
    return inObject;
    //  Create an array or object to hold the values
    outObject = Array.isArray(inObject) ? [] : {};
    if ((0, _isPlainObjectJsDefault.default)(inObject)) for(key in inObject){
        value = inObject[key];
        //  Recursively (deep) copy for nested objects, including arrays
        outObject[key] = DeepClone(value);
    }
    else outObject = inObject;
    return outObject;
};
exports.default = DeepClone;

},{"./IsPlainObject.js":"7HX2H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HX2H":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ /**
 * This is a slightly modified version of jQuery.isPlainObject.
 * A plain object is an object whose internal class property is [object Object].
 *
 * @function Phaser.Utils.Objects.IsPlainObject
 * @since 3.0.0
 *
 * @param {object} obj - The object to inspect.
 *
 * @return {boolean} `true` if the object is plain, otherwise `false`.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsPlainObject = function(obj) {
    // Not plain objects:
    // - Any object or value whose internal [[Class]] property is not "[object Object]"
    // - DOM nodes
    // - window
    if (typeof obj !== "object" || obj.nodeType || obj === obj.window) return false;
    // Support: Firefox <20
    // The try/catch suppresses exceptions thrown when attempting to access
    // the "constructor" property of certain host objects, ie. |window.location|
    // https://bugzilla.mozilla.org/show_bug.cgi?id=814622
    try {
        if (obj.constructor && !({}).hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) return false;
    } catch (e) {
        return false;
    }
    // If the function hasn't returned already, we're confident that
    // |obj| is a plain object, created by {} or constructed with new Object
    return true;
};
exports.default = IsPlainObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ezmuS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var UpdateTexture = function() {
    this.clear();
    if (this.textureKey === undefined) return this;
    var texture = this.scene.sys.textures.get(this.textureKey);
    if (!texture) return this;
    var minWidth = this.columns.minWidth * this.maxFixedPartScaleX; // Fixed-part width
    var minHeight = this.rows.minHeight * this.maxFixedPartScaleY; // Fixed-part height
    var stretchWidth = this.width - minWidth;
    var stretchHeight = this.height - minHeight;
    var fixedPartScaleX = stretchWidth >= 0 ? this.maxFixedPartScaleX : this.width / minWidth;
    var fixedPartScaleY = stretchHeight >= 0 ? this.maxFixedPartScaleY : this.height / minHeight;
    if (this.preserveRatio) {
        var minScale = Math.min(fixedPartScaleX, fixedPartScaleY);
        if (fixedPartScaleX > minScale) {
            var compensationWidth = (fixedPartScaleX - minScale) * minWidth;
            if (stretchWidth >= 0) stretchWidth += compensationWidth;
            else stretchWidth = compensationWidth;
            fixedPartScaleX = minScale;
        }
        if (fixedPartScaleY > minScale) {
            var compensationHeight = (fixedPartScaleY - minScale) * minHeight;
            if (stretchHeight >= 0) stretchHeight += compensationHeight;
            else stretchHeight = compensationHeight;
            fixedPartScaleY = minScale;
        }
    }
    this.columns.scale = fixedPartScaleX;
    this.rows.scale = fixedPartScaleY;
    var proportionWidth;
    if (stretchWidth > 0) proportionWidth = this.columns.stretch > 0 ? stretchWidth / this.columns.stretch : 0;
    else proportionWidth = 0;
    var proportionHeight;
    if (stretchHeight > 0) proportionHeight = this.rows.stretch > 0 ? stretchHeight / this.rows.stretch : 0;
    else proportionHeight = 0;
    var frameName, col, row, colWidth, rowHeight;
    var offsetX = 0, offsetY = 0;
    var imageType;
    this._beginDraw();
    for(var j = 0, jcnt = this.rows.count; j < jcnt; j++){
        row = this.rows.data[j];
        rowHeight = row.stretch === 0 ? row.height * fixedPartScaleY : proportionHeight * row.stretch;
        offsetX = 0;
        for(var i = 0, icnt = this.columns.count; i < icnt; i++){
            col = this.columns.data[i];
            colWidth = col.stretch === 0 ? col.width * fixedPartScaleX : proportionWidth * col.stretch;
            frameName = this.getFrameNameCallback(i, j, this.baseFrameName);
            if (texture.has(frameName) && colWidth > 0 && rowHeight > 0) {
                if (row.stretch === 0 && col.stretch === 0) imageType = 0; // Draw image
                else if (this.getStretchMode(i, j) === 0) imageType = 0; // Draw scaled image
                else imageType = 1; // Draw tile-sprite
                if (imageType === 0) this._drawImage(this.textureKey, frameName, offsetX, offsetY, colWidth, rowHeight);
                else this._drawTileSprite(this.textureKey, frameName, offsetX, offsetY, colWidth, rowHeight);
            }
            offsetX += colWidth;
        }
        offsetY += rowHeight;
    }
    this._endDraw();
};
exports.default = UpdateTexture;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31aX9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var SetStretchMode = function(mode) {
    if (IsPlainObject(mode)) {
        this.stretchMode.edge = parseMode(GetValue(mode, "edge", 0));
        this.stretchMode.internal = parseMode(GetValue(mode, "internal", 0));
    } else {
        mode = parseMode(mode);
        this.stretchMode.edge = mode;
        this.stretchMode.internal = mode;
    }
    return this;
};
var parseMode = function(mode) {
    if (typeof mode === "string") mode = EXTENDMODE[mode];
    return mode;
};
const EXTENDMODE = {
    scale: 0,
    repeat: 1
};
exports.default = SetStretchMode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8L3Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isEdgeJs = require("../utils/IsEdge.js");
var _isEdgeJsDefault = parcelHelpers.interopDefault(_isEdgeJs);
var GetStretchMode = function(colIndex, rowIndex) {
    return (0, _isEdgeJsDefault.default).call(this, colIndex, rowIndex) ? this.stretchMode.edge : this.stretchMode.internal;
};
exports.default = GetStretchMode;

},{"../utils/IsEdge.js":"5mik1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5mik1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsEdge = function(colIndex, rowIndex) {
    return colIndex === 0 || colIndex === this.columns.count - 1 || rowIndex === 0 || rowIndex === this.rows.count - 1;
};
exports.default = IsEdge;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3CO2m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetPreserveRatio = function(enable) {
    if (enable == undefined) enable = true;
    this.preserveRatio = enable;
    return this;
};
exports.default = SetPreserveRatio;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dglrK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetMaxFixedPartScale = function(scaleX, scaleY) {
    if (scaleY === undefined) scaleY = scaleX;
    this.maxFixedPartScaleX = scaleX;
    this.maxFixedPartScaleY = scaleY;
    return this;
};
exports.default = SetMaxFixedPartScale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NtuG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var NOOP = function() {
//  NOOP
};
exports.default = NOOP;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"pKy4U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getStampGameObjectJs = require("./GetStampGameObject.js");
var _getStampGameObjectJsDefault = parcelHelpers.interopDefault(_getStampGameObjectJs);
var DrawImage = function(key, frame, x, y, width, height) {
    var gameObject = (0, _getStampGameObjectJsDefault.default)(this, "Image").setTexture(key, frame).setDisplaySize(width, height);
    this.batchDraw(gameObject, x, y);
};
exports.default = DrawImage;

},{"./GetStampGameObject.js":"dp8pp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dp8pp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGame = require("../../../utils/system/GetGame");
var _getGameDefault = parcelHelpers.interopDefault(_getGame);
const GameObjectClasses = Phaser.GameObjects;
var GameObjects = undefined;
var GetStampGameObject = function(gameObject, className) {
    if (!GameObjects) {
        GameObjects = {};
        (0, _getGameDefault.default)(gameObject).events.once("destroy", function() {
            for(var name in GameObjects)GameObjects[name].destroy();
            GameObjects = undefined;
        });
    }
    if (!GameObjects.hasOwnProperty(className)) {
        var scene = (0, _getGameDefault.default)(gameObject).scene.systemScene;
        var gameObject = new GameObjectClasses[className](scene);
        gameObject.setOrigin(0);
        GameObjects[className] = gameObject;
    }
    return GameObjects[className];
};
exports.default = GetStampGameObject;

},{"../../../utils/system/GetGame":"2z43O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2z43O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isGameJs = require("./IsGame.js");
var _isGameJsDefault = parcelHelpers.interopDefault(_isGameJs);
var _isSceneObjectJs = require("./IsSceneObject.js");
var _isSceneObjectJsDefault = parcelHelpers.interopDefault(_isSceneObjectJs);
var GetGame = function(object) {
    if (object == null || typeof object !== "object") return null;
    else if ((0, _isGameJsDefault.default)(object)) return object;
    else if ((0, _isGameJsDefault.default)(object.game)) return object.game;
    else if ((0, _isSceneObjectJsDefault.default)(object)) return object.sys.game;
    else if ((0, _isSceneObjectJsDefault.default)(object.scene)) return object.scene.sys.game;
};
exports.default = GetGame;

},{"./IsGame.js":"8Es87","./IsSceneObject.js":"3RS5p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Es87":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GameClass = Phaser.Game;
var IsGame = function(object) {
    return object instanceof GameClass;
};
exports.default = IsGame;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3RS5p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const SceneClass = Phaser.Scene;
var IsSceneObject = function(object) {
    return object instanceof SceneClass;
};
exports.default = IsSceneObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3702x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getStampGameObjectJs = require("./GetStampGameObject.js");
var _getStampGameObjectJsDefault = parcelHelpers.interopDefault(_getStampGameObjectJs);
var DrawTileSprite = function(key, frame, x, y, width, height) {
    var gameObject = (0, _getStampGameObjectJsDefault.default)(this, "TileSprite").setTexture(key, frame).setSize(width, height);
    this.batchDraw(gameObject, x, y);
};
exports.default = DrawTileSprite;

},{"./GetStampGameObject.js":"dp8pp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eUEYa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsInValidKey = function(keys) {
    return keys == null || keys === "" || keys.length === 0;
};
var GetEntry = function(target, keys, defaultEntry) {
    var entry = target;
    if (IsInValidKey(keys)) ;
    else {
        if (typeof keys === "string") keys = keys.split(".");
        var key;
        for(var i = 0, cnt = keys.length; i < cnt; i++){
            key = keys[i];
            if (entry[key] == null || typeof entry[key] !== "object") {
                var newEntry;
                if (i === cnt - 1) {
                    if (defaultEntry === undefined) newEntry = {};
                    else newEntry = defaultEntry;
                } else newEntry = {};
                entry[key] = newEntry;
            }
            entry = entry[key];
        }
    }
    return entry;
};
var SetValue = function(target, keys, value, delimiter) {
    if (delimiter === undefined) delimiter = ".";
    // no object
    if (typeof target !== "object") return;
    else if (IsInValidKey(keys)) {
        // don't erase target
        if (value == null) return;
        else if (typeof value === "object") target = value;
    } else {
        if (typeof keys === "string") keys = keys.split(delimiter);
        var lastKey = keys.pop();
        var entry = GetEntry(target, keys);
        entry[lastKey] = value;
    }
    return target;
};
exports.default = SetValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbVXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninePatchJs = require("./NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("ninePatch2", function(x, y, width, height, key, columns, rows, config) {
    var gameObject = new (0, _ninePatchJsDefault.default)(this.scene, x, y, width, height, key, columns, rows, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.NinePatch2", (0, _ninePatchJsDefault.default));
exports.default = (0, _ninePatchJsDefault.default);

},{"./NinePatch.js":"6PG9G","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PG9G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninepatch2Js = require("../../../plugins/ninepatch2.js");
var _ninepatch2JsDefault = parcelHelpers.interopDefault(_ninepatch2Js);
exports.default = (0, _ninepatch2JsDefault.default);

},{"../../../plugins/ninepatch2.js":"71a9I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71a9I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _ninePatchJs = require("./gameobjects/blitter/ninepatch/NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
exports.default = (0, _ninePatchJsDefault.default);

},{"./gameobjects/blitter/ninepatch/NinePatch.js":"1hHZH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hHZH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _blitterBaseJs = require("../blitterbase/BlitterBase.js");
var _blitterBaseJsDefault = parcelHelpers.interopDefault(_blitterBaseJs);
var _ninePatchJs = require("../../../utils/ninepatch/NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
class NinePatch extends (0, _ninePatchJsDefault.default)((0, _blitterBaseJsDefault.default), "rexNinePatch2") {
    setBaseTexture(key, baseFrameName, columns, rows) {
        this.setTexture(key, baseFrameName);
        super.setBaseTexture(key, baseFrameName, columns, rows);
        return this;
    }
}
Object.assign(NinePatch.prototype, (0, _methodsJsDefault.default));
exports.default = NinePatch;

},{"../blitterbase/BlitterBase.js":"dZC95","../../../utils/ninepatch/NinePatch.js":"3Z8rb","./Methods.js":"hQJUG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dZC95":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderJs = require("./render/Render.js");
var _renderJsDefault = parcelHelpers.interopDefault(_renderJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _poolManagerJs = require("./poolmanager/PoolManager.js");
var _poolManagerJsDefault = parcelHelpers.interopDefault(_poolManagerJs);
const GameObject = Phaser.GameObjects.GameObject;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const List = Phaser.Structs.List;
const StableSort = Phaser.Utils.Array.StableSort;
class Blitter extends GameObject {
    constructor(scene, x, y, texture, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            texture = GetValue(config, "texture");
            frame = GetValue(config, "frame");
        }
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        super(scene, "rexBlitter");
        this.children = new List();
        this.renderList = [];
        this.displayListDirty = false;
        this.lastAppendedChildren = [];
        var reuseBob = GetValue(config, "reuseBob", true);
        this.poolManager = reuseBob ? new (0, _poolManagerJsDefault.default)(config) : undefined;
        this.setTexture(texture, frame).setPosition(x, y).setOrigin(0, 0).clearTint().initPipeline();
    }
    preDestroy() {
        this.removeChildren();
        this.children.destroy();
        this.renderList.length = 0;
        if (this.poolManager) this.poolManager.destroy();
    }
    getRenderList() {
        if (this.displayListDirty) {
            this.renderList.length = 0;
            var needDepthSort = false;
            var children = this.children.list;
            for(var i = 0, cnt = children.length; i < cnt; i++){
                var child = children[i];
                if (ChildCanRender(child)) {
                    this.renderList.push(child);
                    if (!needDepthSort) needDepthSort = child.depth !== 0;
                }
            }
            if (needDepthSort) StableSort(this.renderList, SortByDepth);
            this.displayListDirty = false;
        }
        return this.renderList;
    }
}
var ChildCanRender = function(child) {
    return child.active && child.visible && child.alpha > 0;
};
var SortByDepth = function(childA, childB) {
    return childA._depth - childB._depth;
};
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Blitter, [
    Components.Alpha,
    Components.BlendMode,
    Components.ComputedSize,
    Components.Depth,
    Components.GetBounds,
    Components.Mask,
    Components.Origin,
    Components.Pipeline,
    Components.ScrollFactor,
    Components.Transform,
    Components.Visible,
    (0, _renderJsDefault.default),
    (0, _methodsJsDefault.default)
]);
exports.default = Blitter;

},{"./render/Render.js":"cf8hI","./methods/Methods.js":"3gS6f","./poolmanager/PoolManager.js":"yC6yQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cf8hI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webGLRendererJs = require("./WebGLRenderer.js");
var _webGLRendererJsDefault = parcelHelpers.interopDefault(_webGLRendererJs);
var _canvasRendererJs = require("./CanvasRenderer.js");
var _canvasRendererJsDefault = parcelHelpers.interopDefault(_canvasRendererJs);
exports.default = {
    renderWebGL: (0, _webGLRendererJsDefault.default),
    renderCanvas: (0, _canvasRendererJsDefault.default)
};

},{"./WebGLRenderer.js":"Guyp8","./CanvasRenderer.js":"820Pe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Guyp8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var WebGLRenderer = function(renderer, src, camera, parentMatrix) {
    var bobs = src.getRenderList();
    if (bobs.length === 0) return;
    camera.addToRenderList(src);
    var pipeline = renderer.pipelines.set(src.pipeline);
    var texture = src.frame.glTexture;
    var textureUnit = pipeline.setGameObject(src);
    var roundPixels = camera.roundPixels;
    var result = GetCalcMatrix(src, camera, parentMatrix);
    var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
    var dx = src._displayOriginX;
    var dy = src._displayOriginY;
    var alpha = camera.alpha * src.alpha;
    renderer.pipelines.preBatch(src);
    for(var i = 0, cnt = bobs.length; i < cnt; i++)bobs[i].webglRender(pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels);
    renderer.pipelines.postBatch(src);
};
exports.default = WebGLRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"820Pe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var CanvasRenderer = function(renderer, src, camera, parentMatrix) {
    var ctx = renderer.currentContext;
    var bobs = src.getRenderList();
    if (bobs.length === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) return;
    camera.addToRenderList(src);
    var roundPixels = camera.roundPixels;
    var dx = -src._displayOriginX, dy = -src._displayOriginY;
    ctx.translate(dx, dy);
    for(var i = 0, cnt = bobs.length; i < cnt; i++)bobs[i].canvasRender(ctx, dx, dy, roundPixels);
    //  Restore the context saved in SetTransform
    ctx.restore();
};
exports.default = CanvasRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gS6f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setTextureJs = require("./SetTexture.js");
var _setTextureJsDefault = parcelHelpers.interopDefault(_setTextureJs);
var _resizeJs = require("./Resize.js");
var _resizeJsDefault = parcelHelpers.interopDefault(_resizeJs);
var _addChildJs = require("./AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _removeChildJs = require("./RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _removeChildrenJs = require("./RemoveChildren.js");
var _removeChildrenJsDefault = parcelHelpers.interopDefault(_removeChildrenJs);
var _getLastAppendedChildrenJs = require("./GetLastAppendedChildren.js");
var _getLastAppendedChildrenJsDefault = parcelHelpers.interopDefault(_getLastAppendedChildrenJs);
var _getChildrenJs = require("./GetChildren.js");
var _getChildrenJsDefault = parcelHelpers.interopDefault(_getChildrenJs);
var _tintMethodsJs = require("./TintMethods.js");
var _tintMethodsJsDefault = parcelHelpers.interopDefault(_tintMethodsJs);
var methods = {
    setTexture: (0, _setTextureJsDefault.default),
    resize: (0, _resizeJsDefault.default),
    setSize: (0, _resizeJsDefault.default),
    addChild: (0, _addChildJsDefault.default),
    removeChild: (0, _removeChildJsDefault.default),
    removeChildren: (0, _removeChildrenJsDefault.default),
    clear: (0, _removeChildrenJsDefault.default),
    getLastAppendedChildren: (0, _getLastAppendedChildrenJsDefault.default),
    getChildren: (0, _getChildrenJsDefault.default)
};
Object.assign(methods, (0, _tintMethodsJsDefault.default));
exports.default = methods;

},{"./SetTexture.js":"8GFs8","./Resize.js":"41yEc","./AddChild.js":"lH2zF","./RemoveChild.js":"h45yu","./RemoveChildren.js":"iC5pU","./GetLastAppendedChildren.js":"icdtB","./GetChildren.js":"gtqQq","./TintMethods.js":"7uZZx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GFs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTexture = function(key, frame) {
    this.texture = this.scene.sys.textures.get(key);
    this.frame = this.texture.get(frame);
    return this;
};
exports.default = SetTexture;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"41yEc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Resize = function(width, height) {
    if (this.width === width && this.height === height) return this;
    this.width = width;
    this.height = height;
    this.updateDisplayOrigin();
    var input = this.input;
    if (input && !input.customHitArea) {
        input.hitArea.width = width;
        input.hitArea.height = height;
    }
    return this;
};
exports.default = Resize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lH2zF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AddChild = function(bob) {
    this.lastAppendedChildren.length = 0;
    if (Array.isArray(bob)) {
        this.children.add(bob);
        this.lastAppendedChildren.push(...bob);
    } else {
        this.children.add(bob);
        this.lastAppendedChildren.push(bob);
    }
    return this;
};
exports.default = AddChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h45yu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RemoveItem = Phaser.Utils.Array.Remove;
var RemoveChild = function(bob) {
    if (this.poolManager) // Free this bob (bob.onFree())
    this.poolManager.free(bob);
    // Remove this bob from blitter
    RemoveItem(this.children.list, bob);
    this.lastAppendedChildren.length = 0;
    this.dirty = true;
    return this;
};
exports.default = RemoveChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iC5pU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemoveChildren = function() {
    if (this.poolManager) // Free all bobs (bob.onFree())
    this.poolManager.freeMultiple(this.children.list);
    // Remove all bobs from blitter
    this.children.list.length = 0;
    this.lastAppendedChildren.length = 0;
    this.dirty = true;
    return this;
};
exports.default = RemoveChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"icdtB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetLastAppendedChildren = function() {
    return this.lastAppendedChildren;
};
exports.default = GetLastAppendedChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gtqQq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildren = function() {
    return this.children.list;
};
exports.default = GetChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7uZZx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setTint (tint) {
        // 0: Solid tint + texture alpha
        this.tint = tint;
        this.tintFill = false;
        return this;
    },
    setTintFill (tint) {
        // 1: Solid tint, no texture
        this.tint = tint;
        this.tintFill = true;
        return this;
    },
    clearTint () {
        this.setTint(0xffffff);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"yC6yQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _poolJs = require("../../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var Pools = {};
class PoolManager {
    constructor(config){
        this.pools = GetValue(config, "pools", Pools);
    }
    destroy() {
        this.pools = undefined;
    }
    free(bob) {
        if (!this.pools) return this;
        var bobType = bob.type;
        if (!this.pools.hasOwnProperty(bobType)) this.pools[bobType] = new (0, _poolJsDefault.default)();
        this.pools[bobType].push(bob);
        bob.onFree();
        return this;
    }
    freeMultiple(bobs) {
        if (!this.pools) return this;
        for(var i = 0, cnt = bobs.length; i < cnt; i++)this.free(bobs[i]);
        return this;
    }
    allocate(bobType) {
        if (!this.pools || !this.pools.hasOwnProperty(bobType)) return null;
        return this.pools[bobType].pop();
    }
}
exports.default = PoolManager;

},{"../../../../pool.js":"lDewQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDewQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stackJs = require("./utils/struct/Stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
exports.default = (0, _stackJsDefault.default);

},{"./utils/struct/Stack.js":"aUr1f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aUr1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Stack {
    constructor(){
        this.items = [];
    }
    destroy() {
        this.clear();
        this.items = undefined;
    }
    pop() {
        return this.items.length > 0 ? this.items.pop() : null;
    }
    push(l) {
        this.items.push(l);
        return this;
    }
    pushMultiple(arr) {
        this.items.push.apply(this.items, arr);
        arr.length = 0;
        return this;
    }
    clear() {
        this.items.length = 0;
        return this;
    }
}
exports.default = Stack;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQJUG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawImageJs = require("./texture/DrawImage.js");
var _drawImageJsDefault = parcelHelpers.interopDefault(_drawImageJs);
var _drawTileSpriteJs = require("./texture/DrawTileSprite.js");
var _drawTileSpriteJsDefault = parcelHelpers.interopDefault(_drawTileSpriteJs);
exports.default = {
    _drawImage: (0, _drawImageJsDefault.default),
    _drawTileSprite: (0, _drawTileSpriteJsDefault.default)
};

},{"./texture/DrawImage.js":"8oa6k","./texture/DrawTileSprite.js":"4NELK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8oa6k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addImageJs = require("../../blitterbase/utils/AddImage.js");
var _addImageJsDefault = parcelHelpers.interopDefault(_addImageJs);
var DrawImage = function(key, frame, x, y, width, height) {
    (0, _addImageJsDefault.default)(this, {
        frame: frame,
        x: x,
        y: y,
        width: width,
        height: height
    });
};
exports.default = DrawImage;

},{"../../blitterbase/utils/AddImage.js":"hEcN3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hEcN3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../../blitterbase/bob/Types.js");
var _imageDataJs = require("../../blitterbase/bob/image/ImageData.js");
var _imageDataJsDefault = parcelHelpers.interopDefault(_imageDataJs);
var AddImage = function(blitter, config) {
    if (typeof config === "string") config = {
        frame: config
    };
    var bob = blitter.poolManager ? blitter.poolManager.allocate((0, _typesJs.ImageTypeName)) : null;
    if (bob === null) bob = new (0, _imageDataJsDefault.default)(blitter);
    else bob.setParent(blitter).setActive();
    bob.modifyPorperties(config);
    blitter.addChild(bob);
    return bob;
};
exports.default = AddImage;

},{"../../blitterbase/bob/Types.js":"3a7oG","../../blitterbase/bob/image/ImageData.js":"h4NmI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3a7oG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImageTypeName", ()=>ImageTypeName);
const ImageTypeName = "image";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4NmI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _typesJs = require("../Types.js");
var _webglRenderJs = require("./WebglRender.js");
var _webglRenderJsDefault = parcelHelpers.interopDefault(_webglRenderJs);
var _canvasRenderJs = require("./CanvasRender.js");
var _canvasRenderJsDefault = parcelHelpers.interopDefault(_canvasRenderJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class ImageData extends (0, _renderBaseJsDefault.default) {
    constructor(parent, frame){
        super(parent, (0, _typesJs.ImageTypeName));
        this.setFrame(frame);
    }
    get width() {
        return this._width;
    }
    set width(value) {}
    get height() {
        return this._height;
    }
    set height(value) {}
    setFrame(frame) {
        if (arguments.length > 0 && !IsPlainObject(frame)) frame = this.parent.texture.get(frame);
        this.frame = frame;
        this._width = frame ? frame.width : 0;
        this._height = frame ? frame.height : 0;
        return this;
    }
    setFlipX(flipX) {
        if (flipX === undefined) flipX = true;
        this.flipX = flipX;
        return this;
    }
    setFlipY(flipY) {
        if (flipY === undefined) flipY = true;
        this.flipY = flipY;
        return this;
    }
    resetFlip() {
        this.flipX = false;
        this.flipY = false;
        return this;
    }
    get tint() {
        if (this._tint === undefined) return this.parent.tint;
        else return this._tint;
    }
    set tint(value) {
        this._tint = value;
    }
    setTint(value) {
        this.tint = value;
        this.tintFill = false;
        return this;
    }
    setTintFill(value) {
        this.tint = value;
        this.tintFill = true;
        return this;
    }
    clearTint() {
        this.setTint(0xffffff);
        return this;
    }
    resetTint() {
        this.tint = undefined;
        this.tintFill = undefined;
        return this;
    }
    get tintFill() {
        if (this._tintFill === undefined) return this.parent.tintFill;
        else return this._tintFill;
    }
    set tintFill(value) {
        this._tintFill = value;
    }
    reset() {
        super.reset();
        this.resetFlip().resetTint().setFrame();
        return this;
    }
    modifyPorperties(o) {
        if (!o) return this;
        // Size of Image is equal to frame size,
        // Move width, height properties to displayWidth,displayHeight
        if (o.hasOwnProperty("width")) {
            o.displayWidth = o.width;
            delete o.width;
        }
        if (o.hasOwnProperty("height")) {
            o.displayHeight = o.height;
            delete o.height;
        }
        if (o.hasOwnProperty("frame")) this.setFrame(o.frame);
        super.modifyPorperties(o);
        if (o.hasOwnProperty("flipX")) this.setFlipX(o.flipX);
        if (o.hasOwnProperty("flipY")) this.setFlipY(o.flipY);
        if (o.hasOwnProperty("tint")) this.setTint(o.tint);
        if (o.hasOwnProperty("tintFill")) this.setTintFill(o.tintFill);
        return this;
    }
}
var methods = {
    webglRender: (0, _webglRenderJsDefault.default),
    canvasRender: (0, _canvasRenderJsDefault.default)
};
Object.assign(ImageData.prototype, methods);
exports.default = ImageData;

},{"../RenderBase.js":"5i36K","../Types.js":"3a7oG","./WebglRender.js":"kdf26","./CanvasRender.js":"h91MA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5i36K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderBase extends (0, _baseJsDefault.default) {
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this.setDisplayListDirty(this._visible != value);
        this._visible = value;
    }
    setVisible(visible) {
        if (visible === undefined) visible = true;
        this.visible = visible;
        return this;
    }
    get alpha() {
        return this._alpha;
    }
    set alpha(value) {
        this.setDisplayListDirty(!!this._alpha !== !!value);
        this._alpha = value;
    }
    setAlpha(alpha) {
        this.alpha = alpha;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setPosition(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setRotation(rotation) {
        this.rotation = rotation;
        return this;
    }
    get angle() {
        return RadToDeg(this.rotation);
    }
    set angle(value) {
        this.rotation = DegToRad(value);
    }
    setAngle(angle) {
        this.angle = angle;
        return this;
    }
    setScaleX(scaleX) {
        this.scaleX = scaleX;
        return this;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this._width = value;
    }
    setWidth(width, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.width = width;
        if (keepAspectRatio) this.scaleY = this.scaleX;
        return this;
    }
    setScaleY(scaleY) {
        this.scaleY = scaleY;
        return this;
    }
    setScale(scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        return this;
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this._height = value;
    }
    setHeight(height, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.height = height;
        if (keepAspectRatio) this.scaleX = this.scaleY;
        return this;
    }
    setScale(scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        return this;
    }
    get displayWidth() {
        return this._width * this.scaleX;
    }
    set displayWidth(value) {
        this.scaleX = value / this._width;
    }
    setDisplayWidth(width, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.displayWidth = width;
        if (keepAspectRatio) this.scaleY = this.scaleX;
        return this;
    }
    get displayHeight() {
        return this._height * this.scaleY;
    }
    set displayHeight(value) {
        this.scaleY = value / this._height;
    }
    setDisplayHeight(height, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.displayHeight = height;
        if (keepAspectRatio) this.scaleX = this.scaleY;
        return this;
    }
    setOriginX(originX) {
        this.originX = originX;
        this._displayOriginX = this.width * originX;
        return this;
    }
    setOriginY(originY) {
        this.originY = originY;
        this._displayOriginY = this.height * originY;
        return this;
    }
    setOrigin(originX, originY) {
        if (originY === undefined) originY = originX;
        this.setOriginX(originX).setOriginY(originY);
        return this;
    }
    get depth() {
        return this._depth;
    }
    set depth(value) {
        this.setDisplayListDirty(this._depth != value);
        this._depth = value;
    }
    setDepth(depth) {
        if (depth === undefined) depth = 0;
        this.depth = depth;
        return this;
    }
    modifyPorperties(o) {
        if (!o) return this;
        if (o.hasOwnProperty("x")) this.setX(o.x);
        if (o.hasOwnProperty("y")) this.setY(o.y);
        if (o.hasOwnProperty("rotation")) this.setRotation(o.rotation);
        else if (o.hasOwnProperty("angle")) this.setAngle(o.angle);
        if (o.hasOwnProperty("alpha")) this.setAlpha(o.alpha);
        // ScaleX, ScaleY
        var width = GetValue(o, "width", undefined);
        var height = GetValue(o, "height", undefined);
        var scale = GetValue(o, "scale", undefined);
        var scaleX = GetValue(o, "scaleX", scale);
        var scaleY = GetValue(o, "scaleY", scale);
        if (width !== undefined) {
            if (height === undefined && scaleY === undefined) this.setWidth(width, true);
            else this.setWidth(width);
        } else if (scaleX !== undefined) this.setScaleX(scaleX);
        else if (o.hasOwnProperty("displayWidth")) this.setDisplayWidth(o.displayWidth);
        if (height !== undefined) {
            if (width === undefined && scaleX === undefined) this.setHeight(height, true);
            else this.setHeight(height);
        } else if (scaleY !== undefined) this.setScaleY(scaleY);
        else if (o.hasOwnProperty("displayHeight")) this.setDisplayHeight(o.displayHeight);
        var origin = GetValue(o, "origin", undefined);
        if (origin !== undefined) this.setOrigin(origin);
        else {
            if (o.hasOwnProperty("originX")) this.setOriginX(o.originX);
            if (o.hasOwnProperty("originY")) this.setOriginY(o.originY);
        }
        if (o.hasOwnProperty("depth")) this.setDepth(o.depth);
        return this;
    }
    reset() {
        super.reset();
        this.setVisible().setAlpha(1).setPosition(0, 0).setRotation(0).setScale(1, 1).setOrigin(0).setDepth(0);
        return this;
    }
    // Override
    webglRender(pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels) {}
    // Override
    canvasRender(ctx, dx, dy, roundPixels) {}
}
exports.default = RenderBase;

},{"./Base.js":"6GhnU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GhnU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataMethodsJs = require("../../../../utils/data/DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
class Base {
    constructor(parent, type){
        this.type = type;
        this.data = undefined;
        this.setParent(parent).reset().setActive();
    }
    destroy() {
        if (this.parent) this.parent.removeChild(this);
    }
    setParent(parent) {
        this.parent = parent;
        return this;
    }
    // get scene() {
    //     if (this.parent) {
    //         return this.parent.scene;
    //     } else {
    //         return null;
    //     }
    // }
    setDisplayListDirty(displayListDirty) {
        if (displayListDirty && this.parent) this.parent.displayListDirty = true;
        return this;
    }
    get active() {
        return this._active;
    }
    set active(value) {
        this.setDisplayListDirty(this._active != value);
        this._active = value;
    }
    setActive(active) {
        if (active === undefined) active = true;
        this.active = active;
        return this;
    }
    modifyPorperties(o) {
        return this;
    }
    // Override
    reset() {
        this.clearData();
    }
    // Override
    onFree() {
        this.reset().setActive(false).setParent();
    }
}
Object.assign(Base.prototype, (0, _dataMethodsJsDefault.default));
exports.default = Base;

},{"../../../../utils/data/DataMethods.js":"kSQ7j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSQ7j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getValueJs = require("../object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _clearJs = require("../object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
exports.default = {
    enableData () {
        if (this.data === undefined) this.data = {};
        return this;
    },
    setData (key, value) {
        this.enableData();
        if (arguments.length === 1) {
            var data = key;
            for(key in data)this.data[key] = data[key];
        } else this.data[key] = value;
        return this;
    },
    getData (key, defaultValue) {
        this.enableData();
        return key === undefined ? this.data : (0, _getValueJsDefault.default)(this.data, key, defaultValue);
    },
    incData (key, inc, defaultValue) {
        if (defaultValue === undefined) defaultValue = 0;
        this.enableData();
        this.setData(key, this.getData(key, defaultValue) + inc);
        return this;
    },
    mulData (key, mul, defaultValue) {
        if (defaultValue === undefined) defaultValue = 0;
        this.enableData();
        this.setData(key, this.getData(key, defaultValue) * mul);
        return this;
    },
    clearData () {
        if (this.data) (0, _clearJsDefault.default)(this.data);
        return this;
    }
};

},{"../object/GetValue.js":"7bT3a","../object/Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bT3a":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ //  Source object
//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'
//  The default value to use if the key doesn't exist
/**
 * Retrieves a value from an object.
 *
 * @function Phaser.Utils.Objects.GetValue
 * @since 3.0.0
 *
 * @param {object} source - The object to retrieve the value from.
 * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.
 * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.
 *
 * @return {*} The value of the requested key.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetValue = function(source, key, defaultValue) {
    if (!source || typeof source === "number") return defaultValue;
    else if (source.hasOwnProperty(key)) return source[key];
    else if (key.indexOf(".") !== -1) {
        var keys = key.split(".");
        var parent = source;
        var value = defaultValue;
        //  Use for loop here so we can break early
        for(var i = 0; i < keys.length; i++)if (parent.hasOwnProperty(keys[i])) {
            //  Yes it has a key property, let's carry on down
            value = parent[keys[i]];
            parent = parent[keys[i]];
        } else {
            //  Can't go any further, so reset to default
            value = defaultValue;
            break;
        }
        return value;
    } else return defaultValue;
};
exports.default = GetValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yIf2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Clear = function(obj) {
    if (typeof obj !== "object" || obj === null) return obj;
    if (Array.isArray(obj)) obj.length = 0;
    else for(var key in obj)delete obj[key];
    return obj;
};
exports.default = Clear;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kdf26":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
var FrameMatrix = new TransformMatrix();
var WebglRender = function(pipeline, calcMatrix, alpha, dx, dy, texture, textureUnit, roundPixels) {
    var width = this._width, height = this._height;
    var displayOriginX = width * this.originX, displayOriginY = height * this.originY;
    var x = this.x - dx, y = this.y - dy;
    var flipX = 1;
    var flipY = 1;
    if (this.flipX) {
        x += width - displayOriginX * 2;
        flipX = -1;
    }
    if (this.flipY) {
        y += height - displayOriginY * 2;
        flipY = -1;
    }
    FrameMatrix.applyITRS(x, y, this.rotation, this.scaleX * flipX, this.scaleY * flipY);
    calcMatrix.multiply(FrameMatrix, FrameMatrix);
    var tx = -displayOriginX;
    var ty = -displayOriginY;
    var tw = tx + width;
    var th = ty + height;
    var quad = FrameMatrix.setQuad(tx, ty, tw, th, roundPixels);
    var u0 = this.frame.u0;
    var v0 = this.frame.v0;
    var u1 = this.frame.u1;
    var v1 = this.frame.v1;
    var tint = GetTint(this.tint, this.alpha * alpha);
    pipeline.batchQuad(this.parent, quad[0], quad[1], quad[2], quad[3], quad[4], quad[5], quad[6], quad[7], u0, v0, u1, v1, tint, tint, tint, tint, this.tintFill, texture, textureUnit);
};
exports.default = WebglRender;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h91MA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CanvasRender = function(ctx, dx, dy, roundPixels) {
    ctx.save();
    var width = this._width, height = this._height;
    var displayOriginX = width * this.originX, displayOriginY = height * this.originY;
    var x = this.x - displayOriginX, y = this.y - displayOriginY;
    var flipX = 1;
    var flipY = 1;
    if (this.flipX) {
        x += width;
        flipX = -1;
    }
    if (this.flipY) {
        y += height;
        flipY = -1;
    }
    if (roundPixels) {
        x = Math.round(x);
        y = Math.round(y);
    }
    ctx.translate(x, y);
    ctx.rotate(this.rotation);
    ctx.scale(this.scaleX * flipX, this.scaleY * flipY);
    var frame = this.frame;
    ctx.drawImage(frame.source.image, frame.cutX, frame.cutY, width, height, 0, 0, width, height);
    ctx.restore();
};
exports.default = CanvasRender;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NELK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addImageJs = require("../../blitterbase/utils/AddImage.js");
var _addImageJsDefault = parcelHelpers.interopDefault(_addImageJs);
var DrawTileSprite = function(key, frame, x, y, width, height) {
    var frameObj = this.texture.get(frame);
    var frameWidth = frameObj.width, frameHeight = frameObj.height;
    var colCount = Math.floor(width / frameWidth), rowCount = Math.floor(height / frameHeight);
    // Align images at center
    x += (width - colCount * frameWidth) / 2;
    y += (height - rowCount * frameHeight) / 2;
    for(var colIndex = 0; colIndex < colCount; colIndex++)for(var rowIndex = 0; rowIndex < rowCount; rowIndex++)(0, _addImageJsDefault.default)(this, {
        frame: frame,
        x: x + colIndex * frameWidth,
        y: y + rowIndex * frameHeight
    });
};
exports.default = DrawTileSprite;

},{"../../blitterbase/utils/AddImage.js":"hEcN3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLqco":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("./RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("roundRectangle", function(x, y, width, height, radiusConfig, fillColor, fillAlpha) {
    var gameObject = new (0, _roundRectangleJsDefault.default)(this.scene, x, y, width, height, radiusConfig, fillColor, fillAlpha);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.RoundRectangle", (0, _roundRectangleJsDefault.default));
exports.default = (0, _roundRectangleJsDefault.default);

},{"./RoundRectangle.js":"9fgJM","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fgJM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundrectangleJs = require("../../../plugins/roundrectangle.js");
var _roundrectangleJsDefault = parcelHelpers.interopDefault(_roundrectangleJs);
exports.default = (0, _roundrectangleJsDefault.default);

},{"../../../plugins/roundrectangle.js":"fKove","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fKove":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("./gameobjects/shape/roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
exports.default = (0, _roundRectangleJsDefault.default);

},{"./gameobjects/shape/roundrectangle/RoundRectangle.js":"fRZqR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fRZqR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("../../../geom/roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _lineToJs = require("../../../geom/pathdata/LineTo.js");
var _lineToJsDefault = parcelHelpers.interopDefault(_lineToJs);
var _arcToJs = require("../../../geom/pathdata/ArcTo.js");
var _arcToJsDefault = parcelHelpers.interopDefault(_arcToJs);
var _renderJs = require("./render/Render.js");
var _renderJsDefault = parcelHelpers.interopDefault(_renderJs);
const Shape = Phaser.GameObjects.Shape;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Earcut = Phaser.Geom.Polygon.Earcut;
class RoundRectangle extends Shape {
    constructor(scene, x, y, width, height, radiusConfig, fillColor, fillAlpha){
        var strokeColor, strokeAlpha, strokeWidth, shapeType;
        if (IsPlainObject(x)) {
            var config = x;
            x = config.x;
            y = config.y;
            width = config.width;
            height = config.height;
            radiusConfig = config.radius;
            fillColor = config.color;
            fillAlpha = config.alpha;
            strokeColor = config.strokeColor;
            strokeAlpha = config.strokeAlpha;
            strokeWidth = config.strokeWidth;
            shapeType = config.shape;
        }
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 1;
        if (height === undefined) height = width;
        if (radiusConfig === undefined) radiusConfig = 0;
        if (shapeType === undefined) shapeType = 0;
        var geom = new (0, _roundRectangleJsDefault.default)(); // Configurate it later
        super(scene, "rexRoundRectangleShape", geom);
        this.setShapeType(shapeType);
        if (this.shapeType === 0) {
            var radius = GetValue(radiusConfig, "radius", radiusConfig);
            geom.setTo(0, 0, width, height, radius);
        } else {
            var radius = {
                x: width / 2,
                y: height / 2
            };
            geom.setTo(0, 0, width, height, radius);
        }
        var iteration = GetValue(radiusConfig, "iteration", undefined);
        this.setIteration(iteration);
        this.setPosition(x, y);
        this.setFillStyle(fillColor, fillAlpha);
        if (strokeColor !== undefined && strokeWidth === undefined) strokeWidth = 2;
        this.setStrokeStyle(strokeWidth, strokeColor, strokeAlpha);
        this.updateDisplayOrigin();
        this.dirty = true;
    }
    get fillColor() {
        return this._fillColor;
    }
    set fillColor(value) {
        this._fillColor = value;
        this.isFilled = value != null && this._fillAlpha > 0;
    }
    get fillAlpha() {
        return this._fillAlpha;
    }
    set fillAlpha(value) {
        this._fillAlpha = value;
        this.isFilled = value > 0 && this._fillColor != null;
    }
    // Fully override setFillStyle method
    setFillStyle(color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.fillColor = color;
        this.fillAlpha = alpha;
        return this;
    }
    get strokeColor() {
        return this._strokeColor;
    }
    set strokeColor(value) {
        this._strokeColor = value;
        this.isStroked = value != null && this._strokeAlpha > 0 && this._lineWidth > 0;
    }
    get strokeAlpha() {
        return this._strokeAlpha;
    }
    set strokeAlpha(value) {
        this._strokeAlpha = value;
        this.isStroked = value > 0 && this._strokeColor != null && this._lineWidth > 0;
    }
    get lineWidth() {
        return this._lineWidth;
    }
    set lineWidth(value) {
        this._lineWidth = value;
        this.isStroked = value > 0 && this._strokeColor != null;
    }
    // Fully override setStrokeStyle method
    setStrokeStyle(lineWidth, color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.lineWidth = lineWidth;
        this.strokeColor = color;
        this.strokeAlpha = alpha;
        return this;
    }
    updateData() {
        var geom = this.geom;
        var pathData = this.pathData;
        pathData.length = 0;
        var width = geom.width, height = geom.height, cornerRadius = geom.cornerRadius, radius, iteration = this.iteration + 1;
        // Top-left
        radius = cornerRadius.tl;
        if (IsArcCorner(radius)) {
            if (radius.convex) {
                var centerX = radius.x;
                var centerY = radius.y;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 180, 270, false, iteration, pathData);
            } else {
                var centerX = 0;
                var centerY = 0;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 90, 0, true, iteration, pathData);
            }
        } else (0, _lineToJsDefault.default)(0, 0, pathData);
        // Top-right
        radius = cornerRadius.tr;
        if (IsArcCorner(radius)) {
            if (radius.convex) {
                var centerX = width - radius.x;
                var centerY = radius.y;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 270, 360, false, iteration, pathData);
            } else {
                var centerX = width;
                var centerY = 0;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 180, 90, true, iteration, pathData);
            }
        } else (0, _lineToJsDefault.default)(width, 0, pathData);
        // Bottom-right
        radius = cornerRadius.br;
        if (IsArcCorner(radius)) {
            if (radius.convex) {
                var centerX = width - radius.x;
                var centerY = height - radius.y;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 0, 90, false, iteration, pathData);
            } else {
                var centerX = width;
                var centerY = height;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 270, 180, true, iteration, pathData);
            }
        } else (0, _lineToJsDefault.default)(width, height, pathData);
        // Bottom-left
        radius = cornerRadius.bl;
        if (IsArcCorner(radius)) {
            if (radius.convex) {
                var centerX = radius.x;
                var centerY = height - radius.y;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 90, 180, false, iteration, pathData);
            } else {
                var centerX = 0;
                var centerY = height;
                (0, _arcToJsDefault.default)(centerX, centerY, radius.x, radius.y, 360, 270, true, iteration, pathData);
            }
        } else (0, _lineToJsDefault.default)(0, height, pathData);
        pathData.push(pathData[0], pathData[1]); // Repeat first point to close curve
        this.pathIndexes = Earcut(pathData);
        return this;
    }
    setShapeType(shapeType) {
        if (typeof shapeType === "string") shapeType = ShapeTypeMap[shapeType];
        this.shapeType = shapeType;
        return this;
    }
    get width() {
        return this.geom.width;
    }
    set width(value) {
        this.resize(value, this.height);
    }
    get height() {
        return this.geom.height;
    }
    set height(value) {
        this.resize(this.width, value);
    }
    setSize(width, height) {
        // Override Shape's setSize method
        if (height === undefined) height = width;
        if (this.geom.width === width && this.geom.height === height) return this;
        this.geom.setSize(width, height);
        if (this.shapeType === 1) this.setRadius({
            x: width / 2,
            y: height / 2
        });
        this.updateDisplayOrigin();
        this.dirty = true;
        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = width;
            input.hitArea.height = height;
        }
        return this;
    }
    resize(width, height) {
        this.setSize(width, height);
        return this;
    }
    get radius() {
        return this.geom.radius;
    }
    set radius(value) {
        this.geom.setRadius(value);
        this.updateDisplayOrigin();
        this.dirty = true;
    }
    get radiusTL() {
        return this.geom.radiusTL;
    }
    set radiusTL(value) {
        this.geom.radiusTL = value;
        this.dirty = true;
    }
    get radiusTR() {
        return this.geom.radiusTR;
    }
    set radiusTR(value) {
        this.geom.radiusTR = value;
        this.dirty = true;
    }
    get radiusBL() {
        return this.geom.radiusBL;
    }
    set radiusBL(value) {
        this.geom.radiusBL = value;
        this.dirty = true;
    }
    get radiusBR() {
        return this.geom.radiusBR;
    }
    set radiusBR(value) {
        this.geom.radiusBR = value;
        this.dirty = true;
    }
    setRadius(value) {
        if (value === undefined) value = 0;
        this.radius = value;
        return this;
    }
    setRadiusTL(value) {
        if (value === undefined) value = 0;
        this.radiusTL = value;
        return this;
    }
    setRadiusTR(value) {
        if (value === undefined) value = 0;
        this.radiusTR = value;
        return this;
    }
    setRadiusBL(value) {
        if (value === undefined) value = 0;
        this.radiusBL = value;
        return this;
    }
    setRadiusBR(value) {
        if (value === undefined) value = 0;
        this.radiusBR = value;
        return this;
    }
    get cornerRadius() {
        return this.geom.cornerRadius;
    }
    set cornerRadius(value) {
        this.radius = value;
    }
    setCornerRadius(value) {
        return this.setRadius(value);
    }
    get iteration() {
        return this._iteration;
    }
    set iteration(value) {
        // Set iteration first time
        if (this._iteration === undefined) {
            this._iteration = value;
            return;
        }
        // Change iteration value
        if (this._iteration === value) return;
        this._iteration = value;
        this.dirty = true;
    }
    setIteration(iteration) {
        if (iteration === undefined) iteration = 6;
        this.iteration = iteration;
        return this;
    }
}
var IsArcCorner = function(radius) {
    return radius.x > 0 && radius.y > 0;
};
const ShapeTypeMap = {
    rectangle: 0,
    circle: 1
};
Object.assign(RoundRectangle.prototype, (0, _renderJsDefault.default));
exports.default = RoundRectangle;

},{"../../../geom/roundrectangle/RoundRectangle.js":"8a2J8","../../../geom/pathdata/LineTo.js":"hdsKV","../../../geom/pathdata/ArcTo.js":"12vFH","./render/Render.js":"l4myS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8a2J8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle {
    constructor(x, y, width, height, radiusConfig){
        if (x === undefined) x = 0;
        if (y === undefined) y = x;
        if (width === undefined) width = 0;
        if (height === undefined) height = 0;
        if (radiusConfig === undefined) radiusConfig = 0;
        this.cornerRadius = {};
        this._width = 0;
        this._height = 0;
        this.setTo(x, y, width, height, radiusConfig);
    }
    setTo(x, y, width, height, radiusConfig) {
        this.setPosition(x, y);
        this.setRadius(radiusConfig);
        this.setSize(width, height);
        return this;
    }
    setPosition(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setRadius(value) {
        if (value === undefined) value = 0;
        this.radius = value;
        return this;
    }
    setSize(width, height) {
        this.width = width;
        this.height = height;
        return this;
    }
    get minWidth() {
        var radius = this.cornerRadius;
        return Math.max(radius.tl.x + radius.tr.x, radius.bl.x + radius.br.x);
    }
    get minHeight() {
        var radius = this.cornerRadius;
        return Math.max(radius.tl.y + radius.bl.y, radius.tr.y + radius.br.y);
    }
    get width() {
        return this._width;
    }
    set width(value) {
        if (value == null) value = 0;
        this._width = Math.max(value, this.minWidth);
    }
    get height() {
        return this._height;
    }
    set height(value) {
        if (value == null) value = 0;
        this._height = Math.max(value, this.minHeight);
    }
    get radius() {
        var radius = this.cornerRadius;
        return Math.max(radius.tl.x, radius.tl.y, radius.tr.x, radius.tr.y, radius.bl.x, radius.bl.y, radius.br.x, radius.br.y);
    }
    set radius(value) {
        var defaultRadiusX, defaultRadiusY;
        if (typeof value === "number") {
            defaultRadiusX = value;
            defaultRadiusY = value;
        } else {
            defaultRadiusX = GetValue(value, "x", 0);
            defaultRadiusY = GetValue(value, "y", 0);
        }
        var radius = this.cornerRadius;
        radius.tl = GetRadius(GetValue(value, "tl", undefined), defaultRadiusX, defaultRadiusY);
        radius.tr = GetRadius(GetValue(value, "tr", undefined), defaultRadiusX, defaultRadiusY);
        radius.bl = GetRadius(GetValue(value, "bl", undefined), defaultRadiusX, defaultRadiusY);
        radius.br = GetRadius(GetValue(value, "br", undefined), defaultRadiusX, defaultRadiusY);
    }
    get radiusTL() {
        var radius = this.cornerRadius.tl;
        return Math.max(radius.x, radius.y);
    }
    set radiusTL(value) {
        SetRadius(this.cornerRadius.tl, value);
    }
    get radiusTR() {
        var radius = this.cornerRadius.tr;
        return Math.max(radius.x, radius.y);
    }
    set radiusTR(value) {
        SetRadius(this.cornerRadius.tr, value);
    }
    get radiusBL() {
        var radius = this.cornerRadius.bl;
        return Math.max(radius.x, radius.y);
    }
    set radiusBL(value) {
        SetRadius(this.cornerRadius.bl, value);
    }
    get radiusBR() {
        var radius = this.cornerRadius.br;
        return Math.max(radius.x, radius.y);
    }
    set radiusBR(value) {
        SetRadius(this.cornerRadius.br, value);
    }
}
var GetRadius = function(radius, defaultRadiusX, defaultRadiusY) {
    if (radius === undefined) radius = {
        x: defaultRadiusX,
        y: defaultRadiusY
    };
    else if (typeof radius === "number") radius = {
        x: radius,
        y: radius
    };
    SetConvex(radius);
    return radius;
};
var SetRadius = function(radius, value) {
    if (typeof value === "number") {
        radius.x = value;
        radius.y = value;
    } else {
        radius.x = GetValue(value, "x", 0);
        radius.y = GetValue(value, "y", 0);
    }
    SetConvex(radius);
};
var SetConvex = function(radius) {
    radius.convex = radius.x >= 0 || radius.y >= 0;
    radius.x = Math.abs(radius.x);
    radius.y = Math.abs(radius.y);
};
exports.default = RoundRectangle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdsKV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var LineTo = function(x, y, pathData) {
    var cnt = pathData.length;
    if (cnt >= 2) {
        var lastX = pathData[cnt - 2];
        var lastY = pathData[cnt - 1];
        if (x === lastX && y === lastY) return pathData;
    }
    pathData.push(x, y);
    return pathData;
};
exports.default = LineTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12vFH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineToJs = require("./LineTo.js");
var _lineToJsDefault = parcelHelpers.interopDefault(_lineToJs);
const DegToRad = Phaser.Math.DegToRad;
var ArcTo = function(centerX, centerY, radiusX, radiusY, startAngle, endAngle, antiClockWise, iteration, pathData) {
    // startAngle, endAngle: 0 ~ 360
    if (antiClockWise && endAngle > startAngle) endAngle -= 360;
    else if (!antiClockWise && endAngle < startAngle) endAngle += 360;
    var deltaAngle = endAngle - startAngle;
    var step = DegToRad(deltaAngle) / iteration;
    startAngle = DegToRad(startAngle);
    for(var i = 0; i <= iteration; i++){
        var angle = startAngle + step * i;
        var x = centerX + radiusX * Math.cos(angle);
        var y = centerY + radiusY * Math.sin(angle);
        (0, _lineToJsDefault.default)(x, y, pathData);
    }
    return pathData;
};
exports.default = ArcTo;

},{"./LineTo.js":"hdsKV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l4myS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webGLRendererJs = require("./WebGLRenderer.js");
var _webGLRendererJsDefault = parcelHelpers.interopDefault(_webGLRendererJs);
var _canvasRendererJs = require("./CanvasRenderer.js");
var _canvasRendererJsDefault = parcelHelpers.interopDefault(_canvasRendererJs);
exports.default = {
    renderWebGL: (0, _webGLRendererJsDefault.default),
    renderCanvas: (0, _canvasRendererJsDefault.default)
};

},{"./WebGLRenderer.js":"ivax3","./CanvasRenderer.js":"3796h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivax3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fillPathWebGLJs = require("../../utils/render/FillPathWebGL.js");
var _fillPathWebGLJsDefault = parcelHelpers.interopDefault(_fillPathWebGLJs);
var _strokePathWebGLJs = require("../../utils/render/StrokePathWebGL.js");
var _strokePathWebGLJsDefault = parcelHelpers.interopDefault(_strokePathWebGLJs);
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var PolygonWebGLRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.dirty) {
        src.updateData();
        src.dirty = false;
    }
    camera.addToRenderList(src);
    var pipeline = renderer.pipelines.set(src.pipeline);
    var result = GetCalcMatrix(src, camera, parentMatrix);
    var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
    var dx = src._displayOriginX;
    var dy = src._displayOriginY;
    var alpha = camera.alpha * src.alpha;
    renderer.pipelines.preBatch(src);
    if (src.isFilled) (0, _fillPathWebGLJsDefault.default)(pipeline, calcMatrix, src, alpha, dx, dy);
    if (src.isStroked) (0, _strokePathWebGLJsDefault.default)(pipeline, src, alpha, dx, dy);
    renderer.pipelines.postBatch(src);
};
exports.default = PolygonWebGLRenderer;

},{"../../utils/render/FillPathWebGL.js":"6n7Tk","../../utils/render/StrokePathWebGL.js":"iiBta","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6n7Tk":[function(require,module,exports) {
/*
src: {
    fillColor, 
    fillAlpha, 
    pathData, 
    pathIndexes  // Earcut(pathData)
}
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Utils = Phaser.Renderer.WebGL.Utils;
var FillPathWebGL = function(pipeline, calcMatrix, src, alpha, dx, dy) {
    var fillTintColor = Utils.getTintAppendFloatAlpha(src.fillColor, src.fillAlpha * alpha);
    var path = src.pathData;
    var pathIndexes = src.pathIndexes;
    for(var i = 0; i < pathIndexes.length; i += 3){
        var p0 = pathIndexes[i] * 2;
        var p1 = pathIndexes[i + 1] * 2;
        var p2 = pathIndexes[i + 2] * 2;
        var x0 = path[p0 + 0] - dx;
        var y0 = path[p0 + 1] - dy;
        var x1 = path[p1 + 0] - dx;
        var y1 = path[p1 + 1] - dy;
        var x2 = path[p2 + 0] - dx;
        var y2 = path[p2 + 1] - dy;
        var tx0 = calcMatrix.getX(x0, y0);
        var ty0 = calcMatrix.getY(x0, y0);
        var tx1 = calcMatrix.getX(x1, y1);
        var ty1 = calcMatrix.getY(x1, y1);
        var tx2 = calcMatrix.getX(x2, y2);
        var ty2 = calcMatrix.getY(x2, y2);
        pipeline.batchTri(src, tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, 2);
    }
};
exports.default = FillPathWebGL;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iiBta":[function(require,module,exports) {
/*
src: {
    strokeColor,
    strokeAlpha,
    pathData,
    lineWidth,
    closePath
}
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Utils = Phaser.Renderer.WebGL.Utils;
var StrokePathWebGL = function(pipeline, src, alpha, dx, dy) {
    var strokeTint = pipeline.strokeTint;
    var strokeTintColor = Utils.getTintAppendFloatAlpha(src.strokeColor, src.strokeAlpha * alpha);
    strokeTint.TL = strokeTintColor;
    strokeTint.TR = strokeTintColor;
    strokeTint.BL = strokeTintColor;
    strokeTint.BR = strokeTintColor;
    var path = src.pathData;
    var pathLength = path.length - 1;
    var lineWidth = src.lineWidth;
    var halfLineWidth = lineWidth / 2;
    var px1 = path[0] - dx;
    var py1 = path[1] - dy;
    if (!src.closePath) pathLength -= 2;
    for(var i = 2; i < pathLength; i += 2){
        var px2 = path[i] - dx;
        var py2 = path[i + 1] - dy;
        pipeline.batchLine(px1, py1, px2, py2, halfLineWidth, halfLineWidth, lineWidth, i - 2, src.closePath ? i === pathLength - 1 : false);
        px1 = px2;
        py1 = py2;
    }
};
exports.default = StrokePathWebGL;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3796h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fillStyleCanvas = require("../../utils/render/FillStyleCanvas");
var _fillStyleCanvasDefault = parcelHelpers.interopDefault(_fillStyleCanvas);
var _lineStyleCanvas = require("../../utils/render/LineStyleCanvas");
var _lineStyleCanvasDefault = parcelHelpers.interopDefault(_lineStyleCanvas);
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var PolygonCanvasRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.dirty) {
        src.updateData();
        src.dirty = false;
    }
    camera.addToRenderList(src);
    var ctx = renderer.currentContext;
    if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {
        var dx = src._displayOriginX;
        var dy = src._displayOriginY;
        var path = src.pathData;
        var pathLength = path.length - 1;
        var px1 = path[0] - dx;
        var py1 = path[1] - dy;
        ctx.beginPath();
        ctx.moveTo(px1, py1);
        if (!src.closePath) pathLength -= 2;
        for(var i = 2; i < pathLength; i += 2){
            var px2 = path[i] - dx;
            var py2 = path[i + 1] - dy;
            ctx.lineTo(px2, py2);
        }
        ctx.closePath();
        if (src.isFilled) {
            (0, _fillStyleCanvasDefault.default)(ctx, src);
            ctx.fill();
        }
        if (src.isStroked) {
            (0, _lineStyleCanvasDefault.default)(ctx, src);
            ctx.stroke();
        }
        //  Restore the context saved in SetTransform
        ctx.restore();
    }
};
exports.default = PolygonCanvasRenderer;

},{"../../utils/render/FillStyleCanvas":"1wMk1","../../utils/render/LineStyleCanvas":"i6waM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wMk1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FillStyleCanvas = function(ctx, src, altColor, altAlpha) {
    var fillColor = altColor ? altColor : src.fillColor;
    var fillAlpha = altAlpha ? altAlpha : src.fillAlpha;
    var red = (fillColor & 0xFF0000) >>> 16;
    var green = (fillColor & 0xFF00) >>> 8;
    var blue = fillColor & 0xFF;
    ctx.fillStyle = "rgba(" + red + "," + green + "," + blue + "," + fillAlpha + ")";
};
exports.default = FillStyleCanvas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6waM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var LineStyleCanvas = function(ctx, src, altColor, altAlpha) {
    var strokeColor = altColor ? altColor : src.strokeColor;
    var strokeAlpha = altAlpha ? altAlpha : src.strokeAlpha;
    var red = (strokeColor & 0xFF0000) >>> 16;
    var green = (strokeColor & 0xFF00) >>> 8;
    var blue = strokeColor & 0xFF;
    ctx.strokeStyle = "rgba(" + red + "," + green + "," + blue + "," + strokeAlpha + ")";
    ctx.lineWidth = src.lineWidth;
};
exports.default = LineStyleCanvas;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9k3Ck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _statesRoundRectangleJs = require("./StatesRoundRectangle.js");
var _statesRoundRectangleJsDefault = parcelHelpers.interopDefault(_statesRoundRectangleJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("statesRoundRectangle", function(config) {
    var gameObject = new (0, _statesRoundRectangleJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.StatesRoundRectangle", (0, _statesRoundRectangleJsDefault.default));
exports.default = (0, _statesRoundRectangleJsDefault.default);

},{"./StatesRoundRectangle.js":"7Wg8c","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Wg8c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("../roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _extractStyleJs = require("./methods/ExtractStyle.js");
var _extractStyleJsDefault = parcelHelpers.interopDefault(_extractStyleJs);
var _setStateMethodsJs = require("./methods/SetStateMethods.js");
var _setStateMethodsJsDefault = parcelHelpers.interopDefault(_setStateMethodsJs);
class StatesRoundRectangle extends (0, _roundRectangleJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene, config);
        this.activeStyle = (0, _extractStyleJsDefault.default)(config, "active", PropertiesMap);
        this.hoverStyle = (0, _extractStyleJsDefault.default)(config, "hover", PropertiesMap);
        this.disableStyle = (0, _extractStyleJsDefault.default)(config, "disable", PropertiesMap);
    }
    modifyStyle(style) {
        for(var key in style)this[key] = style[key];
        return this;
    }
}
const PropertiesMap = {
    color: "fillColor",
    alpha: "fillAlpha",
    // strokeColor: 'strokeColor',
    // strokeAlpha: 'strokeAlpha',
    strokeWidth: "lineWidth"
};
Object.assign(StatesRoundRectangle.prototype, (0, _setStateMethodsJsDefault.default));
exports.default = StatesRoundRectangle;

},{"../roundrectangle/RoundRectangle.js":"9fgJM","./methods/ExtractStyle.js":"emkYx","./methods/SetStateMethods.js":"gIese","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"emkYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extractByPrefixJs = require("../../../../plugins/utils/object/ExtractByPrefix.js");
var _extractByPrefixJsDefault = parcelHelpers.interopDefault(_extractByPrefixJs);
var ExtractStyle = function(config, prefix, propertiesMap) {
    var result = (0, _extractByPrefixJsDefault.default)(config, prefix);
    if (propertiesMap) {
        for(var name in result)if (propertiesMap.hasOwnProperty(name)) {
            result[propertiesMap[name]] = result[name];
            delete result[name];
        }
    }
    return result;
};
exports.default = ExtractStyle;

},{"../../../../plugins/utils/object/ExtractByPrefix.js":"pDwm2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"pDwm2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ExtractByPrefix = function(obj, prefix, delimiter, out) {
    if (delimiter === undefined) delimiter = ".";
    if (out === undefined) out = {};
    if (!obj) return out;
    if (prefix in obj) return Object.assign(out, obj[prefix]);
    prefix += delimiter;
    for(var key in obj){
        if (!key.startsWith(prefix)) continue;
        out[key.replace(prefix, "")] = obj[key];
    }
    return out;
};
exports.default = ExtractByPrefix;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gIese":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getPartialDataJs = require("../../../../plugins/utils/object/GetPartialData.js");
var _getPartialDataJsDefault = parcelHelpers.interopDefault(_getPartialDataJs);
var _isKeyValueEqualJs = require("../../../../plugins/utils/object/IsKeyValueEqual.js");
var _isKeyValueEqualJsDefault = parcelHelpers.interopDefault(_isKeyValueEqualJs);
var ApplyStyle = function(gameObject, newStyle) {
    if (!newStyle) return undefined;
    var currentStyle = (0, _getPartialDataJsDefault.default)(gameObject, newStyle);
    if (!(0, _isKeyValueEqualJsDefault.default)(currentStyle, newStyle)) {
        gameObject.modifyStyle(newStyle);
        return currentStyle;
    } else return undefined;
};
exports.default = {
    setActiveState (enable) {
        if (enable === undefined) enable = true;
        if (this.activeState === enable) return this;
        this.activeState = enable;
        if (enable) this.activeStyleSave = ApplyStyle(this, this.activeStyle);
        else {
            ApplyStyle(this, this.activeStyleSave);
            this.activeStyleSave = undefined;
        }
        return this;
    },
    setHoverState (enable) {
        if (enable === undefined) enable = true;
        if (this.hoverState === enable) return this;
        this.hoverState = enable;
        if (enable) this.hoverStyleSave = ApplyStyle(this, this.hoverStyle);
        else {
            ApplyStyle(this, this.hoverStyleSave);
            this.hoverStyleSave = undefined;
        }
        return this;
    },
    setDisableState (enable) {
        if (enable === undefined) enable = true;
        if (this.disableState === enable) return this;
        this.disableState = enable;
        if (enable) this.disableStyleSave = ApplyStyle(this, this.disableStyle);
        else {
            ApplyStyle(this, this.disableStyleSave);
            this.disableStyleSave = undefined;
        }
        return this;
    }
};

},{"../../../../plugins/utils/object/GetPartialData.js":"cUO58","../../../../plugins/utils/object/IsKeyValueEqual.js":"hniyP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUO58":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPartialData = function(obj, keys, out) {
    if (out === undefined) out = {};
    if (Array.isArray(keys)) {
        var key;
        for(var i = 0, cnt = keys.length; i < cnt; i++){
            key = keys[i];
            out[key] = obj[key];
        }
    } else for(var key in keys)out[key] = obj[key];
    return out;
};
exports.default = GetPartialData;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hniyP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsKeyValueEqual = function(objA, objB) {
    for(var key in objA){
        if (!(key in objB)) return false;
        if (objA[key] !== objB[key]) return false;
    }
    for(var key in objB){
        if (!(key in objA)) return false;
    }
    return true;
};
exports.default = IsKeyValueEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lvSbO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleCanvasJs = require("./RoundRectangleCanvas.js");
var _roundRectangleCanvasJsDefault = parcelHelpers.interopDefault(_roundRectangleCanvasJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("roundRectangleCanvas", function(x, y, width, height, radius, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient) {
    var gameObject = new (0, _roundRectangleCanvasJsDefault.default)(this.scene, x, y, width, height, radius, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.RoundRectangleCanvas", (0, _roundRectangleCanvasJsDefault.default));
exports.default = (0, _roundRectangleCanvasJsDefault.default);

},{"./RoundRectangleCanvas.js":"97j0t","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97j0t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundrectanglecanvasJs = require("../../../plugins/roundrectanglecanvas.js");
var _roundrectanglecanvasJsDefault = parcelHelpers.interopDefault(_roundrectanglecanvasJs);
exports.default = (0, _roundrectanglecanvasJsDefault.default);

},{"../../../plugins/roundrectanglecanvas.js":"lXo8g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lXo8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("./gameobjects/canvas/roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
exports.default = (0, _roundRectangleJsDefault.default);

},{"./gameobjects/canvas/roundrectangle/RoundRectangle.js":"4qmJz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qmJz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _getStyleJs = require("../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
var _drawContentJs = require("./DrawContent.js");
var _drawContentJsDefault = parcelHelpers.interopDefault(_drawContentJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 1;
        if (height === undefined) height = width;
        if (radiusConfig === undefined) radiusConfig = 0;
        super(scene, x, y, width, height);
        this.type = "rexRoundRectangleCanvas";
        var radius = GetValue(radiusConfig, "radius", radiusConfig);
        var iteration = GetValue(radiusConfig, "iteration", undefined);
        this.setRadius(radius);
        this.setIteration(iteration);
        this.setFillStyle(fillStyle, fillColor2, isHorizontalGradient);
        this.setStrokeStyle(strokeStyle, lineWidth);
    }
    get radius() {
        return this._radius;
    }
    set radius(value) {
        this.dirty |= this._radius != value;
        this._radius = value;
    }
    setRadius(radius) {
        this.radius = radius;
        return this;
    }
    get iteration() {
        return this._iteration;
    }
    set iteration(value) {
        this.dirty |= this._iteration != value;
        this._iteration = value;
    }
    setIteration(iteration) {
        this.iteration = iteration;
        return this;
    }
    get fillStyle() {
        return this._fillStyle;
    }
    set fillStyle(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty |= this._fillStyle != value;
        this._fillStyle = value;
    }
    get fillColor2() {
        return this._fillColor2;
    }
    set fillColor2(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty |= this._fillColor2 != value;
        this._fillColor2 = value;
    }
    get isHorizontalGradient() {
        return this._isHorizontalGradient;
    }
    set isHorizontalGradient(value) {
        this.dirty |= this._isHorizontalGradient != value;
        this._isHorizontalGradient = value;
    }
    setFillStyle(fillStyle, fillColor2, isHorizontalGradient) {
        if (isHorizontalGradient === undefined) isHorizontalGradient = true;
        this.fillStyle = fillStyle;
        this.fillColor2 = fillColor2;
        this.isHorizontalGradient = isHorizontalGradient;
        return this;
    }
    get strokeStyle() {
        return this._strokeStyle;
    }
    set strokeStyle(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty |= this._strokeStyle != value;
        this._strokeStyle = value;
    }
    get lineWidth() {
        return this._lineWidth;
    }
    set lineWidth(value) {
        this.dirty |= this._lineWidth != value;
        this._lineWidth = value;
    }
    setStrokeStyle(strokeStyle, lineWidth) {
        this.strokeStyle = strokeStyle;
        this.lineWidth = lineWidth;
        return this;
    }
    updateTexture() {
        this.clear();
        (0, _drawContentJsDefault.default).call(this);
        super.updateTexture();
        return this;
    }
}
exports.default = RoundRectangle;

},{"../canvasbase/Canvas.js":"lBB2L","../../../utils/canvas/GetStyle.js":"65BAh","./DrawContent.js":"fnkB6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lBB2L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderJs = require("./render/Render.js");
var _renderJsDefault = parcelHelpers.interopDefault(_renderJs);
var _canvasMethodsJs = require("./CanvasMethods.js");
var _canvasMethodsJsDefault = parcelHelpers.interopDefault(_canvasMethodsJs);
var _textureMethodsJs = require("./TextureMethods.js");
var _textureMethodsJsDefault = parcelHelpers.interopDefault(_textureMethodsJs);
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;
class Canvas extends GameObject {
    constructor(scene, x, y, width, height){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 1;
        if (height === undefined) height = 1;
        super(scene, "rexCanvas");
        this.renderer = scene.sys.game.renderer;
        this.resolution = 1;
        this._width = width;
        this._height = height;
        width = Math.max(Math.ceil(width * this.resolution), 1);
        height = Math.max(Math.ceil(height * this.resolution), 1);
        this.canvas = CanvasPool.create(this, width, height);
        this.context = this.canvas.getContext("2d", {
            willReadFrequently: true
        });
        this.dirty = false;
        this.setPosition(x, y);
        this.setOrigin(0.5, 0.5);
        this.initPipeline();
        this._crop = this.resetCropObject();
        //  Create a Texture for this Text object
        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);
        //  Get the frame
        this.frame = this.texture.get();
        //  Set the resolution
        this.frame.source.resolution = this.resolution;
        if (this.renderer && this.renderer.gl) {
            //  Clear the default 1x1 glTexture, as we override it later
            this.renderer.deleteTexture(this.frame.source.glTexture);
            this.frame.source.glTexture = null;
        }
        this.dirty = true;
    }
    preDestroy() {
        CanvasPool.remove(this.canvas);
        this.texture.destroy();
        this.canvas = null;
        this.context = null;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this.setSize(value, this._height);
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this.setSize(this._width, value);
    }
    setCanvasSize(width, height) {
        if (this._width === width && this._height === height) return this;
        this._width = width;
        this._height = height;
        this.updateDisplayOrigin();
        width = Math.max(Math.ceil(width * this.resolution), 1);
        height = Math.max(Math.ceil(height * this.resolution), 1);
        this.canvas.width = width;
        this.canvas.height = height;
        this.frame.setSize(width, height);
        this.dirty = true;
        return this;
    }
    // setSize might be override
    setSize(width, height) {
        this.setCanvasSize(width, height);
        return this;
    }
    get displayWidth() {
        return this.scaleX * this._width;
    }
    set displayWidth(value) {
        this.scaleX = value / this._width;
    }
    get displayHeight() {
        return this.scaleY * this._height;
    }
    set displayHeight(value) {
        this.scaleY = value / this._height;
    }
    setDisplaySize(width, height) {
        this.displayWidth = width;
        this.displayHeight = height;
        return this;
    }
    getCanvas(readOnly) {
        if (!readOnly) this.dirty = true;
        return this.canvas;
    }
    getContext(readOnly) {
        if (!readOnly) this.dirty = true;
        return this.context;
    }
    needRedraw() {
        this.dirty = true;
        return this;
    }
    resize(width, height) {
        this.setSize(width, height);
        return this;
    }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Canvas, [
    Components.Alpha,
    Components.BlendMode,
    Components.Crop,
    Components.Depth,
    Components.Flip,
    Components.GetBounds,
    Components.Mask,
    Components.Origin,
    Components.Pipeline,
    Components.PostPipeline,
    Components.ScrollFactor,
    Components.Tint,
    Components.Transform,
    Components.Visible,
    (0, _renderJsDefault.default),
    (0, _canvasMethodsJsDefault.default),
    (0, _textureMethodsJsDefault.default)
]);
exports.default = Canvas;

},{"./render/Render.js":"dVbeQ","./CanvasMethods.js":"cYbBV","./TextureMethods.js":"biqIb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVbeQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webGLRendererJs = require("./WebGLRenderer.js");
var _webGLRendererJsDefault = parcelHelpers.interopDefault(_webGLRendererJs);
var _canvasRendererJs = require("./CanvasRenderer.js");
var _canvasRendererJsDefault = parcelHelpers.interopDefault(_canvasRendererJs);
exports.default = {
    renderWebGL: (0, _webGLRendererJsDefault.default),
    renderCanvas: (0, _canvasRendererJsDefault.default)
};

},{"./WebGLRenderer.js":"lWEWI","./CanvasRenderer.js":"lIF5z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWEWI":[function(require,module,exports) {
// copy from Phaser.GameObjects.Text
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Utils = Phaser.Renderer.WebGL.Utils;
var WebGLRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.dirty) {
        src.updateTexture();
        src.dirty = false;
    }
    if (src.width === 0 || src.height === 0) return;
    camera.addToRenderList(src);
    var frame = src.frame;
    var width = frame.width;
    var height = frame.height;
    var getTint = Utils.getTintAppendFloatAlpha;
    var pipeline = renderer.pipelines.set(src.pipeline, src);
    var textureUnit = pipeline.setTexture2D(frame.glTexture, src);
    renderer.pipelines.preBatch(src);
    pipeline.batchTexture(src, frame.glTexture, width, height, src.x, src.y, width / src.resolution, height / src.resolution, src.scaleX, src.scaleY, src.rotation, src.flipX, src.flipY, src.scrollFactorX, src.scrollFactorY, src.displayOriginX, src.displayOriginY, 0, 0, width, height, getTint(src.tintTopLeft, camera.alpha * src._alphaTL), getTint(src.tintTopRight, camera.alpha * src._alphaTR), getTint(src.tintBottomLeft, camera.alpha * src._alphaBL), getTint(src.tintBottomRight, camera.alpha * src._alphaBR), src.tintFill, 0, 0, camera, parentMatrix, false, textureUnit);
    renderer.pipelines.postBatch(src);
};
exports.default = WebGLRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIF5z":[function(require,module,exports) {
// copy from Phaser.GameObjects.Text
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CanvasRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.dirty) {
        src.updateTexture();
        src.dirty = false;
    }
    if (src.width === 0 || src.height === 0) return;
    camera.addToRenderList(src);
    renderer.batchSprite(src, src.frame, camera, parentMatrix);
};
exports.default = CanvasRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cYbBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Color = Phaser.Display.Color;
exports.default = {
    clear () {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.dirty = true;
        return this;
    },
    fill (color) {
        this.context.fillStyle = color;
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
        this.dirty = true;
        return this;
    },
    drawFrame (key, frame, dx, dy, dWidth, dHeight, sxOffset, syOffset, sWidth, sHeight) {
        var textureFrame = this.scene.sys.textures.getFrame(key, frame);
        if (!textureFrame) return this;
        var frameWidth = textureFrame.cutWidth, frameHeight = textureFrame.cutHeight;
        if (dx === undefined) dx = 0;
        if (dy === undefined) dy = 0;
        if (dWidth === undefined) dWidth = frameWidth;
        if (dHeight === undefined) dHeight = frameHeight;
        if (sxOffset === undefined) sxOffset = 0;
        if (syOffset === undefined) syOffset = 0;
        if (sWidth === undefined) sWidth = frameWidth;
        if (sHeight === undefined) sHeight = frameHeight;
        var sx = textureFrame.cutX + sxOffset;
        var sy = textureFrame.cutY + syOffset;
        this.context.drawImage(textureFrame.source.image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
        this.dirty = true;
        return this;
    },
    getDataURL (type, encoderOptions) {
        return this.canvas.toDataURL(type, encoderOptions);
    },
    getPixel (x, y, out) {
        if (out === undefined) out = new Color();
        var rgb = this.context.getImageData(x, y, 1, 1);
        out.setTo(rgb.data[0], rgb.data[1], rgb.data[2], rgb.data[3]);
        return out;
    },
    setPixel (x, y, r, g, b, a) {
        if (typeof r !== "number") {
            var color = r;
            r = color.red;
            g = color.green;
            b = color.blue;
            a = color.alpha;
        }
        if (a === undefined) a = r !== 0 || g !== 0 || b !== 0 ? 255 : 0;
        var imgData = this.context.createImageData(1, 1);
        imgData.data[0] = r;
        imgData.data[1] = g;
        imgData.data[2] = b;
        imgData.data[3] = a;
        this.context.putImageData(imgData, x, y);
        this.dirty = true;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biqIb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyCanvasToTextureJs = require("../../../utils/texture/CopyCanvasToTexture.js");
var _copyCanvasToTextureJsDefault = parcelHelpers.interopDefault(_copyCanvasToTextureJs);
exports.default = {
    updateTexture (callback, scope) {
        if (callback) {
            if (scope) callback.call(scope, this.canvas, this.context);
            else callback(this.canvas, this.context);
        }
        if (this.canvas.width !== this.frame.width || this.canvas.height !== this.frame.height) this.frame.setSize(this.canvas.width, this.canvas.height);
        if (this.renderer && this.renderer.gl) {
            this.frame.source.glTexture = this.renderer.canvasToTexture(this.canvas, this.frame.source.glTexture, true);
            this.frame.glTexture = this.frame.source.glTexture;
        }
        this.dirty = false;
        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = this.width;
            input.hitArea.height = this.height;
        }
        return this;
    },
    generateTexture (key, x, y, width, height) {
        var srcCanvas = this.canvas;
        if (width === undefined) width = srcCanvas.width;
        else width *= this.resolution;
        if (height === undefined) height = srcCanvas.height;
        else height *= this.resolution;
        (0, _copyCanvasToTextureJsDefault.default)(this.scene, srcCanvas, key, x, y, width, height);
        return this;
    },
    loadTexture (key, frame) {
        var textureFrame = this.scene.sys.textures.getFrame(key, frame);
        if (!textureFrame) return this;
        if (this.width !== textureFrame.cutWidth || this.height !== textureFrame.cutHeight) this.setSize(textureFrame.cutWidth, textureFrame.cutHeight);
        else this.clear();
        this.drawFrame(key, frame);
        this.dirty = true;
        return this;
    }
};

},{"../../../utils/texture/CopyCanvasToTexture.js":"8Il0B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Il0B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CopyCanvasToTexture = function(scene, srcCanvas, key, x, y, width, height) {
    var textures = scene.sys.textures;
    var renderer = scene.renderer;
    if (x === undefined) x = 0;
    if (y === undefined) y = 0;
    if (width === undefined) width = srcCanvas.width;
    if (height === undefined) height = srcCanvas.height;
    var texture;
    if (textures.exists(key)) texture = textures.get(key);
    else texture = textures.createCanvas(key, width, height);
    var destCanvas = texture.getSourceImage();
    if (destCanvas.width !== width) destCanvas.width = width;
    if (destCanvas.height !== height) destCanvas.height = height;
    var destCtx = destCanvas.getContext("2d", {
        willReadFrequently: true
    });
    destCtx.clearRect(0, 0, width, height);
    destCtx.drawImage(srcCanvas, x, y, width, height);
    if (renderer.gl && texture) renderer.canvasToTexture(destCanvas, texture.source[0].glTexture, true, 0);
};
exports.default = CopyCanvasToTexture;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65BAh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Pad = Phaser.Utils.String.Pad;
var GetStyle = function(style, canvas, context) {
    if (style == null) return style;
    switch(typeof style){
        case "string":
            return style;
        case "number":
            return `#${Pad(Math.floor(style).toString(16), 6, "0", 1)}`;
        case "function":
            return style(canvas, context);
        case "object":
            if (style.hasOwnProperty("r")) {
                if (style.hasOwnProperty("a")) return `rgba(${style.r},${style.g},${style.b},${style.a})`;
                else return `rgb(${style.r},${style.g},${style.b})`;
            } else if (style.hasOwnProperty("h")) {
                if (style.hasOwnProperty("a")) return `hsla(${style.h},${style.s},${style.l},${style.a})`;
                else return `hsl(${style.h},${style.s},${style.l})`;
            } else return style; // Not a valid input
        default:
            return style;
    }
};
exports.default = GetStyle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnkB6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawRoundRectangleBackgroundJs = require("../utils/DrawRoundRectangleBackground.js");
var _drawRoundRectangleBackgroundJsDefault = parcelHelpers.interopDefault(_drawRoundRectangleBackgroundJs);
var DrawContent = function() {
    (0, _drawRoundRectangleBackgroundJsDefault.default)(this, this.fillStyle, this.strokeStyle, this.lineWidth, this.radius, this.fillColor2, this.isHorizontalGradient, this.iteration);
};
exports.default = DrawContent;

},{"../utils/DrawRoundRectangleBackground.js":"8PmFe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8PmFe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawRoundRectangleJs = require("../../../utils/canvas/DrawRoundRectangle.js");
var _drawRoundRectangleJsDefault = parcelHelpers.interopDefault(_drawRoundRectangleJs);
var DrawRoundRectangleBackground = function(canvasObject, color, strokeColor, strokeLineWidth, radius, color2, isHorizontalGradient, iteration) {
    if (color == null && strokeColor == null) return;
    var width = canvasObject.canvas.width, height = canvasObject.canvas.height;
    if (strokeColor == null) strokeLineWidth = 0;
    var x = strokeLineWidth / 2;
    width = Math.max(1, width - strokeLineWidth); // Min width is 1
    height = Math.max(1, height - strokeLineWidth); // Min height is 1
    (0, _drawRoundRectangleJsDefault.default)(canvasObject.canvas, canvasObject.context, x, x, width, height, radius, color, strokeColor, strokeLineWidth, color2, isHorizontalGradient, iteration);
};
exports.default = DrawRoundRectangleBackground;

},{"../../../utils/canvas/DrawRoundRectangle.js":"65yAU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65yAU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addRoundRectanglePathJs = require("./AddRoundRectanglePath.js");
var _addRoundRectanglePathJsDefault = parcelHelpers.interopDefault(_addRoundRectanglePathJs);
var DrawRoundRectangle = function(canvas, context, x, y, width, height, radiusConfig, fillStyle, strokeStyle, lineWidth, fillColor2, isHorizontalGradient, iteration) {
    (0, _addRoundRectanglePathJsDefault.default)(context, x, y, width, height, radiusConfig, iteration);
    if (fillStyle != null) {
        if (fillColor2 != null) {
            var grd;
            if (isHorizontalGradient) grd = context.createLinearGradient(0, 0, width, 0);
            else grd = context.createLinearGradient(0, 0, 0, height);
            grd.addColorStop(0, fillStyle);
            grd.addColorStop(1, fillColor2);
            fillStyle = grd;
        }
        context.fillStyle = fillStyle;
        context.fill();
    }
    if (strokeStyle != null && lineWidth > 0) {
        context.strokeStyle = strokeStyle;
        context.lineWidth = lineWidth;
        context.stroke();
    }
};
exports.default = DrawRoundRectangle;

},{"./AddRoundRectanglePath.js":"6zGPl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6zGPl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("../../geom/roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
const DegToRad = Phaser.Math.DegToRad;
var AddRoundRectanglePath = function(context, x, y, width, height, radiusConfig, iteration) {
    var geom = new (0, _roundRectangleJsDefault.default)(x, y, width, height, radiusConfig), minWidth = geom.minWidth, minHeight = geom.minHeight, scaleRX = width >= minWidth ? 1 : width / minWidth, scaleRY = height >= minHeight ? 1 : height / minHeight;
    var cornerRadius = geom.cornerRadius;
    var radius, radiusX, radiusY, centerX, centerY;
    context.save();
    context.beginPath();
    context.translate(x, y);
    // Top-left
    radius = cornerRadius.tl;
    if (IsArcCorner(radius)) {
        radiusX = radius.x * scaleRX;
        radiusY = radius.y * scaleRY;
        if (IsConvexArc(radius)) {
            centerX = radiusX;
            centerY = radiusY;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 180, 270, false, iteration);
        } else {
            centerX = 0;
            centerY = 0;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 90, 0, true, iteration);
        }
    } else context.lineTo(0, 0);
    // Top-right
    radius = cornerRadius.tr;
    if (IsArcCorner(radius)) {
        radiusX = radius.x * scaleRX;
        radiusY = radius.y * scaleRY;
        if (IsConvexArc(radius)) {
            centerX = width - radiusX;
            centerY = radiusY;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 270, 360, false, iteration);
        } else {
            centerX = width;
            centerY = 0;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 180, 90, true, iteration);
        }
    } else context.lineTo(width, 0);
    // Bottom-right
    radius = cornerRadius.br;
    if (IsArcCorner(radius)) {
        radiusX = radius.x * scaleRX;
        radiusY = radius.y * scaleRY;
        if (IsConvexArc(radius)) {
            centerX = width - radiusX;
            centerY = height - radiusY;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 0, 90, false, iteration);
        } else {
            centerX = width;
            centerY = height;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 270, 180, true, iteration);
        }
    } else context.lineTo(width, height);
    // Bottom-left
    radius = cornerRadius.bl;
    if (IsArcCorner(radius)) {
        radiusX = radius.x * scaleRX;
        radiusY = radius.y * scaleRY;
        if (IsConvexArc(radius)) {
            centerX = radiusX;
            centerY = height - radiusY;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 90, 180, false, iteration);
        } else {
            centerX = 0;
            centerY = height;
            ArcTo(context, centerX, centerY, radiusX, radiusY, 360, 270, true, iteration);
        }
    } else context.lineTo(0, height);
    context.closePath();
    context.restore();
};
var IsConvexArc = function(radius) {
    return !radius.hasOwnProperty("convex") || // radius does not have convex property
    radius.convex;
};
var IsArcCorner = function(radius) {
    return radius.x > 0 && radius.y > 0;
};
var ArcTo = function(context, centerX, centerY, radiusX, radiusY, startAngle, endAngle, antiClockWise, iteration) {
    // startAngle, endAngle: 0 ~ 360
    if (antiClockWise && endAngle > startAngle) endAngle -= 360;
    else if (!antiClockWise && endAngle < startAngle) endAngle += 360;
    startAngle = DegToRad(startAngle);
    endAngle = DegToRad(endAngle);
    if (iteration == null) context.ellipse(centerX, centerY, radiusX, radiusY, 0, startAngle, endAngle, antiClockWise);
    else {
        iteration += 1;
        var x, y, angle;
        var step = (endAngle - startAngle) / iteration;
        for(var i = 0; i <= iteration; i++){
            angle = startAngle + step * i;
            x = centerX + radiusX * Math.cos(angle);
            y = centerY + radiusY * Math.sin(angle);
            context.lineTo(x, y);
        }
    }
};
exports.default = AddRoundRectanglePath;

},{"../../geom/roundrectangle/RoundRectangle.js":"8a2J8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAX4f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bbcodeTextJs = require("./BBCodeText.js");
var _bbcodeTextJsDefault = parcelHelpers.interopDefault(_bbcodeTextJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("BBCodeText", function(x, y, text, style) {
    var gameObject = new (0, _bbcodeTextJsDefault.default)(this.scene, x, y, text, style);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.BBCodeText", (0, _bbcodeTextJsDefault.default));
exports.default = (0, _bbcodeTextJsDefault.default);

},{"./BBCodeText.js":"kgOqo","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kgOqo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bbcodetextJs = require("../../../plugins/bbcodetext.js");
var _bbcodetextJsDefault = parcelHelpers.interopDefault(_bbcodetextJs);
exports.default = (0, _bbcodetextJsDefault.default);

},{"../../../plugins/bbcodetext.js":"iwK7A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iwK7A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bbcodeTextJs = require("./gameobjects/tagtext/bbcodetext/BBCodeText.js");
var _bbcodeTextJsDefault = parcelHelpers.interopDefault(_bbcodeTextJs);
exports.default = (0, _bbcodeTextJsDefault.default);

},{"./gameobjects/tagtext/bbcodetext/BBCodeText.js":"co2ey","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"co2ey":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textJs = require("../textbase/Text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _parserJs = require("./parser/Parser.js");
var _parserJsDefault = parcelHelpers.interopDefault(_parserJs);
class BBCodeText extends (0, _textJsDefault.default) {
    constructor(scene, x, y, text, style){
        var parser = new (0, _parserJsDefault.default)(style);
        super(scene, x, y, text, style, "rexBBCodeText", parser);
    }
    setDelimiters(delimiterLeft, delimiterRight) {
        this.parse.setDelimiters(delimiterLeft, delimiterRight);
        return this;
    }
}
exports.default = BBCodeText;

},{"../textbase/Text.js":"1f05k","./parser/Parser.js":"kQnek","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1f05k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textBaseJs = require("../../textbase/TextBase.js");
var _textBaseJsDefault = parcelHelpers.interopDefault(_textBaseJs);
var _textStyleJs = require("../../textbase/textstyle/TextStyle.js");
var _textStyleJsDefault = parcelHelpers.interopDefault(_textStyleJs);
var _canvasTextJs = require("./canvastext/CanvasText.js");
var _canvasTextJsDefault = parcelHelpers.interopDefault(_canvasTextJs);
var _poolJs = require("../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
var _wrapTextLinesPoolJs = require("./wraptext/WrapTextLinesPool.js");
var _wrapTextLinesPoolJsDefault = parcelHelpers.interopDefault(_wrapTextLinesPoolJs);
var _constJs = require("../../textbase/const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _imageManagerJs = require("../../../utils/texture/imagemanager/ImageManager.js");
var _imageManagerJsDefault = parcelHelpers.interopDefault(_imageManagerJs);
var _copyCanvasToTextureJs = require("../../../utils/texture/CopyCanvasToTexture.js");
var _copyCanvasToTextureJsDefault = parcelHelpers.interopDefault(_copyCanvasToTextureJs);
var _appendTextJs = require("../../../utils/text/AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const AddToDOM = Phaser.DOM.AddToDOM;
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const RemoveFromDOM = Phaser.DOM.RemoveFromDOM;
const SPLITREGEXP = (0, _constJsDefault.default).SPLITREGEXP;
// Reuse objects can increase performance
var SharedPensPools = null;
var SharedLinesPool = null;
var SharedWrapTextLinesPool = null;
class Text extends (0, _textBaseJsDefault.default) {
    constructor(scene, x, y, text, style, type, parser){
        if (IsPlainObject(x)) {
            var config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            text = GetValue(config, "text", "");
            style = GetValue(config, "style");
        }
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        super(scene, type);
        this.renderer = scene.sys.game.renderer;
        this.setPosition(x, y);
        this.setOrigin(0, 0);
        this.initPipeline();
        this.canvas = CanvasPool.create(this);
        this.context = this.canvas.getContext("2d", {
            willReadFrequently: true
        });
        this._imageManager = undefined;
        if (style) {
            // Override align
            if (style.hasOwnProperty("align")) {
                var halign = style.align;
                delete style.align;
                style.halign = halign;
            }
            // Has Stroke color but stroke thinkness, set stroke thinkness to 1
            if (style.hasOwnProperty("stroke") && !style.hasOwnProperty("strokeThickness")) style.strokeThickness = 1;
        }
        this.style = new (0, _textStyleJsDefault.default)(this, style);
        var imageData = GetValue(style, "images", undefined);
        if (imageData) this.addImage(imageData);
        this.autoRound = true;
        this._text = undefined;
        this.padding = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.width = 1;
        this.height = 1;
        this.dirty = false;
        //  If resolution wasn't set, force it to 1
        if (this.style.resolution === 0) this.style.resolution = 1;
        this._crop = this.resetCropObject();
        //  Create a Texture for this Text object
        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);
        //  Get the frame
        this.frame = this.texture.get();
        //  Set the resolution
        this.frame.source.resolution = this.style.resolution;
        if (this.renderer && this.renderer.gl) {
            //  Clear the default 1x1 glTexture, as we override it later
            this.renderer.deleteTexture(this.frame.source.glTexture);
            this.frame.source.glTexture = null;
        }
        var sharedPoolMode = GetValue(style, "sharedPool", true);
        var pensPool, linesPool, wrapTextLinesPool;
        if (sharedPoolMode) {
            // Use pools first time
            if (!SharedPensPools) {
                SharedPensPools = {};
                SharedLinesPool = new (0, _poolJsDefault.default)();
                SharedWrapTextLinesPool = new (0, _wrapTextLinesPoolJsDefault.default)();
                // Remove cached data
                this.scene.game.events.once("destroy", function() {
                    SharedPensPools = null;
                    SharedLinesPool = null;
                    SharedWrapTextLinesPool = null;
                });
            }
            if (!SharedPensPools.hasOwnProperty(type)) SharedPensPools[type] = new (0, _poolJsDefault.default)();
            pensPool = SharedPensPools[type];
            linesPool = SharedLinesPool;
            wrapTextLinesPool = SharedWrapTextLinesPool;
        } else {
            pensPool = new (0, _poolJsDefault.default)();
            linesPool = new (0, _poolJsDefault.default)();
            wrapTextLinesPool = new (0, _wrapTextLinesPoolJsDefault.default)();
        }
        this.canvasText = new (0, _canvasTextJsDefault.default)({
            parent: this,
            context: this.context,
            parser: parser,
            style: this.style,
            pensPool: pensPool,
            linesPool: linesPool,
            wrapTextLinesPool: wrapTextLinesPool
        });
        this.parser = parser;
        this.initRTL();
        if (style && style.padding) this.setPadding(style.padding);
        this.setText(text);
        this.setUrlTagCursorStyle(GetValue(style, "urlTagCursorStyle", "pointer"));
        if (GetValue(style, "interactive", false)) this.setInteractive();
    }
    preDestroy() {
        RemoveFromDOM(this.canvas);
        // Do nothing if canvas did not add to parent node before
        this.canvasText.destroy();
        this.canvasText = undefined;
        if (this._imageManager) {
            this._imageManager.destroy();
            this._imageManager = undefined;
        }
        CanvasPool.remove(this.canvas);
        this.texture.destroy();
    }
    set text(value) {
        this.setText(value);
    }
    get text() {
        return this._text;
    }
    initRTL() {
        if (!this.style.rtl) return;
        //  Here is where the crazy starts.
        //
        //  Due to browser implementation issues, you cannot fillText BiDi text to a canvas
        //  that is not part of the DOM. It just completely ignores the direction property.
        this.canvas.dir = "rtl";
        //  Experimental atm, but one day ...
        this.context.direction = "rtl";
        //  Add it to the DOM, but hidden within the parent canvas.
        this.canvas.style.display = "none";
        AddToDOM(this.canvas, this.scene.sys.canvas);
        //  And finally we set the x origin
        this.originX = 1;
    }
    setRTL(rtl) {
        if (rtl === undefined) rtl = true;
        var style = this.style;
        if (style.rtl === rtl) return this;
        style.rtl = rtl;
        if (rtl) {
            this.canvas.dir = "rtl";
            this.context.direction = "rtl";
            this.canvas.style.display = "none";
            AddToDOM(this.canvas, this.scene.sys.canvas);
        } else {
            this.canvas.dir = "ltr";
            this.context.direction = "ltr";
        }
        if (style.halign === "left") style.halign = "right";
        else if (style.halign === "right") style.halign = "left";
        if (this._imageManager) {
            var images = this._imageManager.images;
            for(var key in images)images[key].originX = 1 - images[key].originX;
        }
        return this;
    }
    setText(value) {
        if (value == null) value = "";
        else if (Array.isArray(value)) value = value.join("\n");
        else value = value.toString();
        if (value === this._text) return this;
        this._text = value;
        this.updateText();
        return this;
    }
    setPadding(left, top, right, bottom) {
        if (typeof left === "object") {
            var config = left;
            //  If they specify x and/or y this applies to all
            var x = GetValue(config, "x", null);
            if (x !== null) {
                left = x;
                right = x;
            } else {
                left = GetValue(config, "left", 0);
                right = GetValue(config, "right", left);
            }
            var y = GetValue(config, "y", null);
            if (y !== null) {
                top = y;
                bottom = y;
            } else {
                top = GetValue(config, "top", 0);
                bottom = GetValue(config, "bottom", top);
            }
        } else {
            if (left === undefined) left = 0;
            if (top === undefined) top = left;
            if (right === undefined) right = left;
            if (bottom === undefined) bottom = top;
        }
        this.padding.left = left;
        this.padding.top = top;
        this.padding.right = right;
        this.padding.bottom = bottom;
        return this.updateText(false);
    }
    updateText(runWrap) {
        if (runWrap === undefined) runWrap = true;
        var canvasText = this.canvasText;
        // wrap text to pens
        var style = this.style;
        if (runWrap) canvasText.updatePenManager(this._text, style.wrapMode, style.wrapWidth, style.lineHeight);
        // resize
        var padding = this.padding;
        var textWidth, textHeight;
        var linesWidth = Math.ceil(canvasText.linesWidth);
        if (style.fixedWidth === 0) {
            this.width = linesWidth + padding.left + padding.right;
            textWidth = linesWidth;
        } else {
            this.width = style.fixedWidth;
            textWidth = this.width - padding.left - padding.right;
            if (textWidth < linesWidth) textWidth = linesWidth;
        }
        if (style.fixedHeight === 0) {
            this.height = canvasText.linesHeight + padding.top + padding.bottom;
            textHeight = canvasText.linesHeight;
        } else {
            this.height = style.fixedHeight;
            textHeight = this.height - padding.top - padding.bottom;
            if (textHeight < canvasText.linesHeight) textHeight = canvasText.linesHeight;
        }
        var w = this.width;
        var h = this.height;
        this.updateDisplayOrigin();
        var resolution = style.resolution;
        w *= resolution;
        h *= resolution;
        w = Math.max(Math.ceil(w), 1);
        h = Math.max(Math.ceil(h), 1);
        var canvas = this.canvas;
        var context = this.context;
        if (canvas.width !== w || canvas.height !== h) {
            canvas.width = w;
            canvas.height = h;
            this.frame.setSize(w, h);
        } else context.clearRect(0, 0, w, h);
        context.save();
        context.scale(resolution, resolution);
        // draw
        var startX = !this.style.rtl ? padding.left : padding.right;
        var startY = padding.top;
        canvasText.draw(startX, startY, textWidth, textHeight);
        context.restore();
        if (this.renderer && this.renderer.gl) {
            this.frame.source.glTexture = this.renderer.canvasToTexture(canvas, this.frame.source.glTexture, true);
            this.frame.glTexture = this.frame.source.glTexture;
        }
        this.dirty = true;
        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = this.width;
            input.hitArea.height = this.height;
        }
        return this;
    }
    toJSON() {
        var out = Components.ToJSON(this);
        //  Extra Text data is added here
        var data = {
            autoRound: this.autoRound,
            text: this._text,
            style: this.style.toJSON(),
            resolution: this.resolution,
            padding: {
                left: this.padding.left,
                right: this.padding.right,
                top: this.padding.top,
                bottom: this.padding.bottom
            }
        };
        out.data = data;
        return out;
    }
    setInteractive(hitArea, hitAreaCallback, dropZone) {
        var isInteractived = !!this.input;
        GameObject.prototype.setInteractive.call(this, hitArea, hitAreaCallback, dropZone);
        if (!isInteractived) this.canvasText.setInteractive();
        return this;
    }
    setUrlTagCursorStyle(cursor) {
        this.urlTagCursorStyle = cursor;
        return this;
    }
    get urlTagCursorStyle() {
        return this.canvasText.urlTagCursorStyle;
    }
    set urlTagCursorStyle(value) {
        this.canvasText.urlTagCursorStyle = value;
    }
    getWrappedText(text, start, end) {
        text = this.canvasText.getText(text, start, end, true);
        return text.split(SPLITREGEXP);
    }
    getPlainText(text, start, end) {
        return this.canvasText.getPlainText(text, start, end);
    }
    getText(text, start, end, wrap) {
        if (wrap === undefined) wrap = false;
        return this.canvasText.getText(text, start, end, wrap);
    }
    getSubString(text, start, end) {
        return this.getText(text, start, end);
    }
    copyPenManager(penManager) {
        return this.canvasText.copyPenManager(penManager);
    }
    getPenManager(text, penManager) {
        return this.canvasText.getPenManager(text, penManager);
    }
    setSize(width, height) {
        return this.setFixedSize(width, height);
    }
    resize(width, height) {
        return this.setFixedSize(width, height);
    }
    get imageManager() {
        if (!this._imageManager) this._imageManager = new (0, _imageManagerJsDefault.default)(this.scene);
        return this._imageManager;
    }
    addImage(key, config) {
        this.imageManager.add(key, config);
        return this;
    }
    drawAreaBounds(graphics, color) {
        this.canvasText.hitAreaManager.drawBounds(graphics, color, this);
        return this;
    }
    generateTexture(key, x, y, width, height) {
        var srcCanvas = this.canvas;
        if (width === undefined) width = srcCanvas.width;
        else width *= this.resolution;
        if (height === undefined) height = srcCanvas.height;
        else height *= this.resolution;
        (0, _copyCanvasToTextureJsDefault.default)(this.scene, srcCanvas, key, x, y, width, height);
        return this;
    }
}
var methods = {
    appendText: (0, _appendTextJsDefault.default)
};
Object.assign(Text.prototype, methods);
exports.default = Text;

},{"../../textbase/TextBase.js":"7Kfaq","../../textbase/textstyle/TextStyle.js":"3SHQS","./canvastext/CanvasText.js":"4ouRK","../../../pool.js":"lDewQ","./wraptext/WrapTextLinesPool.js":"hoA4s","../../textbase/const.js":"ljFJV","../../../utils/texture/imagemanager/ImageManager.js":"bIBHI","../../../utils/texture/CopyCanvasToTexture.js":"8Il0B","../../../utils/text/AppendText.js":"24uHz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Kfaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderJs = require("./render/Render.js");
var _renderJsDefault = parcelHelpers.interopDefault(_renderJs);
var _measureTextMarginsJs = require("./textstyle/MeasureTextMargins.js");
var _measureTextMarginsJsDefault = parcelHelpers.interopDefault(_measureTextMarginsJs);
const GameObject = Phaser.GameObjects.GameObject;
class TextBase extends GameObject {
    setStyle(style) {
        return this.style.setStyle(style);
    }
    setFont(font) {
        return this.style.setFont(font);
    }
    setFontFamily(family) {
        return this.style.setFontFamily(family);
    }
    setFontSize(size) {
        return this.style.setFontSize(size);
    }
    setFontStyle(style) {
        return this.style.setFontStyle(style);
    }
    setTestString(string) {
        return this.style.setTestString(string);
    }
    setFixedSize(width, height) {
        return this.style.setFixedSize(width, height);
    }
    setBackgroundColor(color, color2, isHorizontalGradient) {
        return this.style.setBackgroundColor(color, color2, isHorizontalGradient);
    }
    setBackgroundStrokeColor(color, lineWidth) {
        return this.style.setBackgroundStrokeColor(color, lineWidth);
    }
    setBackgroundCornerRadius(radius, iteration) {
        return this.style.setBackgroundCornerRadius(radius, iteration);
    }
    setFill(color) {
        return this.style.setFill(color);
    }
    setColor(color) {
        return this.style.setColor(color);
    }
    setStroke(color, thickness) {
        return this.style.setStroke(color, thickness);
    }
    setShadow(x, y, color, blur, shadowStroke, shadowFill) {
        return this.style.setShadow(x, y, color, blur, shadowStroke, shadowFill);
    }
    setShadowOffset(x, y) {
        return this.style.setShadowOffset(x, y);
    }
    setShadowColor(color) {
        return this.style.setShadowColor(color);
    }
    setShadowBlur(blur) {
        return this.style.setShadowBlur(blur);
    }
    setShadowStroke(enabled) {
        return this.style.setShadowStroke(enabled);
    }
    setShadowFill(enabled) {
        return this.style.setShadowFill(enabled);
    }
    setWrapMode(mode) {
        return this.style.setWrapMode(mode);
    }
    setWrapWidth(width) {
        return this.style.setWrapWidth(width);
    }
    // Align with built-in text game object
    setWordWrapWidth(width) {
        return this.style.setWrapWidth(width);
    }
    setAlign(align) {
        return this.style.setHAlign(align);
    }
    setHAlign(align) {
        return this.style.setHAlign(align);
    }
    setVAlign(align) {
        return this.style.setVAlign(align);
    }
    setLineSpacing(value) {
        return this.style.setLineSpacing(value);
    }
    set lineSpacing(value) {
        this.setLineSpacing(value);
    }
    get lineSpacing() {
        return this.style.lineSpacing;
    }
    setXOffset(value) {
        return this.style.setXOffset(value);
    }
    setMaxLines(max) {
        return this.style.setMaxLines(max);
    }
    setResolution(value) {
        return this.style.setResolution(value);
    }
    getTextMetrics() {
        return this.style.getTextMetrics();
    }
    setTextMetrics(metrics, font) {
        return this.style.setTextMetrics(metrics, font);
    }
    measureTextMargins(testString, out) {
        return (0, _measureTextMarginsJsDefault.default)(this.style, testString, out);
    }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(TextBase, [
    Components.Alpha,
    Components.BlendMode,
    Components.ComputedSize,
    Components.Crop,
    Components.Depth,
    Components.Flip,
    Components.GetBounds,
    Components.Mask,
    Components.Origin,
    Components.Pipeline,
    Components.PostPipeline,
    Components.ScrollFactor,
    Components.Tint,
    Components.Transform,
    Components.Visible,
    (0, _renderJsDefault.default)
]);
exports.default = TextBase;

},{"./render/Render.js":"CgyYT","./textstyle/MeasureTextMargins.js":"jrxjK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"CgyYT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webGLRendererJs = require("./WebGLRenderer.js");
var _webGLRendererJsDefault = parcelHelpers.interopDefault(_webGLRendererJs);
var _canvasRendererJs = require("./CanvasRenderer.js");
var _canvasRendererJsDefault = parcelHelpers.interopDefault(_canvasRendererJs);
exports.default = {
    renderWebGL: (0, _webGLRendererJsDefault.default),
    renderCanvas: (0, _canvasRendererJsDefault.default)
};

},{"./WebGLRenderer.js":"dMULG","./CanvasRenderer.js":"5hJLW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dMULG":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Utils = Phaser.Renderer.WebGL.Utils;
/**
 * Renders this Game Object with the WebGL Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderWebGL
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */ var WebGLRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.width === 0 || src.height === 0) return;
    camera.addToRenderList(src);
    var frame = src.frame;
    var width = frame.width;
    var height = frame.height;
    var getTint = Utils.getTintAppendFloatAlpha;
    var pipeline = renderer.pipelines.set(src.pipeline, src);
    var textureUnit = pipeline.setTexture2D(frame.glTexture, src);
    renderer.pipelines.preBatch(src);
    pipeline.batchTexture(src, frame.glTexture, width, height, src.x, src.y, width / src.style.resolution, height / src.style.resolution, src.scaleX, src.scaleY, src.rotation, src.flipX, src.flipY, src.scrollFactorX, src.scrollFactorY, src.displayOriginX, src.displayOriginY, 0, 0, width, height, getTint(src.tintTopLeft, camera.alpha * src._alphaTL), getTint(src.tintTopRight, camera.alpha * src._alphaTR), getTint(src.tintBottomLeft, camera.alpha * src._alphaBL), getTint(src.tintBottomRight, camera.alpha * src._alphaBR), src.tintFill, 0, 0, camera, parentMatrix, false, textureUnit);
    renderer.pipelines.postBatch(src);
};
exports.default = WebGLRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hJLW":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ /**
 * Renders this Game Object with the Canvas Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderCanvas
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CanvasRenderer = function(renderer, src, camera, parentMatrix) {
    if (src.width === 0 || src.height === 0) return;
    camera.addToRenderList(src);
    renderer.batchSprite(src, src.frame, camera, parentMatrix);
};
exports.default = CanvasRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jrxjK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
var MeasureTextMargins = function(textStyle, testString, out) {
    if (out === undefined) out = {};
    var canvas = CanvasPool.create(this);
    var context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    textStyle.syncFont(canvas, context);
    var metrics = context.measureText(testString);
    var width = Math.ceil(metrics.width * textStyle.baselineX);
    var baseline = width;
    var height = 2 * baseline;
    baseline = baseline * textStyle.baselineY | 0;
    canvas.width = width;
    canvas.height = height;
    context.fillStyle = "#f00";
    context.fillRect(0, 0, width, height);
    context.font = textStyle._font;
    context.textBaseline = "alphabetic";
    context.fillStyle = "#000";
    context.fillText(textStyle.testString, 0, baseline);
    out.left = 0;
    if (width === 0 || height === 0 || !context.getImageData(0, 0, width, height)) {
        CanvasPool.remove(canvas);
        return out;
    }
    var imagedata = context.getImageData(0, 0, width, height).data;
    var stop = false;
    for(var x = 0; x < width; x++){
        for(var y = 0; y < height; y++){
            var idx = (y * width + x) * 4;
            if (imagedata[idx] !== 255) {
                out.left = x;
                stop = true;
                break;
            }
        }
        if (stop) break;
    }
    CanvasPool.remove(canvas);
    return out;
};
exports.default = MeasureTextMargins;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3SHQS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propertyMapJs = require("./PropertyMap.js");
var _propertyMapJsDefault = parcelHelpers.interopDefault(_propertyMapJs);
var _measureTextJs = require("./MeasureText.js");
var _measureTextJsDefault = parcelHelpers.interopDefault(_measureTextJs);
var _constJs = require("../const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _getStyleJs = require("../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextStyle {
    constructor(text, style, propertyMap){
        this.parent = text;
        // parent.updateText()
        // parent.width, parent.height
        if (propertyMap === undefined) propertyMap = (0, _propertyMapJsDefault.default);
        this.propertyMap = propertyMap;
        this.backgroundColor;
        this.backgroundColor2;
        this.backgroundHorizontalGradient;
        this.backgroundStrokeColor;
        this.backgroundStrokeLineWidth;
        this.backgroundCornerRadius;
        this.backgroundCornerIteration;
        this.fontFamily;
        this.fontSize;
        this.fontStyle;
        this.color;
        this.stroke;
        this.strokeThickness;
        this.shadowOffsetX;
        this.shadowOffsetY;
        this.shadowColor;
        this.shadowBlur;
        this.shadowStroke;
        this.shadowFill;
        this.underlineColor;
        this.underlineThickness;
        this.underlineOffset;
        this.strikethroughColor;
        this.strikethroughThickness;
        this.strikethroughOffset;
        this.halign;
        this.valign;
        this.maxLines;
        this.fixedWidth;
        this.fixedHeight;
        this.resolution;
        this.lineSpacing;
        this.xOffset;
        this.rtl;
        this.testString;
        this.baselineX;
        this.baselineY;
        this.wrapMode;
        this.wrapWidth;
        this.wrapCallback;
        this.wrapCallbackScope;
        this._font;
        //  Set to defaults + user style
        this.setStyle(style, false, true);
    }
    get isWrapFitMode() {
        return this.fixedWidth > 0 && this.wrapMode !== (0, _constJsDefault.default).NO_WRAP && this.wrapWidth === 0;
    }
    setStyle(style, updateText, setDefaults) {
        if (updateText === undefined) updateText = true;
        if (setDefaults === undefined) setDefaults = false;
        if (style && style.hasOwnProperty("wrap")) {
            var wrap = style.wrap;
            if (wrap.hasOwnProperty("mode")) {
                var mode = wrap.mode;
                if (typeof mode === "string") wrap.mode = WRAPMODE[mode];
            } else if (wrap.hasOwnProperty("width")) wrap.mode = 1;
        }
        // default halign of RTL is 'right'
        if (style && style.rtl && setDefaults && !style.hasOwnProperty("halign")) style.halign = "right";
        //  Avoid type mutation
        if (style && style.hasOwnProperty("fontSize") && typeof style.fontSize === "number") style.fontSize = style.fontSize.toString() + "px";
        var propertyMap = this.propertyMap;
        for(var key in propertyMap){
            var prop = propertyMap[key]; // [ Object Key, Default Value, preCallback ]
            var objKey = prop[0];
            var defaultValue = setDefaults ? prop[1] : this[key];
            var postCallback = prop[2];
            if (key === "wrapCallback" || key === "wrapCallbackScope") // Callback & scope should be set without processing the values
            this[key] = GetValue(style, objKey, defaultValue);
            else {
                var value = GetAdvancedValue(style, objKey, defaultValue);
                if (postCallback) value = postCallback(value);
                this[key] = value;
            }
        }
        //  Allow for 'font' override
        var font = GetValue(style, "font", null);
        if (font === null) this._font = this.fontStyle + " " + this.fontSize + " " + this.fontFamily;
        else this._font = font;
        //  Allow for 'fill' to be used in place of 'color'
        var fill = GetValue(style, "fill", null);
        if (fill !== null) this.color = (0, _getStyleJsDefault.default)(fill);
        var metrics = GetValue(style, "metrics", false);
        //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning
        //  Doing this is reset if you then change the font of this TextStyle after creation
        if (metrics) this.metrics = {
            ascent: GetValue(metrics, "ascent", 0),
            descent: GetValue(metrics, "descent", 0),
            fontSize: GetValue(metrics, "fontSize", 0)
        };
        else if (updateText || !this.metrics) this.metrics = (0, _measureTextJsDefault.default)(this);
        if (updateText) return this.parent.updateText();
        else return this.parent;
    }
    syncFont(canvas, context) {
        context.font = this._font;
    }
    syncStyle(canvas, context) {
        context.textBaseline = "alphabetic";
        context.fillStyle = this.color;
        context.strokeStyle = this.stroke;
        context.lineWidth = this.strokeThickness;
        context.lineCap = "round";
        context.lineJoin = "round";
    }
    syncShadow(context, enabled) {
        if (enabled) {
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
        } else {
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
            context.shadowColor = 0;
            context.shadowBlur = 0;
        }
    }
    update(recalculateMetrics) {
        if (recalculateMetrics) {
            this._font = `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`.trim();
            this.metrics = (0, _measureTextJsDefault.default)(this);
        }
        return this.parent.updateText(recalculateMetrics);
    }
    buildFont() {
        var newFont = `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`.trim();
        if (newFont !== this._font) this._font = newFont;
        return this;
    }
    setFont(font) {
        if (typeof font === "string") {
            this.fontFamily = font;
            this.fontSize = "";
            this.fontStyle = "";
        } else {
            this.fontFamily = GetValue(font, "fontFamily", "Courier");
            this.fontSize = GetValue(font, "fontSize", "16px");
            this.fontStyle = GetValue(font, "fontStyle", "");
        }
        return this.update(true);
    }
    setFontFamily(family) {
        this.fontFamily = family;
        return this.update(true);
    }
    setFontStyle(style) {
        this.fontStyle = style;
        return this.update(true);
    }
    setFontSize(size) {
        if (typeof size === "number") size = size.toString() + "px";
        this.fontSize = size;
        return this.update(true);
    }
    setTestString(string) {
        this.testString = string;
        return this.update(true);
    }
    setFixedSize(width, height) {
        this.fixedWidth = width;
        this.fixedHeight = height;
        if (width) this.parent.width = width;
        if (height) this.parent.height = height;
        return this.update(this.isWrapFitMode);
    }
    setResolution(value) {
        this.resolution = value;
        return this.update(false);
    }
    setLineSpacing(value) {
        this.lineSpacing = value;
        return this.update(false);
    }
    setXOffset(value) {
        this.xOffset = value;
        return this.update(false);
    }
    setBackgroundColor(color, color2, isHorizontalGradient) {
        if (isHorizontalGradient === undefined) isHorizontalGradient = true;
        this.backgroundColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        this.backgroundColor2 = (0, _getStyleJsDefault.default)(color2, this.parent.canvas, this.parent.context);
        this.backgroundHorizontalGradient = isHorizontalGradient;
        return this.update(false);
    }
    setBackgroundStrokeColor(color, lineWidth) {
        this.backgroundStrokeColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        this.backgroundStrokeLineWidth = lineWidth;
        return this.update(false);
    }
    setBackgroundCornerRadius(radius, iteration) {
        this.backgroundCornerRadius = radius;
        this.backgroundCornerIteration = iteration;
        return this.update(false);
    }
    setFill(color) {
        this.color = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        return this.update(false);
    }
    setColor(color) {
        this.color = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        return this.update(false);
    }
    setStroke(color, thickness) {
        if (color === undefined) //  Reset the stroke to zero (disabling it)
        this.strokeThickness = 0;
        else {
            if (thickness === undefined) thickness = this.strokeThickness;
            this.stroke = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
            this.strokeThickness = thickness;
        }
        return this.update(true);
    }
    setShadow(x, y, color, blur, shadowStroke, shadowFill) {
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (color === undefined) color = "#000";
        if (blur === undefined) blur = 0;
        if (shadowStroke === undefined) shadowStroke = false;
        if (shadowFill === undefined) shadowFill = true;
        this.shadowOffsetX = x;
        this.shadowOffsetY = y;
        this.shadowColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        this.shadowBlur = blur;
        this.shadowStroke = shadowStroke;
        this.shadowFill = shadowFill;
        return this.update(false);
    }
    setShadowOffset(x, y) {
        if (x === undefined) x = 0;
        if (y === undefined) y = x;
        this.shadowOffsetX = x;
        this.shadowOffsetY = y;
        return this.update(false);
    }
    setShadowColor(color) {
        if (color === undefined) color = "#000";
        this.shadowColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        return this.update(false);
    }
    setShadowBlur(blur) {
        if (blur === undefined) blur = 0;
        this.shadowBlur = blur;
        return this.update(false);
    }
    setShadowStroke(enabled) {
        this.shadowStroke = enabled;
        return this.update(false);
    }
    setShadowFill(enabled) {
        this.shadowFill = enabled;
        return this.update(false);
    }
    setUnderline(color, thickness, offset) {
        if (color === undefined) color = "#000";
        if (thickness === undefined) thickness = 0;
        if (offset === undefined) offset = 0;
        this.underlineColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        this.underlineThickness = thickness;
        this.underlineOffset = offset;
        return this.update(false);
    }
    setUnderlineColor(color) {
        if (color === undefined) color = "#000";
        this.underlineColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        return this.update(false);
    }
    setUnderlineThickness(thickness) {
        if (thickness === undefined) thickness = 0;
        this.underlineThickness = thickness;
        return this.update(false);
    }
    setUnderlineOffset(offset) {
        if (offset === undefined) offset = 0;
        this.underlineOffset = offset;
        return this.update(false);
    }
    setStrikethrough(color, thickness, offset) {
        if (color === undefined) color = "#000";
        if (thickness === undefined) thickness = 0;
        if (offset === undefined) offset = 0;
        this.strikethroughColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        this.strikethroughThickness = thickness;
        this.strikethroughOffset = offset;
        return this.update(false);
    }
    setStrikethroughColor(color) {
        if (color === undefined) color = "#000";
        this.strikethroughColor = (0, _getStyleJsDefault.default)(color, this.parent.canvas, this.parent.context);
        return this.update(false);
    }
    setStrikethroughThickness(thickness) {
        if (thickness === undefined) thickness = 0;
        this.strikethroughThickness = thickness;
        return this.update(false);
    }
    setStrikethroughOffset(offset) {
        if (offset === undefined) offset = 0;
        this.strikethroughOffset = offset;
        return this.update(false);
    }
    setWrapMode(mode) {
        if (typeof mode === "string") mode = WRAPMODE[mode.toLowerCase()] || 0;
        this.wrapMode = mode;
        return this.update(true);
    }
    setWrapWidth(width) {
        this.wrapWidth = width;
        return this.update(false);
    }
    setAlign(halign, valign) {
        if (halign === undefined) halign = "left";
        if (valign === undefined) valign = "top";
        this.halign = halign;
        this.valign = valign;
        return this.update(false);
    }
    setHAlign(halign) {
        if (halign === undefined) halign = "left";
        this.halign = halign;
        return this.update(false);
    }
    setVAlign(valign) {
        if (valign === undefined) valign = "top";
        this.valign = valign;
        return this.update(false);
    }
    setMaxLines(max) {
        if (max === undefined) max = 0;
        this.maxLines = max;
        return this.update(false);
    }
    getTextMetrics() {
        var metrics = this.metrics;
        return {
            ascent: metrics.ascent,
            descent: metrics.descent,
            fontSize: metrics.fontSize
        };
    }
    setTextMetrics(metrics, font) {
        this.metrics.ascent = metrics.ascent;
        this.metrics.descent = metrics.descent;
        this.metrics.fontSize = metrics.fontSize;
        if (font) {
            if (typeof font === "string") {
                this.fontFamily = font;
                this.fontSize = "";
                this.fontStyle = "";
            } else {
                this.fontFamily = GetValue(font, "fontFamily", this.fontFamily);
                this.fontSize = GetValue(font, "fontSize", this.fontSize);
                this.fontStyle = GetValue(font, "fontStyle", this.fontStyle);
            }
        }
        return this.parent.updateText(true);
    }
    get lineHeight() {
        return this.metrics.fontSize + this.strokeThickness + this.lineSpacing;
    }
    toJSON() {
        var output = {};
        var propertyMap = this.propertyMap;
        for(var key in propertyMap)output[key] = this[key];
        output.metrics = this.getTextMetrics();
        return output;
    }
    destroy() {
        this.parent = undefined;
    }
}
const WRAPMODE = {
    none: (0, _constJsDefault.default).NO_WRAP,
    word: (0, _constJsDefault.default).WORD_WRAP,
    char: (0, _constJsDefault.default).CHAR_WRAP,
    character: (0, _constJsDefault.default).CHAR_WRAP
};
exports.default = TextStyle;

},{"./PropertyMap.js":"bzeqO","./MeasureText.js":"6sRoA","../const.js":"ljFJV","../../../utils/canvas/GetStyle.js":"65BAh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzeqO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getStyleJs = require("../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
//  Key: [ Object Key, Default Value, postCallback ]
var PropertyMap = {
    // background
    backgroundColor: [
        "backgroundColor",
        null,
        (0, _getStyleJsDefault.default)
    ],
    backgroundColor2: [
        "backgroundColor2",
        null,
        (0, _getStyleJsDefault.default)
    ],
    backgroundHorizontalGradient: [
        "backgroundHorizontalGradient",
        true,
        null
    ],
    backgroundStrokeColor: [
        "backgroundStrokeColor",
        null,
        (0, _getStyleJsDefault.default)
    ],
    backgroundStrokeLineWidth: [
        "backgroundStrokeLineWidth",
        2,
        null
    ],
    backgroundCornerRadius: [
        "backgroundCornerRadius",
        0,
        null
    ],
    backgroundCornerIteration: [
        "backgroundCornerIteration",
        null,
        null
    ],
    // font
    fontFamily: [
        "fontFamily",
        "Courier",
        null
    ],
    fontSize: [
        "fontSize",
        "16px",
        null
    ],
    fontStyle: [
        "fontStyle",
        "",
        null
    ],
    color: [
        "color",
        "#fff",
        (0, _getStyleJsDefault.default)
    ],
    stroke: [
        "stroke",
        "#fff",
        (0, _getStyleJsDefault.default)
    ],
    strokeThickness: [
        "strokeThickness",
        0,
        null
    ],
    shadowOffsetX: [
        "shadow.offsetX",
        0,
        null
    ],
    shadowOffsetY: [
        "shadow.offsetY",
        0,
        null
    ],
    shadowColor: [
        "shadow.color",
        "#000",
        (0, _getStyleJsDefault.default)
    ],
    shadowBlur: [
        "shadow.blur",
        0,
        null
    ],
    shadowStroke: [
        "shadow.stroke",
        false,
        null
    ],
    shadowFill: [
        "shadow.fill",
        false,
        null
    ],
    // underline
    underlineColor: [
        "underline.color",
        "#000",
        (0, _getStyleJsDefault.default)
    ],
    underlineThickness: [
        "underline.thickness",
        0,
        null
    ],
    underlineOffset: [
        "underline.offset",
        0,
        null
    ],
    // strikethrough
    strikethroughColor: [
        "strikethrough.color",
        "#000",
        (0, _getStyleJsDefault.default)
    ],
    strikethroughThickness: [
        "strikethrough.thickness",
        0,
        null
    ],
    strikethroughOffset: [
        "strikethrough.offset",
        0,
        null
    ],
    // align
    halign: [
        "halign",
        "left",
        null
    ],
    valign: [
        "valign",
        "top",
        null
    ],
    // size
    maxLines: [
        "maxLines",
        0,
        null
    ],
    fixedWidth: [
        "fixedWidth",
        0,
        null
    ],
    fixedHeight: [
        "fixedHeight",
        0,
        null
    ],
    resolution: [
        "resolution",
        0,
        null
    ],
    lineSpacing: [
        "lineSpacing",
        0,
        null
    ],
    xOffset: [
        "xOffset",
        0,
        null
    ],
    rtl: [
        "rtl",
        false,
        null
    ],
    testString: [
        "testString",
        "|M\xc3‰qgy",
        null
    ],
    baselineX: [
        "baselineX",
        1.2,
        null
    ],
    baselineY: [
        "baselineY",
        1.4,
        null
    ],
    // wrap
    wrapMode: [
        "wrap.mode",
        0,
        null
    ],
    wrapWidth: [
        "wrap.width",
        0,
        null
    ],
    wrapCallback: [
        "wrap.callback",
        null
    ],
    wrapCallbackScope: [
        "wrap.callbackScope",
        null
    ]
};
exports.default = PropertyMap;

},{"../../../utils/canvas/GetStyle.js":"65BAh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sRoA":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
/**
 * Calculates the ascent, descent and fontSize of a given font style.
 *
 * @function Phaser.GameObjects.MeasureText
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Text.TextStyle} textStyle - The TextStyle object to measure.
 *
 * @return {object} An object containing the ascent, descent and fontSize of the TextStyle.
 */ var MeasureText = function(textStyle) {
    // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.
    var canvas = CanvasPool.create(this);
    // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.
    var context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    textStyle.syncFont(canvas, context);
    var metrics = context.measureText(textStyle.testString);
    if ("actualBoundingBoxAscent" in metrics) {
        var ascent = metrics.actualBoundingBoxAscent;
        var descent = metrics.actualBoundingBoxDescent;
        var output = {
            ascent: ascent,
            descent: descent,
            fontSize: ascent + descent
        };
        CanvasPool.remove(canvas);
        return output;
    }
    var width = Math.ceil(metrics.width * textStyle.baselineX);
    var baseline = width;
    var height = 2 * baseline;
    baseline = baseline * textStyle.baselineY | 0;
    canvas.width = width;
    canvas.height = height;
    context.fillStyle = "#f00";
    context.fillRect(0, 0, width, height);
    context.font = textStyle._font;
    context.textBaseline = "alphabetic";
    context.fillStyle = "#000";
    context.fillText(textStyle.testString, 0, baseline);
    var output = {
        ascent: 0,
        descent: 0,
        fontSize: 0
    };
    if (!context.getImageData(0, 0, width, height)) {
        output.ascent = baseline;
        output.descent = baseline + 6;
        output.fontSize = output.ascent + output.descent;
        CanvasPool.remove(canvas);
        return output;
    }
    var imagedata = context.getImageData(0, 0, width, height).data;
    var pixels = imagedata.length;
    var line = width * 4;
    var i;
    var j;
    var idx = 0;
    var stop = false;
    // ascent. scan from top to bottom until we find a non red pixel
    for(i = 0; i < baseline; i++){
        for(j = 0; j < line; j += 4)if (imagedata[idx + j] !== 255) {
            stop = true;
            break;
        }
        if (!stop) idx += line;
        else break;
    }
    output.ascent = baseline - i;
    idx = pixels - line;
    stop = false;
    // descent. scan from bottom to top until we find a non red pixel
    for(i = height; i > baseline; i--){
        for(j = 0; j < line; j += 4)if (imagedata[idx + j] !== 255) {
            stop = true;
            break;
        }
        if (!stop) idx -= line;
        else break;
    }
    output.descent = i - baseline;
    output.fontSize = output.ascent + output.descent;
    CanvasPool.remove(canvas);
    return output;
};
exports.default = MeasureText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljFJV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CONST = {
    // new line mode
    NO_NEWLINE: 0,
    RAW_NEWLINE: 1,
    WRAPPED_NEWLINE: 2,
    // wrap mode
    NO_WRAP: 0,
    WORD_WRAP: 1,
    CHAR_WRAP: 2,
    // split lines
    SPLITREGEXP: /(?:\r\n|\r|\n)/
};
exports.default = CONST;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ouRK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawMethodsJs = require("./DrawMethods.js");
var _drawMethodsJsDefault = parcelHelpers.interopDefault(_drawMethodsJs);
var _penManagerJs = require("../penmanger/PenManager.js");
var _penManagerJsDefault = parcelHelpers.interopDefault(_penManagerJs);
var _hitAreaManagerJs = require("../hitareamanager/HitAreaManager.js");
var _hitAreaManagerJsDefault = parcelHelpers.interopDefault(_hitAreaManagerJs);
var _setInteractiveJs = require("./SetInteractive.js");
var _setInteractiveJsDefault = parcelHelpers.interopDefault(_setInteractiveJs);
var _constJs = require("../../../textbase/const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _wrapTextJs = require("../wraptext/WrapText.js");
var _wrapTextJsDefault = parcelHelpers.interopDefault(_wrapTextJs);
var _cloneJs = require("../../../../utils/object/Clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const NO_WRAP = (0, _constJsDefault.default).NO_WRAP;
const NO_NEWLINE = (0, _constJsDefault.default).NO_NEWLINE;
class CanvasText {
    constructor(config){
        this.parent = config.parent;
        this.scene = this.parent.scene;
        this.context = GetValue(config, "context", null);
        this.canvas = this.context.canvas;
        this.parser = GetValue(config, "parser", null);
        this.defaultStyle = GetValue(config, "style", null);
        this.autoRound = true;
        this.pensPool = config.pensPool; // Required
        this.linesPool = config.linesPool; // Required
        this.wrapTextLinesPool = config.wrapTextLinesPool; // Required
        this.penManager = this.newPenManager();
        this._tmpPenManager = null;
        this.hitAreaManager = new (0, _hitAreaManagerJsDefault.default)();
        this.lastHitAreaKey = null;
        this.urlTagCursorStyle = null;
        var context = this.context;
        this.getTextWidth = function(text) {
            return context.measureText(text).width;
        };
    }
    destroy() {
        this.parent = undefined;
        this.scene = undefined;
        this.context = undefined;
        this.canvas = undefined;
        this.parser = undefined;
        this.defaultStyle = undefined;
        if (this.penManager) {
            this.penManager.destroy();
            this.penManager = undefined;
        }
        if (this._tmpPenManager) {
            this._tmpPenManager.destroy();
            this._tmpPenManager = undefined;
        }
        if (this.hitAreaManager) {
            this.hitAreaManager.destroy();
            this.hitAreaManager = undefined;
        }
        this.pensPool = undefined;
        this.linesPool = undefined;
        this.wrapTextLinesPool = undefined;
    }
    updatePenManager(text, wrapMode, wrapWidth, lineHeight, penManager) {
        if (penManager === undefined) penManager = this.penManager;
        penManager.clear();
        if (text === "") return penManager;
        var textStyle = this.parent.style;
        if (textStyle.isWrapFitMode) {
            var padding = this.parent.padding;
            wrapWidth = textStyle.fixedWidth - padding.left - padding.right;
        }
        var canvas = this.canvas;
        var context = this.context;
        var MeasureText = function(text) {
            return context.measureText(text).width;
        };
        var cursorX = 0, cursorY = 0;
        var customTextWrapCallback = textStyle.wrapCallback, customTextWrapCallbackScope = textStyle.wrapCallbackScope;
        var reuseLines = true;
        var plainText, curProp, curStyle;
        var match = this.parser.splitText(text), result, wrapLines, wrapTextLinesPool = this.wrapTextLinesPool;
        for(var i = 0, len = match.length; i < len; i++){
            result = this.parser.tagTextToProp(match[i], curProp);
            plainText = result.plainText;
            curProp = result.prop;
            if (curProp.img) {
                var imgWidth = this.imageManager.getOuterWidth(curProp.img);
                if (wrapWidth > 0 && wrapMode !== NO_WRAP) {
                    if (wrapWidth < cursorX + imgWidth) {
                        penManager.addNewLinePen();
                        cursorY += lineHeight;
                        cursorX = 0;
                    }
                }
                penManager.addImagePen(cursorX, cursorY, imgWidth, (0, _cloneJsDefault.default)(curProp));
                cursorX += imgWidth;
            } else if (plainText !== "") {
                // wrap text to lines
                // Save the current context.
                context.save();
                curStyle = this.parser.propToContextStyle(this.defaultStyle, curProp);
                curStyle.buildFont();
                curStyle.syncFont(canvas, context);
                curStyle.syncStyle(canvas, context);
                if (!customTextWrapCallback) wrapLines = (0, _wrapTextJsDefault.default)(plainText, MeasureText, wrapMode, wrapWidth, cursorX, wrapTextLinesPool);
                else {
                    wrapLines = customTextWrapCallback.call(customTextWrapCallbackScope, plainText, MeasureText, wrapWidth, cursorX);
                    if (typeof wrapLines === "string") wrapLines = wrapLines.split("\n");
                    var n;
                    for(var j = 0, jLen = wrapLines.length; j < jLen; j++){
                        n = wrapLines[j];
                        if (typeof n === "string") wrapLines[j] = wrapTextLinesPool.getLine(n, MeasureText(n), j < jLen - 1 ? 2 : 0);
                        else reuseLines = false;
                    }
                } // customTextWrapCallback
                // add pens
                var n;
                for(var j = 0, jLen = wrapLines.length; j < jLen; j++){
                    n = wrapLines[j];
                    penManager.addTextPen(n.text, cursorX, cursorY, n.width, (0, _cloneJsDefault.default)(curProp), n.newLineMode);
                    if (n.newLineMode !== NO_NEWLINE) {
                        cursorX = 0;
                        cursorY += lineHeight;
                    } else cursorX += n.width;
                }
                if (reuseLines) wrapTextLinesPool.freeLines(wrapLines);
                wrapLines = null;
                context.restore();
            }
        }
        // Add strokeThinkness to last pen of each line
        for(var i = 0, len = this.lines.length; i < len; i++){
            var line = this.lines[i];
            var lastPen = line[line.length - 1];
            if (lastPen) lastPen.width += this.parser.getStrokeThinkness(this.defaultStyle, lastPen.prop);
        }
        return penManager;
    }
    get startXOffset() {
        var defaultStyle = this.defaultStyle;
        return defaultStyle.strokeThickness / 2 + defaultStyle.xOffset;
    }
    get startYOffset() {
        var defaultStyle = this.defaultStyle;
        return defaultStyle.strokeThickness / 2 + defaultStyle.metrics.ascent;
    }
    get lines() {
        return this.penManager.lines;
    }
    get desplayLinesCount() {
        var linesCount = this.penManager.linesCount, maxLines = this.defaultStyle.maxLines;
        if (maxLines > 0 && linesCount > maxLines) linesCount = maxLines;
        return linesCount;
    }
    get linesWidth() {
        return Math.ceil(this.penManager.getMaxLineWidth());
    }
    get linesHeight() {
        var linesCount = this.desplayLinesCount;
        var linesHeight = this.defaultStyle.lineHeight * linesCount;
        if (linesCount > 0) linesHeight -= this.defaultStyle.lineSpacing;
        return linesHeight;
    }
    get imageManager() {
        return this.parent.imageManager;
    }
    get rtl() {
        return this.parent.style.rtl;
    }
    newPenManager() {
        return new (0, _penManagerJsDefault.default)({
            pensPool: this.pensPool,
            linesPool: this.linesPool,
            tagToText: this.parser.propToTagText,
            tagToTextScope: this.parser
        });
    }
    get tmpPenManager() {
        if (this._tmpPenManager === null) this._tmpPenManager = this.newPenManager();
        return this._tmpPenManager;
    }
    getPlainText(text, start, end) {
        var plainText;
        if (text == null) plainText = this.penManager.plainText;
        else {
            var m, match = this.parser.splitText(text, 1); // PLAINTEXTONLY_MODE
            plainText = "";
            for(var i = 0, len = match.length; i < len; i++)plainText += match[i];
        }
        if (start != null || end != null) {
            if (start == null) start = 0;
            if (end == null) end = plainText.length;
            plainText = plainText.substring(start, end);
        }
        return plainText;
    }
    getPenManager(text, retPenManager) {
        if (text === undefined) return this.copyPenManager(retPenManager, this.penManager);
        if (retPenManager === undefined) retPenManager = this.newPenManager();
        var defaultStyle = this.defaultStyle;
        this.updatePenManager(text, defaultStyle.wrapMode, defaultStyle.wrapWidth, defaultStyle.lineHeight, retPenManager);
        return retPenManager;
    }
    getText(text, start, end, wrap) {
        if (text == null) return this.penManager.getSliceTagText(start, end, wrap);
        var penManager = this.tmpPenManager;
        var defaultStyle = this.defaultStyle;
        this.updatePenManager(text, defaultStyle.wrapMode, defaultStyle.wrapWidth, defaultStyle.lineHeight, penManager);
        return penManager.getSliceTagText(start, end, wrap);
    }
    copyPenManager(ret, src) {
        if (src === undefined) src = this.penManager;
        return src.copy(ret);
    }
    getTextWidth(penManager) {
        if (penManager === undefined) penManager = this.penManager;
        return penManager.getMaxLineWidth();
    }
    getLastPen(penManager) {
        if (penManager === undefined) penManager = this.penManager;
        return penManager.lastPen;
    }
}
var methods = {
    setInteractive: (0, _setInteractiveJsDefault.default)
};
Object.assign(CanvasText.prototype, (0, _drawMethodsJsDefault.default), methods);
exports.default = CanvasText;

},{"./DrawMethods.js":"9Qd3Y","../penmanger/PenManager.js":"dD88O","../hitareamanager/HitAreaManager.js":"6jfTY","./SetInteractive.js":"3e0Xj","../../../textbase/const.js":"ljFJV","../wraptext/WrapText.js":"4WrNw","../../../../utils/object/Clone.js":"iFVih","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Qd3Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawRoundRectangleBackgroundJs = require("../../../canvas/utils/DrawRoundRectangleBackground.js");
var _drawRoundRectangleBackgroundJsDefault = parcelHelpers.interopDefault(_drawRoundRectangleBackgroundJs);
exports.default = {
    draw (startX, startY, textWidth, textHeight) {
        var penManager = this.penManager;
        this.hitAreaManager.clear();
        var context = this.context;
        context.save();
        var defaultStyle = this.defaultStyle;
        this.clear();
        (0, _drawRoundRectangleBackgroundJsDefault.default)(this, defaultStyle.backgroundColor, defaultStyle.backgroundStrokeColor, defaultStyle.backgroundStrokeLineWidth, defaultStyle.backgroundCornerRadius, defaultStyle.backgroundColor2, defaultStyle.backgroundHorizontalGradient, defaultStyle.backgroundCornerIteration);
        // draw lines
        startX += this.startXOffset;
        startY += this.startYOffset;
        var defaultHalign = defaultStyle.halign, valign = defaultStyle.valign;
        var lineWidth, lineHeight = defaultStyle.lineHeight;
        var lines = penManager.lines;
        var totalLinesNum = lines.length, maxLines = defaultStyle.maxLines;
        var drawLinesNum, drawLineStartIdx, drawLineEndIdx;
        if (maxLines > 0 && totalLinesNum > maxLines) {
            drawLinesNum = maxLines;
            if (valign === "center") drawLineStartIdx = Math.floor((totalLinesNum - drawLinesNum) / 2);
            else if (valign === "bottom") drawLineStartIdx = totalLinesNum - drawLinesNum;
            else drawLineStartIdx = 0;
        } else {
            drawLinesNum = totalLinesNum;
            drawLineStartIdx = 0;
        }
        drawLineEndIdx = drawLineStartIdx + drawLinesNum;
        var offsetX, offsetY;
        var rtl = this.rtl, rtlOffset = rtl ? this.parent.width : undefined;
        if (valign === "center") offsetY = Math.max((textHeight - drawLinesNum * lineHeight) / 2, 0);
        else if (valign === "bottom") offsetY = Math.max(textHeight - drawLinesNum * lineHeight - 2, 0);
        else offsetY = 0;
        offsetY += startY;
        for(var lineIdx = drawLineStartIdx; lineIdx < drawLineEndIdx; lineIdx++){
            lineWidth = penManager.getLineWidth(lineIdx);
            if (lineWidth === 0) continue;
            var pens = lines[lineIdx], penCount = pens.length;
            var halign = defaultHalign;
            // Seek if there has algin tag
            for(var penIdx = 0; penIdx < penCount; penIdx++){
                var penAlign = pens[penIdx].prop.align;
                if (penAlign !== undefined) {
                    halign = penAlign;
                    break;
                }
            }
            if (halign === "center") offsetX = (textWidth - lineWidth) / 2;
            else if (halign === "right") offsetX = !rtl ? textWidth - lineWidth : 0;
            else offsetX = !rtl ? 0 : textWidth - lineWidth;
            offsetX += startX;
            for(var penIdx = 0; penIdx < penCount; penIdx++)this.drawPen(pens[penIdx], offsetX, offsetY, rtlOffset);
        }
        context.restore();
    },
    drawPen (pen, offsetX, offsetY, rtlOffset) {
        offsetX += pen.x;
        offsetY += pen.y + (pen.prop.y || 0);
        if (rtlOffset !== undefined) offsetX = rtlOffset - offsetX;
        var canvas = this.canvas;
        var context = this.context;
        context.save();
        var curStyle = this.parser.propToContextStyle(this.defaultStyle, pen.prop);
        curStyle.buildFont();
        curStyle.syncFont(canvas, context);
        curStyle.syncStyle(canvas, context);
        // Underline
        if (curStyle.underlineThickness > 0 && pen.width > 0) {
            var lineOffsetY = offsetY + curStyle.underlineOffset - curStyle.underlineThickness / 2;
            this.drawLine(offsetX, lineOffsetY, pen.width, curStyle.underlineThickness, curStyle.underlineColor);
        }
        // Text
        if (pen.isTextPen) this.drawText(offsetX, offsetY, pen.text, curStyle);
        // Image
        if (pen.isImagePen) this.drawImage(offsetX, offsetY, pen.prop.img, curStyle);
        // Strikethrough
        if (curStyle.strikethroughThickness > 0 && pen.width > 0) {
            var lineOffsetY = offsetY + curStyle.strikethroughOffset - curStyle.strikethroughThickness / 2;
            this.drawLine(offsetX, lineOffsetY, pen.width, curStyle.strikethroughThickness, curStyle.strikethroughColor);
        }
        context.restore();
        if (pen.hasAreaMarker && pen.width > 0) {
            var data;
            var areaKey = pen.prop.area;
            if (areaKey) data = {
                key: areaKey
            };
            else {
                var url = pen.prop.url;
                data = {
                    key: `url:${url}`,
                    url: url
                };
            }
            this.hitAreaManager.add(offsetX, offsetY - this.startYOffset, pen.width, this.defaultStyle.lineHeight, data);
        }
    },
    clear () {
        var canvas = this.canvas;
        this.context.clearRect(0, 0, canvas.width, canvas.height);
    },
    drawLine (x, y, width, height, color) {
        if (this.autoRound) {
            x = Math.round(x);
            y = Math.round(y);
        }
        var context = this.context;
        var savedLineCap = context.lineCap;
        context.lineCap = "butt";
        context.strokeStyle = color;
        context.lineWidth = height;
        context.beginPath();
        context.moveTo(x, y);
        context.lineTo(x + width, y);
        context.stroke();
        context.lineCap = savedLineCap;
    },
    drawText (x, y, text, style) {
        if (this.autoRound) {
            x = Math.round(x);
            y = Math.round(y);
        }
        var context = this.context;
        if (style.stroke && style.stroke !== "none" && style.strokeThickness > 0) {
            style.syncShadow(context, style.shadowStroke);
            context.strokeText(text, x, y);
        }
        if (style.color && style.color !== "none") {
            style.syncShadow(context, style.shadowFill);
            context.fillText(text, x, y);
        }
    },
    drawImage (x, y, imgKey, style) {
        y -= this.startYOffset;
        this.parent.imageManager.draw(imgKey, this.context, x, y, this.autoRound);
    }
};

},{"../../../canvas/utils/DrawRoundRectangleBackground.js":"8PmFe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dD88O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _penJs = require("./Pen.js");
var _penJsDefault = parcelHelpers.interopDefault(_penJs);
var _constJs = require("../../../textbase/const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _cloneJs = require("../../../../utils/object/Clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _noopJs = require("../../../../utils/object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
const NO_NEWLINE = (0, _constJsDefault.default).NO_NEWLINE;
const WRAPPED_NEWLINE = (0, _constJsDefault.default).WRAPPED_NEWLINE;
class PenManager {
    constructor(config){
        this.pens = []; // all pens
        this.lines = []; // pens in lines [ [],[],[],.. ]
        this.maxLinesWidth = undefined;
        this.pensPool = config.pensPool; // Required
        this.linesPool = config.linesPool; // Required
        this.tagToText = GetFastValue(config, "tagToText", (0, _noopJsDefault.default));
        this.tagToTextScope = GetFastValue(config, "tagToTextScope", undefined);
    }
    destroy() {
        this.clear();
        this.tagToText = undefined;
        this.tagToTextScope = undefined;
    }
    clear() {
        for(var i = 0, len = this.lines.length; i < len; i++)this.lines[i].length = 0;
        this.pensPool.pushMultiple(this.pens);
        this.linesPool.pushMultiple(this.lines);
        this.maxLinesWidth = undefined;
    }
    addTextPen(text, x, y, width, prop, newLineMode) {
        var pen = this.pensPool.pop();
        if (pen == null) pen = new (0, _penJsDefault.default)();
        PEN_CONFIG.text = text;
        PEN_CONFIG.x = x;
        PEN_CONFIG.y = y;
        PEN_CONFIG.width = width;
        PEN_CONFIG.prop = prop;
        PEN_CONFIG.newLineMode = newLineMode;
        pen.resetFromJSON(PEN_CONFIG);
        this.addPen(pen);
        return this;
    }
    addImagePen(x, y, width, prop) {
        this.addTextPen("", x, y, width, prop, NO_NEWLINE);
        return this;
    }
    addNewLinePen() {
        var previousPen = this.lastPen;
        var x = previousPen ? previousPen.lastX : 0;
        var y = previousPen ? previousPen.y : 0;
        var prop = previousPen ? (0, _cloneJsDefault.default)(previousPen.prop) : null;
        this.addTextPen("", x, y, 0, prop, WRAPPED_NEWLINE);
        return this;
    }
    addPen(pen) {
        var previousPen = this.lastPen;
        if (previousPen == null) pen.startIndex = 0;
        else pen.startIndex = previousPen.endIndex;
        this.pens.push(pen);
        // maintan lines
        var line = this.lastLine;
        if (line == null) {
            line = this.linesPool.pop() || [];
            this.lines.push(line);
        }
        line.push(pen);
        // new line, add an empty line
        if (pen.newLineMode !== NO_NEWLINE) {
            line = this.linesPool.pop() || [];
            this.lines.push(line);
        }
        this.maxLinesWidth = undefined;
    }
    clone(targetPenManager) {
        if (targetPenManager == null) targetPenManager = new PenManager();
        targetPenManager.clear();
        for(var li = 0, llen = this.lines.length; li < llen; li++){
            var pens = this.lines[li];
            for(var pi = 0, plen = pens.length; pi < plen; pi++){
                var pen = pens[pi];
                targetPenManager.addPen(pen.text, pen.x, pen.y, pen.width, (0, _cloneJsDefault.default)(pen.prop), pen.newLineMode);
            }
        }
        return targetPenManager;
    }
    get lastPen() {
        return this.pens[this.pens.length - 1];
    }
    get lastLine() {
        return this.lines[this.lines.length - 1];
    }
    getLineStartIndex(i) {
        if (i >= this.lines.length) return this.getLineEndIndex(i);
        else {
            var line = this.lines[i];
            return line && line[0] ? line[0].startIndex : 0;
        }
    }
    getLineEndIndex(i) {
        if (i >= this.lines.length) i = this.lines.length - 1;
        var li, hasLastPen = false, line;
        for(li = i; li >= 0; li--){
            line = this.lines[li];
            hasLastPen = line != null && line.length > 0;
            if (hasLastPen) break;
        }
        if (!hasLastPen) return 0;
        var lastPen = line[line.length - 1];
        return lastPen.endIndex;
    }
    getLineWidth(i) {
        var line = this.lines[i];
        if (!line) return 0;
        var lastPen = line[line.length - 1];
        if (lastPen == null) return 0;
        var lineWidth = lastPen.lastX; // start from 0
        return lineWidth;
    }
    getMaxLineWidth() {
        if (this.maxLinesWidth !== undefined) return this.maxLinesWidth;
        var w, maxW = 0;
        for(var i = 0, len = this.lines.length; i < len; i++){
            w = this.getLineWidth(i);
            if (w > maxW) maxW = w;
        }
        this.maxLinesWidth = maxW;
        return maxW;
    }
    getLineWidths() {
        var result = [];
        for(var i = 0, len = this.lines.length; i < len; i++)result.push(this.getLineWidth(i));
        return result;
    }
    get linesCount() {
        return this.lines.length;
    }
    get plainText() {
        var txt = "", pens = this.pens;
        for(var i = 0, len = pens.length; i < len; i++)txt += pens[i].plainText;
        return txt;
    }
    get rawTextLength() {
        var l = 0, pens = this.pens;
        for(var i = 0, len = this.pens.length; i < len; i++)l += pens[i].rawTextLength;
        return l;
    }
    getSliceTagText(start, end, wrap) {
        if (start === undefined) start = 0;
        if (end === undefined) {
            var lastPen = this.lastPen;
            if (lastPen == null) return "";
            end = lastPen.endIndex;
        }
        if (wrap === undefined) wrap = false;
        var txt = "", formatTxt, pen, penTxt, penStartIdx, penEndIdx, isInRange;
        var currentProp, previousProp;
        for(var i = 0, len = this.pens.length; i < len; i++){
            pen = this.pens[i];
            penEndIdx = pen.endIndex;
            if (penEndIdx <= start) continue;
            pen = this.pens[i];
            penTxt = !wrap ? pen.plainText : pen.wrapText;
            currentProp = pen.prop;
            penStartIdx = pen.startIndex;
            isInRange = penStartIdx >= start && penEndIdx <= end;
            if (!isInRange) penTxt = penTxt.substring(start - penStartIdx, end - penStartIdx);
            if (this.tagToTextScope) txt += this.tagToText.call(this.tagToTextScope, penTxt, currentProp, previousProp);
            else txt += this.tagToText(penTxt, currentProp, previousProp);
            previousProp = currentProp;
            if (penEndIdx >= end) break;
        }
        return txt;
    }
    get length() {
        return this.lines.length;
    }
    set length(value) {
        // Only for set length to 0 (clear)
        this.clear();
    }
}
var PEN_CONFIG = {};
exports.default = PenManager;

},{"./Pen.js":"6Hdst","../../../textbase/const.js":"ljFJV","../../../../utils/object/Clone.js":"iFVih","../../../../utils/object/NOOP.js":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Hdst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("../../../textbase/const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const NO_NEWLINE = (0, _constJsDefault.default).NO_NEWLINE;
const RAW_NEWLINE = (0, _constJsDefault.default).RAW_NEWLINE;
class Pen {
    constructor(config){
        this.prop = {};
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        this.text = GetValue(o, "text", "");
        this.x = GetValue(o, "x", 0);
        this.y = GetValue(o, "y", 0);
        this.width = GetValue(o, "width", 0);
        var prop = GetValue(o, "prop", null);
        if (prop === null) prop = {};
        this.prop = prop;
        this.newLineMode = GetValue(o, "newLineMode", 0);
        this.startIndex = GetValue(o, "startIndex", 0);
    }
    get plainText() {
        var txt = this.text;
        if (this.newLineMode === RAW_NEWLINE) txt += "\n";
        return txt;
    }
    get wrapText() {
        var txt = this.text;
        if (this.newLineMode !== NO_NEWLINE) txt += "\n";
        return txt;
    }
    get rawTextLength() {
        var len = this.text.length;
        if (this.newLineMode === RAW_NEWLINE) len += 1;
        return len;
    }
    get endIndex() {
        return this.startIndex + this.rawTextLength;
    }
    get lastX() {
        return this.x + this.width;
    }
    get isTextPen() {
        return this.text !== "";
    }
    get isImagePen() {
        return !!this.prop.img;
    }
    get hasAreaMarker() {
        return !!this.prop.area || !!this.prop.url;
    }
}
exports.default = Pen;

},{"../../../textbase/const.js":"ljFJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iFVih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clearJs = require("./Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
/**
 * Shallow Object Clone. Will not out nested objects.
 * @param {object} obj JSON object
 * @param {object} ret JSON object to return, set null to return a new object
 * @returns {object} this object
 */ var Clone = function(obj, out) {
    var objIsArray = Array.isArray(obj);
    if (out === undefined) out = objIsArray ? [] : {};
    else (0, _clearJsDefault.default)(out);
    if (objIsArray) {
        out.length = obj.length;
        for(var i = 0, cnt = obj.length; i < cnt; i++)out[i] = obj[i];
    } else for(var key in obj)out[key] = obj[key];
    return out;
};
exports.default = Clone;

},{"./Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6jfTY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _poolJs = require("../../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
var _clearJs = require("../../../../utils/object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
const Rectangle = Phaser.Geom.Rectangle;
var RectanglePool = new (0, _poolJsDefault.default)();
class HitAreaManager {
    constructor(){
        this.hitAreas = [];
    }
    destroy() {
        this.clear();
    }
    clear() {
        // Reuse hitArea(rectangle) later
        for(var i = 0, cnt = this.hitAreas.length; i < cnt; i++)(0, _clearJsDefault.default)(this.hitAreas[i].data);
        RectanglePool.pushMultiple(this.hitAreas);
        return this;
    }
    add(x, y, width, height, data) {
        var rectangle = RectanglePool.pop();
        if (rectangle === null) rectangle = new Rectangle(x, y, width, height);
        else rectangle.setTo(x, y, width, height);
        rectangle.data = data;
        this.hitAreas.push(rectangle);
        return this;
    }
    getFirst(x, y) {
        for(var i = 0, cnt = this.hitAreas.length; i < cnt; i++){
            var hitArea = this.hitAreas[i];
            if (hitArea.contains(x, y)) return hitArea;
        }
        return null;
    }
    getByKey(key) {
        for(var i = 0, cnt = this.hitAreas.length; i < cnt; i++){
            var hitArea = this.hitAreas[i];
            if (hitArea.data.key === key) return hitArea;
        }
        return null;
    }
    drawBounds(graphics, color, parent) {
        if (color === undefined) color = 0xffffff;
        if (parent) graphics.save().scaleCanvas(parent.scaleX, parent.scaleY).rotateCanvas(parent.rotation).translateCanvas(parent.x, parent.y);
        for(var i = 0, cnt = this.hitAreas.length; i < cnt; i++){
            var hitArea = this.hitAreas[i];
            graphics.lineStyle(1, color).strokeRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);
        }
        if (parent) graphics.restore();
        return this;
    }
}
exports.default = HitAreaManager;

},{"../../../../pool.js":"lDewQ","../../../../utils/object/Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3e0Xj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetInteractive = function() {
    this.parent.on("pointerdown", OnAreaDown, this).on("pointerup", OnAreaUp, this).on("pointermove", OnAreaOverOut, this).on("pointerover", OnAreaOverOut, this).on("pointerout", function(pointer, event) {
        OnAreaOverOut.call(this, pointer, null, null, event);
    }, this);
};
var OnAreaDown = function(pointer, localX, localY, event) {
    var area = this.hitAreaManager.getFirst(localX, localY);
    if (area === null) return;
    var key = area.data.key;
    FireEvent.call(this, "areadown", key, pointer, localX, localY, event);
    area.data.isDown = true;
};
var OnAreaUp = function(pointer, localX, localY, event) {
    var area = this.hitAreaManager.getFirst(localX, localY);
    if (area === null) return;
    var areaData = area.data;
    var key = areaData.key;
    FireEvent.call(this, "areaup", key, pointer, localX, localY, event);
    if (areaData.isDown) {
        FireEvent.call(this, "areaclick", key, pointer, localX, localY, event);
        var url = areaData.url;
        if (url) window.open(url, "_blank");
    }
    areaData.isDown = false;
};
var OnAreaOverOut = function(pointer, localX, localY, event) {
    if (localX === null) {
        if (this.lastHitAreaKey !== null) {
            FireEvent.call(this, "areaout", this.lastHitAreaKey, pointer, localX, localY, event);
            this.hitAreaManager.getByKey(this.lastHitAreaKey).isDown = false;
            this.lastHitAreaKey = null;
        }
        return;
    }
    var area = this.hitAreaManager.getFirst(localX, localY);
    var key = area ? area.data.key : null;
    if (this.lastHitAreaKey === key) return;
    if (this.lastHitAreaKey !== null) {
        FireEvent.call(this, "areaout", this.lastHitAreaKey, pointer, localX, localY, event);
        var prevHitArea = this.hitAreaManager.getByKey(this.lastHitAreaKey);
        if (this.urlTagCursorStyle && !!prevHitArea.data.url) this.scene.input.manager.canvas.style.cursor = "";
        prevHitArea.isDown = false;
    }
    if (key !== null) {
        FireEvent.call(this, "areaover", key, pointer, localX, localY, event);
        if (this.urlTagCursorStyle && !!area.data.url) this.scene.input.manager.canvas.style.cursor = this.urlTagCursorStyle;
    }
    this.lastHitAreaKey = key;
};
var FireEvent = function(eventName, key, pointer, localX, localY, event) {
    this.parent.emit(`${eventName}-${key}`, pointer, localX, localY, event);
    this.parent.emit(eventName, key, pointer, localX, localY, event);
};
exports.default = SetInteractive;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4WrNw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("../../../textbase/const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
const NO_NEWLINE = (0, _constJsDefault.default).NO_NEWLINE;
const RAW_NEWLINE = (0, _constJsDefault.default).RAW_NEWLINE;
const WRAPPED_NEWLINE = (0, _constJsDefault.default).WRAPPED_NEWLINE;
const NO_WRAP = (0, _constJsDefault.default).NO_WRAP;
const WORD_WRAP = (0, _constJsDefault.default).WORD_WRAP;
const CHAR_WRAP = (0, _constJsDefault.default).CHAR_WRAP;
const splitRegExp = (0, _constJsDefault.default).SPLITREGEXP;
var WrapText = function(text, getTextWidth, wrapMode, wrapWidth, offset, wrapTextLinesPool) {
    if (wrapWidth <= 0) wrapMode = NO_WRAP;
    var retLines = [];
    if (!text || !text.length) return retLines;
    var isNoWrap = wrapMode === NO_WRAP;
    var isWordWrap = wrapMode === WORD_WRAP;
    var lines = text.split(splitRegExp), line, remainWidth, newLineMode;
    for(var i = 0, linesLen = lines.length; i < linesLen; i++){
        line = lines[i];
        newLineMode = i === linesLen - 1 ? NO_NEWLINE : RAW_NEWLINE;
        if (isNoWrap) {
            var textWidth = getTextWidth(line);
            retLines.push(wrapTextLinesPool.getLine(line, textWidth, newLineMode));
            continue;
        }
        remainWidth = i === 0 ? wrapWidth - offset : wrapWidth;
        // short string testing
        if (line.length <= 100) {
            var textWidth = getTextWidth(line);
            if (textWidth <= remainWidth) {
                retLines.push(wrapTextLinesPool.getLine(line, textWidth, newLineMode));
                continue;
            }
        }
        var tokenArray, isSpaceCharacterEnd;
        if (isWordWrap) {
            // word mode
            tokenArray = line.split(" ");
            isSpaceCharacterEnd = tokenArray[tokenArray.length - 1] === "";
            if (isSpaceCharacterEnd) tokenArray.length -= 1;
        } else tokenArray = line;
        var token, tokenWidth, isLastToken;
        var lineText = "", lineWidth = 0;
        var currLineWidth;
        var whiteSpaceWidth = isWordWrap ? getTextWidth(" ") : undefined;
        for(var j = 0, tokenLen = tokenArray.length; j < tokenLen; j++){
            token = tokenArray[j];
            tokenWidth = getTextWidth(token);
            isLastToken = j === tokenLen - 1;
            if (isWordWrap && (!isLastToken || isSpaceCharacterEnd)) {
                token += " ";
                tokenWidth += whiteSpaceWidth;
            }
            // Text width of single token is larger than a line width
            if (isWordWrap && tokenWidth > wrapWidth) {
                if (lineText !== "") // Has pending lineText, flush it out
                retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, WRAPPED_NEWLINE));
                else if (j === 0 && offset > 0) // No pending lineText, but has previous text. Append a newline
                retLines.push(wrapTextLinesPool.getLine("", 0, WRAPPED_NEWLINE));
                // Word break
                retLines.push(...WrapText(token, getTextWidth, CHAR_WRAP, wrapWidth, 0, wrapTextLinesPool));
                // Continue at last-wordBreak-line
                var lastwordBreakLine = retLines.pop();
                lineText = lastwordBreakLine.text;
                lineWidth = lastwordBreakLine.width;
                // Free this line
                wrapTextLinesPool.freeLine(lastwordBreakLine);
                // Special case : Start at a space character, discard it
                if (lineText === " ") {
                    lineText = "";
                    lineWidth = 0;
                }
                continue;
            }
            currLineWidth = lineWidth + tokenWidth;
            if (currLineWidth > remainWidth) {
                // New line
                retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, WRAPPED_NEWLINE));
                lineText = token;
                lineWidth = tokenWidth;
                remainWidth = wrapWidth;
            } else {
                // Append token, continue
                lineText += token;
                lineWidth = currLineWidth;
            }
            if (isLastToken) // Flush remain text
            retLines.push(wrapTextLinesPool.getLine(lineText, lineWidth, newLineMode));
        } // for token in tokenArray
    } // for each line in lines
    return retLines;
};
exports.default = WrapText;

},{"../../../textbase/const.js":"ljFJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hoA4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _poolJs = require("../../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
class WrapTextLinesPool extends (0, _poolJsDefault.default) {
    freeLine(line) {
        if (!line) return;
        this.push(line);
        return this;
    }
    freeLines(lines) {
        if (!lines) return;
        this.pushMultiple(lines);
        return this;
    }
    getLine(text, width, newLineMode) {
        var l = this.pop();
        if (l === null) l = {};
        l.text = text;
        l.width = width;
        l.newLineMode = newLineMode;
        return l;
    }
}
exports.default = WrapTextLinesPool;

},{"../../../../pool.js":"lDewQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIBHI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addImageJs = require("./AddImage.js");
var _addImageJsDefault = parcelHelpers.interopDefault(_addImageJs);
var _drawImageJs = require("./DrawImage.js");
var _drawImageJsDefault = parcelHelpers.interopDefault(_drawImageJs);
class ImageManager {
    constructor(scene){
        this.textureManager = scene.sys.textures;
        this.images = {};
    }
    destroy() {
        this.textureManager = undefined;
        this.images = undefined;
    }
    add(key, config) {
        if (typeof key === "string") (0, _addImageJsDefault.default).call(this, key, config);
        else if (Array.isArray(key)) {
            var data = key;
            for(var i = 0, cnt = data.length; i < cnt; i++)(0, _addImageJsDefault.default).call(this, data[i]);
        } else {
            var data = key;
            for(var key in data)(0, _addImageJsDefault.default).call(this, key, data[key]);
        }
        return this;
    }
    has(key) {
        return this.images.hasOwnProperty(key);
    }
    remove(key) {
        if (this.has(key)) delete this.images[key];
        return this;
    }
    get(key) {
        if (!this.has(key)) {
            if (this.textureManager.exists(key)) this.add(key);
        }
        return this.images[key];
    }
    getOuterWidth(key) {
        var data = this.get(key);
        return data ? data.width + data.left + data.right : 0;
    }
    getFrame(key) {
        var data = this.get(key);
        return data ? this.textureManager.getFrame(data.key, data.frame) : undefined;
    }
    hasTexture(key) {
        return !!this.getFrame(key);
    }
}
var methods = {
    draw: (0, _drawImageJsDefault.default)
};
Object.assign(ImageManager.prototype, methods);
exports.default = ImageManager;

},{"./AddImage.js":"6QnIa","./DrawImage.js":"eePoe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6QnIa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var AddImage = function(key, config) {
    if (IsPlainObject(key)) {
        config = key;
        key = config.key;
    } else if (config === undefined) config = {
        key: key
    };
    if (!config.hasOwnProperty("key")) config.key = key;
    var textureKey = config.key, frameKey = config.frame;
    var width = config.width, height = config.height;
    if (width === undefined || height === undefined) {
        var frame = this.textureManager.getFrame(textureKey, frameKey);
        var frameWidth = frame ? frame.cutWidth : 0;
        var frameHeight = frame ? frame.cutHeight : 0;
        if (width === undefined && height === undefined) {
            width = frameWidth;
            height = frameHeight;
        } else if (width === undefined) width = frameWidth * (height / frameHeight);
        else if (height === undefined) height = frameHeight * (width / frameWidth);
    }
    this.images[key] = {
        key: textureKey,
        frame: frameKey,
        width: width,
        height: height,
        y: GetValue(config, "y", 0),
        left: GetValue(config, "left", 0),
        right: GetValue(config, "right", 0),
        originX: GetValue(config, "originX", 0),
        originY: GetValue(config, "originY", 0)
    };
};
exports.default = AddImage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eePoe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DrawImage = function(key, context, x, y, autoRound) {
    var imgData = this.get(key);
    var frame = this.textureManager.getFrame(imgData.key, imgData.frame);
    var width = imgData.width, height = imgData.height;
    x += imgData.left - imgData.originX * width;
    y += imgData.y - imgData.originY * height;
    if (autoRound) {
        x = Math.round(x);
        y = Math.round(y);
    }
    context.drawImage(frame.source.image, frame.cutX, frame.cutY, frame.cutWidth, frame.cutHeight, x, y, width, height);
};
exports.default = DrawImage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24uHz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendText = function(value, addCR) {
    if (!value && value !== 0) value = "";
    if (addCR === undefined) addCR = true;
    if (Array.isArray(value)) value = value.join("\n");
    var newText;
    if (addCR) newText = `${this.text}\n${value}`;
    else newText = `${this.text}${value}`;
    if (newText != this.text) this.setText(newText);
    return this;
};
exports.default = AppendText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQnek":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _splitTextJs = require("./SplitText.js");
var _splitTextJsDefault = parcelHelpers.interopDefault(_splitTextJs);
var _tagTextToPropJs = require("./TagTextToProp.js");
var _tagTextToPropJsDefault = parcelHelpers.interopDefault(_tagTextToPropJs);
var _propToContextStyleJs = require("./PropToContextStyle.js");
var _propToContextStyleJsDefault = parcelHelpers.interopDefault(_propToContextStyleJs);
var _propToTagTextJs = require("./PropToTagText.js");
var _propToTagTextJsDefault = parcelHelpers.interopDefault(_propToTagTextJs);
var _tagRegexJs = require("./TagRegex.js");
const GetValue = Phaser.Utils.Objects.GetValue;
class Parser {
    constructor(style){
        var delimiters = GetValue(style, "delimiters", "[]");
        this.tagRegex = (0, _tagRegexJs.GetTagRegex)(delimiters);
        this.delimiters = delimiters;
    }
    getStrokeThinkness(defaultStyle, prop) {
        var strokeThickness;
        if (prop.hasOwnProperty("stroke")) strokeThickness = defaultStyle.strokeThickness;
        else strokeThickness = 0;
        return strokeThickness;
    }
    setDelimiters(delimiterLeft, delimiterRight) {
        if ((0, _tagRegexJs.SetDelimiters)(delimiterLeft, delimiterRight)) this.tagRegex = (0, _tagRegexJs.GetTagRegex)();
        return this;
    }
}
var methods = {
    splitText: (0, _splitTextJsDefault.default),
    tagTextToProp: (0, _tagTextToPropJsDefault.default),
    propToContextStyle: (0, _propToContextStyleJsDefault.default),
    propToTagText: (0, _propToTagTextJsDefault.default)
};
Object.assign(Parser.prototype, methods);
exports.default = Parser;

},{"./SplitText.js":"fbOpl","./TagTextToProp.js":"eSH0M","./PropToContextStyle.js":"jvjga","./PropToTagText.js":"4oBzT","./TagRegex.js":"gNS9g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbOpl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SplitText = function(text, mode) {
    var TagRegex = this.tagRegex;
    var result = [];
    var charIdx = 0;
    var rawMode = false, escMode = false;
    while(true){
        var regexResult = TagRegex.RE_SPLITTEXT.exec(text);
        if (!regexResult) break;
        var match = regexResult[0];
        if (escMode) {
            if (TagRegex.RE_ESC_CLOSE.test(match)) escMode = false;
            else continue; // Skip other tags
        } else if (rawMode) {
            if (TagRegex.RE_RAW_CLOSE.test(match)) rawMode = false;
            else continue; // Skip other tags
        } else {
            if (TagRegex.RE_ESC_OPEN.test(match)) escMode = true;
            else if (TagRegex.RE_RAW_OPEN.test(match)) rawMode = true;
        }
        var matchEnd = TagRegex.RE_SPLITTEXT.lastIndex;
        var matchStart = matchEnd - match.length;
        if (charIdx < matchStart) {
            var content = text.substring(charIdx, matchStart);
            result.push(content);
        }
        if (mode === undefined) result.push(match);
        charIdx = matchEnd;
    }
    var totalLen = text.length;
    if (charIdx < totalLen) result.push(text.substring(charIdx, totalLen));
    return result; // [text,...]
};
exports.default = SplitText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eSH0M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const PROP_REMOVE = false;
const PROP_ADD = true;
var GETPROP_RESULT = {
    plainText: null,
    prevProp: null
};
var TagTextToProp = function(text, prevProp) {
    var TagRegex = this.tagRegex;
    // text : result of splitText()
    if (prevProp == null) prevProp = {};
    var plainText = "";
    // close image tag
    if (prevProp.img) UpdateProp(prevProp, PROP_REMOVE, "img");
    if (prevProp.esc) {
        if (TagRegex.RE_ESC_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "esc");
        else plainText = text;
    } else if (prevProp.raw) {
        if (TagRegex.RE_RAW_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "raw");
        else plainText = text;
    } else {
        if (TagRegex.RE_ESC_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "esc", true);
        else if (TagRegex.RE_ESC_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "esc");
        else if (TagRegex.RE_RAW_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "raw", true);
        else if (TagRegex.RE_RAW_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "raw");
        else if (TagRegex.RE_BLOD_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "b", true);
        else if (TagRegex.RE_BLOD_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "b");
        else if (TagRegex.RE_ITALICS_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "i", true);
        else if (TagRegex.RE_ITALICS_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "i");
        else if (TagRegex.RE_WEIGHT_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_WEIGHT_OPEN);
            UpdateProp(prevProp, PROP_ADD, "weight", innerMatch[1]);
        } else if (TagRegex.RE_WEIGHT_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "weight");
        else if (TagRegex.RE_SIZE_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_SIZE_OPEN);
            UpdateProp(prevProp, PROP_ADD, "size", `${innerMatch[1]}px`);
        } else if (TagRegex.RE_SIZE_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "size");
        else if (TagRegex.RE_COLOR_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_COLOR_OPEN);
            UpdateProp(prevProp, PROP_ADD, "color", innerMatch[1]);
        } else if (TagRegex.RE_COLOR_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "color");
        else if (TagRegex.RE_UNDERLINE_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "u", true);
        else if (TagRegex.RE_UNDERLINE_OPENC.test(text)) {
            var innerMatch = text.match(TagRegex.RE_UNDERLINE_OPENC);
            UpdateProp(prevProp, PROP_ADD, "u", innerMatch[1]);
        } else if (TagRegex.RE_UNDERLINE_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "u");
        else if (TagRegex.RE_STRIKETHROUGH_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "s", true);
        else if (TagRegex.RE_STRIKETHROUGH_OPENC.test(text)) {
            var innerMatch = text.match(TagRegex.RE_STRIKETHROUGH_OPENC);
            UpdateProp(prevProp, PROP_ADD, "s", innerMatch[1]);
        } else if (TagRegex.RE_STRIKETHROUGH_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "s");
        else if (TagRegex.RE_SHADOW_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "shadow", true);
        else if (TagRegex.RE_SHADOW_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "shadow");
        else if (TagRegex.RE_STROKE_OPEN.test(text)) UpdateProp(prevProp, PROP_ADD, "stroke", true);
        else if (TagRegex.RE_STROKE_OPENC.test(text)) {
            var innerMatch = text.match(TagRegex.RE_STROKE_OPENC);
            UpdateProp(prevProp, PROP_ADD, "stroke", innerMatch[1]);
        } else if (TagRegex.RE_STROKE_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "stroke");
        else if (TagRegex.RE_OFFSETY_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_OFFSETY_OPEN);
            UpdateProp(prevProp, PROP_ADD, "y", parseFloat(innerMatch[1]));
        } else if (TagRegex.RE_OFFSETY_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "y");
        else if (TagRegex.RE_IMAGE_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_IMAGE_OPEN);
            UpdateProp(prevProp, PROP_ADD, "img", innerMatch[1]);
        } else if (TagRegex.RE_IMAGE_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "img");
        else if (TagRegex.RE_AREA_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_AREA_OPEN);
            UpdateProp(prevProp, PROP_ADD, "area", innerMatch[1]);
        } else if (TagRegex.RE_AREA_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "area");
        else if (TagRegex.RE_URL_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_URL_OPEN);
            UpdateProp(prevProp, PROP_ADD, "url", innerMatch[1]);
        } else if (TagRegex.RE_URL_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "url");
        else if (TagRegex.RE_ALIGN_OPEN.test(text)) {
            var innerMatch = text.match(TagRegex.RE_ALIGN_OPEN);
            UpdateProp(prevProp, PROP_ADD, "align", innerMatch[1]);
        } else if (TagRegex.RE_ALIGN_CLOSE.test(text)) UpdateProp(prevProp, PROP_REMOVE, "align");
        else plainText = text;
    }
    var result = GETPROP_RESULT;
    result.plainText = plainText;
    result.prop = prevProp;
    return result;
};
var UpdateProp = function(prop, op, key, value) {
    if (op === PROP_ADD) // PROP_ADD     
    prop[key] = value;
    else // PROP_REMOVE        
    if (prop.hasOwnProperty(key)) delete prop[key];
    return prop;
};
exports.default = TagTextToProp;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvjga":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textStyleJs = require("../../../textbase/textstyle/TextStyle.js");
var _textStyleJsDefault = parcelHelpers.interopDefault(_textStyleJs);
var PropToContextStyle = function(defaultStyle, prop) {
    var result = STYLE_RESULT;
    if (!prop.hasOwnProperty("img")) {
        result.image = null;
        if (prop.hasOwnProperty("family")) result.fontFamily = prop.family;
        else result.fontFamily = defaultStyle.fontFamily;
        if (prop.hasOwnProperty("size")) {
            var size = prop.size;
            if (typeof size === "number") size = `${size}px`;
            result.fontSize = size;
        } else result.fontSize = defaultStyle.fontSize;
        result.fontStyle = GetFontStyle(prop);
        if (prop.hasOwnProperty("color")) result.color = prop.color;
        else result.color = defaultStyle.color;
        if (prop.hasOwnProperty("stroke")) {
            if (prop.stroke === true) {
                result.stroke = defaultStyle.stroke;
                result.strokeThickness = defaultStyle.strokeThickness;
            } else {
                result.stroke = prop.stroke;
                result.strokeThickness = defaultStyle.strokeThickness;
            }
        } else {
            result.stroke = defaultStyle.stroke;
            result.strokeThickness = 0;
        }
    } else result.image = prop.img;
    if (prop.hasOwnProperty("shadow")) {
        if (prop.shadow === true) {
            result.shadowColor = defaultStyle.shadowColor;
            result.shadowOffsetX = defaultStyle.shadowOffsetX;
            result.shadowOffsetY = defaultStyle.shadowOffsetY;
            result.shadowBlur = defaultStyle.shadowBlur;
            result.shadowStroke = true;
            result.shadowFill = true;
        } else {
            result.shadowColor = prop.shadow;
            result.shadowOffsetX = defaultStyle.shadowOffsetX;
            result.shadowOffsetY = defaultStyle.shadowOffsetY;
            result.shadowBlur = defaultStyle.shadowBlur;
            result.shadowStroke = true;
            result.shadowFill = true;
        }
    } else {
        result.shadowColor = "#000";
        result.shadowOffsetX = 0;
        result.shadowOffsetY = 0;
        result.shadowBlur = 0;
        result.shadowStroke = false;
        result.shadowFill = false;
    }
    if (prop.hasOwnProperty("u")) {
        if (prop.u === true) {
            result.underlineColor = defaultStyle.underlineColor;
            result.underlineThickness = defaultStyle.underlineThickness;
            result.underlineOffset = defaultStyle.underlineOffset;
        } else {
            result.underlineColor = prop.u;
            result.underlineThickness = defaultStyle.underlineThickness;
            result.underlineOffset = defaultStyle.underlineOffset;
        }
    } else {
        result.underlineColor = "#000";
        result.underlineThickness = 0;
        result.underlineOffset = 0;
    }
    if (prop.hasOwnProperty("s")) {
        if (prop.s === true) {
            result.strikethroughColor = defaultStyle.strikethroughColor;
            result.strikethroughThickness = defaultStyle.strikethroughThickness;
            result.strikethroughOffset = defaultStyle.strikethroughOffset;
        } else {
            result.strikethroughColor = prop.s;
            result.strikethroughThickness = defaultStyle.strikethroughThickness;
            result.strikethroughOffset = defaultStyle.strikethroughOffset;
        }
    } else {
        result.strikethroughColor = "#000";
        result.strikethroughThickness = 0;
        result.strikethroughOffset = 0;
    }
    return result;
};
var GetFontStyle = function(prop) {
    var isBold = prop.b;
    var weight = prop.weight;
    var isItalic = prop.i;
    if (isBold || weight || isItalic) {
        if (isItalic) {
            if (isBold) return "bold italic";
            else if (weight) return `${weight} italic`;
            else return "italic";
        } else {
            if (isBold) return "bold";
            else return weight.toString();
        }
    } else return "";
};
var STYLE_RESULT = new (0, _textStyleJsDefault.default)();
exports.default = PropToContextStyle;

},{"../../../textbase/textstyle/TextStyle.js":"3SHQS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oBzT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PropToTagText = function(text, prop, prevProp) {
    if (prevProp == null) prevProp = EMPTYPROP;
    var delimiterLeft = this.delimiters[0];
    var delimiterRight = this.delimiters[1];
    var headers = [];
    for(var k in prevProp)if (!prop.hasOwnProperty(k)) headers.push(`${delimiterLeft}/${k}${delimiterRight}`);
    for(var k in prop){
        var value = prop[k];
        if (prevProp[k] === value) continue;
        switch(k){
            case "size":
                headers.push(`${delimiterLeft}size=${value.replace("px", "")}${delimiterRight}`);
                break;
            case "color":
            case "weight":
            case "stroke":
            case "y":
            case "img":
            case "area":
            case "url":
            case "align":
                headers.push(`${delimiterLeft}${k}=${value}${delimiterRight}`);
                break;
            case "u":
            case "s":
                if (value === true) headers.push(`${delimiterLeft}${k}${delimiterRight}`);
                else headers.push(`${delimiterLeft}${k}=${value}${delimiterRight}`);
                break;
            default:
                headers.push(`${delimiterLeft}${k}${delimiterRight}`);
                break;
        }
    }
    headers.push(text);
    return headers.join("");
};
var EMPTYPROP = {};
exports.default = PropToTagText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gNS9g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetDelimiters", ()=>SetDelimiters);
parcelHelpers.export(exports, "GetTagRegex", ()=>GetTagRegex);
var _escapeRegexJs = require("../../../../utils/string/EscapeRegex.js");
var _escapeRegexJsDefault = parcelHelpers.interopDefault(_escapeRegexJs);
var DelimiterLeftSave;
var DelimiterRightSave;
var TagRegexSave = {};
var GetOpenTagRegString = function(delimiterLeft, delimiterRight, tagName, param) {
    if (param === undefined) return `${delimiterLeft}${tagName}${delimiterRight}`;
    else return `${delimiterLeft}${tagName}=(${param})${delimiterRight}`;
};
var GetCloseTagRegString = function(delimiterLeft, delimiterRight, tagName) {
    return `${delimiterLeft}\/${tagName}${delimiterRight}`;
};
var NUMBER_PARAM = "[-.0-9]+";
var COLOR_PARAM = "[a-z]+|#[0-9abcdef]+";
var STR_PARAM = "[^\\]]+";
var SetDelimiters = function(delimiterLeft, delimiterRight) {
    if (delimiterRight === undefined) {
        var delimeters = delimiterLeft;
        delimiterLeft = delimeters[0];
        delimiterRight = delimeters[1];
    }
    if (DelimiterLeftSave === delimiterLeft && DelimiterRightSave === delimiterRight) return false;
    DelimiterLeftSave = delimiterLeft;
    DelimiterRightSave = delimiterRight;
    delimiterLeft = (0, _escapeRegexJsDefault.default)(delimiterLeft);
    delimiterRight = (0, _escapeRegexJsDefault.default)(delimiterRight);
    var ESC = "esc";
    var ESC_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, ESC);
    var ESC_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, ESC);
    var RAW = "raw";
    var RAW_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, RAW);
    var RAW_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, RAW);
    var BLOD = "b";
    var BLOD_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, BLOD);
    var BLOD_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, BLOD);
    var ITALICS = "i";
    var ITALICS_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, ITALICS);
    var ITALICS_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, ITALICS);
    var WEIGHT = "weight";
    var WEIGHT_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, WEIGHT, NUMBER_PARAM);
    var WEIGHT_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, WEIGHT);
    var SIZE = "size";
    var SIZE_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, SIZE, NUMBER_PARAM);
    var SIZE_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, SIZE);
    var COLOR = "color";
    var COLOR_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, COLOR, COLOR_PARAM);
    var COLOR_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, COLOR);
    var UNDERLINE = "u";
    var UNDERLINE_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, UNDERLINE);
    var UNDERLINE_OPENC = GetOpenTagRegString(delimiterLeft, delimiterRight, UNDERLINE, COLOR_PARAM);
    var UNDERLINE_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, UNDERLINE);
    var STRIKETHROUGH = "s";
    var STRIKETHROUGH_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, STRIKETHROUGH);
    var STRIKETHROUGH_OPENC = GetOpenTagRegString(delimiterLeft, delimiterRight, STRIKETHROUGH, COLOR_PARAM);
    var STRIKETHROUGH_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, STRIKETHROUGH);
    var SHADOW = "shadow";
    var SHADOW_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, SHADOW);
    var SHADOW_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, SHADOW);
    var STROKE = "stroke";
    var STROKE_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, STROKE);
    var STROKE_OPENC = GetOpenTagRegString(delimiterLeft, delimiterRight, STROKE, COLOR_PARAM);
    var STROKE_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, STROKE);
    var OFFSETY = "y";
    var OFFSETY_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, OFFSETY, NUMBER_PARAM);
    var OFFSETY_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, OFFSETY);
    var IMAGE = "img";
    var IMAGE_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, IMAGE, STR_PARAM);
    var IMAGE_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, IMAGE);
    var AREA = "area";
    var AREA_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, AREA, STR_PARAM);
    var AREA_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, AREA);
    var URL = "url";
    var URL_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, URL, STR_PARAM);
    var URL_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, URL);
    var ALIGN = "align";
    var ALIGN_OPEN = GetOpenTagRegString(delimiterLeft, delimiterRight, ALIGN, STR_PARAM);
    var ALIGN_CLOSE = GetCloseTagRegString(delimiterLeft, delimiterRight, ALIGN);
    TagRegexSave.RE_ESC_OPEN = new RegExp(ESC_OPEN, "i");
    TagRegexSave.RE_ESC_CLOSE = new RegExp(ESC_CLOSE, "i");
    TagRegexSave.RE_RAW_OPEN = new RegExp(RAW_OPEN, "i");
    TagRegexSave.RE_RAW_CLOSE = new RegExp(RAW_CLOSE, "i");
    TagRegexSave.RE_BLOD_OPEN = new RegExp(BLOD_OPEN, "i");
    TagRegexSave.RE_BLOD_CLOSE = new RegExp(BLOD_CLOSE, "i");
    TagRegexSave.RE_ITALICS_OPEN = new RegExp(ITALICS_OPEN, "i");
    TagRegexSave.RE_ITALICS_CLOSE = new RegExp(ITALICS_CLOSE, "i");
    TagRegexSave.RE_WEIGHT_OPEN = new RegExp(WEIGHT_OPEN, "i");
    TagRegexSave.RE_WEIGHT_CLOSE = new RegExp(WEIGHT_CLOSE, "i");
    TagRegexSave.RE_SIZE_OPEN = new RegExp(SIZE_OPEN, "i");
    TagRegexSave.RE_SIZE_CLOSE = new RegExp(SIZE_CLOSE, "i");
    TagRegexSave.RE_COLOR_OPEN = new RegExp(COLOR_OPEN, "i");
    TagRegexSave.RE_COLOR_CLOSE = new RegExp(COLOR_CLOSE, "i");
    TagRegexSave.RE_UNDERLINE_OPEN = new RegExp(UNDERLINE_OPEN, "i");
    TagRegexSave.RE_UNDERLINE_OPENC = new RegExp(UNDERLINE_OPENC, "i");
    TagRegexSave.RE_UNDERLINE_CLOSE = new RegExp(UNDERLINE_CLOSE, "i");
    TagRegexSave.RE_STRIKETHROUGH_OPEN = new RegExp(STRIKETHROUGH_OPEN, "i");
    TagRegexSave.RE_STRIKETHROUGH_OPENC = new RegExp(STRIKETHROUGH_OPENC, "i");
    TagRegexSave.RE_STRIKETHROUGH_CLOSE = new RegExp(STRIKETHROUGH_CLOSE, "i");
    TagRegexSave.RE_SHADOW_OPEN = new RegExp(SHADOW_OPEN, "i");
    TagRegexSave.RE_SHADOW_CLOSE = new RegExp(SHADOW_CLOSE, "i");
    TagRegexSave.RE_STROKE_OPEN = new RegExp(STROKE_OPEN, "i");
    TagRegexSave.RE_STROKE_OPENC = new RegExp(STROKE_OPENC, "i");
    TagRegexSave.RE_STROKE_CLOSE = new RegExp(STROKE_CLOSE, "i");
    TagRegexSave.RE_OFFSETY_OPEN = new RegExp(OFFSETY_OPEN, "i");
    TagRegexSave.RE_OFFSETY_CLOSE = new RegExp(OFFSETY_CLOSE, "i");
    TagRegexSave.RE_IMAGE_OPEN = new RegExp(IMAGE_OPEN, "i");
    TagRegexSave.RE_IMAGE_CLOSE = new RegExp(IMAGE_CLOSE, "i");
    TagRegexSave.RE_AREA_OPEN = new RegExp(AREA_OPEN, "i");
    TagRegexSave.RE_AREA_CLOSE = new RegExp(AREA_CLOSE, "i");
    TagRegexSave.RE_URL_OPEN = new RegExp(URL_OPEN, "i");
    TagRegexSave.RE_URL_CLOSE = new RegExp(URL_CLOSE, "i");
    TagRegexSave.RE_ALIGN_OPEN = new RegExp(ALIGN_OPEN, "i");
    TagRegexSave.RE_ALIGN_CLOSE = new RegExp(ALIGN_CLOSE, "i");
    TagRegexSave.RE_SPLITTEXT = new RegExp([
        RAW_OPEN,
        RAW_CLOSE,
        ESC_OPEN,
        ESC_CLOSE,
        BLOD_OPEN,
        BLOD_CLOSE,
        ITALICS_OPEN,
        ITALICS_CLOSE,
        WEIGHT_OPEN,
        WEIGHT_CLOSE,
        SIZE_OPEN,
        SIZE_CLOSE,
        COLOR_OPEN,
        COLOR_CLOSE,
        UNDERLINE_OPEN,
        UNDERLINE_OPENC,
        UNDERLINE_CLOSE,
        STRIKETHROUGH_OPEN,
        STRIKETHROUGH_OPENC,
        STRIKETHROUGH_CLOSE,
        SHADOW_OPEN,
        SHADOW_CLOSE,
        STROKE_OPEN,
        STROKE_OPENC,
        STROKE_CLOSE,
        OFFSETY_OPEN,
        OFFSETY_CLOSE,
        IMAGE_OPEN,
        IMAGE_CLOSE,
        AREA_OPEN,
        AREA_CLOSE,
        URL_OPEN,
        URL_CLOSE,
        ALIGN_OPEN,
        ALIGN_CLOSE
    ].join("|"), "ig");
    return true;
};
var GetTagRegex = function(delimiterLeft, delimiterRight) {
    if (delimiterLeft !== undefined) SetDelimiters(delimiterLeft, delimiterRight);
    return Object.assign({}, TagRegexSave);
};

},{"../../../../utils/string/EscapeRegex.js":"agAPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"agAPA":[function(require,module,exports) {
// https://github.com/sindresorhus/escape-string-regexp/blob/master/index.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var EscapeRegex = function(s) {
    return s.replace(re0, "\\$&").replace(re1, "\\x2d");
};
var re0 = /[|\\{}()[\]^$+*?.]/g;
var re1 = /-/g;
exports.default = EscapeRegex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9BHr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tagTextJs = require("./TagText.js");
var _tagTextJsDefault = parcelHelpers.interopDefault(_tagTextJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("tagText", function(x, y, text, style) {
    var gameObject = new (0, _tagTextJsDefault.default)(this.scene, x, y, text, style);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TagText", (0, _tagTextJsDefault.default));
exports.default = (0, _tagTextJsDefault.default);

},{"./TagText.js":"4bSPH","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4bSPH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tagtextJs = require("../../../plugins/tagtext.js");
var _tagtextJsDefault = parcelHelpers.interopDefault(_tagtextJs);
exports.default = (0, _tagtextJsDefault.default);

},{"../../../plugins/tagtext.js":"1JSmi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1JSmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tagTextJs = require("./gameobjects/tagtext/tagtext/TagText.js");
var _tagTextJsDefault = parcelHelpers.interopDefault(_tagTextJs);
exports.default = (0, _tagTextJsDefault.default);

},{"./gameobjects/tagtext/tagtext/TagText.js":"kQWRa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQWRa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textJs = require("../textbase/Text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _parserJs = require("./Parser.js");
var _parserJsDefault = parcelHelpers.interopDefault(_parserJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TagText extends (0, _textJsDefault.default) {
    constructor(scene, x, y, text, style){
        var tags = GetValue(style, "tags", undefined);
        var parser = new (0, _parserJsDefault.default)(tags);
        super(scene, x, y, text, style, "rexTagText", parser);
    }
    addTag(name, prop) {
        this.parser.addTag(name, prop);
        return this.updateText(true);
    }
    addTags(tags) {
        for(var name in tags)this.parser.addTag(name, tags[name]);
        return this.updateText(true);
    }
    getTag(name) {
        return this.parser.getTag(name);
    }
    preDestroy() {
        super.preDestroy();
        this.parser.destroy();
        this.parser = undefined;
    }
}
exports.default = TagText;

},{"../textbase/Text.js":"1f05k","./Parser.js":"kE7lR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kE7lR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textStyleJs = require("../../textbase/textstyle/TextStyle.js");
var _textStyleJsDefault = parcelHelpers.interopDefault(_textStyleJs);
var GETPROP_RESULT = {
    plainText: null,
    prevProp: null
};
var STYLE_RESULT = new (0, _textStyleJsDefault.default)();
class Parser {
    constructor(tags){
        if (tags === undefined) tags = {};
        this.tags = tags;
    }
    addTag(name, prop) {
        this.tags[name] = prop;
    }
    getTag(name) {
        return this.tags[name];
    }
    splitText(text, mode) {
        var result = [];
        var charIdx = 0;
        while(true){
            var regexResult = RE_SPLITTEXT.exec(text);
            if (!regexResult) break;
            var match = regexResult[0];
            var matchStart = RE_SPLITTEXT.lastIndex - match.length;
            if (charIdx < matchStart) result.push(text.substring(charIdx, matchStart));
            if (mode === undefined) result.push(match);
            else if (mode === 1) {
                if (RE_CLASS_HEADER.test(match)) {
                    var innerMatch = match.match(RE_CLASS);
                    result.push(innerMatch[2]);
                } else if (RE_STYLE_HEADER.test(match)) {
                    var innerMatch = match.match(RE_STYLE);
                    result.push(innerMatch[2]);
                }
            }
            charIdx = RE_SPLITTEXT.lastIndex;
        }
        var totalLen = text.length;
        if (charIdx < totalLen) result.push(text.substring(charIdx, totalLen));
        return result; // [text,...]         
    }
    tagTextToProp(text, prevProp) {
        var plainText, propOut;
        if (RE_CLASS_HEADER.test(text)) {
            var innerMatch = text.match(RE_CLASS);
            if (innerMatch != null) {
                var name = innerMatch[1];
                var tags = this.tags;
                if (tags.hasOwnProperty(name)) propOut = tags[name];
                else propOut = {};
                propOut._class = name;
                plainText = innerMatch[2];
            }
        } else if (RE_STYLE_HEADER.test(text)) {
            var innerMatch = text.match(RE_STYLE);
            if (innerMatch != null) {
                var style = innerMatch[1];
                propOut = StyleToProp(style);
                propOut._style = style;
                plainText = innerMatch[2];
            }
        }
        if (plainText == null) plainText = text;
        if (propOut == null) propOut = {};
        var result = GETPROP_RESULT;
        result.plainText = plainText;
        result.prop = propOut;
        return result;
    }
    propToContextStyle(defaultStyle, prop) {
        var result = STYLE_RESULT;
        if (!prop.hasOwnProperty("img")) {
            result.image = null;
            if (prop.hasOwnProperty("family") || prop.hasOwnProperty("fontFamily") || prop.hasOwnProperty("font-family")) {
                var family = prop.hasOwnProperty("family") ? prop.family : prop.hasOwnProperty("fontFamily") ? prop.fontFamily : prop["font-family"];
                result.fontFamily = family;
            } else result.fontFamily = defaultStyle.fontFamily;
            if (prop.hasOwnProperty("size") || prop.hasOwnProperty("fontSize") || prop.hasOwnProperty("font-size")) {
                var size = prop.hasOwnProperty("size") ? prop.size : prop.hasOwnProperty("fontSize") ? prop.fontSize : prop["font-size"];
                if (typeof size === "number") size = `${size}px`;
                result.fontSize = size;
            } else result.fontSize = defaultStyle.fontSize;
            if (prop.hasOwnProperty("style") || prop.hasOwnProperty("fontStyle") || prop.hasOwnProperty("font-style")) {
                var fontStyle = prop.hasOwnProperty("style") ? prop.style : prop.hasOwnProperty("fontStyle") ? prop.fontStyle : prop["font-style"];
                result.fontStyle = fontStyle;
            } else result.fontStyle = defaultStyle.fontStyle;
            if (prop.hasOwnProperty("color") || prop.hasOwnProperty("font-color")) {
                var color = prop.hasOwnProperty("color") ? prop.color : prop["font-color"];
                result.color = color;
            } else result.color = defaultStyle.color;
            if (prop.hasOwnProperty("stroke")) {
                var stroke = prop.stroke; // {color, thickness}
                result.stroke = stroke.hasOwnProperty("color") ? stroke.color : defaultStyle.stroke;
                result.strokeThickness = stroke.hasOwnProperty("thickness") ? stroke.thickness : defaultStyle.strokeThickness;
            } else {
                result.stroke = defaultStyle.stroke;
                result.strokeThickness = defaultStyle.strokeThickness;
            }
        } else result.image = prop.img;
        if (prop.hasOwnProperty("shadow")) {
            var shadow = prop.shadow; // {color, offsetX, offsetY, blur}
            result.shadowColor = shadow.hasOwnProperty("color") ? shadow.color : defaultStyle.shadowColor;
            result.shadowOffsetX = shadow.hasOwnProperty("offsetX") ? shadow.offsetX : defaultStyle.shadowOffsetX;
            result.shadowOffsetY = shadow.hasOwnProperty("offsetY") ? shadow.offsetY : defaultStyle.shadowOffsetY;
            result.shadowBlur = shadow.hasOwnProperty("blur") ? shadow.blur : defaultStyle.shadowBlur;
            result.shadowStroke = true;
            result.shadowFill = true;
        } else {
            result.shadowColor = defaultStyle.shadowColor;
            result.shadowOffsetX = defaultStyle.shadowOffsetX;
            result.shadowOffsetY = defaultStyle.shadowOffsetY;
            result.shadowBlur = defaultStyle.shadowBlur;
            result.shadowStroke = defaultStyle.shadowStroke;
            result.shadowFill = defaultStyle.shadowFill;
        }
        if (prop.hasOwnProperty("u") || prop.hasOwnProperty("underline")) {
            var u = prop.hasOwnProperty("u") ? prop.u : prop.underline; // {color, thickness, offset}
            result.underlineColor = u.hasOwnProperty("color") ? u.color : defaultStyle.underlineColor;
            result.underlineThickness = u.hasOwnProperty("thickness") ? u.thickness : defaultStyle.underlineThickness;
            result.underlineOffset = u.hasOwnProperty("offset") ? u.offset : defaultStyle.underlineOffset;
        } else {
            result.underlineColor = defaultStyle.underlineColor;
            result.underlineThickness = defaultStyle.underlineThickness;
            result.underlineOffset = defaultStyle.underlineOffset;
        }
        if (prop.hasOwnProperty("s") || prop.hasOwnProperty("strikethrough")) {
            var s = prop.hasOwnProperty("s") ? prop.s : prop.strikethrough; // {color, thickness, offset}
            result.strikethroughColor = s.hasOwnProperty("color") ? s.color : defaultStyle.strikethroughColor;
            result.strikethroughThickness = s.hasOwnProperty("thickness") ? s.thickness : defaultStyle.strikethroughThickness;
            result.strikethroughOffset = s.hasOwnProperty("offset") ? s.offset : defaultStyle.strikethroughOffset;
        } else {
            result.strikethroughColor = defaultStyle.strikethroughColor;
            result.strikethroughThickness = defaultStyle.strikethroughThickness;
            result.strikethroughOffset = defaultStyle.strikethroughOffset;
        }
        return result;
    }
    getStrokeThinkness(defaultStyle, prop) {
        var strokeThinkness;
        if (prop.hasOwnProperty("stroke")) {
            var stroke = prop.stroke; // {color, thickness}           
            strokeThinkness = stroke.hasOwnProperty("thickness") ? stroke.thickness : defaultStyle.strokeThickness;
        } else strokeThinkness = defaultStyle.strokeThickness;
        return strokeThinkness;
    }
    propToTagText(text, prop, prevProp) {
        if (prop.hasOwnProperty("_class")) {
            if (text === "") {
                if (this.isTextTag(prop._class)) return "";
            }
            return `<class='${prop._class}'>${text}</class>`;
        } else if (prop.hasOwnProperty("_style")) return `<style='${prop._style}'>${text}</style>`;
        else return text;
    }
    destroy() {
        this.tags = undefined;
    }
    isTextTag(tagName) {
        var tag = this.tags[tagName];
        if (tag) return tag.img == null;
        else return false;
    }
}
var StyleToProp = function(s) {
    s = s.split(";");
    var result = {}, prop, k, v;
    for(var i = 0, slen = s.length; i < slen; i++){
        prop = s[i].split(":");
        k = prop[0], v = prop[1];
        if (isEmpty(k) || isEmpty(v)) continue;
        switch(k){
            case "stroke":
                var params = v.split(" "); // stroke:blue 1px
                var len = params.length;
                v = {};
                if (len >= 1) v.color = params[0];
                if (len >= 2) v.thickness = parseInt(params[1].replace("px", ""));
                break;
            case "shadow":
                var params = v.split(" "); // shadow:blue 2px 2px 2px
                var len = params.length;
                v = {};
                if (len >= 1) v.color = params[0];
                if (len >= 2) v.offsetX = parseInt(params[1].replace("px", ""));
                if (len >= 3) v.offsetY = parseInt(params[2].replace("px", ""));
                if (len >= 4) v.blur = parseInt(params[3].replace("px", ""));
                break;
            case "u":
            case "underline":
            case "s":
            case "strikethrough":
                var params = v.split(" ");
                var len = params.length;
                v = {};
                if (len >= 1) v.color = params[0];
                if (len >= 2) v.thickness = parseInt(params[1].replace("px", ""));
                if (len >= 3) v.offset = parseInt(params[2].replace("px", ""));
                if (k === "underline") k = "u";
                else if (k === "strikethrough") k = "s";
                break;
            case "y":
                v = parseFloat(v);
                break;
        }
        result[k] = v;
    }
    return result;
};
var isEmpty = function(s) {
    // Remove white spaces.
    s = s.replace(RE_SPACE, "");
    return s.length === 0;
};
var RE_SPLITTEXT = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>|<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/g;
var RE_CLASS_HEADER = /<\s*class=/i;
var RE_CLASS = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>/;
var RE_STYLE_HEADER = /<\s*style=/i;
var RE_STYLE = /<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/;
var RE_SPACE = /^\s+|\s+$/;
exports.default = Parser;

},{"../../textbase/textstyle/TextStyle.js":"3SHQS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4O36N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dynamicTextJs = require("./DynamicText.js");
var _dynamicTextJsDefault = parcelHelpers.interopDefault(_dynamicTextJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("dynamicText", function(x, y, width, height, config) {
    var gameObject = new (0, _dynamicTextJsDefault.default)(this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.DynamicText", (0, _dynamicTextJsDefault.default));
exports.default = (0, _dynamicTextJsDefault.default);

},{"./DynamicText.js":"59zC3","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59zC3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dynamictextJs = require("../../../plugins/dynamictext.js");
var _dynamictextJsDefault = parcelHelpers.interopDefault(_dynamictextJs);
exports.default = (0, _dynamictextJsDefault.default);

},{"../../../plugins/dynamictext.js":"9otZ9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9otZ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dynamicTextJs = require("./gameobjects/dynamictext/dynamictext/DynamicText.js");
var _dynamicTextJsDefault = parcelHelpers.interopDefault(_dynamicTextJs);
exports.default = (0, _dynamicTextJsDefault.default);

},{"./gameobjects/dynamictext/dynamictext/DynamicText.js":"eXloc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eXloc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../../canvas/canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _paddingMethods = require("../../../utils/padding/PaddingMethods");
var _backgroundJs = require("./bob/background/Background.js");
var _backgroundJsDefault = parcelHelpers.interopDefault(_backgroundJs);
var _innerBoundsJs = require("./bob/innerbounds/InnerBounds.js");
var _innerBoundsJsDefault = parcelHelpers.interopDefault(_innerBoundsJs);
var _textStyleJs = require("./bob/char/TextStyle.js");
var _textStyleJsDefault = parcelHelpers.interopDefault(_textStyleJs);
var _methods = require("./methods/Methods");
var _methodsDefault = parcelHelpers.interopDefault(_methods);
var _poolManagerJs = require("./poolmanager/PoolManager.js");
var _poolManagerJsDefault = parcelHelpers.interopDefault(_poolManagerJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class DynamicText extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, fixedWidth, fixedHeight, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            fixedWidth = GetValue(config, "width", 0);
            fixedHeight = GetValue(config, "height", 0);
        } else if (IsPlainObject(fixedWidth)) {
            config = fixedWidth;
            fixedWidth = GetValue(config, "width", 0);
            fixedHeight = GetValue(config, "height", 0);
        }
        var width = fixedWidth === 0 ? 1 : fixedWidth;
        var height = fixedHeight === 0 ? 1 : fixedHeight;
        super(scene, x, y, width, height);
        this.type = "rexDynamicText";
        this.autoRound = true;
        this.padding = (0, _paddingMethods.SetPadding)();
        this.wrapPadding = (0, _paddingMethods.SetPadding)();
        var textStyleConfig = GetValue(config, "style", undefined);
        this.defaultTextStyle = new (0, _textStyleJsDefault.default)(null, textStyleConfig);
        this.textStyle = this.defaultTextStyle.clone();
        this.setTestString(GetValue(config, "testString", "|M\xc9qgy"));
        this.background = new (0, _backgroundJsDefault.default)(this, GetValue(config, "background", undefined));
        this.innerBounds = new (0, _innerBoundsJsDefault.default)(this, GetValue(config, "innerBounds", undefined));
        this.children = [];
        this.lastAppendedChildren = [];
        this.lastOverChild = null;
        this.poolManager = new (0, _poolManagerJsDefault.default)(config);
        this.setFixedSize(fixedWidth, fixedHeight);
        this.setPadding(GetValue(config, "padding", 0));
        this.setWrapConfig(GetValue(config, "wrap", undefined));
        this.setChildrenInteractiveEnable(GetValue(config, "childrenInteractive", false));
        var text = GetValue(config, "text", undefined);
        if (text) this.setText(text);
    }
    updateTexture() {
        this.renderContent();
        super.updateTexture();
        return this;
    }
    get text() {
        return this.getText(true);
    }
    set text(value) {
        this.setText(value);
    }
    setSize(width, height) {
        this.setFixedSize(width, height);
        return this;
    }
}
Object.assign(DynamicText.prototype, (0, _methodsDefault.default));
exports.default = DynamicText;

},{"../../canvas/canvasbase/Canvas.js":"lBB2L","../../../utils/padding/PaddingMethods":"dcX3C","./bob/background/Background.js":"j2GCW","./bob/innerbounds/InnerBounds.js":"hBQ4i","./bob/char/TextStyle.js":"6SYHM","./methods/Methods":"e7izc","./poolmanager/PoolManager.js":"eKlA2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dcX3C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetPadding", ()=>GetPadding);
parcelHelpers.export(exports, "SetPadding", ()=>SetPadding);
const GetValue = Phaser.Utils.Objects.GetValue;
var GetPadding = function(padding, key) {
    if (key === undefined) return padding;
    return padding[key];
};
var SetPadding = function(padding, key, value) {
    if (padding === undefined) padding = {};
    if (key === undefined) key = 0;
    var keyType = typeof key;
    if (keyType === "string") padding[key] = value;
    else if (keyType === "number") {
        padding.left = key;
        padding.right = key;
        padding.top = key;
        padding.bottom = key;
    } else {
        padding.left = GetValue(key, "left", 0);
        padding.right = GetValue(key, "right", 0);
        padding.top = GetValue(key, "top", 0);
        padding.bottom = GetValue(key, "bottom", 0);
    }
    return padding;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j2GCW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _getStyleJs = require("../../../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
var _getPropertyJs = require("../utils/GetProperty.js");
var _getPropertyJsDefault = parcelHelpers.interopDefault(_getPropertyJs);
var _drawRoundRectangleBackgroundJs = require("../../../../canvas/utils/DrawRoundRectangleBackground.js");
var _drawRoundRectangleBackgroundJsDefault = parcelHelpers.interopDefault(_drawRoundRectangleBackgroundJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Background extends (0, _renderBaseJsDefault.default) {
    constructor(parent, config){
        super(parent, "background");
        this.setColor(GetValue(config, "color", null), GetValue(config, "color2", null), GetValue(config, "horizontalGradient", true));
        this.setStroke(GetValue(config, "stroke", null), GetValue(config, "strokeThickness", 2));
        this.setCornerRadius(GetValue(config, "cornerRadius", 0), GetValue(config, "cornerIteration", null));
    }
    set color(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._color != value);
        this._color = value;
    }
    get color() {
        return this._color;
    }
    set color2(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._color2 != value);
        this._color2 = value;
    }
    get color2() {
        return this._color2;
    }
    set horizontalGradient(value) {
        this.setDirty(this._horizontalGradient != value);
        this._horizontalGradient = value;
    }
    get horizontalGradient() {
        return this._horizontalGradient;
    }
    setColor(color, color2, isHorizontalGradient) {
        if (isHorizontalGradient === undefined) isHorizontalGradient = true;
        this.color = color;
        this.color2 = color2;
        this.horizontalGradient = isHorizontalGradient;
        return this;
    }
    set stroke(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._stroke != value);
        this._stroke = value;
    }
    get stroke() {
        return this._stroke;
    }
    set strokeThickness(value) {
        this.setDirty(this._strokeThickness != value);
        this._strokeThickness = value;
    }
    get strokeThickness() {
        return this._strokeThickness;
    }
    setStroke(color, lineWidth) {
        if (color != null) {
            if (lineWidth === undefined) lineWidth = 2;
        }
        this.stroke = color;
        this.strokeThickness = lineWidth;
        return this;
    }
    set cornerRadius(value) {
        this.setDirty(this._cornerRadius != value);
        this._cornerRadius = value;
    }
    get cornerRadius() {
        return this._cornerRadius;
    }
    set cornerIteration(value) {
        this.setDirty(this._cornerIteration != value);
        this._cornerIteration = value;
    }
    get cornerIteration() {
        return this._cornerIteration;
    }
    modifyStyle(o) {
        if (o.hasOwnProperty("color")) this.setColor(o.color, (0, _getPropertyJsDefault.default)("color2", o, this), (0, _getPropertyJsDefault.default)("horizontalGradient", o, this));
        if (o.hasOwnProperty("stroke")) this.setStroke(o.stroke, (0, _getPropertyJsDefault.default)("strokeThickness", o, this));
        if (o.hasOwnProperty("cornerRadius")) this.setCornerRadius(o.cornerRadius, (0, _getPropertyJsDefault.default)("cornerIteration", o, this));
        return this;
    }
    modifyPorperties(o) {
        super.modifyPorperties(o);
        this.modifyStyle(o);
        return this;
    }
    setCornerRadius(radius, iteration) {
        this.cornerRadius = radius;
        this.cornerIteration = iteration;
        return this;
    }
    renderContent() {
        (0, _drawRoundRectangleBackgroundJsDefault.default)(this.parent, this.color, this.stroke, this.strokeThickness, this.cornerRadius, this.color2, this.horizontalGradient, this.cornerIteration);
    }
}
exports.default = Background;

},{"../renderbase/RenderBase.js":"leqLS","../../../../../utils/canvas/GetStyle.js":"65BAh","../utils/GetProperty.js":"ftgwm","../../../../canvas/utils/DrawRoundRectangleBackground.js":"8PmFe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"leqLS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("../Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderBase extends (0, _baseJsDefault.default) {
    constructor(parent, type){
        super(parent, type);
        this.renderable = true;
        this.toLocalPosition = true;
        this.originX = 0;
        this.offsetX = 0; // Override
        this.offsetY = 0; // Override
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this.setDirty(this._visible != value);
        this._visible = value;
    }
    setVisible(visible) {
        if (visible === undefined) visible = true;
        this.visible = visible;
        return this;
    }
    get alpha() {
        return this._alpha;
    }
    set alpha(value) {
        this.setDirty(this._alpha != value);
        this._alpha = value;
    }
    setAlpha(alpha) {
        this.alpha = alpha;
        return this;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this.setDirty(this._x != value);
        this._x = value;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this.setDirty(this._y != value);
        this._y = value;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setPosition(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setInitialPosition(x, y) {
        this.x0 = x;
        this.y0 = y;
        return this;
    }
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        this.setDirty(this._rotation != value);
        this._rotation = value;
    }
    setRotation(rotation) {
        this.rotation = rotation;
        return this;
    }
    get angle() {
        return RadToDeg(this._rotation);
    }
    set angle(value) {
        this.rotation = DegToRad(value);
    }
    setAngle(angle) {
        this.angle = angle;
        return this;
    }
    get scaleX() {
        return this._scaleX;
    }
    set scaleX(value) {
        this.setDirty(this._scaleX !== value);
        this._scaleX = value;
    }
    setScaleX(scaleX) {
        this.scaleX = scaleX;
        return this;
    }
    // Override
    get width() {
        return 0;
    }
    // Override
    set width(value) {}
    setWidth(width, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.width = width;
        if (keepAspectRatio) this.scaleY = this.scaleX;
        return this;
    }
    get leftSpace() {
        return this._leftSpace;
    }
    set leftSpace(value) {
        this.setDirty(this._leftSpace !== value);
        this._leftSpace = value;
    }
    setLeftSpace(value) {
        this.leftSpace = value;
        return this;
    }
    get rightSpace() {
        return this._rightSpace;
    }
    set rightSpace(value) {
        this.setDirty(this._rightSpace !== value);
        this._rightSpace = value;
    }
    setRightSpace(value) {
        this.rightSpace = value;
        return this;
    }
    get outerWidth() {
        return this.width + this.leftSpace + this.rightSpace;
    }
    get scaleY() {
        return this._scaleY;
    }
    set scaleY(value) {
        this.setDirty(this._scaleY !== value);
        this._scaleY = value;
    }
    setScaleY(scaleY) {
        this.scaleY = scaleY;
        return this;
    }
    // Override
    get height() {
        return 0;
    }
    // Override
    set height(value) {}
    setHeight(height, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.height = height;
        if (keepAspectRatio) this.scaleX = this.scaleY;
        return this;
    }
    setScale(scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        return this;
    }
    setOrigin(x) {
        this.originX = x;
        return this;
    }
    setAlign(align) {
        this.align = align;
        return this;
    }
    modifyPorperties(o) {
        if (!o) return this;
        if (o.hasOwnProperty("x")) this.setX(o.x);
        if (o.hasOwnProperty("y")) this.setY(o.y);
        if (o.hasOwnProperty("rotation")) this.setRotation(o.rotation);
        else if (o.hasOwnProperty("angle")) this.setAngle(o.angle);
        if (o.hasOwnProperty("alpha")) this.setAlpha(o.alpha);
        // ScaleX, ScaleY
        var width = GetValue(o, "width", undefined);
        var height = GetValue(o, "height", undefined);
        var scaleX = GetValue(o, "scaleX", undefined);
        var scaleY = GetValue(o, "scaleY", undefined);
        if (width !== undefined) {
            if (height === undefined && scaleY === undefined) this.setWidth(width, true);
            else this.setWidth(width);
        } else if (scaleX !== undefined) this.setScaleX(scaleX);
        if (height !== undefined) {
            if (width === undefined && scaleX === undefined) this.setHeight(height, true);
            else this.setHeight(height);
        } else if (scaleY !== undefined) this.setScaleY(scaleY);
        if (o.hasOwnProperty("leftSpace")) this.setLeftSpace(o.leftSpace);
        if (o.hasOwnProperty("rightSpace")) this.setRightSpace(o.rightSpace);
        if (o.hasOwnProperty("align")) this.setAlign(o.align);
        return this;
    }
    setDrawBelowCallback(callback) {
        this.drawBelowCallback = callback;
        return this;
    }
    setDrawAboveCallback(callback) {
        this.drawAboveCallback = callback;
        return this;
    }
    reset() {
        this.setVisible().setAlpha(1).setPosition(0, 0).setRotation(0).setScale(1, 1).setLeftSpace(0).setRightSpace(0).setOrigin(0).setAlign().setDrawBelowCallback().setDrawAboveCallback();
        return this;
    }
    // Override
    get willRender() {
        return this.visible && this.alpha > 0;
    }
    get drawX() {
        return this.x + this.leftSpace + this.offsetX - this.originX * this.width;
    }
    get drawY() {
        return this.y + this.offsetY;
    }
    // Override
    get drawTLX() {
        return 0;
    }
    get drawTLY() {
        return 0;
    }
    get drawBLX() {
        return 0;
    }
    get drawBLY() {
        return 0;
    }
    get drawTRX() {
        return 0;
    }
    get drawTRY() {
        return 0;
    }
    get drawBRX() {
        return 0;
    }
    get drawBRY() {
        return 0;
    }
    get drawCenterX() {
        return (this.drawTRX + this.drawTLX) / 2;
    }
    get drawCenterY() {
        return (this.drawBLY + this.drawTLY) / 2;
    }
}
Object.assign(RenderBase.prototype, (0, _methodsJsDefault.default));
exports.default = RenderBase;

},{"../Base.js":"1R8ah","./Methods.js":"3bPM5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1R8ah":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataMethodsJs = require("../../../../utils/data/DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
class Base {
    constructor(parent, type){
        this.setParent(parent);
        this.type = type;
        this.renderable = false;
        this.reset().setActive();
    }
    destroy() {
        this.parent.removeChild(this);
    }
    setParent(parent) {
        this.parent = parent;
        return this;
    }
    get scene() {
        return this.parent.scene;
    }
    get canvas() {
        return this.parent ? this.parent.canvas : null;
    }
    get context() {
        return this.parent ? this.parent.context : null;
    }
    setDirty(dirty) {
        if (dirty && this.parent) this.parent.dirty = true;
        return this;
    }
    get active() {
        return this._active;
    }
    set active(value) {
        this.setDirty(this._active != value);
        this._active = value;
    }
    setActive(active) {
        if (active === undefined) active = true;
        this.active = active;
        return this;
    }
    modifyPorperties(o) {
        return this;
    }
    // Override
    onFree() {
        this.reset().setParent();
    }
    // Override
    reset() {
        return this;
    }
    // Override
    render() {}
    // Override
    contains(x, y) {
        return false;
    }
}
Object.assign(Base.prototype, (0, _dataMethodsJsDefault.default));
exports.default = Base;

},{"../../../../utils/data/DataMethods.js":"kSQ7j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3bPM5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderMethodsJs = require("./RenderMethods.js");
var _renderMethodsJsDefault = parcelHelpers.interopDefault(_renderMethodsJs);
var _containsJs = require("./Contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getWorldPositionJs = require("./GetWorldPosition.js");
var _getWorldPositionJsDefault = parcelHelpers.interopDefault(_getWorldPositionJs);
var Methods = {
    contains: (0, _containsJsDefault.default),
    getWorldPosition: (0, _getWorldPositionJsDefault.default)
};
Object.assign(Methods, (0, _renderMethodsJsDefault.default));
exports.default = Methods;

},{"./RenderMethods.js":"hUIGP","./Contains.js":"6O3JW","./GetWorldPosition.js":"5GQZk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUIGP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Override
    renderContent () {},
    // Override
    render () {
        if (!this.willRender) return this;
        var context = this.context;
        context.save();
        context.globalAlpha = this.alpha;
        if (this.toLocalPosition) {
            var x = this.drawX, y = this.drawY;
            if (this.autoRound) {
                x = Math.round(x);
                y = Math.round(y);
            }
            context.translate(x, y);
            context.scale(this.scaleX, this.scaleY);
            context.rotate(this.rotation);
        }
        if (this.drawBelowCallback) this.drawBelowCallback(this);
        this.renderContent();
        if (this.drawAboveCallback) this.drawAboveCallback(this);
        context.restore();
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6O3JW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasPositionToBobPositionJs = require("../../methods/utils/transform/CanvasPositionToBobPosition.js");
var _canvasPositionToBobPositionJsDefault = parcelHelpers.interopDefault(_canvasPositionToBobPositionJs);
const Rectangle = Phaser.Geom.Rectangle;
var Contains = function(canvasX, canvasY) {
    if (this.width === 0 || this.height === 0) return false;
    var bobPosition = (0, _canvasPositionToBobPositionJsDefault.default)(canvasX, canvasY, this, true);
    return GetBounds(this).contains(bobPosition.x, bobPosition.y);
};
var GetBounds = function(bob) {
    if (globBounds === undefined) globBounds = new Rectangle();
    var x = bob.drawTLX, y = bob.drawTLY;
    globBounds.setTo(x, y, bob.drawTRX - x, bob.drawBLY - y);
    return globBounds;
};
var globBounds;
exports.default = Contains;

},{"../../methods/utils/transform/CanvasPositionToBobPosition.js":"9I6kt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9I6kt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RotateAround = Phaser.Math.RotateAround;
var CanvasPositionToBobPosition = function(canvasX, canvasY, bob, out) {
    if (out === undefined) out = {};
    else if (out === true) {
        if (globPoint === undefined) globPoint = {};
        out = globPoint;
    }
    out.x = (canvasX - bob.drawX) / bob.scaleX;
    out.y = (canvasY - bob.drawY) / bob.scaleY;
    if (bob.rotation !== 0) RotateAround(out, 0, 0, -bob.rotation);
    return out;
};
var globPoint;
exports.default = CanvasPositionToBobPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5GQZk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBobWorldPositionJs = require("../../methods/utils/transform/GetBobWorldPosition.js");
var _getBobWorldPositionJsDefault = parcelHelpers.interopDefault(_getBobWorldPositionJs);
var GetWorldPosition = function(offsetX, offsetY, out) {
    return (0, _getBobWorldPositionJsDefault.default)(this.parent, this, offsetX, offsetY, out);
};
exports.default = GetWorldPosition;

},{"../../methods/utils/transform/GetBobWorldPosition.js":"2jATf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2jATf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bobPositionToWorldPositionJs = require("./BobPositionToWorldPosition.js");
var _bobPositionToWorldPositionJsDefault = parcelHelpers.interopDefault(_bobPositionToWorldPositionJs);
var GetBobWorldPosition = function(dynamicText, bob, offsetX, offsetY, out) {
    if (typeof offsetX !== "number") {
        out = offsetX;
        offsetX = 0;
        offsetY = 0;
    }
    var bobX = bob.drawCenterX + offsetX;
    var bobY = bob.drawCenterY + offsetY;
    return (0, _bobPositionToWorldPositionJsDefault.default)(dynamicText, bob, bobX, bobY, out);
};
exports.default = GetBobWorldPosition;

},{"./BobPositionToWorldPosition.js":"cRU3n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cRU3n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bobPositionToCanvasPositionJs = require("./BobPositionToCanvasPosition.js");
var _bobPositionToCanvasPositionJsDefault = parcelHelpers.interopDefault(_bobPositionToCanvasPositionJs);
var _gameObjectLocalXYToWorldXYJs = require("../../../../../../utils/position/GameObjectLocalXYToWorldXY.js");
var _gameObjectLocalXYToWorldXYJsDefault = parcelHelpers.interopDefault(_gameObjectLocalXYToWorldXYJs);
var BobPositionToWorldPosition = function(dynamicText, bob, bobX, bobY, out) {
    var localXY = (0, _bobPositionToCanvasPositionJsDefault.default)(bob, bobX, bobY, true);
    var worldXY = (0, _gameObjectLocalXYToWorldXYJsDefault.default)(dynamicText, localXY.x, localXY.y, out);
    return worldXY;
};
exports.default = BobPositionToWorldPosition;

},{"./BobPositionToCanvasPosition.js":"cmxdw","../../../../../../utils/position/GameObjectLocalXYToWorldXY.js":"4UhPT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmxdw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RotateAround = Phaser.Math.RotateAround;
var BobPositionToCanvasPosition = function(bob, bobX, bobY, out) {
    if (out === undefined) out = {};
    else if (out === true) {
        if (globPoint === undefined) globPoint = {};
        out = globPoint;
    }
    out.x = bobX;
    out.y = bobY;
    if (bob.rotation !== 0) RotateAround(out, 0, 0, bob.rotation);
    out.x = out.x * bob.scaleX + bob.drawX;
    out.y = out.y * bob.scaleY + bob.drawY;
    return out;
};
var globPoint;
exports.default = BobPositionToCanvasPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UhPT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
var GameObjectLocalXYToWorldXY = function(gameObject, localX, localY, out) {
    if (out === undefined) out = {};
    else if (out === true) out = globOut;
    var px = localX - gameObject.width * gameObject.originX;
    var py = localY - gameObject.height * gameObject.originY;
    if (tempMatrix === undefined) {
        tempMatrix = new TransformMatrix();
        parentMatrix = new TransformMatrix();
    }
    if (gameObject.parentContainer) gameObject.getWorldTransformMatrix(tempMatrix, parentMatrix);
    else tempMatrix.applyITRS(gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY);
    tempMatrix.transformPoint(px, py, out);
    return out;
};
var tempMatrix, parentMatrix;
var globOut = {};
exports.default = GameObjectLocalXYToWorldXY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftgwm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetProperty = function(name, config, defaultConfig) {
    if (config.hasOwnProperty(name)) return config[name];
    else return defaultConfig[name];
};
exports.default = GetProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBQ4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _getStyleJs = require("../../../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class InnerBounds extends (0, _renderBaseJsDefault.default) {
    constructor(parent, config){
        super(parent, "innerbounds");
        this.setColor(GetValue(config, "color", null), GetValue(config, "color2", null), GetValue(config, "horizontalGradient", true));
        this.setStroke(GetValue(config, "stroke", null), GetValue(config, "strokeThickness", 2));
    }
    set color(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._color != value);
        this._color = value;
    }
    get color() {
        return this._color;
    }
    set color2(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._color2 != value);
        this._color2 = value;
    }
    get color2() {
        return this._color2;
    }
    set horizontalGradient(value) {
        this.setDirty(this._horizontalGradient != value);
        this._horizontalGradient = value;
    }
    get horizontalGradient() {
        return this._horizontalGradient;
    }
    setColor(color, color2, isHorizontalGradient) {
        if (isHorizontalGradient === undefined) isHorizontalGradient = true;
        this.color = color;
        this.color2 = color2;
        this.horizontalGradient = isHorizontalGradient;
        return this;
    }
    set stroke(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.setDirty(this._stroke != value);
        this._stroke = value;
    }
    get stroke() {
        return this._stroke;
    }
    set strokeThickness(value) {
        this.setDirty(this._strokeThickness != value);
        this._strokeThickness = value;
    }
    get strokeThickness() {
        return this._strokeThickness;
    }
    setStroke(color, lineWidth) {
        if (color != null) {
            if (lineWidth === undefined) lineWidth = 2;
        }
        this.stroke = color;
        this.strokeThickness = lineWidth;
        return this;
    }
    modifyPorperties(o) {
        super.modifyPorperties(o);
        if (o.hasOwnProperty("color")) this.setColor(o.color, GetValue(o, "color2", null), GetValue(o, "horizontalGradient", true));
        if (o.hasOwnProperty("stroke")) this.setStroke(o.stroke, GetValue(o, "strokeThickness", 2));
    }
    renderContent() {
        var padding = this.parent.padding;
        var x = padding.left, y = padding.top, width = this.parent.width - padding.left - padding.right, height = this.parent.height - padding.top - padding.bottom;
        var context = this.context;
        if (this.color != null) {
            var fillStyle;
            if (this.color2 != null) {
                var grd;
                if (this.horizontalGradient) grd = context.createLinearGradient(0, 0, width, 0);
                else grd = context.createLinearGradient(0, 0, 0, height);
                grd.addColorStop(0, this.color);
                grd.addColorStop(1, this.color2);
                fillStyle = grd;
            } else fillStyle = this.color;
            context.fillStyle = fillStyle;
            context.fillRect(x, y, width, height);
        }
        if (this.stroke != null && this.strokeThickness > 0) {
            context.strokeStyle = this.stroke;
            context.lineWidth = this.strokeThickness;
            context.strokeRect(x, y, width, height);
        }
    }
}
exports.default = InnerBounds;

},{"../renderbase/RenderBase.js":"leqLS","../../../../../utils/canvas/GetStyle.js":"65BAh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SYHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getStyleJs = require("../../../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
var _getPropertyJs = require("../utils/GetProperty.js");
var _getPropertyJsDefault = parcelHelpers.interopDefault(_getPropertyJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TextStyle {
    constructor(parent, config){
        this.parent = parent;
        this.set(config);
    }
    toJSON() {
        return {
            bold: this.bold,
            italic: this.italic,
            fontSize: this.fontSize,
            fontFamily: this.fontFamily,
            color: this.color,
            stroke: this.stroke,
            strokeThickness: this.strokeThickness,
            shaodwColor: this.shadowColor,
            shadowBlur: this.shadowBlur,
            shadowOffsetX: this.shadowOffsetX,
            shadowOffsetY: this.shadowOffsetY,
            offsetX: this.offsetX,
            offsetY: this.offsetY,
            leftSpace: this.leftSpace,
            rightSpace: this.rightSpace,
            backgroundHeight: this.backgroundHeight,
            backgroundBottomY: this.backgroundBottomY,
            align: this.align
        };
    }
    set(o) {
        this.setBold(GetValue(o, "bold", false));
        this.setItalic(GetValue(o, "italic", false));
        this.setFontSize(GetValue(o, "fontSize", "16px"));
        this.setFontFamily(GetValue(o, "fontFamily", "Courier"));
        this.setColor(GetValue(o, "color", "#fff"));
        this.setStrokeStyle(GetValue(o, "stroke", null), GetValue(o, "strokeThickness", 0));
        this.setShadow(GetValue(o, "shadowColor", null), GetValue(o, "shadowOffsetX", 0), GetValue(o, "shadowOffsetY", 0), GetValue(o, "shadowBlur", 0));
        this.setOffset(GetValue(o, "offsetX", 0), GetValue(o, "offsetY", 0));
        this.setSpace(GetValue(o, "leftSpace", 0), GetValue(o, "rightSpace", 0));
        this.setAlign(GetValue(o, "align", undefined));
        this.setBackgroundColor(GetValue(o, "backgroundColor", null));
        this.setBackgroundHeight(GetValue(o, "backgroundHeight", undefined));
        this.setBackgroundBottomY(GetValue(o, "backgroundBottomY", undefined));
        return this;
    }
    modify(o) {
        if (o.hasOwnProperty("bold")) this.setBold(o.bold);
        if (o.hasOwnProperty("italic")) this.setItalic(o.italic);
        if (o.hasOwnProperty("fontSize")) this.setFontSize(o.fontSize);
        if (o.hasOwnProperty("fontFamily")) this.setFontFamily(o.fontFamily);
        if (o.hasOwnProperty("color")) this.setColor(o.color);
        if (o.hasOwnProperty("stroke") || o.hasOwnProperty("strokeThickness")) this.setStrokeStyle((0, _getPropertyJsDefault.default)("stroke", o, this), (0, _getPropertyJsDefault.default)("strokeThickness", o, this));
        if (o.hasOwnProperty("shadowColor")) this.setShadowColor(o.shadowColor);
        if (o.hasOwnProperty("shadowOffsetX") || o.hasOwnProperty("shadowOffsetY")) this.setShadowOffset((0, _getPropertyJsDefault.default)("shadowOffsetX", o, this), (0, _getPropertyJsDefault.default)("shadowOffsetY", o, this));
        if (o.hasOwnProperty("shadowBlur")) this.setShadowBlur(o.shaodwBlur);
        if (o.hasOwnProperty("offsetX")) this.setOffsetX(o.offsetX);
        if (o.hasOwnProperty("offsetY")) this.setOffsetY(o.offsetY);
        if (o.hasOwnProperty("leftSpace")) this.setLeftSpace(o.leftSpace);
        if (o.hasOwnProperty("rightSpace")) this.setRightSpace(o.rightSpace);
        if (o.hasOwnProperty("align")) this.setAlign(o.align);
        if (o.hasOwnProperty("backgroundColor")) this.setBackgroundColor(o.backgroundColor);
        if (o.hasOwnProperty("backgroundHeight")) this.setBackgroundHeight(o.backgroundHeight);
        if (o.hasOwnProperty("backgroundBottomY")) this.setBackgroundBottomY(o.backgroundBottomY);
        return this;
    }
    setUpdateTextFlag() {
        if (this.parent) this.parent.updateTextFlag = true;
        return this;
    }
    clone() {
        return new TextStyle(null, this.toJSON());
    }
    copyFrom(sourceTextStyle) {
        this.set(sourceTextStyle.toJSON());
        return this;
    }
    copyTo(targetTextStyle) {
        targetTextStyle.set(this.toJSON());
        return this;
    }
    setBold(value) {
        if (value === undefined) value = true;
        this.bold = value;
        this.setUpdateTextFlag();
        return this;
    }
    setItalic(value) {
        if (value === undefined) value = true;
        this.italic = value;
        this.setUpdateTextFlag();
        return this;
    }
    get fontStyle() {
        if (this.bold && this.italic) return "bold italic";
        else if (this.bold) return "bold";
        else if (this.italic) return "italic";
        else return "";
    }
    setFontSize(fontSize) {
        if (typeof fontSize === "number") fontSize = `${fontSize}px`;
        this.fontSize = fontSize;
        this.setUpdateTextFlag();
        return this;
    }
    setFontFamily(fontFamily) {
        this.fontFamily = fontFamily;
        this.setUpdateTextFlag();
        return this;
    }
    get font() {
        return `${this.fontStyle} ${this.fontSize} ${this.fontFamily}`;
    }
    setColor(color) {
        this.color = (0, _getStyleJsDefault.default)(color);
        return this;
    }
    get hasFill() {
        return this.color != null;
    }
    setStrokeStyle(stroke, strokeThickness) {
        this.stroke = (0, _getStyleJsDefault.default)(stroke);
        if (strokeThickness !== undefined) this.strokeThickness = strokeThickness;
        return this;
    }
    setStrokeThickness(strokeThickness) {
        this.strokeThickness = strokeThickness;
        return this;
    }
    get hasStroke() {
        return this.stroke != null && this.strokeThickness > 0;
    }
    setShadowColor(color) {
        this.shadowColor = (0, _getStyleJsDefault.default)(color);
        return this;
    }
    setShadowOffset(offsetX, offsetY) {
        if (offsetX === undefined) offsetX = 0;
        if (offsetY === undefined) offsetY = 0;
        this.shadowOffsetX = offsetX;
        this.shadowOffsetY = offsetY;
        return this;
    }
    setShadowBlur(blur) {
        if (blur === undefined) blur = 0;
        this.shaodwBlur = blur;
        return this;
    }
    setShadow(color, offsetX, offsetY, blur) {
        this.setShadowColor(color).setShadowOffset(offsetX, offsetY).setShadowBlur(blur);
        return this;
    }
    setBackgroundColor(color) {
        this.backgroundColor = (0, _getStyleJsDefault.default)(color);
        return this;
    }
    get hasBackgroundColor() {
        return this.backgroundColor != null;
    }
    setBackgroundHeight(height) {
        this.backgroundHeight = height;
        return this;
    }
    setBackgroundBottomY(y) {
        this.backgroundBottomY = y;
        return this;
    }
    setOffsetX(offsetX) {
        if (offsetX === undefined) offsetX = 0;
        this.offsetX = offsetX;
        return this;
    }
    setOffsetY(offsetY) {
        if (offsetY === undefined) offsetY = 0;
        this.offsetY = offsetY;
        return this;
    }
    setOffset(offsetX, offsetY) {
        this.setOffsetX(offsetX).setOffsetY(offsetY);
        return this;
    }
    setLeftSpace(space) {
        if (space === undefined) space = 0;
        this.leftSpace = space;
        return this;
    }
    setRightSpace(space) {
        if (space === undefined) space = 0;
        this.rightSpace = space;
        return this;
    }
    setSpace(leftSpace, rightSpace) {
        this.setLeftSpace(leftSpace).setRightSpace(rightSpace);
        return this;
    }
    setAlign(align) {
        this.align = align;
        return this;
    }
    syncFont(context) {
        context.font = this.font;
        return this;
    }
    syncStyle(context) {
        context.textBaseline = "alphabetic";
        var hasFill = this.hasFill;
        var hasStroke = this.hasStroke;
        context.fillStyle = hasFill ? this.color : "#000";
        context.strokeStyle = hasStroke ? this.stroke : "#000";
        context.lineWidth = hasStroke ? this.strokeThickness : 0;
        context.lineCap = "round";
        context.lineJoin = "round";
        return this;
    }
    syncShadow(context) {
        if (context.shadowColor != null) {
            context.shadowColor = this.shadowColor;
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
            context.shadowBlur = this.shadowBlur;
        } else {
            context.shadowColor = 0;
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
            context.shadowBlur = 0;
        }
    }
    getTextMetrics(context, text) {
        this.syncFont(context).syncStyle(context);
        return context.measureText(text);
    }
}
exports.default = TextStyle;

},{"../../../../../utils/canvas/GetStyle.js":"65BAh","../utils/GetProperty.js":"ftgwm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7izc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setFixedSizeJs = require("./SetFixedSize.js");
var _setFixedSizeJsDefault = parcelHelpers.interopDefault(_setFixedSizeJs);
var _setPaddingJs = require("./SetPadding.js");
var _setPaddingJsDefault = parcelHelpers.interopDefault(_setPaddingJs);
var _getPaddingJs = require("./GetPadding.js");
var _getPaddingJsDefault = parcelHelpers.interopDefault(_getPaddingJs);
var _modifyTextStyleJs = require("./ModifyTextStyle.js");
var _modifyTextStyleJsDefault = parcelHelpers.interopDefault(_modifyTextStyleJs);
var _modifyDefaultTextStyleJs = require("./ModifyDefaultTextStyle.js");
var _modifyDefaultTextStyleJsDefault = parcelHelpers.interopDefault(_modifyDefaultTextStyleJs);
var _resetTextStyleJs = require("./ResetTextStyle.js");
var _resetTextStyleJsDefault = parcelHelpers.interopDefault(_resetTextStyleJs);
var _setTestStringJs = require("./SetTestString.js");
var _setTestStringJsDefault = parcelHelpers.interopDefault(_setTestStringJs);
var _removeChildJs = require("./RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _removeChildrenJs = require("./RemoveChildren.js");
var _removeChildrenJsDefault = parcelHelpers.interopDefault(_removeChildrenJs);
var _popChildJs = require("./PopChild.js");
var _popChildJsDefault = parcelHelpers.interopDefault(_popChildJs);
var _clearContentJs = require("./ClearContent.js");
var _clearContentJsDefault = parcelHelpers.interopDefault(_clearContentJs);
var _addChildJs = require("./AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _createCharChildJs = require("./CreateCharChild.js");
var _createCharChildJsDefault = parcelHelpers.interopDefault(_createCharChildJs);
var _createCharChildrenJs = require("./CreateCharChildren.js");
var _createCharChildrenJsDefault = parcelHelpers.interopDefault(_createCharChildrenJs);
var _setTextJs = require("./SetText.js");
var _setTextJsDefault = parcelHelpers.interopDefault(_setTextJs);
var _appendTextJs = require("./AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var _insertTextJs = require("./InsertText.js");
var _insertTextJsDefault = parcelHelpers.interopDefault(_insertTextJs);
var _removeTextJs = require("./RemoveText.js");
var _removeTextJsDefault = parcelHelpers.interopDefault(_removeTextJs);
var _getTextJs = require("./GetText.js");
var _getTextJsDefault = parcelHelpers.interopDefault(_getTextJs);
var _createImageChildJs = require("./CreateImageChild.js");
var _createImageChildJsDefault = parcelHelpers.interopDefault(_createImageChildJs);
var _appendImageJs = require("./AppendImage.js");
var _appendImageJsDefault = parcelHelpers.interopDefault(_appendImageJs);
var _createDrawerChildJs = require("./CreateDrawerChild.js");
var _createDrawerChildJsDefault = parcelHelpers.interopDefault(_createDrawerChildJs);
var _appendDrawerJs = require("./AppendDrawer.js");
var _appendDrawerJsDefault = parcelHelpers.interopDefault(_appendDrawerJs);
var _createSpaceChildJs = require("./CreateSpaceChild.js");
var _createSpaceChildJsDefault = parcelHelpers.interopDefault(_createSpaceChildJs);
var _appendSpaceJs = require("./AppendSpace.js");
var _appendSpaceJsDefault = parcelHelpers.interopDefault(_appendSpaceJs);
var _createCommandChildJs = require("./CreateCommandChild.js");
var _createCommandChildJsDefault = parcelHelpers.interopDefault(_createCommandChildJs);
var _appendCommandJs = require("./AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var _setWrapConfigJs = require("./SetWrapConfig.js");
var _setWrapConfigJsDefault = parcelHelpers.interopDefault(_setWrapConfigJs);
var _runWordWrapJs = require("./RunWordWrap.js");
var _runWordWrapJsDefault = parcelHelpers.interopDefault(_runWordWrapJs);
var _runVerticalWrapJs = require("./RunVerticalWrap.js");
var _runVerticalWrapJsDefault = parcelHelpers.interopDefault(_runVerticalWrapJs);
var _runWrapJs = require("./RunWrap.js");
var _runWrapJsDefault = parcelHelpers.interopDefault(_runWrapJs);
var _setAlignMethodsJs = require("./SetAlignMethods.js");
var _setAlignMethodsJsDefault = parcelHelpers.interopDefault(_setAlignMethodsJs);
var _renderContentJs = require("./RenderContent.js");
var _renderContentJsDefault = parcelHelpers.interopDefault(_renderContentJs);
var _forEachChildJs = require("./ForEachChild.js");
var _forEachChildJsDefault = parcelHelpers.interopDefault(_forEachChildJs);
var _forEachRenderableChildJs = require("./ForEachRenderableChild.js");
var _forEachRenderableChildJsDefault = parcelHelpers.interopDefault(_forEachRenderableChildJs);
var _forEachCharChildJs = require("./ForEachCharChild.js");
var _forEachCharChildJsDefault = parcelHelpers.interopDefault(_forEachCharChildJs);
var _getChildrenJs = require("./GetChildren.js");
var _getChildrenJsDefault = parcelHelpers.interopDefault(_getChildrenJs);
var _getActiveChildrenJs = require("./GetActiveChildren.js");
var _getActiveChildrenJsDefault = parcelHelpers.interopDefault(_getActiveChildrenJs);
var _getCharChildrenJs = require("./GetCharChildren.js");
var _getCharChildrenJsDefault = parcelHelpers.interopDefault(_getCharChildrenJs);
var _getLastAppendedChildrenJs = require("./GetLastAppendedChildren.js");
var _getLastAppendedChildrenJsDefault = parcelHelpers.interopDefault(_getLastAppendedChildrenJs);
var _getNearestChildJs = require("./GetNearestChild.js");
var _getNearestChildJsDefault = parcelHelpers.interopDefault(_getNearestChildJs);
var _getCharWorldPositionJs = require("./GetCharWorldPosition.js");
var _getCharWorldPositionJsDefault = parcelHelpers.interopDefault(_getCharWorldPositionJs);
var _setToMinSizeJs = require("./SetToMinSize.js");
var _setToMinSizeJsDefault = parcelHelpers.interopDefault(_setToMinSizeJs);
var _getCharChildIndexJs = require("./GetCharChildIndex.js");
var _getCharChildIndexJsDefault = parcelHelpers.interopDefault(_getCharChildIndexJs);
var _getCharChildJs = require("./GetCharChild.js");
var _getCharChildJsDefault = parcelHelpers.interopDefault(_getCharChildJs);
var _getCharIndexJs = require("./GetCharIndex.js");
var _getCharIndexJsDefault = parcelHelpers.interopDefault(_getCharIndexJs);
var _setChildrenInteractiveEnableJs = require("./input/SetChildrenInteractiveEnable.js");
var _setChildrenInteractiveEnableJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveEnableJs);
var _setInteractiveJs = require("./input/SetInteractive.js");
var _setInteractiveJsDefault = parcelHelpers.interopDefault(_setInteractiveJs);
var _moveChildMethodsJs = require("./MoveChildMethods.js");
var _moveChildMethodsJsDefault = parcelHelpers.interopDefault(_moveChildMethodsJs);
var _backgroundMethodsJs = require("./BackgroundMethods.js");
var _backgroundMethodsJsDefault = parcelHelpers.interopDefault(_backgroundMethodsJs);
var _innerBoundsMethodsJs = require("./InnerBoundsMethods.js");
var _innerBoundsMethodsJsDefault = parcelHelpers.interopDefault(_innerBoundsMethodsJs);
var Methods = {
    setFixedSize: (0, _setFixedSizeJsDefault.default),
    setPadding: (0, _setPaddingJsDefault.default),
    getPadding: (0, _getPaddingJsDefault.default),
    modifyTextStyle: (0, _modifyTextStyleJsDefault.default),
    modifyDefaultTextStyle: (0, _modifyDefaultTextStyleJsDefault.default),
    resetTextStyle: (0, _resetTextStyleJsDefault.default),
    setTestString: (0, _setTestStringJsDefault.default),
    removeChild: (0, _removeChildJsDefault.default),
    removeChildren: (0, _removeChildrenJsDefault.default),
    popChild: (0, _popChildJsDefault.default),
    clearContent: (0, _clearContentJsDefault.default),
    addChild: (0, _addChildJsDefault.default),
    createCharChild: (0, _createCharChildJsDefault.default),
    createCharChildren: (0, _createCharChildrenJsDefault.default),
    setText: (0, _setTextJsDefault.default),
    appendText: (0, _appendTextJsDefault.default),
    insertText: (0, _insertTextJsDefault.default),
    removeText: (0, _removeTextJsDefault.default),
    getText: (0, _getTextJsDefault.default),
    createImageChild: (0, _createImageChildJsDefault.default),
    appendImage: (0, _appendImageJsDefault.default),
    createDrawerChild: (0, _createDrawerChildJsDefault.default),
    appendDrawer: (0, _appendDrawerJsDefault.default),
    createSpaceChild: (0, _createSpaceChildJsDefault.default),
    appendSpace: (0, _appendSpaceJsDefault.default),
    createCommandChild: (0, _createCommandChildJsDefault.default),
    appendCommand: (0, _appendCommandJsDefault.default),
    setWrapConfig: (0, _setWrapConfigJsDefault.default),
    runWordWrap: (0, _runWordWrapJsDefault.default),
    runVerticalWrap: (0, _runVerticalWrapJsDefault.default),
    runWrap: (0, _runWrapJsDefault.default),
    renderContent: (0, _renderContentJsDefault.default),
    forEachChild: (0, _forEachChildJsDefault.default),
    forEachRenderableChild: (0, _forEachRenderableChildJsDefault.default),
    forEachCharChild: (0, _forEachCharChildJsDefault.default),
    getChildren: (0, _getChildrenJsDefault.default),
    getActiveChildren: (0, _getActiveChildrenJsDefault.default),
    getCharChildren: (0, _getCharChildrenJsDefault.default),
    getLastAppendedChildren: (0, _getLastAppendedChildrenJsDefault.default),
    getNearestChild: (0, _getNearestChildJsDefault.default),
    getCharWorldPosition: (0, _getCharWorldPositionJsDefault.default),
    setToMinSize: (0, _setToMinSizeJsDefault.default),
    getCharChildIndex: (0, _getCharChildIndexJsDefault.default),
    getCharChild: (0, _getCharChildJsDefault.default),
    getCharIndex: (0, _getCharIndexJsDefault.default),
    setChildrenInteractiveEnable: (0, _setChildrenInteractiveEnableJsDefault.default),
    setInteractive: (0, _setInteractiveJsDefault.default)
};
Object.assign(Methods, (0, _moveChildMethodsJsDefault.default), (0, _backgroundMethodsJsDefault.default), (0, _innerBoundsMethodsJsDefault.default), (0, _setAlignMethodsJsDefault.default));
exports.default = Methods;

},{"./SetFixedSize.js":"bzJ1o","./SetPadding.js":"6htWK","./GetPadding.js":"4fVz5","./ModifyTextStyle.js":"aVOa4","./ModifyDefaultTextStyle.js":"5lHqF","./ResetTextStyle.js":"gMk6k","./SetTestString.js":"eoq4y","./RemoveChild.js":"chILL","./RemoveChildren.js":"8oIgh","./PopChild.js":"3cRY9","./ClearContent.js":"biYdi","./AddChild.js":"h4qoR","./CreateCharChild.js":"evfac","./CreateCharChildren.js":"Nzzhc","./SetText.js":"4DZXR","./AppendText.js":"ionN7","./InsertText.js":"4RdI6","./RemoveText.js":"gmRfn","./GetText.js":"2pkTB","./CreateImageChild.js":"1LLjf","./AppendImage.js":"ajGI6","./CreateDrawerChild.js":"ljrZz","./AppendDrawer.js":"eFYF4","./CreateSpaceChild.js":"bO0bl","./AppendSpace.js":"hPbJF","./CreateCommandChild.js":"dAjQj","./AppendCommand.js":"8gUIE","./SetWrapConfig.js":"lpkT5","./RunWordWrap.js":"lTFhb","./RunVerticalWrap.js":"2MvKG","./RunWrap.js":"257fr","./SetAlignMethods.js":"71exp","./RenderContent.js":"rrslr","./ForEachChild.js":"biYc0","./ForEachRenderableChild.js":"2lxeG","./ForEachCharChild.js":"lqJCP","./GetChildren.js":"gKml8","./GetActiveChildren.js":"ceG2z","./GetCharChildren.js":"9kpXQ","./GetLastAppendedChildren.js":"7avxR","./GetNearestChild.js":"jixO7","./GetCharWorldPosition.js":"8hgNU","./SetToMinSize.js":"dYav0","./GetCharChildIndex.js":"bOY0d","./GetCharChild.js":"MmkZ7","./GetCharIndex.js":"t3wfn","./input/SetChildrenInteractiveEnable.js":"hOskv","./input/SetInteractive.js":"htN2d","./MoveChildMethods.js":"cZDhu","./BackgroundMethods.js":"eTgw6","./InnerBoundsMethods.js":"jVZtW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzJ1o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetFixedSize = function(width, height) {
    if (width === undefined) width = 0;
    if (height === undefined) height = 0;
    var dirty = this.fixedWidth !== width || this.fixedHeight !== height;
    if (!dirty) return this;
    this.fixedWidth = width;
    this.fixedHeight = height;
    this.dirty = true;
    this.setCanvasSize(width > 0 ? width : this.width, height > 0 ? height : this.height);
    return this;
};
exports.default = SetFixedSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6htWK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _paddingMethodsJs = require("../../../../utils/padding/PaddingMethods.js");
var SetPadding = function(key, value) {
    var padding = this.padding;
    var paddingLeft = padding.left, paddingRight = padding.right, paddingTop = padding.top, paddingBottom = padding.bottom;
    (0, _paddingMethodsJs.SetPadding)(padding, key, value);
    this.dirty = this.dirty || paddingLeft != padding.left || paddingRight != padding.right || paddingTop != padding.top || paddingBottom != padding.bottom;
    return this;
};
exports.default = SetPadding;

},{"../../../../utils/padding/PaddingMethods.js":"dcX3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4fVz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _paddingMethodsJs = require("../../../../utils/padding/PaddingMethods.js");
var GetPadding = function(key) {
    return (0, _paddingMethodsJs.GetPadding)(this.padding, key);
};
exports.default = GetPadding;

},{"../../../../utils/padding/PaddingMethods.js":"dcX3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVOa4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ModifyTextStyle = function(style) {
    this.textStyle.modify(style);
    return this;
};
exports.default = ModifyTextStyle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5lHqF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ModifyDefaultTextStyle = function(style) {
    this.defaultTextStyle.modify(style);
    return this;
};
exports.default = ModifyDefaultTextStyle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMk6k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResetTextStyle = function() {
    this.textStyle.copyFrom(this.defaultTextStyle);
    return this;
};
exports.default = ResetTextStyle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eoq4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTestString = function(testString) {
    this.testString = testString;
    return this;
};
exports.default = SetTestString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chILL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RemoveItem = Phaser.Utils.Array.Remove;
var RemoveChild = function(child) {
    this.poolManager.free(child);
    RemoveItem(this.children, child);
    this.lastAppendedChildren.length = 0;
    this.lastOverChild = null;
    this.dirty = true;
    return this;
};
exports.default = RemoveChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8oIgh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemoveChildren = function() {
    this.poolManager.freeMultiple(this.children);
    this.children.length = 0;
    this.lastAppendedChildren.length = 0;
    this.lastOverChild = null;
    this.dirty = true;
    return this;
};
exports.default = RemoveChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cRY9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RemoveItem = Phaser.Utils.Array.Remove;
var PopChild = function(child) {
    RemoveItem(this.children, child);
    this.lastAppendedChildren.length = 0;
    this.lastOverChild = null;
    this.dirty = true;
    return this;
};
exports.default = PopChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biYdi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ClearContent = function() {
    this.setText();
    return this;
};
exports.default = ClearContent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4qoR":[function(require,module,exports) {
// const RemoveItem = Phaser.Utils.Array.Remove;
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AddChild = function(child, index) {
    var areChildren = Array.isArray(child);
    // Remove existed child(s)
    // RemoveItem(this.children, child);
    if (index === undefined || index === this.children.length) {
        if (areChildren) this.children.push(...child);
        else this.children.push(child);
    } else if (areChildren) this.children.splice(index, 0, ...child);
    else this.children.splice(index, 0, child);
    this.lastAppendedChildren.length = 0;
    if (areChildren) this.lastAppendedChildren.push(...child);
    else this.lastAppendedChildren.push(child);
    return this;
};
exports.default = AddChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"evfac":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _charDataJs = require("../bob/char/CharData.js");
var _charDataJsDefault = parcelHelpers.interopDefault(_charDataJs);
var _typesJs = require("../bob/Types.js");
var CreateCharChild = function(text, style) {
    if (style) this.textStyle.modify(style);
    var child = this.poolManager.allocate((0, _typesJs.CharTypeName));
    if (child === null) child = new (0, _charDataJsDefault.default)(this, text, this.textStyle);
    else child.setParent(this).setActive().modifyStyle(this.textStyle).setText(text);
    return child;
};
exports.default = CreateCharChild;

},{"../bob/char/CharData.js":"8GFgj","../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GFgj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _typesJs = require("../Types.js");
var _textStyleJs = require("./TextStyle.js");
var _textStyleJsDefault = parcelHelpers.interopDefault(_textStyleJs);
class CharData extends (0, _renderBaseJsDefault.default) {
    constructor(parent, text, style){
        super(parent, (0, _typesJs.CharTypeName));
        this.updateTextFlag = false;
        this.style = new (0, _textStyleJsDefault.default)(this, style);
        this.setText(text);
    }
    get autoRound() {
        return this.parent.autoRound;
    }
    get offsetX() {
        return this.style.offsetX;
    }
    set offsetX(value) {
        if (this.style) this.style.offsetX = value;
    }
    get offsetY() {
        return this.style.offsetY;
    }
    set offsetY(value) {
        if (this.style) this.style.offsetY = value;
    }
    get leftSpace() {
        return this.style.leftSpace * this.scaleX;
    }
    set leftSpace(value) {
        if (this.style) this.style.leftSpace = value;
        super.leftSpace = value;
    }
    get rightSpace() {
        return this.style.rightSpace * this.scaleX;
    }
    set rightSpace(value) {
        if (this.style) this.style.rightSpace = value;
        super.rightSpace = value;
    }
    get align() {
        return this.style.align;
    }
    set align(value) {
        if (this.style) this.style.align = value;
    }
    modifyStyle(style) {
        this.setDirty(true);
        this.style.modify(style);
        if (this.updateTextFlag) this.updateTextSize();
        return this;
    }
    modifyPorperties(o) {
        if (!o) return this;
        this.modifyStyle(o);
        super.modifyPorperties(o);
        return this;
    }
    setText(text) {
        this.setDirty(this.text != text);
        this.text = text;
        this.updateTextSize();
        return this;
    }
    updateTextSize() {
        var text = this.text;
        // Is new-line, page-break, or empty character
        if (text === "\n" || text === "\f" || text === "") {
            this.textWidth = 0;
            this.textHeight = 0;
            this.ascent = 0;
            this.descent = 0;
        } else {
            var metrics = this.style.getTextMetrics(this.context, this.text);
            this.textWidth = metrics.width;
            var ascent, descent;
            if ("actualBoundingBoxAscent" in metrics) {
                ascent = metrics.actualBoundingBoxAscent;
                descent = metrics.actualBoundingBoxDescent;
            } else {
                ascent = 0;
                descent = 0;
            }
            this.textHeight = ascent + descent;
            this.ascent = ascent;
            this.descent = descent;
        }
        this.updateTextFlag = false;
        return this;
    }
    get width() {
        return this.textWidth * this.scaleX;
    }
    set width(value) {
        if (this.textWidth > 0) this.scaleX = value / this.textWidth;
        else this.scaleX = 1;
    }
    get height() {
        return this.textHeight * this.scaleY;
    }
    set height(value) {
        if (this.textHeight > 0) this.scaleY = value / this.textHeight;
        else this.scaleY = 1;
    }
    get willRender() {
        var text = this.text;
        if (text === "\n" || text === "\f") return false;
        return super.willRender;
    }
    renderContent() {
        var context = this.context;
        var textStyle = this.style;
        if (textStyle.hasBackgroundColor) {
            context.fillStyle = textStyle.backgroundColor;
            var x = this.drawTLX;
            var width = this.drawTRX - x;
            var bottomY = textStyle.backgroundBottomY;
            if (bottomY == null) bottomY = this.drawBLY;
            var height = textStyle.backgroundHeight;
            if (height == null) height = bottomY - this.drawTLY;
            var y = bottomY - height;
            context.fillRect(x, y, width, height);
        }
        var hasFill = textStyle.hasFill, hasStroke = textStyle.hasStroke;
        if (!hasFill && !hasStroke) return;
        textStyle.syncFont(context).syncStyle(context);
        // textBaseline = 'alphabetic'
        if (hasStroke) {
            textStyle.syncShadow(context);
            context.strokeText(this.text, 0, 0);
        }
        if (hasFill) {
            textStyle.syncShadow(context);
            context.fillText(this.text, 0, 0);
        }
    }
    get drawTLX() {
        return -this.leftSpace;
    }
    get drawTLY() {
        return -this.ascent;
    }
    get drawBLX() {
        return -this.leftSpace;
    }
    get drawBLY() {
        return this.descent;
    }
    get drawTRX() {
        return this.textWidth + this.rightSpace;
    }
    get drawTRY() {
        return -this.ascent;
    }
    get drawBRX() {
        return this.textWidth + this.rightSpace;
    }
    get drawBRY() {
        return this.descent;
    }
}
exports.default = CharData;

},{"../renderbase/RenderBase.js":"leqLS","../Types.js":"3ngC2","./TextStyle.js":"6SYHM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ngC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CharTypeName", ()=>CharTypeName);
parcelHelpers.export(exports, "ImageTypeName", ()=>ImageTypeName);
parcelHelpers.export(exports, "DrawerTypeName", ()=>DrawerTypeName);
parcelHelpers.export(exports, "SpaceTypeName", ()=>SpaceTypeName);
parcelHelpers.export(exports, "CmdTypeName", ()=>CmdTypeName);
parcelHelpers.export(exports, "IsNewLineChar", ()=>IsNewLineChar);
parcelHelpers.export(exports, "IsPageBreakChar", ()=>IsPageBreakChar);
parcelHelpers.export(exports, "IsSpaceChar", ()=>IsSpaceChar);
parcelHelpers.export(exports, "IsChar", ()=>IsChar);
parcelHelpers.export(exports, "IsCommand", ()=>IsCommand);
const CharTypeName = "text";
const ImageTypeName = "image";
const DrawerTypeName = "drawer";
const SpaceTypeName = "space";
const CmdTypeName = "command";
var IsNewLineChar = function(bob) {
    return bob.type === CharTypeName && bob.text === "\n";
};
var IsPageBreakChar = function(bob) {
    return bob.type === CharTypeName && bob.text === "\f";
};
var IsSpaceChar = function(bob) {
    return bob.type === CharTypeName && bob.text === " ";
};
var IsChar = function(bob) {
    return bob.type === CharTypeName;
};
var IsCommand = function(bob) {
    return bob.type === CmdTypeName;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Nzzhc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _charDataJs = require("../bob/char/CharData.js");
var _charDataJsDefault = parcelHelpers.interopDefault(_charDataJs);
var _typesJs = require("../bob/Types.js");
var CreateCharChildren = function(text, style) {
    if (style) this.textStyle.modify(style);
    var children = [];
    for(var i = 0, cnt = text.length; i < cnt; i++){
        var char = text.charAt(i);
        var child = this.poolManager.allocate((0, _typesJs.CharTypeName));
        if (child === null) child = new (0, _charDataJsDefault.default)(this, char, this.textStyle);
        else child.setParent(this).setActive().modifyStyle(this.textStyle).setText(char);
        // child.modifyPorperties(properties);  // Warning: Will modify text-style twice
        children.push(child);
    }
    return children;
};
exports.default = CreateCharChildren;

},{"../bob/char/CharData.js":"8GFgj","../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4DZXR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendTextJs = require("./AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var SetText = function(text, style) {
    if (text === undefined) text = "";
    this.removeChildren();
    (0, _appendTextJsDefault.default).call(this, text, style); // this.appendText might be override
    this.dirty = true;
    return this;
};
exports.default = SetText;

},{"./AppendText.js":"ionN7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ionN7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendText = function(text, style) {
    var children = this.createCharChildren(text, style);
    this.addChild(children);
    return this;
};
exports.default = AppendText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4RdI6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var InsertText = function(index, text, style) {
    var children = this.createCharChildren(text, style);
    index = this.getCharChildIndex(index, true);
    this.addChild(children, index);
    return this;
};
exports.default = InsertText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmRfn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemoveText = function(index, length) {
    if (length === undefined) length = 1;
    for(var i = 0; i < length; i++){
        var childIndex = this.getCharChildIndex(index, true);
        if (childIndex === undefined) break;
        this.removeChild(this.children[childIndex]);
    }
    return this;
};
exports.default = RemoveText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2pkTB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetText = function(activeOnly) {
    var text = "";
    this.forEachCharChild(function(child) {
        text += child.text;
    }, undefined, activeOnly);
    return text;
};
exports.default = GetText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LLjf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageDataJs = require("../bob/image/ImageData.js");
var _imageDataJsDefault = parcelHelpers.interopDefault(_imageDataJs);
var _typesJs = require("../bob/Types.js");
var CreateImageChild = function(key, frame, properties) {
    var child = this.poolManager.allocate((0, _typesJs.ImageTypeName));
    if (child === null) child = new (0, _imageDataJsDefault.default)(this, key, frame);
    else child.setParent(this).setActive().setTexture(key, frame);
    child.modifyPorperties(properties);
    return child;
};
exports.default = CreateImageChild;

},{"../bob/image/ImageData.js":"iX42O","../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iX42O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _typesJs = require("../Types.js");
class ImageData extends (0, _renderBaseJsDefault.default) {
    constructor(parent, key, frame){
        super(parent, (0, _typesJs.ImageTypeName));
        this.setTexture(key, frame);
    }
    get frameWidth() {
        return this.frameObj ? this.frameObj.cutWidth : 0;
    }
    get frameHeight() {
        return this.frameObj ? this.frameObj.cutHeight : 0;
    }
    get offsetY() {
        return -this.height;
    }
    set offsetY(value) {}
    get key() {
        return this._key;
    }
    set key(value) {
        this.setDirty(this._key != value);
        this._key = value;
    }
    get frame() {
        return this._frame;
    }
    set frame(value) {
        this.setDirty(this._frame != value);
        this._frame = value;
    }
    setTexture(key, frame) {
        this.key = key;
        this.frame = frame;
        this.frameObj = this.scene.sys.textures.getFrame(key, frame);
        return this;
    }
    get width() {
        return this.frameWidth * this.scaleX;
    }
    set width(value) {
        this.setDirty(this.width !== value);
        this.scaleX = value / this.frameWidth;
    }
    get height() {
        return this.frameHeight * this.scaleY;
    }
    set height(value) {
        this.setDirty(this.height !== value);
        this.scaleY = value / this.frameHeight;
    }
    setHeight(height, keepAspectRatio) {
        if (keepAspectRatio === undefined) keepAspectRatio = false;
        this.height = height;
        if (keepAspectRatio) this.scaleX = this.scaleY;
        return this;
    }
    renderContent() {
        var context = this.context;
        var frame = this.frameObj;
        var width = this.frameWidth, height = this.frameHeight;
        context.drawImage(frame.source.image, frame.cutX, frame.cutY, width, height, 0, 0, width, height);
    }
    get drawTLX() {
        return -this.leftSpace;
    }
    get drawTLY() {
        return 0;
    }
    get drawBLX() {
        return -this.leftSpace;
    }
    get drawBLY() {
        return this.frameHeight;
    }
    get drawTRX() {
        return this.frameWidth + this.rightSpace;
    }
    get drawTRY() {
        return 0;
    }
    get drawBRX() {
        return this.frameWidth + this.rightSpace;
    }
    get drawBRY() {
        return this.frameHeight;
    }
}
exports.default = ImageData;

},{"../renderbase/RenderBase.js":"leqLS","../Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajGI6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendImage = function(key, frame, properties) {
    var child = this.createImageChild(key, frame, properties);
    this.addChild(child);
    return this;
};
exports.default = AppendImage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljrZz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawerJs = require("../bob/drawer/Drawer.js");
var _drawerJsDefault = parcelHelpers.interopDefault(_drawerJs);
var _typesJs = require("../bob/Types.js");
var CreateDrawerChild = function(renderCallback, width, height) {
    var child = this.poolManager.allocate((0, _typesJs.DrawerTypeName));
    if (child === null) child = new (0, _drawerJsDefault.default)(this, renderCallback, width, height);
    else child.setParent(this).setActive().setRenderCallback(renderCallback).setDrawerSize(width, height);
    return child;
};
exports.default = CreateDrawerChild;

},{"../bob/drawer/Drawer.js":"CRPb9","../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"CRPb9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _typesJs = require("../Types.js");
class Drawer extends (0, _renderBaseJsDefault.default) {
    constructor(parent, renderCallback, width, height){
        super(parent, (0, _typesJs.DrawerTypeName));
        this.setRenderCallback(renderCallback);
        this.setDrawerSize(width, height);
    }
    setRenderCallback(callback) {
        if (callback) this.renderContent = callback.bind(this);
        else delete this.renderContent;
        return this;
    }
    setDrawerSize(width, height) {
        // Whole canvas
        if (width === true) {
            this.toLocalPosition = false;
            width = undefined;
            height = undefined;
        } else this.toLocalPosition = true;
        if (width === undefined) width = 0;
        if (height === undefined) height = width;
        this.drawerWidth = width;
        this.drawerHeight = height;
        return this;
    }
    onFree() {
        super.onFree();
        this.setRenderCallback();
    }
    get width() {
        return this.drawerWidth * this.scaleX;
    }
    set width(value) {
        this.setDirty(this.width !== value);
        this.scaleX = this.drawerWidth > 0 ? value / this.drawerWidth : 1;
    }
    get height() {
        return this.drawerHeight * this.scaleY;
    }
    set height(value) {
        this.setDirty(this.height !== value);
        this.scaleY = this.drawerHeight > 0 ? value / this.drawerHeight : 1;
    }
    get offsetY() {
        return -this.height;
    }
    set offsetY(value) {}
    get drawTLX() {
        return -this.leftSpace;
    }
    get drawTLY() {
        return 0;
    }
    get drawBLX() {
        return -this.leftSpace;
    }
    get drawBLY() {
        return this.drawerHeight;
    }
    get drawTRX() {
        return this.drawerWidth + this.rightSpace;
    }
    get drawTRY() {
        return 0;
    }
    get drawBRX() {
        return this.drawerWidth + this.rightSpace;
    }
    get drawBRY() {
        return this.drawerHeight;
    }
}
exports.default = Drawer;

},{"../renderbase/RenderBase.js":"leqLS","../Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eFYF4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendDrawer = function(renderCallback, width, height) {
    var child = this.createDrawerChild(renderCallback, width, height);
    this.addChild(child);
    return this;
};
exports.default = AppendDrawer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bO0bl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _spaceJs = require("../bob/space/Space.js");
var _spaceJsDefault = parcelHelpers.interopDefault(_spaceJs);
var _typesJs = require("../bob/Types.js");
var CreateSpaceChild = function(width) {
    var child = this.poolManager.allocate((0, _typesJs.SpaceTypeName));
    if (child === null) child = new (0, _spaceJsDefault.default)(this, width);
    else child.setParent(this).setActive().setSpaceWidth(width);
    return child;
};
exports.default = CreateSpaceChild;

},{"../bob/space/Space.js":"4qbyz","../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qbyz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderBaseJs = require("../renderbase/RenderBase.js");
var _renderBaseJsDefault = parcelHelpers.interopDefault(_renderBaseJs);
var _typesJs = require("../Types.js");
class Space extends (0, _renderBaseJsDefault.default) {
    constructor(parent, width){
        super(parent, (0, _typesJs.SpaceTypeName));
        this.setSpaceWidth(width);
    }
    get width() {
        return this.spaceWidth * this.scaleX;
    }
    set width(value) {
        if (this.spaceWidth > 0) this.scaleX = value / this.spaceWidth;
        else this.scaleX = 1;
    }
    setSpaceWidth(width) {
        this.spaceWidth = width;
        return this;
    }
}
exports.default = Space;

},{"../renderbase/RenderBase.js":"leqLS","../Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPbJF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendSpace = function(width) {
    var child = this.createSpaceChild(width);
    this.addChild(child);
    return this;
};
exports.default = AppendSpace;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dAjQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../bob/Types.js");
var _commandJs = require("../bob/command/Command.js");
var _commandJsDefault = parcelHelpers.interopDefault(_commandJs);
var CreateCommandChild = function(name, callback, param, scope) {
    var child = this.poolManager.allocate((0, _typesJs.CmdTypeName));
    if (child === null) child = new (0, _commandJsDefault.default)(this, name, callback, param, scope);
    else child.setParent(this).setActive().setName(name).setCallback(callback, scope).setParameter(param);
    return child;
};
exports.default = CreateCommandChild;

},{"../bob/Types.js":"3ngC2","../bob/command/Command.js":"4B0un","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4B0un":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("../Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _typesJs = require("../Types.js");
class Command extends (0, _baseJsDefault.default) {
    constructor(parent, name, callback, param, scope){
        super(parent, (0, _typesJs.CmdTypeName));
        this.setName(name).setParameter(param).setCallback(callback, scope);
    }
    setName(name) {
        this.name = name;
        return this;
    }
    setParameter(param) {
        this.param = param;
        return this;
    }
    setCallback(callback, scope) {
        this.callback = callback;
        this.scope = scope;
        return this;
    }
    exec() {
        var result;
        if (this.scope) result = this.callback.call(this.scope, this.param, this.name);
        else result = this.callback(this.param, this.name);
        return result;
    }
    onFree() {
        super.onFree();
        this.setName().setCallback().setParameter();
    }
}
exports.default = Command;

},{"../Base.js":"1R8ah","../Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8gUIE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AppendCommand = function(name, callback, param, scope) {
    var child = this.createCommandChild(name, callback, param, scope);
    this.addChild(child);
    return this;
};
exports.default = AppendCommand;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpkT5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepCloneJs = require("../../../../utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var SetWrapConfig = function(config) {
    if (config === undefined) config = {};
    else if (typeof config === "object") config = (0, _deepCloneJsDefault.default)(config);
    this.wrapConfig = config;
    return this;
};
exports.default = SetWrapConfig;

},{"../../../../utils/object/DeepClone.js":"7G9ja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTFhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runWordWrapJs = require("./wrap/runwordwrap/RunWordWrap.js");
var _runWordWrapJsDefault = parcelHelpers.interopDefault(_runWordWrapJs);
const Merge = Phaser.Utils.Objects.Merge;
var RunWordWrap = function(config) {
    if (config === undefined) config = {};
    return (0, _runWordWrapJsDefault.default).call(this, Merge(config, this.wrapConfig));
};
exports.default = RunWordWrap;

},{"./wrap/runwordwrap/RunWordWrap.js":"9V3Pv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9V3Pv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _paddingMethodsJs = require("../../../../../../utils/padding/PaddingMethods.js");
var _getWordJs = require("./GetWord.js");
var _getWordJsDefault = parcelHelpers.interopDefault(_getWordJs);
var _alignLinesJs = require("./AlignLines.js");
var _alignLinesJsDefault = parcelHelpers.interopDefault(_alignLinesJs);
var _typesJs = require("../../../bob/Types.js");
var _getDefaultTextHeightJs = require("./GetDefaultTextHeight.js");
var _getDefaultTextHeightJsDefault = parcelHelpers.interopDefault(_getDefaultTextHeightJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var RunWordWrap = function(config) {
    // Parse parameters
    var startIndex = GetValue(config, "start", 0);
    (0, _paddingMethodsJs.SetPadding)(this.wrapPadding, GetValue(config, "padding", 0));
    var paddingVertical = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
    var paddingHorizontal = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;
    // Get lineHeight, maxLines
    var lineHeight = GetValue(config, "lineHeight");
    var ascent = GetValue(config, "ascent", lineHeight);
    var maxLines;
    if (lineHeight === undefined) {
        // Calculate lineHeight
        var useDefaultTextHeight = GetValue(config, "useDefaultTextHeight", false);
        maxLines = GetValue(config, "maxLines", 0);
        if (this.fixedHeight > 0 && !useDefaultTextHeight) {
            var innerHeight = this.fixedHeight - paddingVertical;
            if (maxLines > 0) // Calculate lineHeight via maxLines, in fixedHeight mode
            lineHeight = innerHeight / maxLines;
            else {
                var textHeightResult = (0, _getDefaultTextHeightJsDefault.default).call(this);
                lineHeight = textHeightResult.height;
                ascent = textHeightResult.ascent;
                // Calculate maxLines via (ascent, lineHeight), in fixedHeight mode
                maxLines = Math.floor((innerHeight - ascent) / lineHeight);
            }
        } else {
            var textHeightResult = (0, _getDefaultTextHeightJsDefault.default).call(this);
            lineHeight = textHeightResult.height;
            ascent = textHeightResult.ascent;
        }
    } else // Calculate maxLines
    if (this.fixedHeight > 0) {
        // Calculate maxLines via lineHeight, in fixedHeight mode
        maxLines = GetValue(config, "maxLines");
        if (maxLines === undefined) {
            var innerHeight = this.fixedHeight - paddingVertical;
            maxLines = Math.floor(innerHeight / lineHeight);
        }
    } else maxLines = GetValue(config, "maxLines", 0); // Default is show all lines
    // If ascent is undefined, assign to lineHeight
    if (ascent === undefined) ascent = lineHeight;
    var showAllLines = maxLines === 0;
    // Get wrapWidth
    var wrapWidth = GetValue(config, "wrapWidth", undefined);
    if (wrapWidth === undefined) {
        if (this.fixedWidth > 0) wrapWidth = this.fixedWidth - paddingHorizontal;
        else wrapWidth = Infinity; // No word-wrap
    }
    var letterSpacing = GetValue(config, "letterSpacing", 0);
    var hAlign = GetValue(config, "hAlign", 0);
    var vAlign = GetValue(config, "vAlign", 0);
    var charWrap = GetValue(config, "charWrap", false);
    var result = {
        callback: "runWordWrap",
        start: startIndex,
        isLastPage: false,
        padding: this.wrapPadding,
        ascent: ascent,
        lineHeight: lineHeight,
        maxLines: maxLines,
        wrapWidth: wrapWidth,
        letterSpacing: letterSpacing,
        hAlign: hAlign,
        vAlign: vAlign,
        charWrap: charWrap,
        children: [],
        lines: [],
        maxLineWidth: 0,
        linesHeight: 0
    };
    // Set all children to inactive
    var children = this.children;
    for(var i = 0, cnt = children.length; i < cnt; i++)children[i].setActive(false);
    // Layout children
    wrapWidth += letterSpacing;
    var startX = this.padding.left + this.wrapPadding.left, startY = this.padding.top + this.wrapPadding.top + ascent, x = startX, y = startY;
    var remainderWidth = wrapWidth, childIndex = startIndex, lastChildIndex = children.length;
    var resultChildren = result.children;
    var resultLines = result.lines, lastLine = [], lastLineWidth = 0, maxLineWidth = 0;
    var wordResult;
    var isPageBreakChar = false;
    while(childIndex < lastChildIndex){
        wordResult = (0, _getWordJsDefault.default)(children, childIndex, charWrap, wordResult);
        var word = wordResult.word;
        var charCnt = word.length;
        var wordWidth = wordResult.width + charCnt * letterSpacing;
        childIndex += charCnt;
        // Next line
        var isNewLineChar = (0, _typesJs.IsNewLineChar)(word[0]);
        isPageBreakChar = (0, _typesJs.IsPageBreakChar)(word[0]);
        var isControlChar = isNewLineChar || isPageBreakChar;
        if (remainderWidth < wordWidth || isControlChar) {
            // Add to result
            if (isControlChar) {
                var char = word[0];
                char.setActive().setPosition(x, y);
                resultChildren.push(char);
                lastLine.push(char);
            }
            // Move cursor
            x = startX;
            y += lineHeight;
            remainderWidth = wrapWidth;
            resultLines.push({
                children: lastLine,
                width: lastLineWidth
            });
            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
            lastLineWidth = 0;
            lastLine = [];
            var isPageEnd = isPageBreakChar || !showAllLines && resultLines.length === maxLines; // Exceed maxLines
            if (isPageEnd) break;
            else if (isControlChar) continue;
        }
        remainderWidth -= wordWidth;
        lastLineWidth += wordWidth;
        for(var i = 0, cnt = word.length; i < cnt; i++){
            var child = word[i];
            child.setActive();
            resultChildren.push(child);
            lastLine.push(child);
            if (child.renderable) {
                child.setPosition(x, y);
                x += child.outerWidth + letterSpacing;
            }
        }
    }
    if (lastLine.length > 0) {
        resultLines.push({
            children: lastLine,
            width: lastLineWidth
        });
        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
    }
    result.start += resultChildren.length;
    result.isLastPage = !isPageBreakChar && result.start === lastChildIndex;
    result.maxLineWidth = maxLineWidth;
    result.linesHeight = resultLines.length * lineHeight;
    // Calculate size of game object
    var width = this.fixedWidth > 0 ? this.fixedWidth : result.maxLineWidth + paddingHorizontal;
    var height = this.fixedHeight > 0 ? this.fixedHeight : result.linesHeight + paddingVertical;
    // Size might be changed after wrapping
    var innerWidth = width - paddingHorizontal;
    var innerHeight = height - paddingVertical;
    (0, _alignLinesJsDefault.default)(result, innerWidth, innerHeight);
    // Resize
    this.setCanvasSize(width, height);
    // Set initial position
    for(var i = 0, cnt = resultChildren.length; i < cnt; i++){
        var child = resultChildren[i];
        if (!child.renderable) continue;
        child.x0 = child.x;
        child.y0 = child.y;
    }
    return result;
};
exports.default = RunWordWrap;

},{"../../../../../../utils/padding/PaddingMethods.js":"dcX3C","./GetWord.js":"8LPkH","./AlignLines.js":"ht8wA","../../../bob/Types.js":"3ngC2","./GetDefaultTextHeight.js":"hKZPa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8LPkH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../../../bob/Types.js");
var GetWord = function(children, startIndex, charMode, result) {
    if (result === undefined) result = {
        word: [],
        width: 0
    };
    result.word.length = 0;
    var endIndex = children.length;
    var currentIndex = startIndex;
    var word = result.word, wordWidth = 0;
    while(currentIndex < endIndex){
        var child = children[currentIndex];
        // Can't render (command child), put into output directly
        if (!child.renderable) {
            word.push(child);
            currentIndex++;
            continue;
        }
        var text = child.type === (0, _typesJs.CharTypeName) ? child.text : null;
        if (text !== null && text !== " " && text !== "\n" && text !== "\f") {
            word.push(child);
            wordWidth += child.outerWidth;
            currentIndex++;
        // Continue
        } else {
            if (currentIndex === startIndex) {
                word.push(child);
                wordWidth += child.outerWidth;
            }
            break;
        }
        if (charMode) break;
    }
    result.width = wordWidth;
    return result;
};
exports.default = GetWord;

},{"../../../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ht8wA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenAlignJs = require("../GetChildrenAlign.js");
var _getChildrenAlignJsDefault = parcelHelpers.interopDefault(_getChildrenAlignJs);
var _offsetChildrenJs = require("../OffsetChildren.js");
var _offsetChildrenJsDefault = parcelHelpers.interopDefault(_offsetChildrenJs);
var AlignLines = function(result, width, height) {
    var hAlign = result.hAlign, vAlign = result.vAlign;
    var offsetX, offsetY;
    var linesHeight = result.linesHeight;
    switch(vAlign){
        case 1:
        case "center":
            offsetY = (height - linesHeight) / 2;
            break;
        case 2:
        case "bottom":
            offsetY = height - linesHeight;
            break;
        default:
            offsetY = 0;
            break;
    }
    var lines = result.lines;
    for(var li = 0, lcnt = lines.length; li < lcnt; li++){
        var line = lines[li];
        var lineWidth = line.width, children = line.children;
        var lineHAlign = (0, _getChildrenAlignJsDefault.default)(children);
        if (lineHAlign === undefined) lineHAlign = hAlign;
        switch(lineHAlign){
            case 1:
            case "center":
                offsetX = (width - lineWidth) / 2;
                break;
            case 2:
            case "right":
                offsetX = width - lineWidth;
                break;
            default:
                offsetX = 0;
                break;
        }
        (0, _offsetChildrenJsDefault.default)(children, offsetX, offsetY);
    }
};
exports.default = AlignLines;

},{"../GetChildrenAlign.js":"hIp3q","../OffsetChildren.js":"gD3lp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIp3q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenAlign = function(children) {
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.align !== undefined) return child.align;
    }
    return undefined;
};
exports.default = GetChildrenAlign;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gD3lp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OffsetChildren = function(children, offsetX, offsetY) {
    if (offsetX === 0 && offsetY === 0) return;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (!child.renderable) continue;
        child.x += offsetX;
        child.y += offsetY;
    }
};
exports.default = OffsetChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKZPa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetDefaultTextHeight = function() {
    var metrics = this.defaultTextStyle.getTextMetrics(this.context, this.testString);
    var ascent, descent;
    if ("actualBoundingBoxAscent" in metrics) {
        ascent = metrics.actualBoundingBoxAscent;
        descent = metrics.actualBoundingBoxDescent;
    } else {
        ascent = 0;
        descent = 0;
    }
    Result.ascent = ascent;
    Result.descent = descent;
    Result.height = ascent + descent;
    return Result;
};
var Result = {};
exports.default = GetDefaultTextHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MvKG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runVerticalWrapJs = require("./wrap/runverticalwrap/RunVerticalWrap.js");
var _runVerticalWrapJsDefault = parcelHelpers.interopDefault(_runVerticalWrapJs);
const Merge = Phaser.Utils.Objects.Merge;
var RunVerticalWrap = function(config) {
    if (config === undefined) config = {};
    return (0, _runVerticalWrapJsDefault.default).call(this, Merge(config, this.wrapConfig));
};
exports.default = RunVerticalWrap;

},{"./wrap/runverticalwrap/RunVerticalWrap.js":"2TVpP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2TVpP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _paddingMethodsJs = require("../../../../../../utils/padding/PaddingMethods.js");
var _alignLinesJs = require("./AlignLines.js");
var _alignLinesJsDefault = parcelHelpers.interopDefault(_alignLinesJs);
var _typesJs = require("../../../bob/Types.js");
const GetValue = Phaser.Utils.Objects.GetValue;
var RunVerticalWrap = function(config) {
    // Parse parameters
    var startIndex = GetValue(config, "start", 0);
    (0, _paddingMethodsJs.SetPadding)(this.wrapPadding, GetValue(config, "padding", 0));
    var paddingVertical = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
    var paddingHorizontal = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;
    var lineWidth = GetValue(config, "lineWidth", undefined);
    var maxLines;
    if (lineWidth === undefined) {
        // Calculate lineWidth via maxLines, in fixedWidth mode
        maxLines = GetValue(config, "maxLines", 0);
        if (this.fixedWidth > 0) {
            var innerWidth = this.fixedWidth - paddingHorizontal;
            lineWidth = innerWidth / maxLines;
        } else lineWidth = 0;
    } else if (this.fixedWidth > 0) {
        // Calculate maxLines via lineWidth, in fixedWidth mode
        maxLines = GetValue(config, "maxLines", undefined);
        if (maxLines === undefined) {
            var innerWidth = this.fixedWidth - paddingHorizontal;
            maxLines = Math.floor(innerWidth / lineWidth) + 1;
        }
    } else maxLines = GetValue(config, "maxLines", 0); // Default is show all lines
    var showAllLines = maxLines === 0;
    // Get fixedChildHeight
    var fixedChildHeight = GetValue(config, "fixedChildHeight", undefined);
    if (fixedChildHeight === undefined) {
        var charPerLine = GetValue(config, "charPerLine", undefined);
        if (charPerLine !== undefined) {
            var innerHeight = this.fixedHeight - paddingVertical;
            fixedChildHeight = Math.floor(innerHeight / charPerLine);
        }
    }
    // Get wrapHeight
    var wrapHeight = GetValue(config, "wrapHeight", undefined);
    if (wrapHeight === undefined) {
        if (this.fixedHeight > 0) wrapHeight = this.fixedHeight - paddingVertical;
        else wrapHeight = Infinity; // No word-wrap
    }
    var letterSpacing = GetValue(config, "letterSpacing", 0);
    var rtl = GetValue(config, "rtl", true);
    var hAlign = GetValue(config, "hAlign", rtl ? 2 : 0);
    var vAlign = GetValue(config, "vAlign", 0);
    var result = {
        callback: "runVerticalWrap",
        start: startIndex,
        isLastPage: false,
        padding: this.wrapPadding,
        lineWidth: lineWidth,
        maxLines: maxLines,
        fixedChildHeight: fixedChildHeight,
        wrapHeight: wrapHeight,
        letterSpacing: letterSpacing,
        hAlign: hAlign,
        vAlign: vAlign,
        rtl: rtl,
        children: [],
        lines: [],
        maxLineHeight: 0,
        linesWidth: 0
    };
    // Set all children to active
    var children = this.children;
    for(var i = 0, cnt = children.length; i < cnt; i++)children[i].setActive(false);
    // Layout children
    wrapHeight += letterSpacing;
    var startX = this.padding.left + this.wrapPadding.left, startY = this.padding.top + this.wrapPadding.top, x = startX, y = startY;
    var remainderHeight = wrapHeight, childIndex = startIndex, lastChildIndex = children.length;
    var resultChildren = result.children;
    var resultLines = result.lines, lastLine = [], lastLineHeight = 0, maxLineHeight = 0;
    while(childIndex < lastChildIndex){
        // Append non-typeable child directly
        var child = children[childIndex];
        childIndex++;
        if (!child.renderable) {
            child.setActive();
            resultChildren.push(child);
            lastLine.push(child);
            continue;
        }
        var childHeight = (fixedChildHeight !== undefined ? fixedChildHeight : child.height) + letterSpacing;
        // Next line
        var isNewLineChar = (0, _typesJs.IsNewLineChar)(child);
        var isPageBreakChar = (0, _typesJs.IsPageBreakChar)(child);
        var isControlChar = isNewLineChar || isPageBreakChar;
        if (remainderHeight < childHeight || isControlChar) {
            // Add to result
            if (isNewLineChar) {
                child.setActive().setPosition(x, y).setOrigin(0.5);
                resultChildren.push(child);
                lastLine.push(child);
            }
            // Move cursor
            x = startX;
            y = startY;
            remainderHeight = wrapHeight;
            resultLines.push({
                children: lastLine,
                height: lastLineHeight
            });
            maxLineHeight = Math.max(maxLineHeight, lastLineHeight);
            lastLineHeight = 0;
            lastLine = [];
            var isPageEnd = isPageBreakChar || !showAllLines && resultLines.length === maxLines; // Exceed maxLines
            if (isPageEnd) break;
            else if (isControlChar) continue;
        }
        remainderHeight -= childHeight;
        lastLineHeight += childHeight;
        child.setActive().setPosition(x, y).setOrigin(0.5);
        resultChildren.push(child);
        lastLine.push(child);
        y += childHeight;
    }
    if (lastLine.length > 0) {
        resultLines.push({
            children: lastLine,
            height: lastLineHeight
        });
        maxLineHeight = Math.max(maxLineHeight, lastLineHeight);
    }
    result.start += resultChildren.length;
    result.isLastPage = result.start === lastChildIndex;
    result.maxLineHeight = maxLineHeight;
    result.linesWidth = resultLines.length * lineWidth;
    // Calculate size of game object
    var width = this.fixedWidth > 0 ? this.fixedWidth : result.linesWidth + paddingHorizontal;
    var height = this.fixedHeight > 0 ? this.fixedHeight : result.maxLineHeight + paddingVertical;
    // Size might be changed after wrapping
    var innerWidth = width - paddingHorizontal;
    var innerHeight = height - paddingVertical;
    (0, _alignLinesJsDefault.default)(result, innerWidth, innerHeight);
    // Resize
    this.setCanvasSize(width, height);
    // Set initial position
    for(var i = 0, cnt = resultChildren.length; i < cnt; i++){
        var child = resultChildren[i];
        if (!child.renderable) continue;
        child.x0 = child.x;
        child.y0 = child.y;
    }
    return result;
};
exports.default = RunVerticalWrap;

},{"../../../../../../utils/padding/PaddingMethods.js":"dcX3C","./AlignLines.js":"j7LUc","../../../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7LUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenAlignJs = require("../GetChildrenAlign.js");
var _getChildrenAlignJsDefault = parcelHelpers.interopDefault(_getChildrenAlignJs);
var _offsetChildrenJs = require("../OffsetChildren.js");
var _offsetChildrenJsDefault = parcelHelpers.interopDefault(_offsetChildrenJs);
var AlignLines = function(result, width, height) {
    var hAlign = result.hAlign, vAlign = result.vAlign;
    var offsetX, offsetY;
    var rtl = result.rtl;
    var lines = result.lines, lineWidth = result.lineWidth, linesWidth = result.linesWidth;
    switch(hAlign){
        case 1:
        case "center":
            offsetX = (width - linesWidth) / 2;
            break;
        case 2:
        case "right":
            offsetX = width - linesWidth;
            break;
        default:
            offsetX = 0;
            break;
    }
    if (rtl) offsetX += lineWidth;
    for(var li = 0, lcnt = lines.length; li < lcnt; li++){
        var line = lines[rtl ? lcnt - li - 1 : li];
        var children = line.children;
        var lineHeight = line.height;
        var lineVAlign = (0, _getChildrenAlignJsDefault.default)(children);
        if (lineVAlign === undefined) lineVAlign = vAlign;
        switch(lineVAlign){
            case 1:
            case "center":
                offsetY = (height - lineHeight) / 2;
                break;
            case 2:
            case "bottom":
                offsetY = height - lineHeight;
                break;
            default:
                offsetY = 0;
                break;
        }
        (0, _offsetChildrenJsDefault.default)(children, offsetX, offsetY);
        offsetX += lineWidth;
    }
};
exports.default = AlignLines;

},{"../GetChildrenAlign.js":"hIp3q","../OffsetChildren.js":"gD3lp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"257fr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var RunWrap = function(config) {
    var wrapCallback = GetValue(this.wrapConfig, "callback");
    if (!wrapCallback) wrapCallback = GetValue(config, "callback", this.runWordWrap);
    if (typeof wrapCallback === "string") wrapCallback = this[wrapCallback];
    return wrapCallback.call(this, config);
};
exports.default = RunWrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71exp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setVAlign (align) {
        this.wrapConfig.vAlign = align;
        return this;
    },
    setHAlign (align) {
        this.wrapConfig.hAlign = align;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"rrslr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RenderContent = function() {
    this.clear();
    this.setCanvasSize(this.width, this.height);
    if (this.background.active) this.background.render();
    var child;
    for(var i = 0, cnt = this.children.length; i < cnt; i++){
        child = this.children[i];
        if (child.active) child.render();
    }
    if (this.innerBounds.active) this.innerBounds.render();
};
exports.default = RenderContent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biYc0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ForEachChild = function(callback, scope, activeOnly) {
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    var childIndex = 0;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        var isBreak;
        if (scope) isBreak = callback.call(this, child, childIndex, children);
        else isBreak = callback(child, childIndex, children);
        childIndex++;
        if (isBreak) break;
    }
    return this;
};
exports.default = ForEachChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lxeG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ForEachRenderableChild = function(callback, scope, activeOnly) {
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    var childIndex = 0;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        if (child.renderable && !child.removed) {
            var isBreak;
            if (scope) isBreak = callback.call(this, child, childIndex, children);
            else isBreak = callback(child, childIndex, children);
            childIndex++;
            if (isBreak) break;
        }
    }
    return this;
};
exports.default = ForEachRenderableChild;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqJCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../bob/Types.js");
var ForEachCharChild = function(callback, scope, activeOnly) {
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    var charIndex = 0;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        if ((0, _typesJs.IsChar)(child) && !child.removed) {
            var isBreak;
            if (scope) isBreak = callback.call(this, child, charIndex, children);
            else isBreak = callback(child, charIndex, children);
            charIndex++;
            if (isBreak) break;
        }
    }
    return this;
};
exports.default = ForEachCharChild;

},{"../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gKml8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildren = function() {
    return this.children;
};
exports.default = GetChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ceG2z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetAll = Phaser.Utils.Array.GetAll;
var GetActiveChildren = function() {
    return GetAll(this.children, "active", true);
};
exports.default = GetActiveChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kpXQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetCharChildren = function(activeOnly, out) {
    if (out === undefined) out = [];
    this.forEachCharChild(function(child) {
        out.push(child);
    }, undefined, activeOnly);
    return out;
};
exports.default = GetCharChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7avxR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetLastAppendedChildren = function() {
    return this.lastAppendedChildren;
};
exports.default = GetLastAppendedChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jixO7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBobCenterPosition = require("./utils/transform/GetBobCenterPosition");
var _getBobCenterPositionDefault = parcelHelpers.interopDefault(_getBobCenterPosition);
const GetDistance = Phaser.Math.Distance.BetweenPointsSquared;
var GetNearestChild = function(canvasX, canvasY) {
    var pointA = {
        x: canvasX,
        y: canvasY
    };
    var minDistance = Infinity;
    var nearestChild = null;
    this.forEachRenderableChild(function(child) {
        var distance = GetDistance(pointA, (0, _getBobCenterPositionDefault.default)(child, true));
        if (minDistance > distance) {
            minDistance = distance;
            nearestChild = child;
        }
    });
    return nearestChild;
};
exports.default = GetNearestChild;

},{"./utils/transform/GetBobCenterPosition":"2z7C7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2z7C7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bobPositionToCanvasPositionJs = require("./BobPositionToCanvasPosition.js");
var _bobPositionToCanvasPositionJsDefault = parcelHelpers.interopDefault(_bobPositionToCanvasPositionJs);
var GetBobCenterPosition = function(bob, offsetX, offsetY, out) {
    if (typeof offsetX !== "number") {
        out = offsetX;
        offsetX = 0;
        offsetY = 0;
    }
    var bobX = bob.drawCenterX + offsetX;
    var bobY = bob.drawCenterY + offsetY;
    return (0, _bobPositionToCanvasPositionJsDefault.default)(bob, bobX, bobY, out);
};
exports.default = GetBobCenterPosition;

},{"./BobPositionToCanvasPosition.js":"cmxdw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8hgNU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBobWorldPositionJs = require("./utils/transform/GetBobWorldPosition.js");
var _getBobWorldPositionJsDefault = parcelHelpers.interopDefault(_getBobWorldPositionJs);
var GetCharWorldPosition = function(child, offsetX, offsetY, out) {
    if (typeof child === "number") child = this.getCharChild(child, true);
    return (0, _getBobWorldPositionJsDefault.default)(this, child, offsetX, offsetY, out);
};
exports.default = GetCharWorldPosition;

},{"./utils/transform/GetBobWorldPosition.js":"2jATf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYav0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetToMinSize = function() {
    var children = this.children;
    var maxX = 0, maxY = 0;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (!child.renderable || !child.active || !child.visible) continue;
        var x0 = child.x0 !== undefined ? child.x0 : child.x;
        var y0 = child.y0 !== undefined ? child.y0 : child.y;
        maxX = Math.max(maxX, x0);
        maxY = Math.max(maxY, y0);
    }
    var width = maxX + this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right;
    var height = maxY + this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
    // Ignore fixedWidth, and fixedHeight
    if (this.width !== width || this.height !== height) {
        this.dirty = true;
        this.setCanvasSize(width, height);
    }
    return this;
};
exports.default = SetToMinSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bOY0d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../bob/Types.js");
var GetCharChildIndex = function(charIndex, activeOnly) {
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        if ((0, _typesJs.IsChar)(child) && !child.removed) {
            if (charIndex === 0) return i;
            else charIndex--;
        }
    }
    return undefined;
};
exports.default = GetCharChildIndex;

},{"../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"MmkZ7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../bob/Types.js");
var GetCharChild = function(charIndex, activeOnly) {
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        if ((0, _typesJs.IsChar)(child) && !child.removed) {
            if (charIndex === 0) return child;
            else charIndex--;
        }
    }
    return undefined;
};
exports.default = GetCharChild;

},{"../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"t3wfn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../bob/Types.js");
var GetCharIndex = function(childIndex, activeOnly) {
    if (typeof childIndex !== "number") {
        childIndex = this.children.indexOf(childIndex);
        if (childIndex < 0) return null;
    }
    if (activeOnly === undefined) activeOnly = true;
    var children = this.children;
    if (childIndex >= children.length) childIndex = children.length;
    var charIndex = 0;
    for(var i = 0; i < childIndex; i++){
        var child = children[i];
        if (activeOnly && !child.active) continue;
        if ((0, _typesJs.IsChar)(child) && !child.removed) charIndex++;
    }
    return charIndex;
};
exports.default = GetCharIndex;

},{"../bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hOskv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetChildrenInteractiveEnable = function(enable) {
    if (enable === undefined) enable = true;
    if (this.childrenInteractiveEnable !== enable) this.lastOverChild = null;
    this.childrenInteractiveEnable = enable;
    return this;
};
exports.default = SetChildrenInteractiveEnable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htN2d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setChildrenInteractiveJs = require("./SetChildrenInteractive.js");
var _setChildrenInteractiveJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveJs);
const GameObject = Phaser.GameObjects.GameObject;
var SetInteractive = function(hitArea, hitAreaCallback, dropZone) {
    var isInteractived = !!this.input;
    GameObject.prototype.setInteractive.call(this, hitArea, hitAreaCallback, dropZone);
    if (!isInteractived) (0, _setChildrenInteractiveJsDefault.default).call(this);
    return this;
};
exports.default = SetInteractive;

},{"./SetChildrenInteractive.js":"fNfxK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNfxK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFirstChildContainsJs = require("./GetFirstChildContains.js");
var _getFirstChildContainsJsDefault = parcelHelpers.interopDefault(_getFirstChildContainsJs);
var SetChildrenInteractive = function() {
    this.on("pointerdown", OnPointerDown, this).on("pointerdown", OnPointerUp, this).on("pointermove", OnPointOverOut, this).on("pointerover", OnPointOverOut, this).on("pointerout", function(pointer, event) {
        OnPointOverOut.call(this, pointer, null, null, event);
    }, this);
    return this;
};
var OnPointerDown = function(pointer, localX, localY, event) {
    if (!this.childrenInteractiveEnable) return;
    var child = (0, _getFirstChildContainsJsDefault.default)(this.children, localX, localY);
    if (!child) return;
    this.emit("child.pointerdown", child, pointer, localX, localY, event);
};
var OnPointerUp = function(pointer, localX, localY, event) {
    if (!this.childrenInteractiveEnable) return;
    var child = (0, _getFirstChildContainsJsDefault.default)(this.children, localX, localY);
    if (!child) return;
    this.emit("child.pointerup", child, pointer, localX, localY, event);
};
var OnPointOverOut = function(pointer, localX, localY, event) {
    if (!this.childrenInteractiveEnable) return;
    if (localX === null) {
        if (this.lastOverChild !== null) {
            this.emit("child.pointerout", this.lastOverChild, pointer, localX, localY, event);
            this.lastOverChild = null;
        }
        return;
    }
    var child = (0, _getFirstChildContainsJsDefault.default)(this.children, localX, localY);
    if (child === this.lastOverChild) return;
    if (this.lastOverChild !== null) this.emit("child.pointerout", this.lastOverChild, pointer, localX, localY, event);
    if (child !== null) this.emit("child.pointerover", child, pointer, localX, localY, event);
    this.lastOverChild = child;
};
exports.default = SetChildrenInteractive;

},{"./GetFirstChildContains.js":"bxyEe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bxyEe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetFirstChildContains = function(children, x, y) {
    var children = children;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (!child.active || !child.renderable) continue;
        if (child.contains(x, y)) return child;
    }
    return null;
};
exports.default = GetFirstChildContains;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZDhu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const BringToTop = Phaser.Utils.Array.BringToTop;
const SendToBack = Phaser.Utils.Array.SendToBack;
const MoveUp = Phaser.Utils.Array.MoveUp;
const MoveDown = Phaser.Utils.Array.MoveDown;
const MoveAbove = Phaser.Utils.Array.MoveAbove;
const MoveBelow = Phaser.Utils.Array.MoveBelow;
exports.default = {
    moveChildToFist (child) {
        SendToBack(this.children, child);
        return this;
    },
    moveChildToLast (child) {
        BringToTop(this.children, child);
        return this;
    },
    movechildUp (child) {
        MoveUp(this.children, child);
        return this;
    },
    movechildDown (child) {
        MoveDown(this.children, child);
        return this;
    },
    movechildAbove (child, baseChild) {
        MoveAbove(this.children, child, baseChild);
        return this;
    },
    movechildBelow (child, baseChild) {
        MoveBelow(this.children, child, baseChild);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eTgw6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setBackgroundColor (color, color2, isHorizontalGradient) {
        this.background.setColor(color, color2, isHorizontalGradient);
        return this;
    },
    setBackgroundStroke (color, lineWidth) {
        this.background.setStroke(color, lineWidth);
        return this;
    },
    setBackgroundCornerRadius (radius, iteration) {
        this.background.setCornerRadius(radius, iteration);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVZtW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setInnerBoundsColor (color, color2, isHorizontalGradient) {
        this.innerBounds.setColor(color, color2, isHorizontalGradient);
        return this;
    },
    setInnerBoundsStroke (color, lineWidth) {
        this.innerBounds.setStroke(color, lineWidth);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKlA2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _poolJs = require("../../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
var Pools = {};
class PoolManager {
    constructor(config){
        this.pools = GetFastValue(config, "pools", Pools);
    }
    free(bob) {
        if (!this.pools) return this;
        var bobType = bob.type;
        if (!this.pools.hasOwnProperty(bobType)) this.pools[bobType] = new (0, _poolJsDefault.default)();
        this.pools[bobType].push(bob);
        bob.onFree();
        return this;
    }
    freeMultiple(arr) {
        if (!this.pools) return this;
        for(var i = 0, cnt = arr.length; i < cnt; i++)this.free(arr[i]);
        return this;
    }
    allocate(bobType) {
        if (!this.pools || !this.pools.hasOwnProperty(bobType)) return null;
        return this.pools[bobType].pop();
    }
}
exports.default = PoolManager;

},{"../../../../pool.js":"lDewQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZbxl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textPlayerJs = require("./TextPlayer.js");
var _textPlayerJsDefault = parcelHelpers.interopDefault(_textPlayerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textPlayer", function(x, y, width, height, config) {
    var gameObject = new (0, _textPlayerJsDefault.default)(this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextPlayer", (0, _textPlayerJsDefault.default));
exports.default = (0, _textPlayerJsDefault.default);

},{"./TextPlayer.js":"1mFF0","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1mFF0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textplayerJs = require("../../../plugins/textplayer.js");
var _textplayerJsDefault = parcelHelpers.interopDefault(_textplayerJs);
exports.default = (0, _textplayerJsDefault.default);

},{"../../../plugins/textplayer.js":"kx2Ir","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kx2Ir":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textPlayerJs = require("./gameobjects/dynamictext/textplayer/TextPlayer.js");
var _textPlayerJsDefault = parcelHelpers.interopDefault(_textPlayerJs);
exports.default = (0, _textPlayerJsDefault.default);

},{"./gameobjects/dynamictext/textplayer/TextPlayer.js":"2uIz1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uIz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extendJs = require("../../../utils/managers/Extend.js");
var _extendJsDefault = parcelHelpers.interopDefault(_extendJs);
var _dynamicTextJs = require("../dynamictext/DynamicText.js");
var _dynamicTextJsDefault = parcelHelpers.interopDefault(_dynamicTextJs);
var _parserJs = require("./parser/Parser.js");
var _parserJsDefault = parcelHelpers.interopDefault(_parserJs);
var _typeWriterJs = require("./typewriter/TypeWriter.js");
var _typeWriterJsDefault = parcelHelpers.interopDefault(_typeWriterJs);
var _imageManagerJs = require("../../../utils/texture/imagemanager/ImageManager.js");
var _imageManagerJsDefault = parcelHelpers.interopDefault(_imageManagerJs);
var _addSpriteManagerJs = require("./methods/spritemanager/AddSpriteManager.js");
var _addSpriteManagerJsDefault = parcelHelpers.interopDefault(_addSpriteManagerJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _clearEventsJs = require("./methods/utils/ClearEvents.js");
var _clearEventsJsDefault = parcelHelpers.interopDefault(_clearEventsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextPlayer extends (0, _extendJsDefault.default)((0, _dynamicTextJsDefault.default)) {
    constructor(scene, x, y, fixedWidth, fixedHeight, config){
        if (IsPlainObject(x)) config = x;
        else if (IsPlainObject(fixedWidth)) config = fixedWidth;
        if (config === undefined) config = {};
        // Don't set text in DynamicText's constructor
        var content = config.text;
        delete config.text;
        super(scene, x, y, fixedWidth, fixedHeight, config);
        this.type = "rexTextPlayer";
        this.initManagers(scene, config);
        this.parser = new (0, _parserJsDefault.default)(this, GetValue(config, "parser", undefined));
        this.typeWriter = new (0, _typeWriterJsDefault.default)(this, GetValue(config, "typing", undefined));
        this._imageManager = undefined;
        var imageData = GetValue(config, "images", undefined);
        if (imageData) this.addImage(imageData);
        var spriteManagerConfig = GetValue(config, "sprites");
        if (spriteManagerConfig !== false && spriteManagerConfig !== null) (0, _addSpriteManagerJsDefault.default).call(this, spriteManagerConfig);
        this.setIgnoreNextPageInput(GetValue(config, "ignoreNextPageInput", false));
        this.setNextPageInput(GetValue(config, "nextPageInput", null));
        this.isPlaying = false;
        if (content) this.play(content);
    }
    get imageManager() {
        if (this._imageManager === undefined) this._imageManager = new (0, _imageManagerJsDefault.default)(this.scene);
        return this._imageManager;
    }
    get spriteManager() {
        return this.getGameObjectManager("sprite");
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        (0, _clearEventsJsDefault.default)(this);
        this.parser.destroy();
        this.parser = undefined;
        this.typeWriter.destroy(fromScene);
        this.typeWriter = undefined;
        if (this._imageManager) this._imageManager.destroy(fromScene);
        this._imageManager = undefined;
        this.destroyManagers(fromScene);
        super.destroy(fromScene);
    }
    get isPageTyping() {
        return this.typeWriter.isPageTyping;
    }
    set defaultTypingSpeed(speed) {
        this.typeWriter.setDefaultTypingSpeed(speed);
    }
    get defaultTypingSpeed() {
        return this.typeWriter.defaultTypingSpeed;
    }
    set typingSpeed(speed) {
        this.typeWriter.setTypingSpeed(speed);
    }
    get typingSpeed() {
        return this.typeWriter.speed;
    }
    set timeScale(value) {
        this.setTimeScale(value);
    }
    get timeScale() {
        return this.getTimeScale();
    }
}
Object.assign(TextPlayer.prototype, (0, _methodsJsDefault.default));
exports.default = TextPlayer;

},{"../../../utils/managers/Extend.js":"eIXga","../dynamictext/DynamicText.js":"eXloc","./parser/Parser.js":"lNzxt","./typewriter/TypeWriter.js":"284FZ","../../../utils/texture/imagemanager/ImageManager.js":"bIBHI","./methods/spritemanager/AddSpriteManager.js":"e7Dlr","./methods/Methods.js":"cTqDp","./methods/utils/ClearEvents.js":"eQf6J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eIXga":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _initManagersJs = require("./InitManagers.js");
var _initManagersJsDefault = parcelHelpers.interopDefault(_initManagersJs);
var _setTimeScaleJs = require("./SetTimeScale.js");
var _setTimeScaleJsDefault = parcelHelpers.interopDefault(_setTimeScaleJs);
var _getTimeScaleJs = require("./GetTimeScale.js");
var _getTimeScaleJsDefault = parcelHelpers.interopDefault(_getTimeScaleJs);
var _destroyManagersJs = require("./DestroyManagers.js");
var _destroyManagersJsDefault = parcelHelpers.interopDefault(_destroyManagersJs);
var _gameObjectManagerMethodsJs = require("./GameObjectManagerMethods.js");
var _gameObjectManagerMethodsJsDefault = parcelHelpers.interopDefault(_gameObjectManagerMethodsJs);
var _gameObjectMethodsJs = require("./GameObjectMethods.js");
var _gameObjectMethodsJsDefault = parcelHelpers.interopDefault(_gameObjectMethodsJs);
var Extend = function(BaseClass) {
    class Managers extends BaseClass {
    }
    var Methods = {
        initManagers: (0, _initManagersJsDefault.default),
        setTimeScale: (0, _setTimeScaleJsDefault.default),
        getTimeScale: (0, _getTimeScaleJsDefault.default),
        destroyManagers: (0, _destroyManagersJsDefault.default)
    };
    Object.assign(Managers.prototype, Methods, (0, _gameObjectManagerMethodsJsDefault.default), (0, _gameObjectMethodsJsDefault.default));
    return Managers;
};
exports.default = Extend;

},{"./InitManagers.js":"dL0mf","./SetTimeScale.js":"iEpb7","./GetTimeScale.js":"ek0sO","./DestroyManagers.js":"cA0im","./GameObjectManagerMethods.js":"fv1oo","./GameObjectMethods.js":"ktPHG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dL0mf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _layerManagerJs = require("../gameobject/layermanager/LayerManager.js");
var _layerManagerJsDefault = parcelHelpers.interopDefault(_layerManagerJs);
var _soundManagerJs = require("../audio/soundmanager/SoundManager.js");
var _soundManagerJsDefault = parcelHelpers.interopDefault(_soundManagerJs);
var _timelineJs = require("../../time/progresses/Timeline.js");
var _timelineJsDefault = parcelHelpers.interopDefault(_timelineJs);
var _waitEventManagerJs = require("./waiteventmanager/WaitEventManager.js");
var _waitEventManagerJsDefault = parcelHelpers.interopDefault(_waitEventManagerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var InitManagers = function(scene, config) {
    this.clickTarget = undefined;
    this.cameraTarget = undefined;
    this.managersScene = scene;
    this.gameObjectManagers = {};
    var layerManagerConfig = GetValue(config, "layers", false);
    if (layerManagerConfig !== false) this.gameObjectManagers.layer = new (0, _layerManagerJsDefault.default)(scene, layerManagerConfig);
    var soundManagerConfig = GetValue(config, "sounds");
    if (soundManagerConfig !== false) this.soundManager = new (0, _soundManagerJsDefault.default)(scene, soundManagerConfig);
    this.timeline = new (0, _timelineJsDefault.default)(this);
    this.waitEventManager = new (0, _waitEventManagerJsDefault.default)(this, config);
    return this;
};
exports.default = InitManagers;

},{"../gameobject/layermanager/LayerManager.js":"7aNMO","../audio/soundmanager/SoundManager.js":"3VXWU","../../time/progresses/Timeline.js":"bj7en","./waiteventmanager/WaitEventManager.js":"lo5o6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7aNMO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gomanagerJs = require("../gomanager/GOManager.js");
var _gomanagerJsDefault = parcelHelpers.interopDefault(_gomanagerJs);
var _sortGameObjectsByDepthJs = require("../../system/SortGameObjectsByDepth.js");
var _sortGameObjectsByDepthJsDefault = parcelHelpers.interopDefault(_sortGameObjectsByDepthJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class LayerManager extends (0, _gomanagerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        else if (Array.isArray(config)) config = {
            layers: config
        };
        if (!config.hasOwnProperty("fade")) config.fade = 0;
        config.viewportCoordinate = false;
        super(scene, config);
        var initLayers = GetValue(config, "layers");
        if (initLayers) for(var i = 0, cnt = initLayers.length; i < cnt; i++)this.add(initLayers[i]);
    }
    setCreateGameObjectCallback(callback, scope) {
        if (!callback) callback = CreateLayer;
        super.setCreateGameObjectCallback(callback, scope);
        return this;
    }
    // Override
    addGO(name, gameObject) {
        super.addGO(name, gameObject);
        gameObject.name = name;
        return this;
    }
    // New methods
    getLayer(name) {
        return this.getGO(name);
    }
    getLayers(out) {
        if (out === undefined) out = [];
        this.forEachGO(function(gameObject) {
            out.push(gameObject);
        });
        (0, _sortGameObjectsByDepthJsDefault.default)(out, false);
        return out;
    }
    addToLayer(name, gameObject) {
        var layer = this.getGO(name);
        if (!layer) {
            console.warn(`Can't get layer "${name}"`);
            return;
        }
        if (gameObject.isRexContainerLite) gameObject.addToLayer(layer);
        else layer.add(gameObject);
        return this;
    }
}
var CreateLayer = function(scene, depth) {
    var layer = scene.add.layer();
    if (depth !== undefined) layer.setDepth(depth);
    return layer;
};
exports.default = LayerManager;

},{"../gomanager/GOManager.js":"allRS","../../system/SortGameObjectsByDepth.js":"k2hIt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"allRS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../../eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _bobBaseJs = require("./bobbase/BobBase.js");
var _bobBaseJsDefault = parcelHelpers.interopDefault(_bobBaseJs);
var _isEmptyJs = require("../../object/IsEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getViewportJs = require("../../system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class GOManager {
    constructor(scene, config){
        this.scene = scene;
        this.BobClass = GetValue(config, "BobClass", (0, _bobBaseJsDefault.default));
        this.setCreateGameObjectCallback(GetValue(config, "createGameObject"), GetValue(config, "createGameObjectScope"));
        this.setEventEmitter(GetValue(config, "eventEmitter", undefined));
        var fadeConfig = GetValue(config, "fade", 500);
        if (typeof fadeConfig === "number") {
            this.setGOFadeMode();
            this.setGOFadeTime(fadeConfig);
        } else {
            this.setGOFadeMode(GetValue(fadeConfig, "mode"));
            this.setGOFadeTime(GetValue(fadeConfig, "time", 500));
        }
        var viewportCoordinateConfig = GetValue(config, "viewportCoordinate", false);
        if (viewportCoordinateConfig !== false) {
            this.setViewportCoordinateEnable(GetValue(config, "enable", true));
            this.setViewport(GetValue(viewportCoordinateConfig, "viewport"));
        } else this.setViewportCoordinateEnable(false);
        this.setSymbols(GetValue(config, "symbols"));
        this.bobs = {};
        this.removedGOs = [];
        this._timeScale = 1;
    }
    destroy(fromScene) {
        this.clear(!fromScene);
        this.createGameObjectCallback = undefined;
        this.viewport = undefined;
        this.scene = undefined;
    }
    set timeScale(timeScale) {
        if (this._timeScale === timeScale) return;
        this._timeScale = timeScale;
        var bobs = this.bobs;
        for(var name in bobs)bobs[name].setTimeScale(timeScale);
    }
    get timeScale() {
        return this._timeScale;
    }
    setTimeScale(timeScale) {
        this.timeScale = timeScale;
        return this;
    }
    setCreateGameObjectCallback(callback, scope) {
        this.createGameObjectCallback = callback;
        this.createGameObjectScope = scope;
        return this;
    }
    setViewportCoordinateEnable(enable) {
        if (enable === undefined) enable = true;
        this.viewportCoordinateEnable = enable;
        return this;
    }
    setViewport(viewport) {
        if (viewport === undefined) viewport = (0, _getViewportJsDefault.default)(this.scene, this.scene.cameras.main);
        this.viewport = viewport;
        return this;
    }
    setSymbols(symbols) {
        this.symbols = symbols;
        return this;
    }
    get isEmpty() {
        return (0, _isEmptyJsDefault.default)(this.bobs) && this.removedGOs.length === 0;
    }
}
Object.assign(GOManager.prototype, (0, _eventEmitterMethodsJsDefault.default), (0, _methodsJsDefault.default));
exports.default = GOManager;

},{"../../eventemitter/EventEmitterMethods.js":"67KVT","./bobbase/BobBase.js":"givRx","../../object/IsEmpty.js":"jt8NP","./methods/Methods.js":"8wYzE","../../system/GetViewport.js":"2Aw1Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67KVT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setEventEmitter (eventEmitter, EventEmitterClass) {
        if (EventEmitterClass === undefined) EventEmitterClass = Phaser.Events.EventEmitter; // Use built-in EventEmitter class by default
        this._privateEE = eventEmitter === true || eventEmitter === undefined;
        this._eventEmitter = this._privateEE ? new EventEmitterClass() : eventEmitter;
        return this;
    },
    destroyEventEmitter () {
        if (this._eventEmitter && this._privateEE) this._eventEmitter.shutdown();
        return this;
    },
    getEventEmitter () {
        return this._eventEmitter;
    },
    on: function() {
        if (this._eventEmitter) this._eventEmitter.on.apply(this._eventEmitter, arguments);
        return this;
    },
    once: function() {
        if (this._eventEmitter) this._eventEmitter.once.apply(this._eventEmitter, arguments);
        return this;
    },
    off: function() {
        if (this._eventEmitter) this._eventEmitter.off.apply(this._eventEmitter, arguments);
        return this;
    },
    emit: function(event) {
        if (this._eventEmitter && event) this._eventEmitter.emit.apply(this._eventEmitter, arguments);
        return this;
    },
    addListener: function() {
        if (this._eventEmitter) this._eventEmitter.addListener.apply(this._eventEmitter, arguments);
        return this;
    },
    removeListener: function() {
        if (this._eventEmitter) this._eventEmitter.removeListener.apply(this._eventEmitter, arguments);
        return this;
    },
    removeAllListeners: function() {
        if (this._eventEmitter) this._eventEmitter.removeAllListeners.apply(this._eventEmitter, arguments);
        return this;
    },
    listenerCount: function() {
        if (this._eventEmitter) return this._eventEmitter.listenerCount.apply(this._eventEmitter, arguments);
        return 0;
    },
    listeners: function() {
        if (this._eventEmitter) return this._eventEmitter.listeners.apply(this._eventEmitter, arguments);
        return [];
    },
    eventNames: function() {
        if (this._eventEmitter) return this._eventEmitter.eventNames.apply(this._eventEmitter, arguments);
        return [];
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"givRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _propertyMethodsJs = require("./PropertyMethods.js");
var _propertyMethodsJsDefault = parcelHelpers.interopDefault(_propertyMethodsJs);
var _callMethodsJs = require("./CallMethods.js");
var _callMethodsJsDefault = parcelHelpers.interopDefault(_callMethodsJs);
var _dataMethodsJs = require("./DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
class BobBase {
    constructor(GOManager, gameObject, name){
        this.GOManager = GOManager;
        this.tweens = {};
        this.setGO(gameObject, name);
    }
    get scene() {
        return this.GOManager.scene;
    }
    get timeScale() {
        return this.GOManager.timeScale;
    }
    destroy() {
        this.freeGO();
        this.GOManager = undefined;
    }
    freeTweens() {
        var tweenTasks = this.tweens, tweenTask;
        for(var propName in tweenTasks){
            tweenTask = tweenTasks[propName];
            if (tweenTask) tweenTask.remove();
            tweenTasks[propName] = null;
        }
        return this;
    }
    freeGO() {
        this.freeTweens();
        this.gameObject.destroy();
        this.gameObject = undefined;
        return this;
    }
    setGO(gameObject, name) {
        gameObject.setName(name);
        this.gameObject = gameObject;
        this.name = name;
        this.freeTweens();
        return this;
    }
    setTimeScale(timeScale) {
        var tweenTasks = this.tweens;
        for(var key in tweenTasks){
            var tweenTask = tweenTasks[key];
            if (tweenTask) tweenTask.timeScale = timeScale;
        }
        return this;
    }
}
Object.assign(BobBase.prototype, (0, _propertyMethodsJsDefault.default), (0, _callMethodsJsDefault.default), (0, _dataMethodsJsDefault.default));
exports.default = BobBase;

},{"./PropertyMethods.js":"gERAe","./CallMethods.js":"klMMP","./DataMethods.js":"df64B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gERAe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasProperty (property) {
        var gameObject = this.gameObject;
        if (gameObject.hasOwnProperty(property)) return true;
        else {
            var value = gameObject[property];
            return value !== undefined;
        }
    },
    getProperty (property) {
        return this.gameObject[property];
    },
    setProperty (property, value) {
        this.gameObject[property] = value;
        return this;
    },
    easeProperty (property, value, duration, ease, repeat, isYoyo, onComplete) {
        var tweenTasks = this.tweens;
        var tweenTask = tweenTasks[property];
        if (tweenTask) tweenTask.remove();
        var gameObject = this.gameObject;
        var config = {
            targets: gameObject,
            duration: duration,
            ease: ease,
            repeat: repeat,
            yoyo: isYoyo,
            onComplete: function() {
                tweenTasks[property].remove();
                tweenTasks[property] = null;
                if (onComplete) onComplete(gameObject, property);
            },
            onCompleteScope: this
        };
        config[property] = value;
        tweenTask = this.scene.tweens.add(config);
        tweenTask.timeScale = this.timeScale;
        tweenTasks[property] = tweenTask;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klMMP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasMethod (methodName) {
        return typeof this.gameObject[methodName] === "function";
    },
    call (methodName, ...parameters) {
        if (!this.hasMethod(methodName)) return this;
        var gameObject = this.gameObject;
        gameObject[methodName].apply(gameObject, parameters);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"df64B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasData (dataKey) {
        var gameObject = this.gameObject;
        return gameObject.data ? gameObject.data.has(dataKey) : false;
    },
    getData (dataKey) {
        return this.gameObject.getData(dataKey);
    },
    setData (dataKey, value) {
        this.gameObject.setData(dataKey, value);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jt8NP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsEmpty = function(source) {
    for(var k in source)return false;
    return true;
};
exports.default = IsEmpty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wYzE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeMethodsJs = require("./FadeMethods.js");
var _fadeMethodsJsDefault = parcelHelpers.interopDefault(_fadeMethodsJs);
var _addMethodsJs = require("./AddMethods.js");
var _addMethodsJsDefault = parcelHelpers.interopDefault(_addMethodsJs);
var _removeMethodsJs = require("./RemoveMethods.js");
var _removeMethodsJsDefault = parcelHelpers.interopDefault(_removeMethodsJs);
var _propertyMethodsJs = require("./PropertyMethods.js");
var _propertyMethodsJsDefault = parcelHelpers.interopDefault(_propertyMethodsJs);
var _callMethodsJs = require("./CallMethods.js");
var _callMethodsJsDefault = parcelHelpers.interopDefault(_callMethodsJs);
var _dataMethodsJs = require("./DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
var _drawGameObjectsBoundsJs = require("./DrawGameObjectsBounds.js");
var _drawGameObjectsBoundsJsDefault = parcelHelpers.interopDefault(_drawGameObjectsBoundsJs);
var Methods = {
    drawGameObjectsBounds: (0, _drawGameObjectsBoundsJsDefault.default)
};
Object.assign(Methods, (0, _fadeMethodsJsDefault.default), (0, _addMethodsJsDefault.default), (0, _removeMethodsJsDefault.default), (0, _propertyMethodsJsDefault.default), (0, _callMethodsJsDefault.default), (0, _dataMethodsJsDefault.default));
exports.default = Methods;

},{"./FadeMethods.js":"c6VMo","./AddMethods.js":"4hL0e","./RemoveMethods.js":"6R8yV","./PropertyMethods.js":"aM4oJ","./CallMethods.js":"cdBtg","./DataMethods.js":"4GXWz","./DrawGameObjectsBounds.js":"7PesE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c6VMo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const FadeMode = {
    tint: 0,
    alpha: 1
};
exports.default = {
    setGOFadeMode (fadeMode) {
        if (typeof fadeMode === "string") fadeMode = FadeMode[fadeMode];
        this.fadeMode = fadeMode;
        return this;
    },
    setGOFadeTime (time) {
        this.fadeTime = time;
        return this;
    },
    hasTintFadeEffect (gameObject) {
        return (this.fadeMode === undefined || this.fadeMode === 0) && this.fadeTime > 0 && gameObject.setTint !== undefined;
    },
    hasAlphaFadeEffect (gameObject) {
        return (this.fadeMode === undefined || this.fadeMode === 1) && this.fadeTime > 0 && gameObject.setAlpha !== undefined;
    },
    fadeBob (bob, fromValue, toValue, onComplete) {
        var gameObject = bob.gameObject;
        if (this.hasTintFadeEffect(gameObject)) {
            if (fromValue !== undefined) bob.setProperty("tintGray", 255 * fromValue);
            bob.easeProperty("tintGray", Math.floor(255 * toValue), this.fadeTime, "Linear", 0, false, onComplete // onComplete
            );
        } else if (this.hasAlphaFadeEffect(gameObject)) {
            if (fromValue !== undefined) bob.setProperty("alpha", fromValue);
            bob.easeProperty("alpha", toValue, this.fadeTime, "Linear", 0, false, onComplete // onComplete
            );
        } else if (onComplete) onComplete(gameObject);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4hL0e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addTintRGBPropertiesJs = require("../../../../behaviors/tintrgb/AddTintRGBProperties.js");
var _addTintRGBPropertiesJsDefault = parcelHelpers.interopDefault(_addTintRGBPropertiesJs);
var _addViewportCoordinatePropertiesJs = require("../../../../behaviors/viewportcoordinate/AddViewportCoordinateProperties.js");
var _addViewportCoordinatePropertiesJsDefault = parcelHelpers.interopDefault(_addViewportCoordinatePropertiesJs);
const RemoveItem = Phaser.Utils.Array.Remove;
exports.default = {
    has (name) {
        return this.bobs.hasOwnProperty(name);
    },
    exists (name) {
        return this.bobs.hasOwnProperty(name);
    },
    get (name) {
        return this.bobs[name];
    },
    getGO (name) {
        var bob = this.get(name);
        return bob ? bob.gameObject : null;
    },
    addGO (name, gameObject) {
        this.remove(name, true);
        if (this.hasTintFadeEffect(gameObject)) (0, _addTintRGBPropertiesJsDefault.default)(gameObject);
        if (this.viewportCoordinateEnable) (0, _addViewportCoordinatePropertiesJsDefault.default)(gameObject, this.viewport);
        gameObject.once("destroy", function() {
            RemoveItem(this.removedGOs, gameObject);
            if (this.isEmpty) this.emit("empty");
        }, this);
        var bob = new this.BobClass(this, gameObject, name);
        this.bobs[name] = bob;
        return this;
    },
    add (name, ...args) {
        var callback = this.createGameObjectCallback;
        var scope = this.createGameObjectScope;
        var gameObject = callback.call(scope, this.scene, ...args);
        this.addGO(name, gameObject);
        var bob = this.get(name);
        this.fadeBob(bob, 0, 1);
        return this;
    },
    forEachGO (callback, scope) {
        for(var name in this.bobs){
            var gameObject = this.bobs[name].gameObject;
            var stopLoop;
            if (scope) stopLoop = callback.call(scope, gameObject, name, this);
            else stopLoop = callback(gameObject, name, this);
            if (stopLoop) break;
        }
        return this;
    }
};

},{"../../../../behaviors/tintrgb/AddTintRGBProperties.js":"2MPxt","../../../../behaviors/viewportcoordinate/AddViewportCoordinateProperties.js":"gROdu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MPxt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getRGBJs = require("../../utils/color/GetRGB.js");
var _setColorJs = require("../../utils/color/SetColor.js");
var AddTintRGBProperties = function(gameObject, tintRGB) {
    // Don't attach properties again
    if (gameObject.hasOwnProperty("tintR")) return gameObject;
    if (tintRGB === undefined) tintRGB = 0xffffff;
    var tintR = (0, _getRGBJs.GetR)(tintRGB);
    var tintG = (0, _getRGBJs.GetG)(tintRGB);
    var tintB = (0, _getRGBJs.GetB)(tintRGB);
    // Override tint property
    Object.defineProperty(gameObject, "tint", {
        get: function() {
            return tintRGB;
        },
        set: function(value) {
            value = Math.floor(value) & 0xffffff;
            if (gameObject.setTint) gameObject.setTint(value);
            if (tintRGB !== value) {
                tintRGB = value;
                tintR = (0, _getRGBJs.GetR)(tintRGB);
                tintG = (0, _getRGBJs.GetG)(tintRGB);
                tintB = (0, _getRGBJs.GetB)(tintRGB);
            // gameObject.emit('_tintchange', value, tintR, tintG, tintB);
            }
        }
    });
    Object.defineProperty(gameObject, "tintR", {
        get: function() {
            return tintR;
        },
        set: function(value) {
            value = Math.floor(value) & 0xff;
            if (tintR !== value) {
                tintR = value;
                gameObject.tint = (0, _setColorJs.SetR)(tintRGB, value);
            }
        }
    });
    Object.defineProperty(gameObject, "tintG", {
        get: function() {
            return tintG;
        },
        set: function(value) {
            value = Math.floor(value) & 0xff;
            if (tintG !== value) {
                tintG = value;
                gameObject.tint = (0, _setColorJs.SetG)(tintRGB, value);
            }
        }
    });
    Object.defineProperty(gameObject, "tintB", {
        get: function() {
            return tintB;
        },
        set: function(value) {
            value = Math.floor(value) & 0xff;
            if (tintB !== value) {
                tintB = value;
                gameObject.tint = (0, _setColorJs.SetB)(tintRGB, value);
            }
        }
    });
    Object.defineProperty(gameObject, "tintGray", {
        get: function() {
            return Math.floor((tintR + tintG + tintB) / 3);
        },
        set: function(value) {
            value = Math.floor(value) & 0xff;
            if (tintR !== value || tintG !== value || tintB !== value) {
                tintR = value;
                tintG = value;
                tintB = value;
                gameObject.tint = (0, _setColorJs.SetRGB)(tintRGB, value, value, value);
            }
        }
    });
    gameObject.tint = tintRGB;
    return gameObject;
};
exports.default = AddTintRGBProperties;

},{"../../utils/color/GetRGB.js":"cIJOn","../../utils/color/SetColor.js":"lEwZD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cIJOn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetR", ()=>GetR);
parcelHelpers.export(exports, "GetG", ()=>GetG);
parcelHelpers.export(exports, "GetB", ()=>GetB);
var GetR = function(colorInt) {
    return colorInt >> 16 & 0xff;
};
var GetG = function(colorInt) {
    return colorInt >> 8 & 0xff;
};
var GetB = function(colorInt) {
    return colorInt & 0xff;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEwZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetR", ()=>SetR);
parcelHelpers.export(exports, "SetG", ()=>SetG);
parcelHelpers.export(exports, "SetB", ()=>SetB);
parcelHelpers.export(exports, "SetRGB", ()=>SetRGB);
const MaskR = 65535;
const MaskG = 16711935;
const MaskB = 16776960;
var SetR = function(colorInt, r) {
    return (r & 0xff) << 16 | colorInt & MaskR;
};
var SetG = function(colorInt, g) {
    return (g & 0xff) << 8 | colorInt & MaskG;
};
var SetB = function(colorInt, b) {
    return b & 0xff | colorInt & MaskB;
};
var SetRGB = function(colorInt, r, g, b) {
    return (r & 0xff) << 16 | (g & 0xff) << 8 | b & 0xff;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gROdu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _monitorViewportJs = require("./MonitorViewport.js");
var _monitorViewportJsDefault = parcelHelpers.interopDefault(_monitorViewportJs);
var _vpxytoXYJs = require("./VPXYToXY.js");
var _vpxytoXYJsDefault = parcelHelpers.interopDefault(_vpxytoXYJs);
var AddViewportCoordinateProperties = function(gameObject, viewport, vpx, vpy, vpxOffset, vpyOffset, transformCallback) {
    // Don't attach properties again
    if (gameObject.hasOwnProperty("vp")) return gameObject;
    if (typeof vpx === "function") {
        transformCallback = vpx;
        vpx = undefined;
    }
    if (typeof vpxOffset === "function") {
        transformCallback = vpxOffset;
        vpxOffset = undefined;
    }
    if (vpx === undefined) vpx = 0.5;
    if (vpy === undefined) vpy = 0.5;
    if (vpxOffset === undefined) vpxOffset = 0;
    if (vpyOffset === undefined) vpyOffset = 0;
    if (transformCallback === undefined) transformCallback = (0, _vpxytoXYJsDefault.default);
    (0, _monitorViewportJsDefault.default)(viewport);
    var events = viewport.events;
    gameObject.vp = viewport;
    // Set position of game object when view-port changed.
    var Transform = function() {
        transformCallback(vpx, vpy, vpxOffset, vpyOffset, viewport, gameObject);
    };
    events.on("update", Transform);
    gameObject.once("destroy", function() {
        events.off("update", Transform);
        gameObject.vp = undefined;
    });
    Object.defineProperty(gameObject, "vpx", {
        get: function() {
            return vpx;
        },
        set: function(value) {
            if (vpx !== value) {
                vpx = value;
                Transform();
            }
        }
    });
    Object.defineProperty(gameObject, "vpy", {
        get: function() {
            return vpy;
        },
        set: function(value) {
            if (vpy !== value) {
                vpy = value;
                Transform();
            }
        }
    });
    Object.defineProperty(gameObject, "vpxOffset", {
        get: function() {
            return vpxOffset;
        },
        set: function(value) {
            if (vpxOffset !== value) {
                vpxOffset = value;
                Transform();
            }
        }
    });
    Object.defineProperty(gameObject, "vpyOffset", {
        get: function() {
            return vpyOffset;
        },
        set: function(value) {
            if (vpyOffset !== value) {
                vpyOffset = value;
                Transform();
            }
        }
    });
    Transform();
};
exports.default = AddViewportCoordinateProperties;

},{"./MonitorViewport.js":"8QZZp","./VPXYToXY.js":"fsmrA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8QZZp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const EventEmitter = Phaser.Events.EventEmitter;
var MonitorViewport = function(viewport) {
    if (viewport.events) return viewport;
    var events = new EventEmitter();
    var x = viewport.x;
    Object.defineProperty(viewport, "x", {
        get: function() {
            return x;
        },
        set: function(value) {
            if (x !== value) {
                x = value;
                events.emit("update", viewport);
            }
        }
    });
    var y = viewport.y;
    Object.defineProperty(viewport, "y", {
        get: function() {
            return y;
        },
        set: function(value) {
            if (y !== value) {
                y = value;
                events.emit("update", viewport);
            }
        }
    });
    var width = viewport.width;
    Object.defineProperty(viewport, "width", {
        get: function() {
            return width;
        },
        set: function(value) {
            if (width !== value) {
                width = value;
                events.emit("update", viewport);
            }
        }
    });
    var height = viewport.height;
    Object.defineProperty(viewport, "height", {
        get: function() {
            return height;
        },
        set: function(value) {
            if (height !== value) {
                height = value;
                events.emit("update", viewport);
            }
        }
    });
    viewport.events = events;
    return viewport;
};
exports.default = MonitorViewport;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsmrA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var VPXYToXY = function(vpx, vpy, vpxOffset, vpyOffset, viewport, out) {
    if (out === undefined) out = {};
    else if (out === true) out = GlobXY;
    if (typeof vpxOffset !== "number") {
        vpxOffset = 0;
        vpyOffset = 0;
    }
    out.x = viewport.x + viewport.width * vpx + vpxOffset;
    out.y = viewport.y + viewport.height * vpy + vpyOffset;
    return out;
};
var GlobXY = {};
exports.default = VPXYToXY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6R8yV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    remove (name, ignoreFade) {
        if (!this.has(name)) return this;
        var bob = this.get(name);
        delete this.bobs[name];
        this.removedGOs.push(bob.gameObject);
        if (!ignoreFade) this.fadeBob(bob, undefined, 0, function() {
            bob.destroy();
        });
        else bob.destroy();
        return this;
    },
    removeAll () {
        var bobs = this.bobs;
        for(var name in bobs)this.remove(name);
        return this;
    },
    clear (destroyChild) {
        if (destroyChild === undefined) destroyChild = true;
        var bobs = this.bobs;
        for(var name in bobs){
            if (destroyChild) bobs[name].destroy();
            delete bobs[name];
        }
        this.removedGOs.length = 0;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aM4oJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasProperty (name, property) {
        if (!this.has(name)) return false;
        return this.get(name).hasProperty(property);
    },
    getProperty (name, property) {
        if (!this.has(name)) return undefined;
        return this.get(name).getProperty(property);
    },
    isNumberProperty (name, property) {
        var value = this.getProperty(name, property);
        return typeof value === "number";
    },
    setProperty (name, property, value) {
        if (!this.has(name)) return this;
        if (this.symbols && typeof value === "string" && this.isNumberProperty(name, property)) {
            if (value in this.symbols) value = this.symbols[value];
            else console.warn(`Can't find symbol ${value}`);
        }
        this.get(name).setProperty(property, value);
        return this;
    },
    easeProperty (name, property, value, duration, ease, repeat, isYoyo, onComplete) {
        if (!this.has(name)) return this;
        if (duration === undefined) duration = 1000;
        if (ease === undefined) ease = "Linear";
        if (repeat === undefined) repeat = 0;
        if (isYoyo === undefined) isYoyo = false;
        if (this.symbols && typeof value === "string" && this.isNumberProperty(name, property)) {
            if (value in this.symbols) value = this.symbols[value];
            else console.warn(`Can't find symbol ${value}`);
        }
        this.get(name).easeProperty(property, value, duration, ease, repeat, isYoyo, onComplete);
        return this;
    },
    hasTweenTask (name, property) {
        if (!this.has(name)) return false;
        var tweenTasks = this.get(name).tweens;
        return tweenTasks.hasOwnProperty(property);
    },
    getTweenTask (name, property) {
        if (!this.has(name)) return null;
        var tweenTasks = this.get(name).tweens;
        var tweenTask = tweenTasks[property];
        return tweenTask ? tweenTask : null;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdBtg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasMethod (name, methodName) {
        if (!this.has(name)) return false;
        return this.get(name).hasMethod(methodName);
    },
    call (name, methodName, ...parameters) {
        if (!this.has(name)) return this;
        this.get(name).call(methodName, ...parameters);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4GXWz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    hasData (name, dataKey) {
        if (!this.has(name)) return false;
        return this.get(name).hasData(dataKey);
    },
    getData (name, dataKey) {
        if (!this.has(name)) return undefined;
        return this.get(name).getData(dataKey);
    },
    setData (name, dataKey, value) {
        if (!this.has(name)) return this;
        this.get(name).setData(dataKey, value);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PesE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawBoundsJs = require("../../../bounds/DrawBounds.js");
var _drawBoundsJsDefault = parcelHelpers.interopDefault(_drawBoundsJs);
var DrawGameObjectsBounds = function(graphics, config) {
    this.forEachGO(function(gameObject) {
        if (gameObject.drawBounds) gameObject.drawBounds(graphics, config);
        else (0, _drawBoundsJsDefault.default)(gameObject, graphics, config);
    });
    return this;
};
exports.default = DrawGameObjectsBounds;

},{"../../../bounds/DrawBounds.js":"1gWFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gWFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsJs = require("./GetBounds.js");
const GetValue = Phaser.Utils.Objects.GetValue;
var DrawBounds = function(gameObjects, graphics, config) {
    var strokeColor, lineWidth, fillColor, fillAlpha, padding;
    if (typeof config === "number") strokeColor = config;
    else {
        strokeColor = GetValue(config, "color");
        lineWidth = GetValue(config, "lineWidth");
        fillColor = GetValue(config, "fillColor");
        fillAlpha = GetValue(config, "fillAlpha", 1);
        padding = GetValue(config, "padding", 0);
    }
    if (Array.isArray(gameObjects)) for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Draw(gameObjects[i], graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding);
    else Draw(gameObjects, graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding);
};
var Draw = function(gameObject, graphics, strokeColor, lineWidth, fillColor, fillAlpha, padding) {
    var canDrawBound = gameObject.getBounds || gameObject.width !== undefined && gameObject.height !== undefined;
    if (!canDrawBound) return;
    if (strokeColor === undefined) strokeColor = 0xffffff;
    if (lineWidth === undefined) lineWidth = 1;
    if (fillColor === undefined) fillColor = null;
    if (fillAlpha === undefined) fillAlpha = 1;
    if (padding === undefined) padding = 0;
    var p0 = (0, _getBoundsJs.GetTopLeft)(gameObject, Points[0]);
    p0.x -= padding;
    p0.y -= padding;
    var p1 = (0, _getBoundsJs.GetTopRight)(gameObject, Points[1]);
    p1.x += padding;
    p1.y -= padding;
    var p2 = (0, _getBoundsJs.GetBottomRight)(gameObject, Points[2]);
    p2.x += padding;
    p2.y += padding;
    var p3 = (0, _getBoundsJs.GetBottomLeft)(gameObject, Points[3]);
    p3.x -= padding;
    p3.y += padding;
    if (fillColor !== null) graphics.fillStyle(fillColor, fillAlpha).fillPoints(Points, true, true);
    if (strokeColor !== null) graphics.lineStyle(lineWidth, strokeColor).strokePoints(Points, true, true);
};
var Points = [
    {
        x: 0,
        y: 0
    },
    {
        x: 0,
        y: 0
    },
    {
        x: 0,
        y: 0
    },
    {
        x: 0,
        y: 0
    }
];
exports.default = DrawBounds;

},{"./GetBounds.js":"45Kmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45Kmj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetBounds", ()=>GetBounds);
parcelHelpers.export(exports, "GetTopLeft", ()=>GetTopLeft);
parcelHelpers.export(exports, "GetTopRight", ()=>GetTopRight);
parcelHelpers.export(exports, "GetBottomLeft", ()=>GetBottomLeft);
parcelHelpers.export(exports, "GetBottomRight", ()=>GetBottomRight);
var _getDisplaySizeJs = require("../size/GetDisplaySize.js");
const Rectangle = Phaser.Geom.Rectangle;
const Vector2 = Phaser.Math.Vector2;
const RotateAround = Phaser.Math.RotateAround;
var GetBounds = function(gameObject, output) {
    if (output === undefined) output = new Rectangle();
    else if (output === true) {
        if (GlobRect === undefined) GlobRect = new Rectangle();
        output = GlobRect;
    }
    if (gameObject.getBounds) return gameObject.getBounds(output);
    //  We can use the output object to temporarily store the x/y coords in:
    var TLx, TLy, TRx, TRy, BLx, BLy, BRx, BRy;
    // Instead of doing a check if parent container is
    // defined per corner we only do it once.
    if (gameObject.parentContainer) {
        var parentMatrix = gameObject.parentContainer.getBoundsTransformMatrix();
        GetTopLeft(gameObject, output);
        parentMatrix.transformPoint(output.x, output.y, output);
        TLx = output.x;
        TLy = output.y;
        GetTopRight(gameObject, output);
        parentMatrix.transformPoint(output.x, output.y, output);
        TRx = output.x;
        TRy = output.y;
        GetBottomLeft(gameObject, output);
        parentMatrix.transformPoint(output.x, output.y, output);
        BLx = output.x;
        BLy = output.y;
        GetBottomRight(gameObject, output);
        parentMatrix.transformPoint(output.x, output.y, output);
        BRx = output.x;
        BRy = output.y;
    } else {
        GetTopLeft(gameObject, output);
        TLx = output.x;
        TLy = output.y;
        GetTopRight(gameObject, output);
        TRx = output.x;
        TRy = output.y;
        GetBottomLeft(gameObject, output);
        BLx = output.x;
        BLy = output.y;
        GetBottomRight(gameObject, output);
        BRx = output.x;
        BRy = output.y;
    }
    output.x = Math.min(TLx, TRx, BLx, BRx);
    output.y = Math.min(TLy, TRy, BLy, BRy);
    output.width = Math.max(TLx, TRx, BLx, BRx) - output.x;
    output.height = Math.max(TLy, TRy, BLy, BRy) - output.y;
    return output;
};
var GlobRect = undefined;
var GetTopLeft = function(gameObject, output, includeParent) {
    if (output === undefined) output = new Vector2();
    else if (output === true) {
        if (GlobVector === undefined) GlobVector = new Vector2();
        output = GlobVector;
    }
    if (gameObject.getTopLeft) return gameObject.getTopLeft(output);
    output.x = gameObject.x - (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) * gameObject.originX;
    output.y = gameObject.y - (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) * gameObject.originY;
    return PrepareBoundsOutput(gameObject, output, includeParent);
};
var GetTopRight = function(gameObject, output, includeParent) {
    if (output === undefined) output = new Vector2();
    else if (output === true) {
        if (GlobVector === undefined) GlobVector = new Vector2();
        output = GlobVector;
    }
    if (gameObject.getTopRight) return gameObject.getTopRight(output);
    output.x = gameObject.x - (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) * gameObject.originX + (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    output.y = gameObject.y - (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) * gameObject.originY;
    return PrepareBoundsOutput(gameObject, output, includeParent);
};
var GetBottomLeft = function(gameObject, output, includeParent) {
    if (output === undefined) output = new Vector2();
    else if (output === true) {
        if (GlobVector === undefined) GlobVector = new Vector2();
        output = GlobVector;
    }
    if (gameObject.getBottomLeft) return gameObject.getBottomLeft(output);
    output.x = gameObject.x - (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) * gameObject.originX;
    output.y = gameObject.y - (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) * gameObject.originY + (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    return PrepareBoundsOutput(gameObject, output, includeParent);
};
var GetBottomRight = function(gameObject, output, includeParent) {
    if (output === undefined) output = new Vector2();
    else if (output === true) {
        if (GlobVector === undefined) GlobVector = new Vector2();
        output = GlobVector;
    }
    if (gameObject.getBottomRight) return gameObject.getBottomRight(output);
    output.x = gameObject.x - (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) * gameObject.originX + (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    output.y = gameObject.y - (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) * gameObject.originY + (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    return PrepareBoundsOutput(gameObject, output, includeParent);
};
var GlobVector = undefined;
var PrepareBoundsOutput = function(gameObject, output, includeParent) {
    if (includeParent === undefined) includeParent = false;
    if (gameObject.rotation !== 0) RotateAround(output, gameObject.x, gameObject.y, gameObject.rotation);
    if (includeParent && gameObject.parentContainer) {
        var parentMatrix = gameObject.parentContainer.getBoundsTransformMatrix();
        parentMatrix.transformPoint(output.x, output.y, output);
    }
    return output;
};

},{"../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ndUj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetDisplayWidth", ()=>GetDisplayWidth);
parcelHelpers.export(exports, "GetDisplayHeight", ()=>GetDisplayHeight);
var GetDisplayWidth = function(gameObject) {
    if (gameObject.displayWidth !== undefined) return gameObject.displayWidth;
    else return gameObject.width;
};
var GetDisplayHeight = function(gameObject) {
    if (gameObject.displayHeight !== undefined) return gameObject.displayHeight;
    else return gameObject.height;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Aw1Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isCameraObjectJs = require("./IsCameraObject.js");
var _isCameraObjectJsDefault = parcelHelpers.interopDefault(_isCameraObjectJs);
const Rectangle = Phaser.Geom.Rectangle;
var GetViewport = function(scene, camera, out) {
    if (!(0, _isCameraObjectJsDefault.default)(camera)) {
        out = camera;
        camera = undefined;
    }
    if (out === undefined) out = new Rectangle();
    else if (out === true) out = globRect;
    if (camera) return scene.scale.getViewPort(camera, out);
    else return scene.scale.getViewPort(out);
};
var globRect = new Rectangle();
exports.default = GetViewport;

},{"./IsCameraObject.js":"9tgdD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9tgdD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const CameraClass = Phaser.Cameras.Scene2D.BaseCamera;
var IsCameraObject = function(object) {
    return object instanceof CameraClass;
};
exports.default = IsCameraObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2hIt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SortGameObjectsByDepth = function(gameObjects, descending) {
    if (gameObjects.length <= 1) return gameObjects;
    if (descending === undefined) descending = false;
    var scene = gameObjects[0].scene;
    var displayList = scene.sys.displayList;
    displayList.depthSort();
    if (descending) gameObjects.sort(function(childA, childB) {
        return displayList.getIndex(childB) - displayList.getIndex(childA);
    });
    else gameObjects.sort(function(childA, childB) {
        return displayList.getIndex(childA) - displayList.getIndex(childB);
    });
    return gameObjects;
};
exports.default = SortGameObjectsByDepth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VXWU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSoundManagerJs = require("../../../utils/system/GetSoundManager.js");
var _getSoundManagerJsDefault = parcelHelpers.interopDefault(_getSoundManagerJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class SoundManager {
    constructor(game, config){
        this.sound = (0, _getSoundManagerJsDefault.default)(game);
        // Background music will be (fade out)destroyed when play next one.
        this.backgroundMusic = undefined;
        this._backgroundMusicVolume = GetValue(config, "bgm.volume", 1);
        this._backgroundMusicMute = GetValue(config, "bgm.mute", false);
        this.setBackgroundMusicLoop(GetValue(config, "bgm.loop", true));
        this.setBackgroundMusicFadeTime(GetValue(config, "bgm.fade", 500));
        this.backgroundMusic2 = undefined;
        this._backgroundMusic2Volume = GetValue(config, "bgm2.volume", 1);
        this._backgroundMusic2Mute = GetValue(config, "bgm2.mute", false);
        this.setBackgroundMusic2Loop(GetValue(config, "bgm2.loop", true));
        this.setBackgroundMusic2FadeTime(GetValue(config, "bgm2.fade", 500));
        // Sound effect will be destroyed when completed
        this.soundEffects = [];
        this._soundEffectsVolume = GetValue(config, "soundEffect.volume", 1);
        this.soundEffects2 = [];
        this._soundEffects2Volume = GetValue(config, "soundEffect2.volume", 1);
        var initialBackgroundMusic = GetValue(config, "bgm.initial", undefined);
        if (initialBackgroundMusic) this.setCurrentBackgroundMusic(initialBackgroundMusic);
        var initialBackgroundMusic2 = GetValue(config, "bgm2.initial", undefined);
        if (initialBackgroundMusic2) this.setCurrentBackgroundMusic2(initialBackgroundMusic2);
    }
    destroy() {
        if (this.backgroundMusic) this.backgroundMusic.destroy();
        this.backgroundMusic = undefined;
        if (this.backgroundMusic2) this.backgroundMusic2.destroy();
        this.backgroundMusic2 = undefined;
        if (this.soundEffects.length) for(var i = this.soundEffects.length - 1; i >= 0; i--)this.soundEffects[i].destroy();
        this.soundEffects.length = 0;
        if (this.soundEffects2.length) for(var i = this.soundEffects2.length - 1; i >= 0; i--)this.soundEffects2[i].destroy();
        this.soundEffects2.length = 0;
        this.sound = undefined;
        return this;
    }
    // backgroundMusic
    // mute
    get backgroundMusicMute() {
        return this._backgroundMusicMute;
    }
    set backgroundMusicMute(value) {
        this._backgroundMusicMute = value;
        if (this.backgroundMusic) this.backgroundMusic.setMute(mute);
    }
    // volume
    get backgroundMusicVolume() {
        return this._backgroundMusicVolume;
    }
    set backgroundMusicVolume(value) {
        this._backgroundMusicVolume = value;
        if (this.backgroundMusic) this.backgroundMusic.setVolume(value);
    }
    // backgroundMusic2
    // mute
    get backgroundMusic2Mute() {
        return this._backgroundMusic2Mute;
    }
    set backgroundMusic2Mute(value) {
        this._backgroundMusic2Mute = value;
        if (this.backgroundMusic2) this.backgroundMusic2.setMute(mute);
    }
    // volume
    get backgroundMusic2Volume() {
        return this._backgroundMusic2Volume;
    }
    set backgroundMusic2Volume(value) {
        this._backgroundMusic2Volume = value;
        if (this.backgroundMusic2) this.backgroundMusic2.setVolume(value);
    }
    // soundEffects
    // mute
    get soundEffectsMute() {
        return this._soundEffectsMute;
    }
    set soundEffectsMute(value) {
        this._soundEffectsMute = value;
        var soundEffects = this.soundEffects;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setMute(value);
    }
    // volume
    get soundEffectsVolume() {
        return this._soundEffectsVolume;
    }
    set soundEffectsVolume(value) {
        this._soundEffectsVolume = value;
        var soundEffects = this.soundEffects;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setVolume(value);
    }
    // soundEffects2
    // mute
    get soundEffects2Mute() {
        return this._soundEffects2Mute;
    }
    set soundEffects2Mute(value) {
        this._soundEffects2Mute = value;
        var soundEffects = this.soundEffects;
        for(var i = 0, cnt = soundEffects2.length; i < cnt; i++)soundEffects[i].setMute(value);
    }
    // volume
    get soundEffects2Volume() {
        return this._soundEffects2Volume;
    }
    set soundEffects2Volume(value) {
        this._soundEffects2Volume = value;
        var soundEffects = this.soundEffects2;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setVolume(value);
    }
}
Object.assign(SoundManager.prototype, (0, _methodsJsDefault.default));
exports.default = SoundManager;

},{"../../../utils/system/GetSoundManager.js":"5KdLH","./methods/Methods.js":"kgxvp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5KdLH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSceneObjectJs = require("./IsSceneObject.js");
var _isSceneObjectJsDefault = parcelHelpers.interopDefault(_isSceneObjectJs);
var GetSoundManager = function(game) {
    if ((0, _isSceneObjectJsDefault.default)(game)) return game.sys.sound;
    return game.sound;
};
exports.default = GetSoundManager;

},{"./IsSceneObject.js":"3RS5p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kgxvp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _backgroundMusicMethodsJs = require("./BackgroundMusicMethods.js");
var _backgroundMusicMethodsJsDefault = parcelHelpers.interopDefault(_backgroundMusicMethodsJs);
var _backgroundMusic2MethodsJs = require("./BackgroundMusic2Methods.js");
var _backgroundMusic2MethodsJsDefault = parcelHelpers.interopDefault(_backgroundMusic2MethodsJs);
var _soundEffectsMethodsJs = require("./SoundEffectsMethods.js");
var _soundEffectsMethodsJsDefault = parcelHelpers.interopDefault(_soundEffectsMethodsJs);
var _soundEffects2MethodsJs = require("./SoundEffects2Methods.js");
var _soundEffects2MethodsJsDefault = parcelHelpers.interopDefault(_soundEffects2MethodsJs);
var Methods = {};
Object.assign(Methods, (0, _backgroundMusicMethodsJsDefault.default), (0, _backgroundMusic2MethodsJsDefault.default), (0, _soundEffectsMethodsJsDefault.default), (0, _soundEffects2MethodsJsDefault.default));
exports.default = Methods;

},{"./BackgroundMusicMethods.js":"fJ5aU","./BackgroundMusic2Methods.js":"d0R3I","./SoundEffectsMethods.js":"a3GyL","./SoundEffects2Methods.js":"4sfLt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJ5aU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeInJs = require("../../../../audio/fade/FadeIn.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutJs = require("../../../../audio/fade/FadeOut.js");
var _fadeOutJsDefault = parcelHelpers.interopDefault(_fadeOutJs);
const GetValue = Phaser.Utils.Objects.GetValue;
exports.default = {
    setBackgroundMusicLoop (value) {
        if (value === undefined) value = true;
        this.backgroundMusicLoop = value;
        return this;
    },
    setBackgroundMusicFadeTime (time) {
        this.backgroundMusicFadeTime = time;
        return this;
    },
    getBackgroundMusic () {
        return this.backgroundMusic;
    },
    // Internal method
    setCurrentBackgroundMusic (music) {
        this.backgroundMusic = music;
        if (music) {
            music.once("complete", function() {
                if (this.backgroundMusic === music) {
                    this.backgroundMusic.destroy();
                    this.backgroundMusic = undefined;
                }
            }, this).once("destroy", function() {
                if (this.backgroundMusic === music) this.backgroundMusic = undefined;
            }, this);
            if (!music.isPlaying) music.play();
        }
        return this;
    },
    playBackgroundMusic (key, config) {
        // Don't re-play the same background music
        if (this.backgroundMusic && this.backgroundMusic.key === key) return this;
        this.stopBackgroundMusic(); // Stop previous background music
        var music = this.sound.add(key, {
            loop: GetValue(config, "loop", this.backgroundMusicLoop),
            mute: GetValue(config, "mute", this.backgroundMusicMute),
            volume: GetValue(config, "volume", this.backgroundMusicVolume),
            detune: GetValue(config, "detune", 0),
            rate: GetValue(config, "rate", 1)
        });
        this.setCurrentBackgroundMusic(music);
        // Fade volume
        if (this.backgroundMusicFadeTime > 0) this.fadeInBackgroundMusic(this.backgroundMusicFadeTime);
        return this;
    },
    pauseBackgroundMusic () {
        if (this.backgroundMusic) this.backgroundMusic.pause();
        return this;
    },
    resumeBackgroundMusic () {
        if (this.backgroundMusic) this.backgroundMusic.resume();
        return this;
    },
    stopBackgroundMusic () {
        if (this.backgroundMusic) {
            if (this.backgroundMusicFadeTime > 0) this.fadeOutBackgroundMusic(this.backgroundMusicFadeTime, true);
            else {
                this.backgroundMusic.stop();
                this.backgroundMusic.destroy();
                this.backgroundMusic = undefined;
            }
        }
        return this;
    },
    fadeInBackgroundMusic (time) {
        if (this.backgroundMusic) (0, _fadeInJsDefault.default)(this.backgroundMusic, time, this.backgroundMusicVolume, 0);
        return this;
    },
    fadeOutBackgroundMusic (time, isStopped) {
        if (this.backgroundMusic) (0, _fadeOutJsDefault.default)(this.backgroundMusic, time, isStopped);
        return this;
    },
    crossFadeBackgroundMusic (key, time) {
        var backgroundMusicFadeTimeSave = this.backgroundMusicFadeTime;
        this.backgroundMusicFadeTime = 0;
        this.fadeOutBackgroundMusic(time, true).playBackgroundMusic(key).fadeInBackgroundMusic(time);
        this.backgroundMusicFadeTime = backgroundMusicFadeTimeSave;
        return this;
    },
    setBackgroundMusicMute (mute) {
        if (mute === undefined) mute = true;
        this.backgroundMusicMute = mute;
        return this;
    },
    setBackgroundMusicVolume (volume) {
        this.backgroundMusicVolume = volume;
        return this;
    },
    setBackgroundMusicRate (rate) {
        if (this.backgroundMusic) this.backgroundMusic.setRate(rate);
        return this;
    },
    setBackgroundMusicDetune (detune) {
        if (this.backgroundMusic) this.backgroundMusic.setDetune(detune);
        return this;
    }
};

},{"../../../../audio/fade/FadeIn.js":"aFUpv","../../../../audio/fade/FadeOut.js":"7oTLv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFUpv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("./Fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
var _isSoundObjectJs = require("../../utils/system/IsSoundObject.js");
var _isSoundObjectJsDefault = parcelHelpers.interopDefault(_isSoundObjectJs);
var FadeIn = function(scene, sound, duration, endVolume, startVolume) {
    if ((0, _isSoundObjectJsDefault.default)(scene)) {
        startVolume = endVolume;
        endVolume = duration;
        duration = sound;
        sound = scene;
        scene = undefined;
    }
    if (endVolume === undefined) endVolume = 1;
    if (startVolume === undefined) startVolume = 0;
    var config = {
        mode: 0,
        volume: {
            start: startVolume,
            end: endVolume
        },
        duration: duration
    };
    // create sound instance by key
    if (typeof sound === "string") sound = scene.sys.sound.add(sound);
    var fade;
    if (sound.hasOwnProperty("_fade")) {
        fade = sound._fade;
        fade.stop().resetFromJSON(config);
    } else {
        fade = new (0, _fadeJsDefault.default)(scene, sound, config);
        sound._fade = fade;
    }
    fade.start();
    if (!sound.isPlaying) sound.setVolume(startVolume).play();
    return sound;
};
exports.default = FadeIn;

},{"./Fade.js":"7m48u","../../utils/system/IsSoundObject.js":"9kSja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7m48u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
var _isSoundObjectJs = require("../../utils/system/IsSoundObject.js");
var _isSoundObjectJsDefault = parcelHelpers.interopDefault(_isSoundObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Fade extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(scene, sound, config){
        if ((0, _isSoundObjectJsDefault.default)(scene)) {
            config = sound;
            sound = scene;
            scene = undefined;
        }
        sound.active = true;
        sound.scene = scene;
        sound.game = sound.manager.game;
        super(sound, config);
        // this.parent = parent
        // this.timer
        this.volume = {};
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setMode(GetValue(o, "mode", 0));
        this.setEnable(GetValue(o, "enable", true));
        this.setVolumeRange(GetAdvancedValue(o, "volume.start", this.parent.volume), GetAdvancedValue(o, "volume.end", 0));
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = MODE[m];
        this.mode = m;
        return this;
    }
    setVolumeRange(start, end) {
        this.volume.start = start;
        this.volume.end = end;
        return this;
    }
    start() {
        if (this.timer.isRunning) return this;
        this.parent.setVolume(this.volume.start);
        this.timer.setDelay(this.delay).setDuration(this.duration);
        super.start();
        return this;
    }
    updateGameObject(parent, timer) {
        parent.volume = Linear(this.volume.start, this.volume.end, timer.t);
    }
    complete() {
        super.complete();
        switch(this.mode){
            case 1:
                this.parent.stop();
                break;
            case 2:
                this.parent.destroy();
                break;
        }
        return this;
    }
}
const MODE = {
    stop: 1,
    destroy: 2
};
exports.default = Fade;

},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","../../utils/system/IsSoundObject.js":"9kSja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9S4hR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _timerTaskJs = require("../timerticktask/TimerTask.js");
var _timerTaskJsDefault = parcelHelpers.interopDefault(_timerTaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const GetEaseFunction = Phaser.Tweens.Builders.GetEaseFunction;
class EaseValueTaskBase extends (0, _timerTaskJsDefault.default) {
    resetFromJSON(o) {
        this.timer.resetFromJSON(GetValue(o, "timer"));
        this.setEnable(GetValue(o, "enable", true));
        this.setTarget(GetValue(o, "target", this.parent));
        this.setDelay(GetAdvancedValue(o, "delay", 0));
        this.setDuration(GetAdvancedValue(o, "duration", 1000));
        this.setEase(GetValue(o, "ease", "Linear"));
        this.setRepeat(GetValue(o, "repeat", 0));
        return this;
    }
    setEnable(e) {
        if (e == undefined) e = true;
        this.enable = e;
        return this;
    }
    setTarget(target) {
        if (target === undefined) target = this.parent;
        this.target = target;
        return this;
    }
    setDelay(time) {
        this.delay = time;
        // Assign `this.timer.setRepeat(repeat)` manually
        return this;
    }
    setDuration(time) {
        this.duration = time;
        return this;
    }
    setRepeat(repeat) {
        this.repeat = repeat;
        // Assign `this.timer.setRepeat(repeat)` manually
        return this;
    }
    setRepeatDelay(repeatDelay) {
        this.repeatDelay = repeatDelay;
        // Assign `this.timer.setRepeatDelay(repeatDelay)` manually
        return this;
    }
    setEase(ease) {
        if (ease === undefined) ease = "Linear";
        this.ease = ease;
        this.easeFn = GetEaseFunction(ease);
        return this;
    }
    // Override
    start() {
        // Ignore start if timer is running, i.e. in DELAY, o RUN state
        if (this.timer.isRunning) return this;
        super.start();
        return this;
    }
    restart() {
        this.timer.stop();
        this.start.apply(this, arguments);
        return this;
    }
    stop(toEnd) {
        if (toEnd === undefined) toEnd = false;
        super.stop();
        if (toEnd) {
            this.timer.setT(1);
            this.updateGameObject(this.target, this.timer);
            this.complete();
        }
        return this;
    }
    update(time, delta) {
        if (!this.isRunning || !this.enable || !this.parent.active) return this;
        var target = this.target, timer = this.timer;
        timer.update(time, delta);
        // isDelay, isCountDown, isDone
        if (!timer.isDelay) this.updateGameObject(target, timer);
        this.emit("update", target, this);
        if (timer.isDone) this.complete();
        return this;
    }
    // Override
    updateGameObject(target, timer) {}
}
exports.default = EaseValueTaskBase;

},{"../timerticktask/TimerTask.js":"2uFyq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uFyq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sceneUpdateTickTaskJs = require("../SceneUpdateTickTask.js");
var _sceneUpdateTickTaskJsDefault = parcelHelpers.interopDefault(_sceneUpdateTickTaskJs);
var _timerJs = require("./Timer.js");
var _timerJsDefault = parcelHelpers.interopDefault(_timerJs);
class TimerTickTask extends (0, _sceneUpdateTickTaskJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        this.timer = new (0, _timerJsDefault.default)();
    // boot() later 
    }
    // override
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        super.shutdown(fromScene);
        this.timer.destroy();
        this.timer = undefined;
    }
    start() {
        this.timer.start();
        super.start();
        return this;
    }
    stop() {
        this.timer.stop();
        super.stop();
        return this;
    }
    complete() {
        this.timer.stop();
        super.complete();
        return this;
    }
}
exports.default = TimerTickTask;

},{"../SceneUpdateTickTask.js":"hp8Jv","./Timer.js":"1ug9o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hp8Jv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tickTaskJs = require("./TickTask.js");
var _tickTaskJsDefault = parcelHelpers.interopDefault(_tickTaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class SceneUpdateTickTask extends (0, _tickTaskJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        // scene update : update, preupdate, postupdate, prerender, render
        // game update : step, poststep, 
        // If this.scene is not available, use game's 'step' event
        var defaultEventName = this.scene ? "update" : "step";
        this.tickEventName = GetValue(config, "tickEventName", defaultEventName);
        this.isSceneTicker = !IsGameUpdateEvent(this.tickEventName);
    }
    startTicking() {
        super.startTicking();
        if (this.isSceneTicker) this.scene.sys.events.on(this.tickEventName, this.update, this);
        else this.game.events.on(this.tickEventName, this.update, this);
    }
    stopTicking() {
        super.stopTicking();
        if (this.isSceneTicker && this.scene) this.scene.sys.events.off(this.tickEventName, this.update, this);
        else if (this.game) this.game.events.off(this.tickEventName, this.update, this);
    }
}
var IsGameUpdateEvent = function(eventName) {
    return eventName === "step" || eventName === "poststep";
};
exports.default = SceneUpdateTickTask;

},{"./TickTask.js":"GCHOX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GCHOX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("./ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TickTask extends (0, _componentBaseJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        this._isRunning = false;
        this.isPaused = false;
        this.tickingState = false;
        this.setTickingMode(GetValue(config, "tickingMode", 1));
    // boot() later
    }
    // override
    boot() {
        if (this.tickingMode === 2 && !this.tickingState) this.startTicking();
    }
    // override
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.stop();
        if (this.tickingState) this.stopTicking();
        super.shutdown(fromScene);
    }
    setTickingMode(mode) {
        if (typeof mode === "string") mode = TICKINGMODE[mode];
        this.tickingMode = mode;
    }
    // override
    startTicking() {
        this.tickingState = true;
    }
    // override
    stopTicking() {
        this.tickingState = false;
    }
    get isRunning() {
        return this._isRunning;
    }
    set isRunning(value) {
        if (this._isRunning === value) return;
        this._isRunning = value;
        if (this.tickingMode === 1 && value != this.tickingState) {
            if (value) this.startTicking();
            else this.stopTicking();
        }
    }
    start() {
        this.isPaused = false;
        this.isRunning = true;
        return this;
    }
    pause() {
        // Only can ba paused in running state
        if (this.isRunning) {
            this.isPaused = true;
            this.isRunning = false;
        }
        return this;
    }
    resume() {
        // Only can ba resumed in paused state (paused from running state)
        if (this.isPaused) this.isRunning = true;
        return this;
    }
    stop() {
        this.isPaused = false;
        this.isRunning = false;
        return this;
    }
    complete() {
        this.isPaused = false;
        this.isRunning = false;
        this.emit("complete", this.parent, this);
    }
}
const TICKINGMODE = {
    "no": 0,
    "lazy": 1,
    "always": 2
};
exports.default = TickTask;

},{"./ComponentBase.js":"2RQZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2RQZy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _getSceneObjectJs = require("../system/GetSceneObject.js");
var _getSceneObjectJsDefault = parcelHelpers.interopDefault(_getSceneObjectJs);
var _getGameJs = require("../system/GetGame.js");
var _getGameJsDefault = parcelHelpers.interopDefault(_getGameJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ComponentBase {
    constructor(parent, config){
        this.setParent(parent); // gameObject, scene, or game
        this.isShutdown = false;
        // Event emitter, default is private event emitter
        this.setEventEmitter(GetValue(config, "eventEmitter", true));
        // Register callback of parent destroy event, also see `shutdown` method
        if (this.parent) {
            if (this.parent === this.scene) this.scene.sys.events.once("shutdown", this.onEnvDestroy, this);
            else if (this.parent === this.game) this.game.events.once("shutdown", this.onEnvDestroy, this);
            else if (this.parent.once) this.parent.once("destroy", this.onParentDestroy, this);
        // bob object does not have event emitter
        }
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // parent might not be shutdown yet
        if (this.parent) {
            if (this.parent === this.scene) this.scene.sys.events.off("shutdown", this.onEnvDestroy, this);
            else if (this.parent === this.game) this.game.events.off("shutdown", this.onEnvDestroy, this);
            else if (this.parent.once) this.parent.off("destroy", this.onParentDestroy, this);
        // bob object does not have event emitter
        }
        this.destroyEventEmitter();
        this.parent = undefined;
        this.scene = undefined;
        this.game = undefined;
        this.isShutdown = true;
    }
    destroy(fromScene) {
        this.shutdown(fromScene);
    }
    onEnvDestroy() {
        this.destroy(true);
    }
    onParentDestroy(parent, fromScene) {
        this.destroy(fromScene);
    }
    setParent(parent) {
        this.parent = parent; // gameObject, scene, or game
        this.scene = (0, _getSceneObjectJsDefault.default)(parent);
        this.game = (0, _getGameJsDefault.default)(parent);
        return this;
    }
}
Object.assign(ComponentBase.prototype, (0, _eventEmitterMethodsJsDefault.default));
exports.default = ComponentBase;

},{"../eventemitter/EventEmitterMethods.js":"67KVT","../system/GetSceneObject.js":"kXtDW","../system/GetGame.js":"2z43O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kXtDW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSceneObjectJs = require("./IsSceneObject.js");
var _isSceneObjectJsDefault = parcelHelpers.interopDefault(_isSceneObjectJs);
var GetSceneObject = function(object) {
    if (object == null || typeof object !== "object") return null;
    else if ((0, _isSceneObjectJsDefault.default)(object)) return object;
    else if (object.scene && (0, _isSceneObjectJsDefault.default)(object.scene)) return object.scene;
    else if (object.parent && object.parent.scene && (0, _isSceneObjectJsDefault.default)(object.parent.scene)) return object.parent.scene;
    else return null;
};
exports.default = GetSceneObject;

},{"./IsSceneObject.js":"3RS5p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ug9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Timer {
    constructor(config){
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        this.state = GetValue(o, "state", IDLE);
        this.timeScale = GetValue(o, "timeScale", 1);
        this.delay = GetValue(o, "delay", 0);
        this.repeat = GetValue(o, "repeat", 0);
        this.repeatCounter = GetValue(o, "repeatCounter", 0);
        this.repeatDelay = GetValue(o, "repeatDelay", 0);
        this.duration = GetValue(o, "duration", 0);
        this.nowTime = GetValue(o, "nowTime", 0);
        this.justRestart = GetValue(o, "justRestart", false);
    }
    toJSON() {
        return {
            state: this.state,
            timeScale: this.timeScale,
            delay: this.delay,
            repeat: this.repeat,
            repeatCounter: this.repeatCounter,
            repeatDelay: this.repeatDelay,
            duration: this.duration,
            nowTime: this.nowTime,
            justRestart: this.justRestart
        };
    }
    destroy() {}
    setTimeScale(timeScale) {
        this.timeScale = timeScale;
        return this;
    }
    setDelay(delay) {
        if (delay === undefined) delay = 0;
        this.delay = delay;
        return this;
    }
    setDuration(duration) {
        this.duration = duration;
        return this;
    }
    setRepeat(repeat) {
        this.repeat = repeat;
        return this;
    }
    setRepeatInfinity() {
        this.repeat = -1;
        return this;
    }
    setRepeatDelay(repeatDelay) {
        this.repeatDelay = repeatDelay;
        return this;
    }
    start() {
        this.nowTime = this.delay > 0 ? -this.delay : 0;
        this.state = this.nowTime >= 0 ? COUNTDOWN : DELAY;
        this.repeatCounter = 0;
        return this;
    }
    stop() {
        this.state = IDLE;
        return this;
    }
    update(time, delta) {
        if (this.state === IDLE || this.state === DONE || delta === 0 || this.timeScale === 0) return;
        this.nowTime += delta * this.timeScale;
        this.justRestart = false;
        if (this.nowTime >= this.duration) {
            if (this.repeat === -1 || this.repeatCounter < this.repeat) {
                this.repeatCounter++;
                this.justRestart = true;
                this.nowTime -= this.duration;
                if (this.repeatDelay > 0) {
                    this.nowTime -= this.repeatDelay;
                    this.state = REPEATDELAY;
                }
            } else {
                this.nowTime = this.duration;
                this.state = DONE;
            }
        } else if (this.nowTime >= 0) this.state = COUNTDOWN;
    }
    get t() {
        var t;
        switch(this.state){
            case IDLE:
            case DELAY:
            case REPEATDELAY:
                t = 0;
                break;
            case COUNTDOWN:
                t = this.nowTime / this.duration;
                break;
            case DONE:
                t = 1;
                break;
        }
        return Clamp(t, 0, 1);
    }
    set t(value) {
        value = Clamp(value, -1, 1);
        if (value < 0) {
            this.state = DELAY;
            this.nowTime = -this.delay * value;
        } else {
            this.state = COUNTDOWN;
            this.nowTime = this.duration * value;
            if (value === 1 && this.repeat !== 0) this.repeatCounter++;
        }
    }
    setT(t) {
        this.t = t;
        return this;
    }
    get isIdle() {
        return this.state === IDLE;
    }
    get isDelay() {
        return this.state === DELAY;
    }
    get isCountDown() {
        return this.state === COUNTDOWN;
    }
    get isRunning() {
        return this.state === DELAY || this.state === COUNTDOWN;
    }
    get isDone() {
        return this.state === DONE;
    }
    get isOddIteration() {
        return (this.repeatCounter & 1) === 1;
    }
    get isEvenIteration() {
        return (this.repeatCounter & 1) === 0;
    }
}
const IDLE = 0;
const DELAY = 1;
const COUNTDOWN = 2;
const REPEATDELAY = 3;
const DONE = -1;
exports.default = Timer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kSja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const SoundObjectClass = Phaser.Sound.BaseSound;
var IsSoundObject = function(object) {
    return object instanceof SoundObjectClass;
};
exports.default = IsSoundObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oTLv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("./Fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
var _isSoundObjectJs = require("../../utils/system/IsSoundObject.js");
var _isSoundObjectJsDefault = parcelHelpers.interopDefault(_isSoundObjectJs);
var FadeOut = function(scene, sound, duration, destroy) {
    if ((0, _isSoundObjectJsDefault.default)(scene)) {
        destroy = duration;
        duration = sound;
        sound = scene;
        scene = undefined;
    }
    if (destroy === undefined) destroy = true;
    var config = {
        mode: destroy ? 2 : 1,
        volume: {
            start: sound.volume,
            end: 0
        },
        duration: duration
    };
    var fade;
    if (sound.hasOwnProperty("_fade")) {
        fade = sound._fade;
        fade.stop().resetFromJSON(config);
    } else {
        fade = new (0, _fadeJsDefault.default)(scene, sound, config);
        sound._fade = fade;
    }
    fade.start();
    if (!sound.isPlaying) sound.play();
    return sound;
};
exports.default = FadeOut;

},{"./Fade.js":"7m48u","../../utils/system/IsSoundObject.js":"9kSja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0R3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeInJs = require("../../../../audio/fade/FadeIn.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutJs = require("../../../../audio/fade/FadeOut.js");
var _fadeOutJsDefault = parcelHelpers.interopDefault(_fadeOutJs);
const GetValue = Phaser.Utils.Objects.GetValue;
exports.default = {
    setBackgroundMusic2Loop (value) {
        if (value === undefined) value = true;
        this.backgroundMusic2Loop = value;
        return this;
    },
    setBackgroundMusic2FadeTime (time) {
        this.backgroundMusic2FadeTime = time;
        return this;
    },
    getBackgroundMusic2 () {
        return this.backgroundMusic2;
    },
    // Internal method
    setCurrentBackgroundMusic2 (music) {
        this.backgroundMusic2 = music;
        if (music) {
            music.once("complete", function() {
                if (this.backgroundMusic2 === music) {
                    this.backgroundMusic2.destroy();
                    this.backgroundMusic2 = undefined;
                }
            }, this).once("destroy", function() {
                if (this.backgroundMusic2 === music) this.backgroundMusic2 = undefined;
            }, this);
            if (!music.isPlaying) music.play();
        }
        return this;
    },
    playBackgroundMusic2 (key, config) {
        // Don't re-play the same background music
        if (this.backgroundMusic2 && this.backgroundMusic2.key === key) return this;
        this.stopBackgroundMusic2(); // Stop previous background music
        var music = this.sound.add(key, {
            loop: GetValue(config, "loop", this.backgroundMusicLoop),
            mute: GetValue(config, "mute", this.backgroundMusic2Mute),
            volume: GetValue(config, "volume", this.backgroundMusic2Volume),
            detune: GetValue(config, "detune", 0),
            rate: GetValue(config, "rate", 1)
        });
        this.setCurrentBackgroundMusic2(music);
        // Fade volume
        if (this.backgroundMusic2FadeTime > 0) this.fadeInBackgroundMusic2(this.backgroundMusic2FadeTime);
        return this;
    },
    pauseBackgroundMusic2 () {
        if (this.backgroundMusic2) this.backgroundMusic2.pause();
        return this;
    },
    resumeBackgroundMusic2 () {
        if (this.backgroundMusic2) this.backgroundMusic2.resume();
        return this;
    },
    stopBackgroundMusic2 () {
        if (this.backgroundMusic2) {
            if (this.backgroundMusic2FadeTime > 0) this.fadeOutBackgroundMusic2(this.backgroundMusic2FadeTime, true);
            else {
                this.backgroundMusic2.stop();
                this.backgroundMusic2.destroy();
                this.backgroundMusic2 = undefined;
            }
        }
        return this;
    },
    fadeInBackgroundMusic2 (time) {
        if (this.backgroundMusic2) (0, _fadeInJsDefault.default)(this.backgroundMusic2, time, this.backgroundMusic2Volume, 0);
        return this;
    },
    fadeOutBackgroundMusic2 (time, isStopped) {
        if (this.backgroundMusic2) (0, _fadeOutJsDefault.default)(this.backgroundMusic2, time, isStopped);
        return this;
    },
    crossFadeBackgroundMusic2 (key, time) {
        var backgroundMusic2FadeTimeSave = this.backgroundMusic2FadeTime;
        this.backgroundMusic2FadeTime = 0;
        this.fadeOutBackgroundMusic2(time, true).playBackgroundMusic2(key).fadeInBackgroundMusic2(time);
        this.backgroundMusic2FadeTime = backgroundMusic2FadeTimeSave;
        return this;
    },
    setBackgroundMusic2Mute (mute) {
        if (mute === undefined) mute = true;
        this.backgroundMusic2Mute = mute;
        return this;
    },
    setBackgroundMusic2Volume (volume) {
        this.backgroundMusic2Volume = volume;
        return this;
    },
    setBackgroundMusic2Rate (rate) {
        if (this.backgroundMusic2) this.backgroundMusic2.setRate(rate);
        return this;
    },
    setBackgroundMusic2Detune (detune) {
        if (this.backgroundMusic2) this.backgroundMusic2.setDetune(detune);
        return this;
    }
};

},{"../../../../audio/fade/FadeIn.js":"aFUpv","../../../../audio/fade/FadeOut.js":"7oTLv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a3GyL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeInJs = require("../../../../audio/fade/FadeIn.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutJs = require("../../../../audio/fade/FadeOut.js");
var _fadeOutJsDefault = parcelHelpers.interopDefault(_fadeOutJs);
const RemoveItem = Phaser.Utils.Array.Remove;
const GetValue = Phaser.Utils.Objects.GetValue;
exports.default = {
    getSoundEffects () {
        return this.soundEffects;
    },
    getLastSoundEffect () {
        return this.soundEffects[this.soundEffects.length - 1];
    },
    playSoundEffect (key, config) {
        var music = this.sound.add(key, {
            mute: GetValue(config, "mute", this.soundEffectsMute),
            volume: GetValue(config, "volume", this.soundEffectsVolume),
            detune: GetValue(config, "detune", 0),
            rate: GetValue(config, "rate", 1)
        });
        this.soundEffects.push(music);
        music.once("complete", function() {
            music.destroy();
            // SoundManager has been destroyed
            if (!this.sound) return;
            RemoveItem(this.soundEffects, music);
        }, this).once("destroy", function() {
            // SoundManager has been destroyed
            if (!this.sound) return;
            RemoveItem(this.soundEffects, music);
        }, this).play();
        return this;
    },
    stopAllSoundEffects () {
        for(var i = this.soundEffects.length - 1; i >= 0; i--){
            var soundEffect = this.soundEffects[i];
            soundEffect.stop();
            soundEffect.destroy();
        }
        return this;
    },
    fadeInSoundEffect (time) {
        var soundEffect = this.getLastSoundEffect();
        if (soundEffect) (0, _fadeInJsDefault.default)(soundEffect, time, this.soundEffectsVolume, 0);
        return this;
    },
    fadeOutSoundEffect (time, isStopped) {
        var soundEffect = this.getLastSoundEffect();
        if (soundEffect) (0, _fadeOutJsDefault.default)(soundEffect, time, isStopped);
        return this;
    },
    fadeOutAllSoundEffects (time, isStopped) {
        for(var i = this.soundEffects.length - 1; i >= 0; i--)(0, _fadeOutJsDefault.default)(this.soundEffects[i], time, isStopped);
        return this;
    },
    setSoundEffectMute (mute, lastSoundEffect) {
        if (mute === undefined) mute = true;
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        if (lastSoundEffect) {
            // Set volume of last sound effect
            var soundEffect = this.getLastSoundEffect();
            if (soundEffect) soundEffect.setMute(mute);
        } else // Set volume of all sound effects
        this.soundEffectsMute = mute;
        return this;
    },
    setSoundEffectVolume (volume, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        if (lastSoundEffect) {
            // Set volume of last sound effect
            var soundEffect = this.getLastSoundEffect();
            if (soundEffect) soundEffect.setVolume(volume);
        } else // Set volume of all sound effects
        this.soundEffectsVolume = volume;
        return this;
    },
    setSoundEffectDetune (detune, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        var soundEffects;
        if (lastSoundEffect) soundEffects = [
            this.getLastSoundEffect()
        ];
        else soundEffects = this.soundEffects;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setDetune(detune);
        return this;
    },
    setSoundEffectRate (rate, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        var soundEffects;
        if (lastSoundEffect) soundEffects = [
            this.getLastSoundEffect()
        ];
        else soundEffects = this.soundEffects;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setRate(rate);
        return this;
    }
};

},{"../../../../audio/fade/FadeIn.js":"aFUpv","../../../../audio/fade/FadeOut.js":"7oTLv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sfLt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeInJs = require("../../../../audio/fade/FadeIn.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutJs = require("../../../../audio/fade/FadeOut.js");
var _fadeOutJsDefault = parcelHelpers.interopDefault(_fadeOutJs);
const RemoveItem = Phaser.Utils.Array.Remove;
const GetValue = Phaser.Utils.Objects.GetValue;
exports.default = {
    getSoundEffects2 () {
        return this.soundEffects2;
    },
    getLastSoundEffect2 () {
        return this.soundEffects2[this.soundEffects2.length - 1];
    },
    playSoundEffect2 (key, config) {
        var music = this.sound.add(key, {
            mute: GetValue(config, "mute", this.soundEffects2Mute),
            volume: GetValue(config, "volume", this.soundEffects2Volume),
            detune: GetValue(config, "detune", 0),
            rate: GetValue(config, "rate", 1)
        });
        this.soundEffects2.push(music);
        music.once("complete", function() {
            music.destroy();
            // SoundManager has been destroyed
            if (!this.sound) return;
            RemoveItem(this.soundEffects2, music);
        }, this).once("destroy", function() {
            // SoundManager has been destroyed
            if (!this.sound) return;
            RemoveItem(this.soundEffects2, music);
        }, this).play();
        return this;
    },
    stopAllSoundEffects2 () {
        for(var i = this.soundEffects.length - 1; i >= 0; i--){
            var soundEffect = this.soundEffects[i];
            soundEffect.stop();
            soundEffect.destroy();
        }
        return this;
    },
    fadeInSoundEffect2 (time) {
        var soundEffect = this.getLastSoundEffect2();
        if (soundEffect) (0, _fadeInJsDefault.default)(soundEffect, time, this.soundEffects2Volume, 0);
        return this;
    },
    fadeOutSoundEffect2 (time, isStopped) {
        var soundEffect = this.getLastSoundEffect2();
        if (soundEffect) (0, _fadeOutJsDefault.default)(soundEffect, time, isStopped);
        return this;
    },
    fadeOutAllSoundEffects2 (time, isStopped) {
        for(var i = this.soundEffects2.length - 1; i >= 0; i--)(0, _fadeOutJsDefault.default)(this.soundEffects2[i], time, isStopped);
        return this;
    },
    setSoundEffect2Mute (mute, lastSoundEffect) {
        if (mute === undefined) mute = true;
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        if (lastSoundEffect) {
            // Set volume of last sound effect
            var soundEffect = this.getLastSoundEffect2();
            if (soundEffect) soundEffect.setMute(mute);
        } else // Set volume of all sound effects
        this.soundEffects2Mute = mute;
        return this;
    },
    setSoundEffect2Volume (volume, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        if (lastSoundEffect) {
            // Set volume of last sound effect
            var soundEffect = this.getLastSoundEffect2();
            if (soundEffect) soundEffect.setVolume(volume);
        } else // Set volume of all sound effects
        this.soundEffects2Volume = volume;
        return this;
    },
    setSoundEffect2Detune (detune, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        var soundEffects;
        if (lastSoundEffect) soundEffects = [
            this.getLastSoundEffect2()
        ];
        else soundEffects = this.soundEffects2;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setDetune(detune);
        return this;
    },
    setSoundEffect2Rate (rate, lastSoundEffect) {
        if (lastSoundEffect === undefined) lastSoundEffect = false;
        var soundEffects;
        if (lastSoundEffect) soundEffects = [
            this.getLastSoundEffect2()
        ];
        else soundEffects = this.soundEffects2;
        for(var i = 0, cnt = soundEffects.length; i < cnt; i++)soundEffects[i].setRate(rate);
        return this;
    }
};

},{"../../../../audio/fade/FadeIn.js":"aFUpv","../../../../audio/fade/FadeOut.js":"7oTLv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bj7en":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clockJs = require("../clock/Clock.js");
var _clockJsDefault = parcelHelpers.interopDefault(_clockJs);
var _timerJs = require("./Timer.js");
var _timerJsDefault = parcelHelpers.interopDefault(_timerJs);
var _timerPoolJs = require("./TimerPool.js");
var _timerPoolJsDefault = parcelHelpers.interopDefault(_timerPoolJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const TimerPool = new (0, _timerPoolJsDefault.default)();
class Timeline extends (0, _clockJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        this.addedTimers = [];
        this.timers = [];
        this.timerPool = GetValue(config, "pool", TimerPool);
    }
    shutdown() {
        // Already shutdown
        if (this.isShutdown) return;
        this.timerPool.freeMultiple(this.addedTimers).freeMultiple(this.timers);
        this.timerPool = undefined;
        this.addedTimers = undefined;
        this.timers = undefined;
        super.shutdown();
    }
    addTimer(config) {
        var timer = this.timerPool.allocate();
        if (!timer) timer = new (0, _timerJsDefault.default)(this, config);
        else timer.setTimeline(this).reset(config);
        this.addedTimers.push(timer);
        timer.runCallback(timer.onStart);
        if (!this.isRunning) this.start();
        return timer;
    }
    delayCall(delay, callback, args, scope) {
        var timer = this.addTimer({
            duration: delay,
            onComplete: function(target, t, timer) {
                if (args === undefined) args = [];
                args.push(timer);
                callback.apply(scope, args);
            }
        });
        return timer;
    }
    delayEvent(delay, eventName) {
        this.removeDelayEvent(eventName);
        // Clear existed event
        var timer = this.delayCall(delay, function() {
            this.removeDelayEvent(eventName); // Clear this timer
            this.emit(eventName);
        }, [], this);
        this.once(`_remove.${eventName}`, function() {
            timer.remove();
            timer = undefined;
        });
        return this;
    }
    removeDelayEvent(eventName) {
        this.emit(`_remove.${eventName}`);
        return this;
    }
    getTimers(name) {
        var timers = [];
        var timerQueues = [
            this.addedTimers,
            this.timers
        ];
        for(var ti = 0, tcnt = timerQueues.length; ti < tcnt; ti++){
            var timerQueue = timerQueues[ti];
            for(var i = 0, cnt = timerQueue.length; i < cnt; i++){
                var timer = timerQueue[i];
                if (timer.name === name) timers.push(timer);
            }
        }
        return timers;
    }
    update(time, delta) {
        super.update(time, delta);
        if (!this.isRunning) return;
        this.timers.push(...this.addedTimers);
        this.addedTimers.length = 0;
        var pendingTimers = [];
        for(var i = 0, cnt = this.timers.length; i < cnt; i++){
            var timer = this.timers[i];
            var isStopped = timer.update(this.now, this.delta);
            if (isStopped) this.timerPool.free(timer); // Free timer
            else pendingTimers.push(timer); // Add to timer queue
        }
        this.timers = pendingTimers;
        if (this.timers.length === 0 && this.addedTimers.length === 0) this.complete(); // Emit 'complete' event
    }
}
exports.default = Timeline;

},{"../clock/Clock.js":"863mO","./Timer.js":"8NtMa","./TimerPool.js":"iRKuX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"863mO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseClockJs = require("./BaseClock.js");
var _baseClockJsDefault = parcelHelpers.interopDefault(_baseClockJs);
class Clock extends (0, _baseClockJsDefault.default) {
    startTicking() {
        super.startTicking();
        this.scene.sys.events.on("update", this.update, this);
    }
    stopTicking() {
        super.stopTicking();
        if (this.scene) this.scene.sys.events.off("update", this.update, this);
    }
    update(time, delta) {
        if (!this.isRunning || this.timeScale === 0) return this;
        this.tick(delta);
        return this;
    }
}
exports.default = Clock;

},{"./BaseClock.js":"b32n6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b32n6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tickTaskJs = require("../../utils/componentbase/TickTask.js");
var _tickTaskJsDefault = parcelHelpers.interopDefault(_tickTaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class BaseClock extends (0, _tickTaskJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.isRunning = GetValue(o, "isRunning", false);
        this.timeScale = GetValue(o, "timeScale", 1);
        this.now = GetValue(o, "now", 0);
        return this;
    }
    toJSON() {
        return {
            isRunning: this.isRunning,
            timeScale: this.timeScale,
            now: this.now,
            tickingMode: this.tickingMode
        };
    }
    // Override
    // startTicking() { }
    // Override
    // stopTicking() {}
    start(startAt) {
        if (startAt === undefined) startAt = 0;
        this.delta = 0;
        this.now = startAt;
        super.start();
        return this;
    }
    seek(time) {
        this.now = time;
        return this;
    }
    setTimeScale(value) {
        this.timeScale = value;
        return this;
    }
    tick(delta) {
        delta *= this.timeScale;
        this.now += delta;
        this.delta = delta;
        this.emit("update", this.now, this.delta);
        return this;
    }
}
exports.default = BaseClock;

},{"../../utils/componentbase/TickTask.js":"GCHOX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8NtMa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _yoyoJs = require("../../utils/math/Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
const Clamp = Phaser.Math.Clamp;
class Timer {
    constructor(timeline, config){
        this.setTimeline(timeline).reset(config);
    }
    setTimeline(timeline) {
        this.timeline = timeline;
        return this;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    setCallbacks(target, onStart, onProgress, onComplete) {
        this.target = target;
        this.onStart = onStart;
        this.onProgress = onProgress;
        this.onComplete = onComplete;
        return this;
    }
    setDuration(duration, yoyo) {
        if (yoyo === undefined) yoyo = false;
        this.duration = duration;
        this.remainder = duration;
        this.t = 0;
        this.yoyo = yoyo;
        return this;
    }
    setPaused(state) {
        this.isPaused = state;
        return this;
    }
    pause() {
        this.isPaused = true;
        return this;
    }
    resume() {
        this.isPaused = false;
        return this;
    }
    setRemoved(state) {
        this.removed = state;
        return this;
    }
    remove() {
        this.removed = true;
        return this;
    }
    seek(t) {
        this.remainder = this.duration * (1 - t);
        return this;
    }
    reset(o) {
        this.setName(o.name).setDuration(o.duration, o.yoyo).setCallbacks(o.target, o.onStart, o.onProgress, o.onComplete).setPaused(false).setRemoved(false);
        return this;
    }
    onFree() {
        this.setTimeline().setCallbacks();
    }
    getProgress() {
        var value = 1 - this.remainder / this.duration;
        value = Clamp(value, 0, 1);
        if (this.yoyo) value = (0, _yoyoJsDefault.default)(value);
        return value;
    }
    setProgress(value) {
        value = Clamp(value, 0, 1);
        this.remainder = this.duration * (1 - value);
    }
    runCallback(callback) {
        if (!callback) return;
        callback(this.target, this.t, this);
    }
    update(time, delta) {
        if (this.removed) return true;
        else if (this.isPaused) return false;
        this.remainder -= delta;
        this.t = this.getProgress();
        this.runCallback(this.onProgress);
        var isCompleted = this.remainder <= 0;
        if (isCompleted) this.runCallback(this.onComplete);
        return isCompleted;
    }
}
exports.default = Timer;

},{"../../utils/math/Yoyo.js":"g1jWd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g1jWd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Yoyo = function(t, threshold) {
    if (threshold === undefined) threshold = 0.5;
    if (t <= threshold) t = t / threshold;
    else t = 1 - (t - threshold) / (1 - threshold);
    return t;
};
exports.default = Yoyo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRKuX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _poolJs = require("../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
class TimerPool extends (0, _poolJsDefault.default) {
    allocate() {
        return this.pop();
    }
    free(timer) {
        timer.onFree();
        this.push(timer);
    }
    freeMultiple(arr) {
        for(var i = 0, cnt = arr.length; i < cnt; i++)this.free(arr[i]);
        return this;
    }
}
exports.default = TimerPool;

},{"../../pool.js":"lDewQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lo5o6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./const.js");
var _waitTimeMethodsJs = require("./WaitTimeMethods.js");
var _waitTimeMethodsJsDefault = parcelHelpers.interopDefault(_waitTimeMethodsJs);
var _waitInputMethodsJs = require("./WaitInputMethods.js");
var _waitInputMethodsJsDefault = parcelHelpers.interopDefault(_waitInputMethodsJs);
var _waitGameObjectMethodsJs = require("./WaitGameObjectMethods.js");
var _waitGameObjectMethodsJsDefault = parcelHelpers.interopDefault(_waitGameObjectMethodsJs);
var _waitCameraMethodsJs = require("./WaitCameraMethods.js");
var _waitCameraMethodsJsDefault = parcelHelpers.interopDefault(_waitCameraMethodsJs);
var _waitMusicMethodsJs = require("./WaitMusicMethods.js");
var _waitMusicMethodsJsDefault = parcelHelpers.interopDefault(_waitMusicMethodsJs);
var _waitAnyJs = require("./WaitAny.js");
var _waitAnyJsDefault = parcelHelpers.interopDefault(_waitAnyJs);
var _getValueJs = require("../../object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _preUpdateDelayCallJs = require("../../time/PreUpdateDelayCall.js");
var _preUpdateDelayCallJsDefault = parcelHelpers.interopDefault(_preUpdateDelayCallJs);
class WaitEventManager {
    constructor(parent, config){
        this.parent = parent;
        this.waitCompleteEventName = (0, _getValueJsDefault.default)(config, "completeEventName", (0, _constJs.WaitCompleteEvent));
        this.setClickTarget((0, _getValueJsDefault.default)(config, "clickTarget", this.scene));
        this.setCameraTarget((0, _getValueJsDefault.default)(config, "camera", this.scene.cameras.main));
        this.waitId = 0;
    }
    get clickTarget() {
        return this.parent.clickTarget;
    }
    set clickTarget(value) {
        this.parent.clickTarget = value;
    }
    get cameraTarget() {
        return this.parent.cameraTarget;
    }
    set cameraTarget(value) {
        this.parent.cameraTarget = value;
    }
    destroy() {
        this.removeWaitEvents();
        this.clearWaitCompleteCallbacks();
        this.setClickTarget();
        this.setCameraTarget();
    }
    get scene() {
        return this.parent.managersScene;
    }
    waitEvent(eventEmitter, eventName, completeNextTick) {
        var callback = this.getWaitCompleteTriggerCallback(completeNextTick);
        eventEmitter.once(eventName, callback, this);
        this.parent.once((0, _constJs.RemoveWaitEvents), function() {
            eventEmitter.off(eventName, callback, this);
        });
        return this.parent;
    }
    getWaitCompleteTriggerCallback(completeNextTick) {
        if (completeNextTick === undefined) completeNextTick = true;
        var waitId = this.waitId;
        var self = this;
        var completeCallback = function() {
            if (waitId < self.waitId) return;
            self.waitId++;
            self.removeWaitEvents();
            self.parent.emit(self.waitCompleteEventName);
        };
        if (completeNextTick) {
            var completeCallbackNextTick = function() {
                (0, _preUpdateDelayCallJsDefault.default)(self.parent, 0, completeCallback);
            };
            return completeCallbackNextTick;
        } else return completeCallback;
    }
    removeWaitEvents() {
        this.parent.emit((0, _constJs.RemoveWaitEvents));
        return this;
    }
    addWaitCompleteCallback(callback, scope) {
        this.parent.on(this.waitCompleteEventName, callback, scope);
        return this;
    }
    clearWaitCompleteCallbacks() {
        this.parent.off(this.waitCompleteEventName);
        return this;
    }
}
var Methods = {
    waitAny: (0, _waitAnyJsDefault.default)
};
Object.assign(WaitEventManager.prototype, (0, _waitTimeMethodsJsDefault.default), (0, _waitInputMethodsJsDefault.default), (0, _waitGameObjectMethodsJsDefault.default), (0, _waitCameraMethodsJsDefault.default), (0, _waitMusicMethodsJsDefault.default), Methods);
exports.default = WaitEventManager;

},{"./const.js":"jlBlA","./WaitTimeMethods.js":"126zZ","./WaitInputMethods.js":"7wlSe","./WaitGameObjectMethods.js":"hapyD","./WaitCameraMethods.js":"5F41R","./WaitMusicMethods.js":"kTQH0","./WaitAny.js":"80DCb","../../object/GetValue.js":"7bT3a","../../time/PreUpdateDelayCall.js":"cXIPz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jlBlA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WaitCompleteEvent", ()=>WaitCompleteEvent);
parcelHelpers.export(exports, "RemoveWaitEvents", ()=>RemoveWaitEvents);
const WaitCompleteEvent = "_wait.complete";
const RemoveWaitEvents = "_remove.wait";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"126zZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./const.js");
exports.default = {
    waitTime (duration) {
        var timeline = this.parent.timeline;
        timeline.delayEvent(duration, "delay");
        // Clear delay event on timeline manually
        this.parent.once((0, _constJs.RemoveWaitEvents), function() {
            timeline.removeDelayEvent("delay");
        });
        return this.waitEvent(timeline, "delay");
    }
};

},{"./const.js":"jlBlA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wlSe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isSceneObjectJs = require("../../system/IsSceneObject.js");
var _isSceneObjectJsDefault = parcelHelpers.interopDefault(_isSceneObjectJs);
var _splitJs = require("../../string/Split.js");
var _splitJsDefault = parcelHelpers.interopDefault(_splitJs);
exports.default = {
    setClickTarget (target) {
        this.clickTarget = target;
        if (!target) this.clickEE = null;
        else if ((0, _isSceneObjectJsDefault.default)(target)) this.clickEE = target.input;
        else this.clickEE = target.setInteractive();
    },
    waitClick () {
        if (!this.clickEE) return this.waitTime(0);
        return this.waitEvent(this.clickEE, "pointerdown");
    },
    waitKeyDown (key) {
        var eventEmitter = this.scene.input.keyboard;
        if (typeof key === "string") {
            if (key.indexOf("|") === -1) return this.waitEvent(eventEmitter, `keydown-${key.toUpperCase()}`);
            else {
                var keys = (0, _splitJsDefault.default)(key, "|");
                for(var i = 0, cnt = keys.length; i < cnt; i++)this.waitEvent(eventEmitter, `keydown-${key.toUpperCase()}`);
                return this.parent;
            }
        } else return this.waitEvent(eventEmitter, "keydown");
    }
};

},{"../../system/IsSceneObject.js":"3RS5p","../../string/Split.js":"1mXxV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1mXxV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Split = function(s, delimiter) {
    var regexString = `(?<!\\\\)\\${delimiter}`;
    var escapeString = `\\${delimiter}`;
    return s.split(new RegExp(regexString, "g")).map(function(s) {
        return s.replace(escapeString, delimiter);
    });
};
exports.default = Split;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hapyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./const.js");
exports.default = {
    waitGameObjectTweenComplete (goType, name, property) {
        var tweenTask = this.parent.getGameObjectTweenTask(goType, name, property);
        if (tweenTask) return this.waitEvent(tweenTask, "complete");
        return this.waitTime(0);
    },
    waitGameObjectDataFlag (goType, name, dataKey, trueFlag) {
        var gameObject = this.parent.getGameObject(goType, name);
        if (!gameObject) return this.waitTime(0);
        if (gameObject.getData(dataKey) === trueFlag) return this.waitTime(0);
        var eventName = `changedata-${dataKey}`;
        var callback = function(gameObject, value, previousValue) {
            value = !!value;
            if (value === trueFlag) gameObject.emit("_dataFlagMatch");
        };
        gameObject.on(eventName, callback);
        // Clear changedata event on gameobject manually
        this.parent.once((0, _constJs.RemoveWaitEvents), function() {
            gameObject.off(eventName, callback);
        });
        return this.waitEvent(gameObject, "_dataFlagMatch");
    },
    waitGameObjectDestroy (goType, name) {
        var gameObject = this.parent.getGameObject(goType, name);
        if (!gameObject) return this.waitTime(0);
        return this.waitEvent(gameObject, "destroy");
    },
    waitGameObjectManagerEmpty (goType) {
        if (goType) {
            var gameObjectManager = this.parent.getGameObjectManager(goType);
            if (!gameObjectManager) return this.waitTime(0);
            return this.waitEvent(gameObjectManager, "empty");
        } else {
            var gameObjectManagers = this.parent.gameObjectManagers;
            var hasAnyWaitEvent = false;
            for(var name in gameObjectManagers){
                hasAnyWaitEvent = true;
                this.waitEvent(gameObjectManagers[name], "empty");
            }
            if (!hasAnyWaitEvent) return this.waitTime(0);
            return this.parent;
        }
    }
};

},{"./const.js":"jlBlA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5F41R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setCameraTarget (camera) {
        this.cameraTarget = camera;
        return this;
    },
    waitCameraEffectComplete (effectName) {
        var camera = this.cameraTarget;
        if (!camera) return this.waitTime(0);
        var effect, completeEventName;
        switch(effectName){
            case "camera.fadein":
                effect = camera.fadeEffect;
                completeEventName = "camerafadeincomplete";
                break;
            case "camera.fadeout":
                effect = camera.fadeEffect;
                completeEventName = "camerafadeoutcomplete";
                break;
            case "camera.flash":
                effect = camera.flashEffect;
                completeEventName = "cameraflashcomplete";
                break;
            case "camera.shake":
                effect = camera.shakeEffect;
                completeEventName = "camerashakecomplete";
                break;
            case "camera.zoom":
                effect = camera.zoomEffect;
                completeEventName = "camerazoomcomplete";
                break;
            case "camera.rotate":
                effect = camera.rotateToEffect;
                completeEventName = "camerarotatecomplete";
                break;
            case "camera.scroll":
                effect = camera.panEffect;
                completeEventName = "camerapancomplete";
                break;
        }
        if (!effect.isRunning) return this.waitTime(0);
        return this.waitEvent(camera, completeEventName);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTQH0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    waitSoundEffectComplete () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var music = this.parent.soundManager.getLastSoundEffect();
        if (!music) return this.waitTime(0);
        return this.waitEvent(music, "complete");
    },
    waitSoundEffect2Complete () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var music = this.parent.soundManager.getLastSoundEffect2();
        if (!music) return this.waitTime(0);
        return this.waitEvent(music, "complete");
    },
    waitBackgroundMusicComplete () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var music = this.parent.soundManager.getBackgroundMusic();
        if (!music) return this.waitTime(0);
        return this.waitEvent(music, "complete");
    },
    waitBackgroundMusic2Complete () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var music = this.parent.soundManager.getBackgroundMusic2();
        if (!music) return this.waitTime(0);
        return this.waitEvent(music, "complete");
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80DCb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var WaitAny = function(config) {
    if (!config) return this.waitTime(0);
    var hasAnyWaitEvent = false;
    for(var name in config)switch(name){
        case "time":
            hasAnyWaitEvent = true;
            this.waitTime(config.time);
            break;
        case "click":
            hasAnyWaitEvent = true;
            this.waitClick(config.key);
            break;
        case "key":
            hasAnyWaitEvent = true;
            this.waitKeyDown(config.key);
            break;
        case "bgm":
            hasAnyWaitEvent = true;
            this.waitBackgroundMusicComplete();
            break;
        case "bgm2":
            hasAnyWaitEvent = true;
            this.waitBackgroundMusic2Complete();
            break;
        case "se":
            hasAnyWaitEvent = true;
            this.waitSoundEffectComplete();
            break;
        case "se2":
            hasAnyWaitEvent = true;
            this.waitSoundEffect2Complete();
            break;
        case "camera":
            hasAnyWaitEvent = true;
            this.waitCameraEffectComplete(`camera.${config.camera.toLowerCase()}`);
            break;
        default:
            var names = name.split(".");
            if (names.length === 2) {
                var gameObjectName = names[0];
                var propName = names[1];
                var gameObjectManager = this.parent.getGameObjectManager(undefined, gameObjectName);
                if (!gameObjectManager) continue;
                if (propName === "destroy") return this.waitGameObjectDestroy(undefined, gameObjectName);
                var value = gameObjectManager.getProperty(gameObjectName, propName);
                if (typeof value === "number") {
                    hasAnyWaitEvent = true;
                    this.waitGameObjectTweenComplete(undefined, gameObjectName, propName);
                    continue;
                }
                var dataKey = propName;
                var matchFalseFlag = dataKey.startsWith("!");
                if (matchFalseFlag) dataKey = dataKey.substring(1);
                if (gameObjectManager.hasData(gameObjectName, propName)) {
                    hasAnyWaitEvent = true;
                    this.waitGameObjectDataFlag(undefined, gameObjectName, dataKey, !matchFalseFlag);
                }
            }
            break;
    }
    if (!hasAnyWaitEvent) this.waitTime(0);
    return this.parent;
};
exports.default = WaitAny;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cXIPz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSceneObjectJs = require("../system/GetSceneObject.js");
var _getSceneObjectJsDefault = parcelHelpers.interopDefault(_getSceneObjectJs);
var PreUpdateDelayCall = function(gameObject, delay, callback, scope, args) {
    // Invoke callback under scene's 'preupdate' event
    var scene = (0, _getSceneObjectJsDefault.default)(gameObject);
    var timer = scene.time.delayedCall(delay, function() {
        scene.sys.events.once("preupdate", function() {
            callback.call(scope, args);
        });
    });
    return timer;
};
exports.default = PreUpdateDelayCall;

},{"../system/GetSceneObject.js":"kXtDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iEpb7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTimeScale = function(value) {
    this.timeline.timeScale = value;
    for(var name in this.gameObjectManagers)this.gameObjectManagers[name].setTimeScale(value);
    return this;
};
exports.default = SetTimeScale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ek0sO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetTimeScale = function() {
    return this.timeline.timeScale;
};
exports.default = GetTimeScale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cA0im":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DestroyManagers = function(fromScene) {
    this.waitEventManager.destroy();
    this.waitEventManager = undefined;
    for(var name in this.gameObjectManagers){
        this.gameObjectManagers[name].destroy(fromScene);
        delete this.gameObjectManagers[name];
    }
    if (this.soundManager) {
        this.soundManager.destroy();
        this.soundManager = undefined;
    }
    if (this.timeline) {
        this.timeline.destroy();
        this.timeline = undefined;
    }
    this.clickTarget = undefined;
    this.cameraTarget = undefined;
    this.managersScene = undefined;
};
exports.default = DestroyManagers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv1oo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gomanagerJs = require("../gameobject/gomanager/GOManager.js");
var _gomanagerJsDefault = parcelHelpers.interopDefault(_gomanagerJs);
exports.default = {
    addGameObjectManager (config, GameObjectManagerClass) {
        if (config === undefined) config = {};
        if (GameObjectManagerClass === undefined) GameObjectManagerClass = (0, _gomanagerJsDefault.default);
        if (!config.createGameObjectScope) config.createGameObjectScope = this;
        var gameobjectManager = new GameObjectManagerClass(this.managersScene, config);
        this.gameObjectManagers[config.name] = gameobjectManager;
        return this;
    },
    getGameObjectManager (managerName, gameObjectName) {
        if (managerName) {
            var manager = this.gameObjectManagers[managerName];
            return manager;
        } else for(var managerName in this.gameObjectManagers){
            var manager = this.gameObjectManagers[managerName];
            if (manager.has(gameObjectName)) return manager;
        }
    },
    getGameObjectManagerNames () {
        var names = [];
        for(var name in this.gameObjectManagers)names.push(name);
        return names;
    },
    getGameObjectManagerName (gameObjectName) {
        for(var managerName in this.gameObjectManagers){
            if (this.gameObjectManagers[managerName].has(gameObjectName)) return managerName;
        }
    },
    hasGameObjectMananger (managerName) {
        return managerName in this.gameObjectManagers;
    }
};

},{"../gameobject/gomanager/GOManager.js":"allRS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ktPHG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    createGameObject (goType, name, ...params) {
        this.getGameObjectManager(goType, name).add(name, ...params);
        return this;
    },
    destroyGameObject (goType, name) {
        var gameObjectManager = this.getGameObjectManager(goType, name);
        if (name === undefined) gameObjectManager.removeAll();
        else gameObjectManager.remove(name);
        return this;
    },
    hasGameObject (goType, name) {
        return !!this.getGameObjectManager(goType, name);
    },
    callGameObjectMethod (goType, name, methodName, ...params) {
        this.getGameObjectManager(goType, name).call(name, methodName, ...params);
        return this;
    },
    setGameObjectProperty (goType, name, prop, value) {
        this.getGameObjectManager(goType, name).setProperty(name, prop, value);
        return this;
    },
    easeGameObjectProperty (goType, name, prop, value, duration, ease, repeat, isYoyo) {
        this.getGameObjectManager(goType, name).easeProperty(name, prop, value, duration, ease, repeat, isYoyo);
        return this;
    },
    getGameObjectTweenTask (goType, name, property) {
        return this.getGameObjectManager(goType, name).getTweenTask(name, property);
    },
    getGameObject (goType, name, out) {
        var gameobjectManager = this.getGameObjectManager(goType, name);
        if (typeof name === "string") return gameobjectManager.getGO(name);
        else {
            var names = name;
            if (names === undefined) names = gameobjectManager.bobs;
            if (out === undefined) out = {};
            for(name in names)out[name] = gameobjectManager.getGO(name);
            return out;
        }
    },
    addGameObject (goType, name, gameObject) {
        var gameobjectManager = this.getGameObjectManager(goType, name);
        if (typeof name === "string") gameobjectManager.addGO(name, gameObject);
        else {
            var names = name;
            for(name in names)gameobjectManager.addGO(name, names[name]);
        }
        return this;
    },
    drawGameObjectsBounds (goTypes, graphics, config) {
        if (goTypes instanceof Phaser.GameObjects.Graphics) {
            config = graphics;
            graphics = goTypes;
            goTypes = undefined;
        }
        if (goTypes === undefined) goTypes = this.getGameObjectManagerNames();
        if (!Array.isArray(goTypes)) goTypes = [
            goTypes
        ];
        for(var i = 0, cnt = goTypes.length; i < cnt; i++)this.getGameObjectManager(goTypes[i]).drawGameObjectsBounds(graphics, config);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNzxt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bracketparserJs = require("../../../../bracketparser.js");
var _bracketparserJsDefault = parcelHelpers.interopDefault(_bracketparserJs);
var _addParseCallbacksJs = require("./AddParseCallbacks.js");
var _addParseCallbacksJsDefault = parcelHelpers.interopDefault(_addParseCallbacksJs);
var _preProcessSourceJs = require("./PreProcessSource.js");
var _preProcessSourceJsDefault = parcelHelpers.interopDefault(_preProcessSourceJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Parser extends (0, _bracketparserJsDefault.default) {
    constructor(textPlayer, config){
        if (config === undefined) config = {};
        if (!config.hasOwnProperty("delimiters")) config.delimiters = "[]";
        super(config);
        (0, _addParseCallbacksJsDefault.default)(textPlayer, this, config);
        this.setCommentLineStartSymbol(GetValue(config, "comment", "//"));
        this.setContentOutputEnable();
    }
    setCommentLineStartSymbol(symbol) {
        this.commentLineStart = symbol;
        return this;
    }
    setContentOutputEnable(enable) {
        if (enable === undefined) enable = true;
        this.contentOutputEnable = enable;
        return this;
    }
    start(source) {
        super.start((0, _preProcessSourceJsDefault.default)(this, source));
        return this;
    }
}
exports.default = Parser;

},{"../../../../bracketparser.js":"dfnlg","./AddParseCallbacks.js":"65kXH","./PreProcessSource.js":"1Spju","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfnlg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bracketParserJs = require("./logic/bracketparser/bracketparser/BracketParser.js");
var _bracketParserJsDefault = parcelHelpers.interopDefault(_bracketParserJs);
exports.default = (0, _bracketParserJsDefault.default);

},{"./logic/bracketparser/bracketparser/BracketParser.js":"1Mnfj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Mnfj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bracketParserJs = require("../bracketparserbase/BracketParser.js");
var _bracketParserJsDefault = parcelHelpers.interopDefault(_bracketParserJs);
var _getValueJs = require("../../../utils/object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _stringToValuesJs = require("../../../utils/string/StringToValues.js");
var _stringToValuesJsDefault = parcelHelpers.interopDefault(_stringToValuesJs);
var _escapeRegexJs = require("../../../utils/string/EscapeRegex.js");
var _escapeRegexJsDefault = parcelHelpers.interopDefault(_escapeRegexJs);
class BracketParser extends (0, _bracketParserJsDefault.default) {
    constructor(config){
        if (config === undefined) config = {};
        if (!config.hasOwnProperty("multipleLinesTag")) config.multipleLinesTag = false;
        super(config);
        // Parameters for regex
        this.setTagExpression((0, _getValueJsDefault.default)(config, "regex.tag", undefined));
        this.setValueExpression((0, _getValueJsDefault.default)(config, "regex.value", undefined));
        // Brackets and generate regex
        var delimiters = (0, _getValueJsDefault.default)(config, "delimiters", "<>");
        this.setDelimiters(delimiters[0], delimiters[1]);
    }
    setTagExpression(express) {
        if (!express) express = DefaultTokenExpression;
        this.tagExpression = express;
        return this;
    }
    setValueExpression(express) {
        if (!express) express = DefaultTokenExpression;
        this.valueExpression = express;
        return this;
    }
    setDelimiters(delimiterLeft, delimiterRight) {
        super.setDelimiters(delimiterLeft, delimiterRight);
        var tag = `(${this.tagExpression})(=(${this.valueExpression}))?`;
        this.reTag = RegExp(tag, "i");
        if (this.tagExpression !== DefaultTokenExpression || this.valueExpression !== DefaultTokenExpression) {
            var startTagExpression = `${this.tagExpression}(=${this.valueExpression})?`;
            var endTagExpression = `/${this.tagExpression}`;
            delimiterLeft = (0, _escapeRegexJsDefault.default)(this.delimiterLeft);
            delimiterRight = (0, _escapeRegexJsDefault.default)(this.delimiterRight);
            var flag = this.multipleLinesTagEnable ? "gs" : "gi";
            this.reSplit = RegExp(`${delimiterLeft}((${startTagExpression})|(${endTagExpression}))${delimiterRight}`, flag);
        }
        return this;
    }
    onTag(tagContent) {
        var regexResult = tagContent.match(this.reTag);
        var tagName = regexResult[1];
        var isEndTag = tagName.charAt(0) === "/";
        if (isEndTag) tagName = tagName.substring(1, tagName.length);
        if (this.translateTagNameCallback) tagName = this.translateTagNameCallback(tagName);
        this.skipEventFlag = false;
        if (!isEndTag) {
            var values = (0, _stringToValuesJsDefault.default)(regexResult[3], this.valueConverter);
            this.emit(`+${tagName}`, ...values);
            if (!this.skipEventFlag) this.emit("+", tagName, ...values);
            this.lastTagStart = tagName;
        } else {
            this.emit(`-${tagName}`);
            if (!this.skipEventFlag) this.emit("-", tagName);
            this.lastTagEnd = tagName;
        }
    }
}
const DefaultTokenExpression = `[^=]+`;
exports.default = BracketParser;

},{"../bracketparserbase/BracketParser.js":"aLLRt","../../../utils/object/GetValue.js":"7bT3a","../../../utils/string/StringToValues.js":"1Qcjq","../../../utils/string/EscapeRegex.js":"agAPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLLRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../../../utils/eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _getValueJs = require("../../../utils/object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _typeConvertJs = require("../../../utils/string/TypeConvert.js");
var _typeConvertJsDefault = parcelHelpers.interopDefault(_typeConvertJs);
var _escapeRegexJs = require("../../../utils/string/EscapeRegex.js");
var _escapeRegexJsDefault = parcelHelpers.interopDefault(_escapeRegexJs);
class BracketParser {
    constructor(config){
        // Event emitter
        this.setEventEmitter((0, _getValueJsDefault.default)(config, "eventEmitter", undefined));
        // Value convert
        this.setValueConverter((0, _getValueJsDefault.default)(config, "valueConvert", true));
        // Loop
        this.setLoopEnable((0, _getValueJsDefault.default)(config, "loop", false));
        // Brackets and generate regex
        this.setMultipleLinesTagEnable((0, _getValueJsDefault.default)(config, "multipleLinesTag", false));
        var delimiters = (0, _getValueJsDefault.default)(config, "delimiters", "<>");
        this.setDelimiters(delimiters[0], delimiters[1]);
        // Translate tagName callback
        this.setTranslateTagNameCallback((0, _getValueJsDefault.default)(config, "translateTagNameCallback"));
        this.isRunning = false;
        this.isPaused = false;
        this.skipEventFlag = false;
        this.justCompleted = false;
        this.lastTagStart = null;
        this.lastTagEnd = null;
        this.lastContent = null;
    }
    shutdown() {
        this.destroyEventEmitter();
    }
    destroy() {
        this.shutdown();
    }
    setMultipleLinesTagEnable(enable) {
        if (enable === undefined) enable = true;
        this.multipleLinesTagEnable = enable;
        return this;
    }
    // Override
    setDelimiters(delimiterLeft, delimiterRight) {
        if (delimiterRight === undefined) {
            delimiterRight = delimiterLeft[1];
            delimiterLeft = delimiterLeft[0];
        }
        this.delimiterLeft = delimiterLeft;
        this.delimiterRight = delimiterRight;
        delimiterLeft = (0, _escapeRegexJsDefault.default)(this.delimiterLeft);
        delimiterRight = (0, _escapeRegexJsDefault.default)(this.delimiterRight);
        var flag = this.multipleLinesTagEnable ? "gs" : "gi";
        this.reSplit = RegExp(`${delimiterLeft}(.+?)${delimiterRight}`, flag);
        return this;
    }
    setTranslateTagNameCallback(callback) {
        this.translateTagNameCallback = callback;
        return this;
    }
    setValueConverter(converter) {
        if (converter === true) converter = (0, _typeConvertJsDefault.default);
        else if (!converter) converter = BypassValueConverter;
        this.valueConverter = converter;
        return this;
    }
    setLoopEnable(enable) {
        if (enable === undefined) enable = true;
        this.loopEnable = enable;
        return this;
    }
    setSource(source) {
        this.source = source;
        return this;
    }
    resetIndex(index) {
        if (index === undefined) index = 0;
        this.progressIndex = index;
        this.reSplit.lastIndex = index;
        this.lastTagStart = null;
        this.lastTagEnd = null;
        this.lastContent = null;
        this.justCompleted = false;
        this.isRunning = false;
        return this;
    }
    start(source) {
        this.setSource(source).restart();
        return this;
    }
    restart() {
        this.resetIndex().next();
    }
    next() {
        if (this.isPaused) this.onResume();
        // Don't re-enter this method
        if (this.isRunning) return this;
        this.isRunning = true;
        if (this.justCompleted) {
            this.isRunning = false;
            return this;
        }
        if (this.reSplit.lastIndex === 0) this.onStart();
        var text = this.source, lastIndex = text.length;
        this.reSplit.lastIndex = this.progressIndex;
        while(true){
            var regexResult = this.reSplit.exec(text);
            // No tag found, complete
            if (!regexResult) {
                if (this.progressIndex < lastIndex) {
                    this.onContent(text.substring(this.progressIndex, lastIndex));
                    // Might pause here
                    if (this.isPaused) {
                        this.progressIndex = lastIndex;
                        break;
                    }
                }
                this.onComplete();
                this.isRunning = false;
                return;
            }
            var matchEnd = this.reSplit.lastIndex;
            var matchStart = matchEnd - regexResult[0].length;
            // Process content between previous tag and current tag            
            if (this.progressIndex < matchStart) {
                this.onContent(text.substring(this.progressIndex, matchStart));
                // Might pause here
                if (this.isPaused) {
                    this.progressIndex = matchStart;
                    break;
                }
            }
            // Process current tag
            this.onTag(regexResult[1]);
            this.progressIndex = matchEnd;
            // Might pause here
            if (this.isPaused) break;
        }
        this.isRunning = false;
        return this;
    }
    skipEvent() {
        this.skipEventFlag = true;
        return this;
    }
    pause() {
        if (!this.isPaused) this.onPause();
        return this;
    }
    pauseUntilEvent(eventEmitter, eventName) {
        if (this.isPaused) return this;
        this.pause();
        eventEmitter.once(eventName, function() {
            this.next();
        }, this);
        return this;
    }
    onContent(content) {
        this.skipEventFlag = false;
        this.emit("content", content);
        this.lastContent = content;
    }
    // Override
    onTag(tagContent) {}
    onStart() {
        this.isRunning = true;
        this.emit("start", this);
    }
    onComplete() {
        this.isRunning = false;
        this.justCompleted = true;
        this.emit("complete", this);
        if (this.loopEnable) this.resetIndex();
    }
    onPause() {
        this.isPaused = true;
        this.emit("pause", this);
    }
    onResume() {
        this.isPaused = false;
        this.emit("resume", this);
    }
}
const BypassValueConverter = function(s) {
    return s;
};
Object.assign(BracketParser.prototype, (0, _eventEmitterMethodsJsDefault.default));
exports.default = BracketParser;

},{"../../../utils/eventemitter/EventEmitterMethods.js":"67KVT","../../../utils/object/GetValue.js":"7bT3a","../../../utils/string/TypeConvert.js":"3MFGu","../../../utils/string/EscapeRegex.js":"agAPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3MFGu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;
var HEX = /^0x[0-9A-F]+$/i;
var TypeConvert = function(s) {
    if (typeof s !== "string") return s;
    if (s === "") s = null;
    else if (FLOAT.test(s)) s = parseFloat(s);
    else if (HEX.test(s)) s = parseInt(s, 16);
    else {
        if (s === "false") s = false;
        else if (s === "true") s = true;
    }
    return s;
};
exports.default = TypeConvert;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Qcjq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeConvertJs = require("./TypeConvert.js");
var _typeConvertJsDefault = parcelHelpers.interopDefault(_typeConvertJs);
var StringToValues = function(text, valueConverter) {
    if (text == null) return [];
    if (valueConverter === undefined) valueConverter = (0, _typeConvertJsDefault.default);
    var values = text.split(",");
    for(var i = 0, cnt = values.length; i < cnt; i++)values[i] = valueConverter(values[i]);
    return values;
};
exports.default = StringToValues;

},{"./TypeConvert.js":"3MFGu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65kXH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onParseColorTagJs = require("./textstyle/OnParseColorTag.js");
var _onParseColorTagJsDefault = parcelHelpers.interopDefault(_onParseColorTagJs);
var _onParseStrokeColorTagJs = require("./textstyle/OnParseStrokeColorTag.js");
var _onParseStrokeColorTagJsDefault = parcelHelpers.interopDefault(_onParseStrokeColorTagJs);
var _onParseBoldTagJs = require("./textstyle/OnParseBoldTag.js");
var _onParseBoldTagJsDefault = parcelHelpers.interopDefault(_onParseBoldTagJs);
var _onParseItalicTagJs = require("./textstyle/OnParseItalicTag.js");
var _onParseItalicTagJsDefault = parcelHelpers.interopDefault(_onParseItalicTagJs);
var _onParseFontSizeTagJs = require("./textstyle/OnParseFontSizeTag.js");
var _onParseFontSizeTagJsDefault = parcelHelpers.interopDefault(_onParseFontSizeTagJs);
var _onParseOffsetYTagJs = require("./textstyle/OnParseOffsetYTag.js");
var _onParseOffsetYTagJsDefault = parcelHelpers.interopDefault(_onParseOffsetYTagJs);
var _onParseOffsetXTagJs = require("./textstyle/OnParseOffsetXTag.js");
var _onParseOffsetXTagJsDefault = parcelHelpers.interopDefault(_onParseOffsetXTagJs);
var _onParseLeftSpaceTagJs = require("./textstyle/OnParseLeftSpaceTag.js");
var _onParseLeftSpaceTagJsDefault = parcelHelpers.interopDefault(_onParseLeftSpaceTagJs);
var _onParseRightSpaceTagJs = require("./textstyle/OnParseRightSpaceTag.js");
var _onParseRightSpaceTagJsDefault = parcelHelpers.interopDefault(_onParseRightSpaceTagJs);
var _onParseShadowColorTagJs = require("./textstyle/OnParseShadowColorTag.js");
var _onParseShadowColorTagJsDefault = parcelHelpers.interopDefault(_onParseShadowColorTagJs);
var _onParseAlignTagJs = require("./textstyle/OnParseAlignTag.js");
var _onParseAlignTagJsDefault = parcelHelpers.interopDefault(_onParseAlignTagJs);
var _onParseImageTagJs = require("./image/OnParseImageTag.js");
var _onParseImageTagJsDefault = parcelHelpers.interopDefault(_onParseImageTagJs);
var _onParseSpaceTagJs = require("./space/OnParseSpaceTag.js");
var _onParseSpaceTagJsDefault = parcelHelpers.interopDefault(_onParseSpaceTagJs);
var _onParseTypingSpeedTagJs = require("./typing/OnParseTypingSpeedTag.js");
var _onParseTypingSpeedTagJsDefault = parcelHelpers.interopDefault(_onParseTypingSpeedTagJs);
var _onParsePlaySoundEffectTagJs = require("./soundeffect/OnParsePlaySoundEffectTag.js");
var _onParsePlaySoundEffectTagJsDefault = parcelHelpers.interopDefault(_onParsePlaySoundEffectTagJs);
var _onParseFadeInSoundEffectTagJs = require("./soundeffect/OnParseFadeInSoundEffectTag.js");
var _onParseFadeInSoundEffectTagJsDefault = parcelHelpers.interopDefault(_onParseFadeInSoundEffectTagJs);
var _onParseFadeOutSoundEffectTagJs = require("./soundeffect/OnParseFadeOutSoundEffectTag.js");
var _onParseFadeOutSoundEffectTagJsDefault = parcelHelpers.interopDefault(_onParseFadeOutSoundEffectTagJs);
var _onParseSetSoundEffectVolumeTagJs = require("./soundeffect/OnParseSetSoundEffectVolumeTag.js");
var _onParseSetSoundEffectVolumeTagJsDefault = parcelHelpers.interopDefault(_onParseSetSoundEffectVolumeTagJs);
var _onParseSetSoundEffectMuteTagJs = require("./soundeffect/OnParseSetSoundEffectMuteTag.js");
var _onParseSetSoundEffectMuteTagJsDefault = parcelHelpers.interopDefault(_onParseSetSoundEffectMuteTagJs);
var _onParsePlayBackgroundMusicTagJs = require("./backgroundmusic/OnParsePlayBackgroundMusicTag.js");
var _onParsePlayBackgroundMusicTagJsDefault = parcelHelpers.interopDefault(_onParsePlayBackgroundMusicTagJs);
var _onParseFadeInBackgroundMusicTagJs = require("./backgroundmusic/OnParseFadeInBackgroundMusicTag.js");
var _onParseFadeInBackgroundMusicTagJsDefault = parcelHelpers.interopDefault(_onParseFadeInBackgroundMusicTagJs);
var _onParseFadeOutBackgroundMusicTagJs = require("./backgroundmusic/OnParseFadeOutBackgroundMusicTag.js");
var _onParseFadeOutBackgroundMusicTagJsDefault = parcelHelpers.interopDefault(_onParseFadeOutBackgroundMusicTagJs);
var _onParseCrossFadeBackgroundMusicTagJs = require("./backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js");
var _onParseCrossFadeBackgroundMusicTagJsDefault = parcelHelpers.interopDefault(_onParseCrossFadeBackgroundMusicTagJs);
var _onParsePauseBackgroundMusicTagJs = require("./backgroundmusic/OnParsePauseBackgroundMusicTag.js");
var _onParsePauseBackgroundMusicTagJsDefault = parcelHelpers.interopDefault(_onParsePauseBackgroundMusicTagJs);
var _onParseSetBackgroundMusicVolumeTagJs = require("./backgroundmusic/OnParseSetBackgroundMusicVolumeTag.js");
var _onParseSetBackgroundMusicVolumeTagJsDefault = parcelHelpers.interopDefault(_onParseSetBackgroundMusicVolumeTagJs);
var _onParseSetBackgroundMusicMuteTagJs = require("./backgroundmusic/OnParseSetBackgroundMusicMuteTag.js");
var _onParseSetBackgroundMusicMuteTagJsDefault = parcelHelpers.interopDefault(_onParseSetBackgroundMusicMuteTagJs);
var _onParseFadeInCameraTagJs = require("./camera/OnParseFadeInCameraTag.js");
var _onParseFadeInCameraTagJsDefault = parcelHelpers.interopDefault(_onParseFadeInCameraTagJs);
var _onParseFadeOutCameraTagJs = require("./camera/OnParseFadeOutCameraTag.js");
var _onParseFadeOutCameraTagJsDefault = parcelHelpers.interopDefault(_onParseFadeOutCameraTagJs);
var _onParseShakeCameraTagJs = require("./camera/OnParseShakeCameraTag.js");
var _onParseShakeCameraTagJsDefault = parcelHelpers.interopDefault(_onParseShakeCameraTagJs);
var _onParseFlashCameraTagJs = require("./camera/OnParseFlashCameraTag.js");
var _onParseFlashCameraTagJsDefault = parcelHelpers.interopDefault(_onParseFlashCameraTagJs);
var _onParseZoomCameraTagJs = require("./camera/OnParseZoomCameraTag.js");
var _onParseZoomCameraTagJsDefault = parcelHelpers.interopDefault(_onParseZoomCameraTagJs);
var _onParseRotateCameraTagJs = require("./camera/OnParseRotateCameraTag.js");
var _onParseRotateCameraTagJsDefault = parcelHelpers.interopDefault(_onParseRotateCameraTagJs);
var _onParseScrollCameraTagJs = require("./camera/OnParseScrollCameraTag.js");
var _onParseScrollCameraTagJsDefault = parcelHelpers.interopDefault(_onParseScrollCameraTagJs);
var _onParseWaitTagJs = require("./wait/OnParseWaitTag.js");
var _onParseWaitTagJsDefault = parcelHelpers.interopDefault(_onParseWaitTagJs);
var _onParseNewLineTagJs = require("./content/OnParseNewLineTag.js");
var _onParseNewLineTagJsDefault = parcelHelpers.interopDefault(_onParseNewLineTagJs);
var _onParsePageBreakTagJs = require("./content/OnParsePageBreakTag.js");
var _onParsePageBreakTagJsDefault = parcelHelpers.interopDefault(_onParsePageBreakTagJs);
var _onParseContentOffJs = require("./content/OnParseContentOff.js");
var _onParseContentOffJsDefault = parcelHelpers.interopDefault(_onParseContentOffJs);
var _onParseContentOnJs = require("./content/OnParseContentOn.js");
var _onParseContentOnJsDefault = parcelHelpers.interopDefault(_onParseContentOnJs);
var _onParseContentJs = require("./content/OnParseContent.js");
var _onParseContentJsDefault = parcelHelpers.interopDefault(_onParseContentJs);
var _onParseCustomTagJs = require("./custom/OnParseCustomTag.js");
var _onParseCustomTagJsDefault = parcelHelpers.interopDefault(_onParseCustomTagJs);
const ParseCallbacks = [
    (0, _onParseColorTagJsDefault.default),
    (0, _onParseStrokeColorTagJsDefault.default),
    (0, _onParseBoldTagJsDefault.default),
    (0, _onParseItalicTagJsDefault.default),
    (0, _onParseFontSizeTagJsDefault.default),
    (0, _onParseShadowColorTagJsDefault.default),
    (0, _onParseAlignTagJsDefault.default),
    (0, _onParseOffsetYTagJsDefault.default),
    (0, _onParseOffsetXTagJsDefault.default),
    (0, _onParseLeftSpaceTagJsDefault.default),
    (0, _onParseRightSpaceTagJsDefault.default),
    (0, _onParseImageTagJsDefault.default),
    (0, _onParseSpaceTagJsDefault.default),
    (0, _onParseTypingSpeedTagJsDefault.default),
    (0, _onParsePlaySoundEffectTagJsDefault.default),
    (0, _onParseFadeInSoundEffectTagJsDefault.default),
    (0, _onParseFadeOutSoundEffectTagJsDefault.default),
    (0, _onParseSetSoundEffectVolumeTagJsDefault.default),
    (0, _onParseSetSoundEffectMuteTagJsDefault.default),
    (0, _onParsePlayBackgroundMusicTagJsDefault.default),
    (0, _onParseFadeInBackgroundMusicTagJsDefault.default),
    (0, _onParseFadeOutBackgroundMusicTagJsDefault.default),
    (0, _onParseCrossFadeBackgroundMusicTagJsDefault.default),
    (0, _onParsePauseBackgroundMusicTagJsDefault.default),
    (0, _onParseSetBackgroundMusicVolumeTagJsDefault.default),
    (0, _onParseSetBackgroundMusicMuteTagJsDefault.default),
    (0, _onParseFadeInCameraTagJsDefault.default),
    (0, _onParseFadeOutCameraTagJsDefault.default),
    (0, _onParseShakeCameraTagJsDefault.default),
    (0, _onParseFlashCameraTagJsDefault.default),
    (0, _onParseZoomCameraTagJsDefault.default),
    (0, _onParseRotateCameraTagJsDefault.default),
    (0, _onParseScrollCameraTagJsDefault.default),
    (0, _onParseWaitTagJsDefault.default),
    (0, _onParseNewLineTagJsDefault.default),
    (0, _onParsePageBreakTagJsDefault.default),
    (0, _onParseContentOffJsDefault.default),
    (0, _onParseContentOnJsDefault.default),
    (0, _onParseContentJsDefault.default),
    (0, _onParseCustomTagJsDefault.default)
];
var AddParseCallbacks = function(textPlayer, parser, config) {
    for(var i = 0, cnt = ParseCallbacks.length; i < cnt; i++)ParseCallbacks[i](textPlayer, parser, config);
};
exports.default = AddParseCallbacks;

},{"./textstyle/OnParseColorTag.js":"l6COQ","./textstyle/OnParseStrokeColorTag.js":"kSEIV","./textstyle/OnParseBoldTag.js":"3cQcl","./textstyle/OnParseItalicTag.js":"2crXH","./textstyle/OnParseFontSizeTag.js":"1RYtJ","./textstyle/OnParseOffsetYTag.js":"gqw9p","./textstyle/OnParseOffsetXTag.js":"6hkqn","./textstyle/OnParseLeftSpaceTag.js":"2mpYI","./textstyle/OnParseRightSpaceTag.js":"cfA7o","./textstyle/OnParseShadowColorTag.js":"d5XKO","./textstyle/OnParseAlignTag.js":"d9A9s","./image/OnParseImageTag.js":"jOjwR","./space/OnParseSpaceTag.js":"bZibS","./typing/OnParseTypingSpeedTag.js":"aTvbc","./soundeffect/OnParsePlaySoundEffectTag.js":"jt36x","./soundeffect/OnParseFadeInSoundEffectTag.js":"hz54v","./soundeffect/OnParseFadeOutSoundEffectTag.js":"8kGnX","./soundeffect/OnParseSetSoundEffectVolumeTag.js":"ixtNN","./soundeffect/OnParseSetSoundEffectMuteTag.js":"b4Ueh","./backgroundmusic/OnParsePlayBackgroundMusicTag.js":"egza3","./backgroundmusic/OnParseFadeInBackgroundMusicTag.js":"bjQLz","./backgroundmusic/OnParseFadeOutBackgroundMusicTag.js":"3JUNR","./backgroundmusic/OnParseCrossFadeBackgroundMusicTag.js":"2OKCl","./backgroundmusic/OnParsePauseBackgroundMusicTag.js":"27Yrn","./backgroundmusic/OnParseSetBackgroundMusicVolumeTag.js":"4l69L","./backgroundmusic/OnParseSetBackgroundMusicMuteTag.js":"32i23","./camera/OnParseFadeInCameraTag.js":"igpiu","./camera/OnParseFadeOutCameraTag.js":"3rNwl","./camera/OnParseShakeCameraTag.js":"l3fZ8","./camera/OnParseFlashCameraTag.js":"aeomX","./camera/OnParseZoomCameraTag.js":"bvGj3","./camera/OnParseRotateCameraTag.js":"gaUHb","./camera/OnParseScrollCameraTag.js":"4e1wv","./wait/OnParseWaitTag.js":"9lZdz","./content/OnParseNewLineTag.js":"d5M71","./content/OnParsePageBreakTag.js":"hr28L","./content/OnParseContentOff.js":"8LyGf","./content/OnParseContentOn.js":"feJeR","./content/OnParseContent.js":"bMxSm","./custom/OnParseCustomTag.js":"g6fjZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l6COQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseColorTag = function(textPlayer, parser, config) {
    var tagName = "color";
    var defaultColor;
    parser.on("start", function() {
        defaultColor = textPlayer.textStyle.color;
    }).on(`+${tagName}`, function(color) {
        textPlayer.textStyle.setColor(color);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setColor(defaultColor);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setColor(defaultColor);
    });
};
exports.default = OnParseColorTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSEIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseStrokeColorTag = function(textPlayer, parser, config) {
    var tagName = "stroke";
    var defaultStroke;
    parser.on("start", function() {
        defaultStroke = textPlayer.textStyle.stroke;
        textPlayer.textStyle.setStrokeStyle(null);
    }).on(`+${tagName}`, function(color) {
        if (color === undefined) color = defaultStroke;
        textPlayer.textStyle.setStrokeStyle(color);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setStrokeStyle(null);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setStrokeStyle(defaultStroke);
    });
};
exports.default = OnParseStrokeColorTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cQcl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseBoldTag = function(textPlayer, parser, config) {
    var tagName = "b";
    parser.on("start", function() {
        textPlayer.textStyle.setBold(false);
    }).on(`+${tagName}`, function() {
        textPlayer.textStyle.setBold(true);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setBold(false);
        parser.skipEvent();
    });
};
exports.default = OnParseBoldTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2crXH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseItalicTag = function(textPlayer, parser, config) {
    var tagName = "i";
    parser.on("start", function() {
        textPlayer.textStyle.setItalic(false);
    }).on(`+${tagName}`, function() {
        textPlayer.textStyle.setItalic(true);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setItalic(false);
        parser.skipEvent();
    });
};
exports.default = OnParseItalicTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1RYtJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseFontSizeTag = function(textPlayer, parser, config) {
    var tagName = "size";
    var defaultFontSize;
    parser.on("start", function() {
        defaultFontSize = textPlayer.textStyle.fontSize;
    }).on(`+${tagName}`, function(fontSize) {
        textPlayer.textStyle.setFontSize(fontSize);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setFontSize(defaultFontSize);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setFontSize(defaultFontSize);
    });
};
exports.default = OnParseFontSizeTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gqw9p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseOffsetYTag = function(textPlayer, parser, config) {
    var tagName = "y";
    var defaultOffsetY;
    parser.on("start", function() {
        defaultOffsetY = textPlayer.textStyle.offsetY;
        textPlayer.textStyle.setOffsetY(0);
    }).on(`+${tagName}`, function(y) {
        if (y === undefined) y = defaultOffsetY;
        textPlayer.textStyle.setOffsetY(y);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setOffsetY(0);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setOffsetY(0);
    });
};
exports.default = OnParseOffsetYTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hkqn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseOffsetXTag = function(textPlayer, parser, config) {
    var tagName = "x";
    var defaultOffsetX;
    parser.on("start", function() {
        defaultOffsetX = textPlayer.textStyle.offsetY;
        textPlayer.textStyle.setOffsetX(0);
    }).on(`+${tagName}`, function(y) {
        if (y === undefined) y = defaultOffsetX;
        textPlayer.textStyle.setOffsetX(y);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setOffsetX(0);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setOffsetX(0);
    });
};
exports.default = OnParseOffsetXTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2mpYI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseLeftSpaceTag = function(textPlayer, parser, config) {
    var tagName = "left";
    var defaultLeftSpace;
    parser.on("start", function() {
        defaultLeftSpace = textPlayer.textStyle.leftSpace;
        textPlayer.textStyle.setLeftSpace(0);
    }).on(`+${tagName}`, function(space) {
        if (space === undefined) space = defaultLeftSpace;
        textPlayer.textStyle.setLeftSpace(space);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setLeftSpace(0);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setLeftSpace(0);
    });
};
exports.default = OnParseLeftSpaceTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfA7o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseRightSpaceTag = function(textPlayer, parser, config) {
    var tagName = "right";
    var defaultRightSpace;
    parser.on("start", function() {
        defaultRightSpace = textPlayer.textStyle.rightSpace;
        textPlayer.textStyle.setRightSpace(0);
    }).on(`+${tagName}`, function(space) {
        if (space === undefined) space = defaultRightSpace;
        textPlayer.textStyle.setRightSpace(space);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setRightSpace(0);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setRightSpace(0);
    });
};
exports.default = OnParseRightSpaceTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5XKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseShadowColorTag = function(textPlayer, parser, config) {
    var tagName = "shadow";
    var defaultShadowColor;
    parser.on("start", function() {
        defaultShadowColor = textPlayer.textStyle.shadowColor;
        textPlayer.textStyle.setShadowColor(null);
    }).on(`+${tagName}`, function(color) {
        if (color === undefined) color = defaultShadowColor;
        textPlayer.textStyle.setShadowColor(color);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setShadowColor(null);
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setShadowColor(defaultShadowColor);
    });
};
exports.default = OnParseShadowColorTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9A9s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseAlignTag = function(textPlayer, parser, config) {
    var tagName = "align";
    parser.on(`+${tagName}`, function(align) {
        textPlayer.textStyle.setAlign(align);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        textPlayer.textStyle.setAlign();
        parser.skipEvent();
    }).on("complete", function() {
        textPlayer.textStyle.setAlign();
    });
};
exports.default = OnParseAlignTag;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOjwR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendImageJs = require("../../../dynamictext/methods/AppendImage.js");
var _appendImageJsDefault = parcelHelpers.interopDefault(_appendImageJs);
var OnParseImageTag = function(textPlayer, parser, config) {
    var tagName = "img";
    parser.on(`+${tagName}`, function(name) {
        var imgData = textPlayer.imageManager.get(name);
        (0, _appendImageJsDefault.default).call(textPlayer, imgData.key, imgData.frame, {
            width: imgData.width,
            hieght: imgData.height,
            leftSpace: imgData.left,
            rightSpace: imgData.right
        });
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
exports.default = OnParseImageTag;

},{"../../../dynamictext/methods/AppendImage.js":"ajGI6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZibS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendSpaceJs = require("../../../dynamictext/methods/AppendSpace.js");
var _appendSpaceJsDefault = parcelHelpers.interopDefault(_appendSpaceJs);
var OnParseImageTag = function(textPlayer, parser, config) {
    var tagName = "space";
    parser.on(`+${tagName}`, function(width) {
        (0, _appendSpaceJsDefault.default).call(textPlayer, width);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
exports.default = OnParseImageTag;

},{"../../../dynamictext/methods/AppendSpace.js":"hPbJF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aTvbc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseTypingSpeedTag = function(textPlayer, parser, config) {
    var tagName = "speed";
    parser.on(`+${tagName}`, function(speed) {
        AppendCommand(textPlayer, speed);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        AppendCommand(textPlayer, undefined);
        parser.skipEvent();
    });
};
var SetTypingSpeed = function(speed) {
    this.typeWriter.setTypingSpeed(speed); // this: textPlayer
};
var AppendCommand = function(textPlayer, speed) {
    (0, _appendCommandJsDefault.default).call(textPlayer, "speed", SetTypingSpeed, speed, textPlayer);
};
exports.default = OnParseTypingSpeedTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jt36x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParsePlaySoundEffectTag = function(textPlayer, parser, config) {
    var tagName = "se";
    parser.on(`+${tagName}`, function(name, fadeInTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlaySoundEffect, [
            name,
            fadeInTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2";
    parser.on(`+${tagName}`, function(name, fadeInTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlaySoundEffect2, [
            name,
            fadeInTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var PlaySoundEffect = function(params) {
    if (this.skipSoundEffect) return;
    var name = params[0];
    var fadeInTime = params[1];
    this.soundManager.playSoundEffect(name); // this: textPlayer
    if (fadeInTime) this.soundManager.fadeInSoundEffect(fadeInTime);
};
var PlaySoundEffect2 = function(params) {
    if (this.skipSoundEffect) return;
    var name = params[0];
    var fadeInTime = params[1];
    this.soundManager.playSoundEffect2(name); // this: textPlayer
    if (fadeInTime) this.soundManager.fadeInSoundEffect2(fadeInTime);
};
exports.default = OnParsePlaySoundEffectTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hz54v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeInSoundEffectTag = function(textPlayer, parser, config) {
    var tagName = "se.fadein";
    parser.on(`+${tagName}`, function(time) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeInSoundEffect, time, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2.fadein";
    parser.on(`+${tagName}`, function(time) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeInSoundEffect2, time, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var FadeInSoundEffect = function(time) {
    // this: textPlayer
    this.soundManager.fadeInSoundEffect(time);
};
var FadeInSoundEffect2 = function(time) {
    // this: textPlayer
    this.soundManager.fadeInSoundEffect2(time);
};
exports.default = OnParseFadeInSoundEffectTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8kGnX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeOutSoundEffectTag = function(textPlayer, parser, config) {
    var tagName = "se.fadeout";
    parser.on(`+${tagName}`, function(time, isStopped) {
        isStopped = isStopped === "stop";
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeOutSoundEffect, [
            time,
            isStopped
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2.fadeout";
    parser.on(`+${tagName}`, function(time, isStopped) {
        isStopped = isStopped === "stop";
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeOutSoundEffect2, [
            time,
            isStopped
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var FadeOutSoundEffect = function(params) {
    // this: textPlayer
    this.soundManager.fadeOutSoundEffect(...params);
};
var FadeOutSoundEffect2 = function(params) {
    // this: textPlayer
    this.soundManager.fadeOutSoundEffect2(...params);
};
exports.default = OnParseFadeOutSoundEffectTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixtNN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseSetSoundEffectVolumeTag = function(textPlayer, parser, config) {
    var tagName = "se.volume";
    parser.on(`+${tagName}`, function(volume) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffectVolume, volume, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2.volume";
    parser.on(`+${tagName}`, function(volume) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffectVolume2, volume, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var SetSoundEffectVolume = function(volume) {
    // this: textPlayer
    this.soundManager.setSoundEffectVolume(volume, true);
};
var SetSoundEffectVolume2 = function(volume) {
    // this: textPlayer
    this.soundManager.setSoundEffectVolume2(volume, true);
};
exports.default = OnParseSetSoundEffectVolumeTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b4Ueh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseSetSoundEffectMuteTag = function(textPlayer, parser, config) {
    var tagName = "se.mute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffectMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2.mute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffect2Mute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se.unmute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffectUnMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "se2.unmute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetSoundEffect2UnMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var SetSoundEffectMute = function() {
    // this: textPlayer
    this.soundManager.setSoundEffectMute(true);
};
var SetSoundEffect2Mute = function() {
    // this: textPlayer
    this.soundManager.setSoundEffect2Mute(true);
};
var SetSoundEffectUnMute = function() {
    // this: textPlayer
    this.soundManager.setSoundEffectMute(false);
};
var SetSoundEffect2UnMute = function() {
    // this: textPlayer
    this.soundManager.setSoundEffect2Mute(false);
};
exports.default = OnParseSetSoundEffectMuteTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egza3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParsePlayBackgroundMusicTag = function(textPlayer, parser, config) {
    var tagName = "bgm";
    parser.on(`+${tagName}`, function(name, fadeInTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayBackgroundMusic, [
            name,
            fadeInTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, "bgm.stop", StopBackgroundMusic, undefined, textPlayer);
        parser.skipEvent();
    });
    var tagName = "bgm2";
    parser.on(`+${tagName}`, function(name, fadeInTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayBackgroundMusic2, [
            name,
            fadeInTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, "bgm2.stop", StopBackgroundMusic2, undefined, textPlayer);
        parser.skipEvent();
    });
};
var PlayBackgroundMusic = function(params) {
    var name = params[0];
    var fadeInTime = params[1];
    // this: textPlayer
    this.soundManager.playBackgroundMusic(name);
    if (fadeInTime) this.soundManager.fadeInBackgroundMusic(fadeInTime);
};
var StopBackgroundMusic = function() {
    // this: textPlayer
    this.soundManager.stopBackgroundMusic();
};
var PlayBackgroundMusic2 = function(params) {
    var name = params[0];
    var fadeInTime = params[1];
    // this: textPlayer
    this.soundManager.playBackgroundMusic2(name);
    if (fadeInTime) this.soundManager.fadeInBackgroundMusic2(fadeInTime);
};
var StopBackgroundMusic2 = function() {
    // this: textPlayer
    this.soundManager.stopBackgroundMusic2();
};
exports.default = OnParsePlayBackgroundMusicTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjQLz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeInBackgroundMusicTag = function(textPlayer, parser, config) {
    var tagName = "bgm.fadein";
    parser.on(`+${tagName}`, function(time) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeInBackgroundMusic, time, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.fadein";
    parser.on(`+${tagName}`, function(time) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeInBackgroundMusic2, time, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var FadeInBackgroundMusic = function(time) {
    // this: textPlayer
    this.soundManager.fadeInBackgroundMusic(time);
};
var FadeInBackgroundMusic2 = function(time) {
    // this: textPlayer
    this.soundManager.fadeInBackgroundMusic2(time);
};
exports.default = OnParseFadeInBackgroundMusicTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3JUNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeOutBackgroundMusicTag = function(textPlayer, parser, config) {
    var tagName = "bgm.fadeout";
    parser.on(`+${tagName}`, function(time, isStopped) {
        isStopped = isStopped === "stop";
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeOutBackgroundMusic, [
            time,
            isStopped
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.fadeout";
    parser.on(`+${tagName}`, function(time, isStopped) {
        isStopped = isStopped === "stop";
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, FadeOutBackgroundMusic2, [
            time,
            isStopped
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var FadeOutBackgroundMusic = function(params) {
    // this: textPlayer
    this.soundManager.fadeOutBackgroundMusic(...params);
};
var FadeOutBackgroundMusic2 = function(params) {
    // this: textPlayer
    this.soundManager.fadeOutBackgroundMusic2(...params);
};
exports.default = OnParseFadeOutBackgroundMusicTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OKCl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseCrossFadeBackgroundMusicTag = function(textPlayer, parser, config) {
    var tagName = "bgm.cross";
    parser.on(`+${tagName}`, function(name, fadeTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, CrossFadeBackgroundMusic, [
            name,
            fadeTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.cross";
    parser.on(`+${tagName}`, function(name, fadeTime) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, CrossFadeBackgroundMusic2, [
            name,
            fadeTime
        ], textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var CrossFadeBackgroundMusic = function(params) {
    // this: textPlayer
    this.soundManager.crossFadeBackgroundMusic(...params);
};
var CrossFadeBackgroundMusic2 = function(params) {
    // this: textPlayer
    this.soundManager.crossFadeBackgroundMusic2(...params);
};
exports.default = OnParseCrossFadeBackgroundMusicTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27Yrn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParsePauseBackgroundMusicTag = function(textPlayer, parser, config) {
    var tagName = "bgm.pause";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PauseBackgroundMusic, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, "bgm.resume", ResumeBackgroundMusic, undefined, textPlayer);
        parser.skipEvent();
    });
    var tagName = "bgm2.pause";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PauseBackgroundMusic2, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, "bgm2.resume", ResumeBackgroundMusic2, undefined, textPlayer);
        parser.skipEvent();
    });
};
var PauseBackgroundMusic = function() {
    // this: textPlayer
    this.soundManager.pauseBackgroundMusic();
};
var ResumeBackgroundMusic = function() {
    // this: textPlayer
    this.soundManager.resumeBackgroundMusic();
};
var PauseBackgroundMusic2 = function() {
    // this: textPlayer
    this.soundManager.pauseBackgroundMusic2();
};
var ResumeBackgroundMusic2 = function() {
    // this: textPlayer
    this.soundManager.resumeBackgroundMusic2();
};
exports.default = OnParsePauseBackgroundMusicTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4l69L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseSetBackgroundMusicVolumeTag = function(textPlayer, parser, config) {
    var tagName = "bgm.volume";
    parser.on(`+${tagName}`, function(volume) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusicVolume, volume, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.volume";
    parser.on(`+${tagName}`, function(volume) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusicVolume2, volume, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var SetBackgroundMusicVolume = function(volume) {
    // this: textPlayer
    this.soundManager.setBackgroundMusicVolume(volume);
};
var SetBackgroundMusicVolume2 = function(volume) {
    // this: textPlayer
    this.soundManager.setBackgroundMusicVolume2(volume);
};
exports.default = OnParseSetBackgroundMusicVolumeTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32i23":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseSetBackgroundMusicMuteTag = function(textPlayer, parser, config) {
    var tagName = "bgm.mute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusicMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.mute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusic2Mute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm.unmute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusicUnMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
    var tagName = "bgm2.unmute";
    parser.on(`+${tagName}`, function() {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, SetBackgroundMusic2UnMute, undefined, textPlayer);
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
var SetBackgroundMusicMute = function() {
    // this: textPlayer
    this.soundManager.setBackgroundMusicMute(true);
};
var SetBackgroundMusic2Mute = function() {
    // this: textPlayer
    this.soundManager.setBackgroundMusic2Mute(true);
};
var SetBackgroundMusicUnMute = function() {
    // this: textPlayer
    this.soundManager.setBackgroundMusicMute(false);
};
var SetBackgroundMusic2UnMute = function() {
    // this: textPlayer
    this.soundManager.setBackgroundMusic2Mute(false);
};
exports.default = OnParseSetBackgroundMusicMuteTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igpiu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeInCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.fadein";
    parser.on(`+${tagName}`, function(duration, red, green, blue) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayFadeInEffect, [
            duration,
            red,
            green,
            blue
        ], textPlayer);
        parser.skipEvent();
    });
};
var PlayFadeInEffect = function(params) {
    // this: textPlayer
    this.cameraTarget.fadeIn(...params);
};
exports.default = OnParseFadeInCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3rNwl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFadeOutCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.fadeout";
    parser.on(`+${tagName}`, function(duration, red, green, blue) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayFadeOutEffect, [
            duration,
            red,
            green,
            blue
        ], textPlayer);
        parser.skipEvent();
    });
};
var PlayFadeOutEffect = function(params) {
    // this: textPlayer
    this.cameraTarget.fadeOut(...params);
};
exports.default = OnParseFadeOutCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3fZ8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseShakeCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.shake";
    parser.on(`+${tagName}`, function(duration, intensity) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayShakeEffect, [
            duration,
            intensity
        ], textPlayer);
        parser.skipEvent();
    });
};
var PlayShakeEffect = function(params) {
    // this: textPlayer
    this.cameraTarget.shake(...params);
};
exports.default = OnParseShakeCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeomX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseFlashCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.flash";
    parser.on(`+${tagName}`, function(duration, red, green, blue) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, PlayFlashEffect, [
            duration,
            red,
            green,
            blue
        ], textPlayer);
        parser.skipEvent();
    });
};
var PlayFlashEffect = function(params) {
    // this: textPlayer
    this.cameraTarget.flash(...params);
};
exports.default = OnParseFlashCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvGj3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseZoomCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.zoom";
    parser.on(`+${tagName}`, function(value) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, Zoom, value, textPlayer);
        parser.skipEvent();
    }).on(`+${tagName}.to`, function(value, duration, ease) {
        (0, _appendCommandJsDefault.default).call(textPlayer, "camera.zoom.to", ZoomTo, [
            value,
            duration,
            ease
        ], textPlayer);
        parser.skipEvent();
    });
};
var Zoom = function(value) {
    // this: textPlayer
    this.cameraTarget.setZoom(value);
};
var ZoomTo = function(params) {
    // this: textPlayer
    this.cameraTarget.zoomTo(...params);
};
exports.default = OnParseZoomCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gaUHb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
const DegToRad = Phaser.Math.DegToRad;
var OnParseRotateCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.rotate";
    parser.on(`+${tagName}`, function(value) {
        value = DegToRad(value);
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, Rotate, value, textPlayer);
        parser.skipEvent();
    }).on(`+${tagName}.to`, function(value, duration, ease) {
        value = DegToRad(value);
        (0, _appendCommandJsDefault.default).call(textPlayer, "camera.rotate.to", RotateTo, [
            value,
            duration,
            ease
        ], textPlayer);
        parser.skipEvent();
    });
};
var Rotate = function(value) {
    // this: textPlayer
    this.cameraTarget.setRotation(value);
};
var RotateTo = function(params) {
    var value = params[0];
    var duration = params[1];
    var ease = params[2];
    // this: textPlayer
    this.cameraTarget.rotateTo(value, false, duration, ease);
};
exports.default = OnParseRotateCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4e1wv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseScrollCameraTag = function(textPlayer, parser, config) {
    var tagName = "camera.scroll";
    parser.on(`+${tagName}`, function(x, y) {
        (0, _appendCommandJsDefault.default).call(textPlayer, tagName, Scroll, [
            x,
            y
        ], textPlayer);
        parser.skipEvent();
    }).on(`+${tagName}.to`, function(x, y, duration, ease) {
        (0, _appendCommandJsDefault.default).call(textPlayer, "camera.scroll.to", ScrollTo, [
            x,
            y,
            duration,
            ease
        ], textPlayer);
        parser.skipEvent();
    });
};
var Scroll = function(params) {
    // this: textPlayer
    this.cameraTarget.setScroll(...params);
};
var ScrollTo = function(params) {
    var x = params[0];
    var y = params[1];
    var duration = params[2];
    var ease = params[3];
    // this: textPlayer
    var camera = this.cameraTarget;
    var xSave = camera.scrollX;
    var ySave = camera.scrollY;
    camera.setScroll(x, y);
    x += camera.centerX;
    y += camera.centerY;
    camera.setScroll(xSave, ySave);
    // x,y in pan() is the centerX, centerY
    camera.pan(x, y, duration, ease);
};
exports.default = OnParseScrollCameraTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lZdz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseWaitTag = function(textPlayer, parser, config) {
    var tagWait = "wait";
    var tagClick = "click";
    parser.on(`+${tagWait}`, function(name) {
        AppendCommand(textPlayer, name);
        parser.skipEvent();
    }).on(`-${tagWait}`, function() {
        parser.skipEvent();
    }).on(`+${tagClick}`, function() {
        AppendCommand(textPlayer, "click");
        parser.skipEvent();
    }).on(`-${tagClick}`, function() {
        parser.skipEvent();
    });
};
var Wait = function(name) {
    this.typeWriter.wait(name); // this: textPlayer
};
var AppendCommand = function(textPlayer, name) {
    (0, _appendCommandJsDefault.default).call(textPlayer, "wait", Wait, name, textPlayer);
};
exports.default = OnParseWaitTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5M71":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendTextJs = require("../../../dynamictext/methods/AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var OnParseNewLineTag = function(textPlayer, parser, config) {
    var tagName = "r";
    parser.on(`+${tagName}`, function() {
        (0, _appendTextJsDefault.default).call(textPlayer, "\n");
        parser.skipEvent();
    }).on(`-${tagName}`, function() {
        parser.skipEvent();
    });
};
exports.default = OnParseNewLineTag;

},{"../../../dynamictext/methods/AppendText.js":"ionN7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hr28L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendTextJs = require("../../../dynamictext/methods/AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var OnParsePageBreakTag = function(textPlayer, parser, config) {
    var tagNames = [
        "pagebreak",
        "pb"
    ];
    for(var i = 0, cnt = tagNames.length; i < cnt; i++){
        var tagName = tagNames[i];
        parser.on(`+${tagName}`, function() {
            (0, _appendTextJsDefault.default).call(textPlayer, "\f");
            parser.skipEvent();
        }).on(`-${tagName}`, function() {
            parser.skipEvent();
        });
    }
};
exports.default = OnParsePageBreakTag;

},{"../../../dynamictext/methods/AppendText.js":"ionN7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8LyGf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseContentOff = function(textPlayer, parser, config) {
    var tagName = "content.off";
    parser.on(`+${tagName}`, function() {
        parser.setContentOutputEnable(false);
        parser.skipEvent();
    });
};
exports.default = OnParseContentOff;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"feJeR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnParseContentOn = function(textPlayer, parser, config) {
    var tagName = "content.on";
    parser.on(`+${tagName}`, function() {
        parser.setContentOutputEnable();
        parser.skipEvent();
    });
};
exports.default = OnParseContentOn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bMxSm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendTextJs = require("../../../dynamictext/methods/AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var OnParseContent = function(textPlayer, parser, config) {
    parser.on("content", function(content) {
        if (parser.contentOutputEnable) (0, _appendTextJsDefault.default).call(textPlayer, content);
        else {
            var startTag = `+${parser.lastTagStart}`;
            textPlayer.emit(`parser.${startTag}#content`, parser, content);
        }
    });
};
exports.default = OnParseContent;

},{"../../../dynamictext/methods/AppendText.js":"ionN7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6fjZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseCustomTag = function(textPlayer, parser, config) {
    parser.on("start", function() {
        textPlayer.emit("parser.start", parser);
    }).on("+", function(tagName, ...value) {
        if (parser.skipEventFlag) return;
        var startTag = `+${tagName}`;
        var param = value;
        textPlayer.emit(`parser.${startTag}`, parser, ...value, param);
        AppendCommand(textPlayer, startTag, param);
    }).on("-", function(tagName) {
        if (parser.skipEventFlag) return;
        var endTag = `-${tagName}`;
        var param = [];
        textPlayer.emit(`parser.${endTag}`, parser, param);
        AppendCommand(textPlayer, endTag, param);
    }).on("complete", function() {
        textPlayer.emit("parser.complete", parser);
    });
};
var FireEvent = function(param, tagName) {
    var eventName = `tag.${tagName}`;
    // this: textPlayer
    if (param == null) this.emit(eventName);
    else this.emit(eventName, ...param);
};
var AppendCommand = function(textPlayer, name, param) {
    (0, _appendCommandJsDefault.default).call(textPlayer, name, FireEvent, param, textPlayer);
};
exports.default = OnParseCustomTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Spju":[function(require,module,exports) {
/*
Skip line
- An empty line, only has space
- A comment line, start with commentLineStart ('//')
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PreProcess = function(parser, source) {
    var comentLineStart = parser.commentLineStart;
    var lines = source.split("\n");
    for(var i = 0, cnt = lines.length; i < cnt; i++){
        var line = lines[i];
        if (line === "") ;
        else if (line.trim().length === 0) // An empty line, only has space
        lines[i] = "";
        else if (comentLineStart && line.startsWith(comentLineStart)) // A comment line, start with commentLineStart ('//')
        lines[i] = "";
    }
    // Use [r] to put \n
    return lines.join("");
};
exports.default = PreProcess;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"284FZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../../../../utils/eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TypeWriter {
    constructor(textPlayer, config){
        this.setEventEmitter();
        this.textPlayer = textPlayer;
        this.isPageTyping = false;
        this.typingTimer = undefined; // Typing delay
        this.pauseTypingTimer = undefined; // Wait time
        this.inTypingProcessLoop = false; // Used in this.typing()
        this.isTypingPaused = false; // Used in this.wait(), this.pauseTyping(), this.resumeTyping()
        this.setIgnoreWait(false);
        this.setSkipTypingAnimation(false);
        this.setTypingStartCallback(GetValue(config, "onTypingStart", SetChildrenInvisible));
        this.setDefaultTypingSpeed(GetValue(config, "speed", 250));
        this.setTypingSpeed();
        this.setSkipSpaceEnable(GetValue(config, "skipSpace", false));
        this.setAnimationConfig(GetValue(config, "animation", undefined));
        this.setMinSizeEnable(GetValue(config, "minSizeEnable", false));
        this.setFadeOutPageCallback(GetValue(config, "fadeOutPage"));
    }
    destroy() {
        this.destroyEventEmitter();
        this.textPlayer = undefined;
        this.typingTimer = undefined;
        this.pauseTypingTimer = undefined;
        this.onTypeStart = undefined;
        this.animationConfig = undefined;
    }
    get timeline() {
        return this.textPlayer.timeline;
    }
    setTypingStartCallback(callback) {
        this.onTypeStart = callback;
        return this;
    }
    setAnimationConfig(config) {
        if (!config) config = {};
        if (!config.hasOwnProperty("duration")) config.duration = 0;
        if (!config.hasOwnProperty("onStart")) // Apply default onStart callback
        config.onStart = SetChildVisible;
        this.animationConfig = config;
        return this;
    }
    setFadeOutPageCallback(callback) {
        this.fadeOutPageCallback = callback;
        return this;
    }
    setMinSizeEnable(enable) {
        if (enable === undefined) enable = true;
        this.minSizeEnable = enable;
        return this;
    }
    getNextChild() {
        var child = this.nextChild;
        this.index = Math.min(this.index + 1, this.children.length); // Point to next child
        this._nextChild = undefined;
        return child;
    }
    get nextChild() {
        if (!this._nextChild) this._nextChild = this.children[this.index];
        return this._nextChild;
    }
}
var SetChildVisible = function(child) {
    if (child.setVisible) child.setVisible();
};
var SetChildrenInvisible = function(children) {
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.setVisible) child.setVisible(false);
    }
};
Object.assign(TypeWriter.prototype, (0, _eventEmitterMethodsJsDefault.default), (0, _methodsJsDefault.default));
exports.default = TypeWriter;

},{"../../../../utils/eventemitter/EventEmitterMethods.js":"67KVT","./Methods.js":"kkT35","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kkT35":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typingSpeedMethodsJs = require("./TypingSpeedMethods.js");
var _typingSpeedMethodsJsDefault = parcelHelpers.interopDefault(_typingSpeedMethodsJs);
var _fadeOutPageJs = require("./FadeOutPage.js");
var _fadeOutPageJsDefault = parcelHelpers.interopDefault(_fadeOutPageJs);
var _startJs = require("./Start.js");
var _startJsDefault = parcelHelpers.interopDefault(_startJs);
var _typingJs = require("./Typing.js");
var _typingJsDefault = parcelHelpers.interopDefault(_typingJs);
var _pauseJs = require("./Pause.js");
var _pauseJsDefault = parcelHelpers.interopDefault(_pauseJs);
var _resumeJs = require("./Resume.js");
var _resumeJsDefault = parcelHelpers.interopDefault(_resumeJs);
var _pauseTypingJs = require("./PauseTyping.js");
var _pauseTypingJsDefault = parcelHelpers.interopDefault(_pauseTypingJs);
var _resumeTypingJs = require("./ResumeTyping.js");
var _resumeTypingJsDefault = parcelHelpers.interopDefault(_resumeTypingJs);
var _waitJs = require("./Wait.js");
var _waitJsDefault = parcelHelpers.interopDefault(_waitJs);
var _setIgnoreWaitJs = require("./SetIgnoreWait.js");
var _setIgnoreWaitJsDefault = parcelHelpers.interopDefault(_setIgnoreWaitJs);
var _setSkipSpaceEnableJs = require("./SetSkipSpaceEnable.js");
var _setSkipSpaceEnableJsDefault = parcelHelpers.interopDefault(_setSkipSpaceEnableJs);
var _setSkipTypingAnimationJs = require("./SetSkipTypingAnimation.js");
var _setSkipTypingAnimationJsDefault = parcelHelpers.interopDefault(_setSkipTypingAnimationJs);
var _setSkipSoundEffectJs = require("./SetSkipSoundEffect.js");
var _setSkipSoundEffectJsDefault = parcelHelpers.interopDefault(_setSkipSoundEffectJs);
var _skipCurrentTypingDelayJs = require("./SkipCurrentTypingDelay.js");
var _skipCurrentTypingDelayJsDefault = parcelHelpers.interopDefault(_skipCurrentTypingDelayJs);
var Methods = {
    fadeOutPage: (0, _fadeOutPageJsDefault.default),
    start: (0, _startJsDefault.default),
    typing: (0, _typingJsDefault.default),
    pause: (0, _pauseJsDefault.default),
    resume: (0, _resumeJsDefault.default),
    pauseTyping: (0, _pauseTypingJsDefault.default),
    resumeTyping: (0, _resumeTypingJsDefault.default),
    wait: (0, _waitJsDefault.default),
    setIgnoreWait: (0, _setIgnoreWaitJsDefault.default),
    setSkipSpaceEnable: (0, _setSkipSpaceEnableJsDefault.default),
    setSkipTypingAnimation: (0, _setSkipTypingAnimationJsDefault.default),
    setSkipSoundEffect: (0, _setSkipSoundEffectJsDefault.default),
    skipCurrentTypingDelay: (0, _skipCurrentTypingDelayJsDefault.default)
};
Object.assign(Methods, (0, _typingSpeedMethodsJsDefault.default));
exports.default = Methods;

},{"./TypingSpeedMethods.js":"kmdQb","./FadeOutPage.js":"1L0R8","./Start.js":"1FLvn","./Typing.js":"kWvG1","./Pause.js":"f92LZ","./Resume.js":"4FowH","./PauseTyping.js":"gS2Ae","./ResumeTyping.js":"gRxmJ","./Wait.js":"eivRx","./SetIgnoreWait.js":"fES4B","./SetSkipSpaceEnable.js":"eo97p","./SetSkipTypingAnimation.js":"7hfMt","./SetSkipSoundEffect.js":"7b46n","./SkipCurrentTypingDelay.js":"fsbKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kmdQb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setDefaultTypingSpeed (speed) {
        this.defaultSpeed = speed;
        return this;
    },
    setTypingSpeed (speed) {
        if (speed === undefined) speed = this.defaultSpeed;
        this.speed = speed;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1L0R8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventsJs = require("../methods/utils/Events.js");
var FadeOutPage = function() {
    if (!this.fadeOutPageCallback || !this.children) {
        this.emit((0, _eventsJs.PageFadeOutCompleteEvent));
        return this;
    }
    var renderableChildren = this.children.filter(function(child) {
        return child.renderable;
    });
    var waitObject = this.fadeOutPageCallback(renderableChildren, this.fadeOutPageDuration);
    if (!waitObject) this.emit((0, _eventsJs.PageFadeOutCompleteEvent));
    else if (waitObject.once) waitObject.once("complete", function() {
        this.emit((0, _eventsJs.PageFadeOutCompleteEvent));
    }, this);
    else if (waitObject.then) {
        var self = this;
        waitObject.then(function() {
            self.emit((0, _eventsJs.PageFadeOutCompleteEvent));
        });
    } else this.emit((0, _eventsJs.PageFadeOutCompleteEvent));
    return this;
};
exports.default = FadeOutPage;

},{"../methods/utils/Events.js":"lOfZL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOfZL":[function(require,module,exports) {
// Internal events
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PageFadeOutCompleteEvent", ()=>PageFadeOutCompleteEvent);
parcelHelpers.export(exports, "StopPlayEvent", ()=>StopPlayEvent);
parcelHelpers.export(exports, "ClearEvents", ()=>ClearEvents);
const PageFadeOutCompleteEvent = "page.fadeout";
const StopPlayEvent = "_remove.play";
const ClearEvents = [
    PageFadeOutCompleteEvent,
    StopPlayEvent
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1FLvn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitEventJs = require("../../../../utils/promise/WaitEvent.js");
var Start = function(children) {
    this.children = children;
    this.index = 0;
    this.isPageTyping = true;
    if (this.onTypeStart) this.onTypeStart(children);
    this.typing();
    return (0, _waitEventJs.WaitComplete)(this); // Promise
};
exports.default = Start;

},{"../../../../utils/promise/WaitEvent.js":"6ljEN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ljEN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WaitEvent", ()=>WaitEvent);
parcelHelpers.export(exports, "WaitComplete", ()=>WaitComplete);
var WaitEvent = function(eventEmitter, eventName) {
    return new Promise(function(resolve, reject) {
        eventEmitter.once(eventName, function() {
            resolve();
        });
    });
};
var WaitComplete = function(eventEmitter) {
    return WaitEvent(eventEmitter, "complete");
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWvG1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typesJs = require("../../dynamictext/bob/Types.js");
var _timerTypesJs = require("./TimerTypes.js");
var Typing = function(offsetTime) {
    if (offsetTime === undefined) offsetTime = 0;
    var delay = 0;
    this.inTypingProcessLoop = true;
    while(this.inTypingProcessLoop){
        var child = this.getNextChild();
        if (!child) {
            if (this.timeline.isRunning) // Wait until last animationConfig is end
            this.timeline.once("complete", function() {
                this.isPageTyping = false;
                this.emit("complete");
            }, this);
            else {
                this.isPageTyping = false;
                this.emit("complete");
            }
            break; // Leave this typing loop
        }
        if (child.renderable) {
            // Typing this char
            var animationConfig = this.animationConfig;
            if (animationConfig.duration > 0) {
                var animationTimer = this.timeline.addTimer({
                    name: (0, _timerTypesJs.TypingAnimationTimerType),
                    target: child,
                    duration: animationConfig.duration,
                    yoyo: animationConfig.yoyo,
                    onStart: animationConfig.onStart,
                    onProgress: animationConfig.onProgress,
                    onComplete: animationConfig.onComplete
                });
                if (this.skipTypingAnimation) animationTimer.seek(1);
            } else if (animationConfig.onStart) animationConfig.onStart(child, 0);
            // Set to min size
            if (this.minSizeEnable) this.textPlayer.setToMinSize();
            this.textPlayer.emit("typing", child);
            var nextChild = this.nextChild;
            if (nextChild) {
                if (this.skipSpaceEnable && (0, _typesJs.IsSpaceChar)(nextChild)) ;
                else {
                    delay += this.speed + offsetTime;
                    offsetTime = 0;
                    if (delay > 0) {
                        // Process next character later
                        this.typingTimer = this.timeline.addTimer({
                            name: (0, _timerTypesJs.TypingDelayTimerType),
                            target: this,
                            duration: delay,
                            onComplete: function(target, t, timer) {
                                target.typingTimer = undefined;
                                Typing.call(target, timer.remainder);
                            }
                        });
                        break; // Leave this typing loop     
                    }
                }
            }
        // Process next child
        } else if ((0, _typesJs.IsCommand)(child)) child.exec();
    }
    // Set to min size
    if (this.minSizeEnable) this.textPlayer.setToMinSize();
    this.inTypingProcessLoop = false;
};
exports.default = Typing;

},{"../../dynamictext/bob/Types.js":"3ngC2","./TimerTypes.js":"9AtLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9AtLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypingAnimationTimerType", ()=>TypingAnimationTimerType);
parcelHelpers.export(exports, "TypingDelayTimerType", ()=>TypingDelayTimerType);
const TypingDelayTimerType = "delay";
const TypingAnimationTimerType = "anim";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f92LZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Pause = function() {
    // Pause typing timer and animation progresses
    this.timeline.pause();
    return this;
};
exports.default = Pause;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FowH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Resume = function() {
    // Resume typing timer and animation progresses
    this.timeline.resume();
    return this;
};
exports.default = Resume;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gS2Ae":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PauseTyping = function() {
    // Already in typingPaused state
    if (this.isTypingPaused) return this;
    if (this.typingTimer) {
        this.typingTimer.pause();
        this.isTypingPaused = true;
    } else if (this.inTypingProcessLoop) {
        this.inTypingProcessLoop = false;
        this.isTypingPaused = true;
    }
    return this;
};
exports.default = PauseTyping;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gRxmJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResumeTyping = function(offsetTime) {
    // Already not in typingPaused state
    if (!this.isTypingPaused) return this;
    if (offsetTime === undefined) offsetTime = 0;
    if (this.typingTimer) {
        this.isTypingPaused = false;
        this.typingTimer.resume();
        this.typingTimer.remainder += offsetTime;
    } else if (this.isTypingPaused) {
        this.isTypingPaused = false;
        this.typing(offsetTime);
    }
    return this;
};
exports.default = ResumeTyping;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eivRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitAnyJs = require("../methods/utils/wait/WaitAny.js");
var _waitAnyJsDefault = parcelHelpers.interopDefault(_waitAnyJs);
var Wait = function(name) {
    // Already in typingPaused state, or ignore any wait
    if (this.ignoreWait) return this;
    this.pauseTyping();
    (0, _waitAnyJsDefault.default)(this.textPlayer, name, this.resumeTyping, this);
    return this;
};
exports.default = Wait;

},{"../methods/utils/wait/WaitAny.js":"lIR1H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lIR1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitCameraEffectJs = require("./WaitCameraEffect.js");
var _waitGameObjectJs = require("./WaitGameObject.js");
const KeyCodes = Phaser.Input.Keyboard.KeyCodes;
var WaitAny = function(textPlayer, names, callback, scope) {
    var waitEventManager = textPlayer.waitEventManager;
    waitEventManager.clearWaitCompleteCallbacks().addWaitCompleteCallback(callback, scope);
    if (typeof names === "string" && names.length > 1 && names.indexOf("|") !== -1) names = names.split("|");
    else names = [
        names
    ];
    for(var i = 0, cnt = names.length; i < cnt; i++){
        var name = names[i];
        if (name == null || name === "wait") {
            var waitCompleteTriggerCallback = textPlayer.waitEventManager.getWaitCompleteTriggerCallback();
            textPlayer.emit("wait", waitCompleteTriggerCallback);
        } else if (typeof name === "number" || !isNaN(name)) {
            var time = parseFloat(name);
            waitEventManager.waitTime(time);
            textPlayer.emit("wait.time", time);
        } else if (name === "click") {
            waitEventManager.waitClick();
            textPlayer.emit("wait.click");
        } else if (name === "se") {
            waitEventManager.waitSoundEffectComplete();
            var music = textPlayer.soundManager.getLastSoundEffect();
            textPlayer.emit("wait.music", music);
        } else if (name === "se2") {
            waitEventManager.waitSoundEffect2Complete();
            var music = textPlayer.soundManager.getLastSoundEffect2();
            textPlayer.emit("wait.music", music);
        } else if (name === "bgm") {
            waitEventManager.waitBackgroundMusicComplete();
            var music = textPlayer.soundManager.getBackgroundMusic();
            textPlayer.emit("wait.music", music);
        } else if (name === "bgm2") {
            waitEventManager.waitBackgroundMusic2Complete();
            var music = textPlayer.soundManager.getBackgroundMusic2();
            textPlayer.emit("wait.music", music);
        } else if (KeyCodes.hasOwnProperty(name.toUpperCase())) {
            waitEventManager.waitKeyDown(name);
            textPlayer.emit("wait.keydown", name);
        } else if ((0, _waitCameraEffectJs.IsWaitCameraEffect)(name)) {
            waitEventManager.waitCameraEffectComplete(name);
            textPlayer.emit("wait.camera", name);
        } else if ((0, _waitGameObjectJs.IsWaitGameObject)(textPlayer, name)) (0, _waitGameObjectJs.WaitGameObject)(textPlayer, name, callback, scope);
        else {
            var waitCompleteTriggerCallback = textPlayer.waitEventManager.getWaitCompleteTriggerCallback();
            textPlayer.emit(`wait.${name}`, waitCompleteTriggerCallback);
        }
    }
};
exports.default = WaitAny;

},{"./WaitCameraEffect.js":"lucYA","./WaitGameObject.js":"iejku","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lucYA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IsWaitCameraEffect", ()=>IsWaitCameraEffect);
var IsWaitCameraEffect = function(name) {
    switch(name){
        case "camera.fadein":
        case "camera.fadeout":
        case "camera.flash":
        case "camera.shake":
        case "camera.zoom":
        case "camera.rotate":
        case "camera.scroll":
            return true;
        default:
            return false;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iejku":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IsWaitGameObject", ()=>IsWaitGameObject);
parcelHelpers.export(exports, "WaitGameObject", ()=>WaitGameObject);
var IsWaitGameObject = function(textPlayer, name) {
    var names = name.split(".");
    return textPlayer.gameObjectManagers.hasOwnProperty(names[0]);
};
var WaitGameObject = function(textPlayer, tag, callback, scope) {
    var waitEventManager = textPlayer.waitEventManager;
    var tags = tag.split(".");
    var goType = tags[0];
    var gameObjectManager = textPlayer.getGameObjectManager(goType);
    var waitEventName = `wait.${goType}`;
    switch(tags.length){
        case 1:
            waitEventManager.waitGameObjectManagerEmpty(goType);
            textPlayer.emit(waitEventName);
            return;
        case 2:
            var name = tags[1];
            waitEventManager.waitGameObjectDestroy(goType, name);
            textPlayer.emit(waitEventName, name);
            return;
        case 3:
            var name = tags[1], prop = tags[2];
            var value = gameObjectManager.getProperty(name, prop);
            // Can start tween task for a number property
            if (typeof value === "number") {
                waitEventManager.waitGameObjectTweenComplete(goType, name, prop);
                textPlayer.emit(waitEventName, name, prop);
                return;
            }
            var dataKey = prop;
            var matchFalseFlag = dataKey.startsWith("!");
            if (matchFalseFlag) dataKey = dataKey.substring(1);
            // Wait until flag is true/false
            if (gameObjectManager.hasData(name, dataKey)) {
                waitEventManager.waitGameObjectDataFlag(goType, name, dataKey, !matchFalseFlag);
                textPlayer.emit(waitEventName, name, dataKey);
                return;
            } else {
                waitEventManager.waitTime(0);
                return;
            }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fES4B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetIgnoreWait = function(value) {
    if (value === undefined) value = true;
    this.ignoreWait = value;
    return this;
};
exports.default = SetIgnoreWait;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eo97p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetSkipSpaceEnable = function(enable) {
    if (enable === undefined) enable = true;
    this.skipSpaceEnable = enable;
    return this;
};
exports.default = SetSkipSpaceEnable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7hfMt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _timerTypesJs = require("./TimerTypes.js");
var SetSkipTypingAnimation = function(value) {
    if (value === undefined) value = true;
    this.skipTypingAnimation = value;
    if (value) {
        // Skip current playing typing-animation
        var timers = this.timeline.getTimers((0, _timerTypesJs.TypingAnimationTimerType));
        for(var i = 0, cnt = timers.length; i < cnt; i++)timers[i].seek(1);
    }
    return this;
};
exports.default = SetSkipTypingAnimation;

},{"./TimerTypes.js":"9AtLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7b46n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetSkipSoundEffect = function(value) {
    if (value === undefined) value = true;
    this.skipSoundEffect = value;
    if (value) {
        var soundManager = this.textPlayer._soundManager;
        if (soundManager) soundManager.fadeOutAllSoundEffects(100, true);
    }
    return this;
};
exports.default = SetSkipSoundEffect;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsbKl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SkipCurrentTypingDelay = function() {
    if (this.typingTimer) this.typingTimer.seek(1);
    return this;
};
exports.default = SkipCurrentTypingDelay;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7Dlr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _spriteManagerJs = require("../../../../../utils/sprite/spritemanager/SpriteManager.js");
var _spriteManagerJsDefault = parcelHelpers.interopDefault(_spriteManagerJs);
var _onParsePlayAnimationTagJs = require("./OnParsePlayAnimationTag.js");
var _onParsePlayAnimationTagJsDefault = parcelHelpers.interopDefault(_onParsePlayAnimationTagJs);
var _onParsePauseAnimationTagJs = require("./OnParsePauseAnimationTag.js");
var _onParsePauseAnimationTagJsDefault = parcelHelpers.interopDefault(_onParsePauseAnimationTagJs);
var _onParseChainAnimationTagJs = require("./OnParseChainAnimationTag.js");
var _onParseChainAnimationTagJsDefault = parcelHelpers.interopDefault(_onParseChainAnimationTagJs);
const ParseCallbacks = [
    (0, _onParsePlayAnimationTagJsDefault.default),
    (0, _onParsePauseAnimationTagJsDefault.default),
    (0, _onParseChainAnimationTagJsDefault.default)
];
var AddSpriteManager = function(config) {
    if (config === undefined) config = {};
    config.name = "sprite";
    config.parseCallbacks = ParseCallbacks;
    this.addGameObjectManager(config, (0, _spriteManagerJsDefault.default));
};
exports.default = AddSpriteManager;

},{"../../../../../utils/sprite/spritemanager/SpriteManager.js":"2AGaz","./OnParsePlayAnimationTag.js":"i9QmV","./OnParsePauseAnimationTag.js":"g5boh","./OnParseChainAnimationTag.js":"er0Og","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2AGaz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gomanagerJs = require("../../gameobject/gomanager/GOManager.js");
var _gomanagerJsDefault = parcelHelpers.interopDefault(_gomanagerJs);
var _spriteBobJs = require("./SpriteBob.js");
var _spriteBobJsDefault = parcelHelpers.interopDefault(_spriteBobJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
class SpriteManager extends (0, _gomanagerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        config.BobClass = (0, _spriteBobJsDefault.default);
        super(scene, config);
    }
    setCreateGameObjectCallback(callback, scope) {
        if (!callback || callback === "sprite") callback = CreateSprite;
        else if (callback === "image") callback = CreateImage;
        super.setCreateGameObjectCallback(callback, scope);
        return this;
    }
}
var CreateSprite = function(scene, textureKey, frameName) {
    if (typeof frameName !== "string" && typeof frameName !== "number") frameName = undefined;
    return scene.add.sprite(0, 0, textureKey, frameName);
};
var CreateImage = function(scene, textureKey, frameName) {
    if (typeof frameName !== "string" && typeof frameName !== "number") frameName = undefined;
    return scene.add.image(0, 0, textureKey, frameName);
};
Object.assign(SpriteManager.prototype, (0, _methodsJsDefault.default));
exports.default = SpriteManager;

},{"../../gameobject/gomanager/GOManager.js":"allRS","./SpriteBob.js":"io8J6","./methods/Methods.js":"fl7Mk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"io8J6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bobBaseJs = require("../../gameobject/gomanager/bobbase/BobBase.js");
var _bobBaseJsDefault = parcelHelpers.interopDefault(_bobBaseJs);
class SpriteBob extends (0, _bobBaseJsDefault.default) {
    playAnimation(key) {
        this.gameObject.anims.timeScale = this.timeScale;
        this.gameObject.play(key);
        return this;
    }
    stopAnimation() {
        this.gameObject.stop();
        return this;
    }
    chainAnimation(keys) {
        this.gameObject.chain(keys);
        return this;
    }
    pauseAnimation() {
        this.gameObject.anims.pause();
        return this;
    }
    setTimeScale(timeScale) {
        super.setTimeScale(timeScale);
        if (this.gameObject.anims) this.gameObject.anims.timeScale = timeScale;
        return this;
    }
}
exports.default = SpriteBob;

},{"../../gameobject/gomanager/bobbase/BobBase.js":"givRx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fl7Mk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _animationMethodsJs = require("./AnimationMethods.js");
var _animationMethodsJsDefault = parcelHelpers.interopDefault(_animationMethodsJs);
var Methods = {};
Object.assign(Methods, (0, _animationMethodsJsDefault.default));
exports.default = Methods;

},{"./AnimationMethods.js":"8UUPU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8UUPU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    playAnimation (name, key) {
        if (!this.has(name)) this.add(name);
        this.get(name).playAnimation(key);
        return this;
    },
    stopAnimation (name) {
        if (!this.has(name)) return this;
        this.get(name).stopAnimation();
        return this;
    },
    chainAnimation (name, keys) {
        if (!this.has(name)) return this;
        this.get(name).chainAnimation(keys);
        return this;
    },
    pauseAnimation (name) {
        if (!this.has(name)) return this;
        this.get(name).pauseAnimation();
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9QmV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var IsPlayAnimationTag = function(tags, goType) {
    // goType.name.play
    return tags.length === 3 && tags[0] === goType && tags[2] === "play";
};
var IsStopAnimationTag = function(tags, goType) {
    // goType.name.stop
    return tags.length === 3 && tags[0] === goType && tags[2] === "stop";
};
var OnParsePlayAnimationTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on("+", function(tag, ...keys) {
        if (parser.skipEventFlag) return;
        // [goType.name.play=key], or [goType.name.play=key0,key1,...]
        var tags = tag.split(".");
        var name;
        if (IsPlayAnimationTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.play`, PlayAnimation, [
            goType,
            name,
            keys
        ], textPlayer);
        parser.skipEvent();
    }).on("+", function(tag) {
        if (parser.skipEventFlag) return;
        // [goType.name.stop]
        var tags = tag.split(".");
        var name;
        if (IsStopAnimationTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.stop`, StopAnimation, [
            goType,
            name
        ], textPlayer);
        parser.skipEvent();
    }).on("-", function(tag) {
        if (parser.skipEventFlag) return;
        // [/goType.name.play]
        var tags = tag.split(".");
        var name;
        if (IsPlayAnimationTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.stop`, StopAnimation, [
            goType,
            name
        ], textPlayer);
        parser.skipEvent();
    });
};
var PlayAnimation = function(params) {
    var goType, name, keys;
    [goType, name, keys] = params;
    var key = keys.shift();
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.playAnimation(name, key);
    if (keys.length > 0) gameObjectManager.chainAnimation(name, keys);
};
var StopAnimation = function(params) {
    var goType, args;
    [goType, ...args] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.stopAnimation(...args);
};
exports.default = OnParsePlayAnimationTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5boh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var IsPauseAnimationTag = function(tags, goType) {
    // goType.name.pause 
    return tags.length === 3 && tags[0] === goType && tags[2] === "pause";
};
var OnParsePauseAnimationTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on("+", function(tag) {
        if (parser.skipEventFlag) return;
        // [goType.name.pause=key]
        var tags = tag.split(".");
        var name;
        if (IsPauseAnimationTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.pause`, PauseAnimation, [
            goType,
            name
        ], textPlayer);
        parser.skipEvent();
    });
};
var PauseAnimation = function(params) {
    var goType, args;
    [goType, ...args] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.pauseAnimation(...args);
};
exports.default = OnParsePauseAnimationTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"er0Og":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var IsChainAnimationTag = function(tags, goType) {
    // goType.name.chain 
    return tags.length === 3 && tags[0] === goType && tags[2] === "chain";
};
var OnParseChainAnimationTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on("+", function(tag) {
        if (parser.skipEventFlag) return;
        // [goType.name.chain=key]
        var tags = tag.split(".");
        var name;
        if (IsChainAnimationTag(tags, goType)) name = tags[1];
        else return;
        var keys = Array.prototype.slice.call(arguments, 1);
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.chain`, ChainAnimation, [
            goType,
            name,
            keys
        ], textPlayer);
        parser.skipEvent();
    });
};
var ChainAnimation = function(params) {
    var goType, args;
    [goType, ...args] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.chainAnimation(...args);
};
exports.default = OnParseChainAnimationTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTqDp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gameObjectManagerMethodsJs = require("./gameobjectmanager/GameObjectManagerMethods.js");
var _gameObjectManagerMethodsJsDefault = parcelHelpers.interopDefault(_gameObjectManagerMethodsJs);
var _setClickTargetJs = require("./SetClickTarget.js");
var _setClickTargetJsDefault = parcelHelpers.interopDefault(_setClickTargetJs);
var _setCameraTargetJs = require("./SetCameraTarget.js");
var _setCameraTargetJsDefault = parcelHelpers.interopDefault(_setCameraTargetJs);
var _setNextPageInputJs = require("./SetNextPageInput.js");
var _setNextPageInputJsDefault = parcelHelpers.interopDefault(_setNextPageInputJs);
var _addImageJs = require("./AddImage.js");
var _addImageJsDefault = parcelHelpers.interopDefault(_addImageJs);
var _playMethodsJs = require("./PlayMethods.js");
var _playMethodsJsDefault = parcelHelpers.interopDefault(_playMethodsJs);
var _typingNextPageJs = require("./TypingNextPage.js");
var _typingNextPageJsDefault = parcelHelpers.interopDefault(_typingNextPageJs);
var _pauseMethodsJs = require("./PauseMethods.js");
var _pauseMethodsJsDefault = parcelHelpers.interopDefault(_pauseMethodsJs);
var _resumeMethodsJs = require("./ResumeMethods.js");
var _resumeMethodsJsDefault = parcelHelpers.interopDefault(_resumeMethodsJs);
var _waitJs = require("./Wait.js");
var _waitJsDefault = parcelHelpers.interopDefault(_waitJs);
var _typingSpeedMethodsJs = require("./TypingSpeedMethods.js");
var _typingSpeedMethodsJsDefault = parcelHelpers.interopDefault(_typingSpeedMethodsJs);
var _setIgnoreWaitJs = require("./SetIgnoreWait.js");
var _setIgnoreWaitJsDefault = parcelHelpers.interopDefault(_setIgnoreWaitJs);
var _setIgnoreNextPageInputJs = require("./SetIgnoreNextPageInput.js");
var _setIgnoreNextPageInputJsDefault = parcelHelpers.interopDefault(_setIgnoreNextPageInputJs);
var _showPageJs = require("./ShowPage.js");
var _showPageJsDefault = parcelHelpers.interopDefault(_showPageJs);
var _spriteMethodsJs = require("./spritemanager/SpriteMethods.js");
var _spriteMethodsJsDefault = parcelHelpers.interopDefault(_spriteMethodsJs);
var _contentMethodsJs = require("./ContentMethods.js");
var _contentMethodsJsDefault = parcelHelpers.interopDefault(_contentMethodsJs);
var Methods = {
    setClickTarget: (0, _setClickTargetJsDefault.default),
    setCameraTarget: (0, _setCameraTargetJsDefault.default),
    setNextPageInput: (0, _setNextPageInputJsDefault.default),
    addImage: (0, _addImageJsDefault.default),
    typingNextPage: (0, _typingNextPageJsDefault.default),
    wait: (0, _waitJsDefault.default),
    setIgnoreWait: (0, _setIgnoreWaitJsDefault.default),
    setIgnoreNextPageInput: (0, _setIgnoreNextPageInputJsDefault.default),
    showPage: (0, _showPageJsDefault.default)
};
Object.assign(Methods, (0, _gameObjectManagerMethodsJsDefault.default), (0, _playMethodsJsDefault.default), (0, _pauseMethodsJsDefault.default), (0, _resumeMethodsJsDefault.default), (0, _typingSpeedMethodsJsDefault.default), (0, _spriteMethodsJsDefault.default), (0, _contentMethodsJsDefault.default));
exports.default = Methods;

},{"./gameobjectmanager/GameObjectManagerMethods.js":"rrh3q","./SetClickTarget.js":"drJuV","./SetCameraTarget.js":"7nhv3","./SetNextPageInput.js":"7QKWW","./AddImage.js":"1dHzX","./PlayMethods.js":"4PCCH","./TypingNextPage.js":"jFjV7","./PauseMethods.js":"2Sh4x","./ResumeMethods.js":"jbw37","./Wait.js":"cd44v","./TypingSpeedMethods.js":"3jSIR","./SetIgnoreWait.js":"hDiQR","./SetIgnoreNextPageInput.js":"h5JVf","./ShowPage.js":"47pHf","./spritemanager/SpriteMethods.js":"lHCkp","./ContentMethods.js":"jm0Kg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"rrh3q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gameObjectManagerMethodsJs = require("../../../../../utils/managers/GameObjectManagerMethods.js");
var _gameObjectManagerMethodsJsDefault = parcelHelpers.interopDefault(_gameObjectManagerMethodsJs);
var _onParseAddGameObjectTagJs = require("./OnParseAddGameObjectTag.js");
var _onParseAddGameObjectTagJsDefault = parcelHelpers.interopDefault(_onParseAddGameObjectTagJs);
var _onParseRemoveAllGameObjectsTagJs = require("./OnParseRemoveAllGameObjectsTag.js");
var _onParseRemoveAllGameObjectsTagJsDefault = parcelHelpers.interopDefault(_onParseRemoveAllGameObjectsTagJs);
var _onParseCallGameObjectMethodTagJs = require("./OnParseCallGameObjectMethodTag.js");
var _onParseCallGameObjectMethodTagJsDefault = parcelHelpers.interopDefault(_onParseCallGameObjectMethodTagJs);
var _onParseEaseGameObjectPropertyTagJs = require("./OnParseEaseGameObjectPropertyTag.js");
var _onParseEaseGameObjectPropertyTagJsDefault = parcelHelpers.interopDefault(_onParseEaseGameObjectPropertyTagJs);
const ParseCallbacks = [
    (0, _onParseAddGameObjectTagJsDefault.default),
    (0, _onParseRemoveAllGameObjectsTagJsDefault.default),
    (0, _onParseCallGameObjectMethodTagJsDefault.default),
    (0, _onParseEaseGameObjectPropertyTagJsDefault.default)
];
const AddGameObjectManager = (0, _gameObjectManagerMethodsJsDefault.default).addGameObjectManager;
exports.default = {
    addGameObjectManager (config, GameObjectManagerClass) {
        if (config === undefined) config = {};
        var name = config.name;
        if (!name) console.warn(`Parameter 'name' is required in TextPlayer.addGameObjectManager(config) method`);
        AddGameObjectManager.call(this, config, GameObjectManagerClass);
        // Register parse callbacks
        var customParseCallbacks = config.parseCallbacks;
        if (!customParseCallbacks) customParseCallbacks = ParseCallbacks;
        else customParseCallbacks = [
            ...customParseCallbacks,
            ...ParseCallbacks
        ];
        for(var i = 0, cnt = customParseCallbacks.length; i < cnt; i++)customParseCallbacks[i](this, this.parser, config);
        return this;
    }
};

},{"../../../../../utils/managers/GameObjectManagerMethods.js":"fv1oo","./OnParseAddGameObjectTag.js":"7eIje","./OnParseRemoveAllGameObjectsTag.js":"l7Fmm","./OnParseCallGameObjectMethodTag.js":"c5bvJ","./OnParseEaseGameObjectPropertyTag.js":"hl1Dx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7eIje":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var IsAddGameObjectTag = function(tags, goType) {
    // goType.name
    return tags.length === 2 && tags[0] === goType;
};
var OnParseAddGameObjectTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on("+", function(tag, ...args) {
        if (parser.skipEventFlag) return;
        // [goType.name=key,frame], or [goType.name]
        var tags = tag.split(".");
        var name;
        if (IsAddGameObjectTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.add`, AddGameObject, [
            goType,
            name,
            ...args
        ], textPlayer);
        parser.skipEvent();
    }).on("-", function(tag) {
        if (parser.skipEventFlag) return;
        // [/goType.name]
        var tags = tag.split(".");
        var name;
        if (IsAddGameObjectTag(tags, goType)) name = tags[1];
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.remove`, RemoveGameObject, [
            goType,
            name
        ], textPlayer);
        parser.skipEvent();
    });
};
var AddGameObject = function(params) {
    var goType, args;
    [goType, ...args] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.add(...args);
};
var RemoveGameObject = function(params) {
    var goType, args;
    [goType, ...args] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.remove(...args);
};
exports.default = OnParseAddGameObjectTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7Fmm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var OnParseRemoveAllGameObjectsTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on("-", function(tag) {
        if (parser.skipEventFlag) return;
        // [/goType]
        if (tag === goType) ;
        else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.removeall`, RemoveAllSprites, goType, textPlayer);
        parser.skipEvent();
    });
};
var RemoveAllSprites = function(goType) {
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    gameObjectManager.removeAll();
};
exports.default = OnParseRemoveAllGameObjectsTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5bvJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var IsPropTag = function(tags, goType) {
    // goType.name.prop
    return tags.length === 3 && tags[0] === goType;
};
var OnParseCallGameObjectMethodTag = function(textPlayer, parser, config) {
    var goType = config.name;
    parser.on(`+`, function(tag, ...parameters) {
        if (parser.skipEventFlag) return;
        // [goType.name.methodName=value0,value1,value2...]
        // [goType.name.prop=value]
        var tags = tag.split(".");
        var name, prop;
        if (IsPropTag(tags, goType)) {
            name = tags[1];
            prop = tags[2];
        } else return;
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.call`, CallMethod, [
            goType,
            name,
            prop,
            ...parameters
        ], textPlayer);
        parser.skipEvent();
    });
};
var CallMethod = function(params) {
    var goType, name, prop, args;
    [goType, name, prop, ...args] = params;
    // this: textPlayer
    var eventName = `${goType}.${prop}`;
    this.emit(eventName, name, ...args);
    if (this.listenerCount(eventName) > 0) return;
    var gameObjectManager = this.getGameObjectManager(goType);
    if (gameObjectManager.hasMethod(name, prop)) // Is method
    gameObjectManager.call(name, prop, ...args);
    else // Is property
    gameObjectManager.setProperty(name, prop, args[0]);
};
exports.default = OnParseCallGameObjectMethodTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hl1Dx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendCommandJs = require("../../../dynamictext/methods/AppendCommand.js");
var _appendCommandJsDefault = parcelHelpers.interopDefault(_appendCommandJs);
var EaseMode = {
    to: true,
    yoyo: true,
    from: true,
    toLeft: true,
    toRight: true,
    toUp: true,
    toDown: true,
    yoyoLeft: true,
    yoyoRight: true,
    yoyoUp: true,
    yoyoDown: true,
    fromLeft: true,
    fromRight: true,
    fromUp: true,
    fromDown: true
};
var IsEasePropertyTag = function(tags, goType) {
    // goType.name.prop.to
    return tags.length === 4 && tags[0] === goType && EaseMode[tags[3]];
};
var OnParseEaseGameObjectPropertyTag = function(textPlayer, parser, config) {
    var goType = config.name;
    var gameObjectManager = textPlayer.getGameObjectManager(goType);
    parser.on(`+`, function(tag, value, duration, ease, repeat) {
        if (parser.skipEventFlag) return;
        // [goType.name.prop.to=value,duration]
        // [goType.name.prop.to=value,duration,ease,repeat]
        // [goType.name.prop.to=value,duration,repeat]
        var tags = tag.split(".");
        var name, property, easeMode;
        if (IsEasePropertyTag(tags, goType)) {
            name = tags[1];
            property = tags[2];
            easeMode = tags[3];
        } else return;
        if (typeof ease === "number") {
            repeat = ease;
            ease = undefined;
        }
        (0, _appendCommandJsDefault.default).call(textPlayer, `${goType}.ease`, EaseProperty, [
            goType,
            name,
            property,
            value,
            duration,
            ease,
            repeat,
            easeMode
        ], textPlayer);
        parser.skipEvent();
    });
};
var EaseProperty = function(params) {
    var goType, name, property, value, duration, ease, repeat, easeMode;
    [goType, name, property, value, duration, ease, repeat, easeMode] = params;
    // this: textPlayer
    var gameObjectManager = this.getGameObjectManager(goType);
    var currentValue = gameObjectManager.getProperty(name, property);
    // Only can tween number property
    if (typeof currentValue !== "number") return;
    if (easeMode.endsWith("Left") || easeMode.endsWith("Up")) {
        if (easeMode.startsWith("to") || easeMode.startsWith("yoyo")) value = currentValue - value;
        else if (easeMode.startsWith("from")) {
            gameObjectManager.setProperty(name, property, currentValue - value);
            value = currentValue;
        }
    } else if (easeMode.endsWith("Right") || easeMode.endsWith("Down")) {
        if (easeMode.startsWith("to") || easeMode.startsWith("yoyo")) value = currentValue + value;
        else if (easeMode.startsWith("from")) {
            gameObjectManager.setProperty(name, property, currentValue + value);
            value = currentValue;
        }
    } else if (easeMode === "from") {
        gameObjectManager.setProperty(name, property, value);
        value = currentValue;
    }
    var isYoyo = easeMode.startsWith("yoyo");
    gameObjectManager.easeProperty(name, property, value, duration, ease, repeat, isYoyo);
};
exports.default = OnParseEaseGameObjectPropertyTag;

},{"../../../dynamictext/methods/AppendCommand.js":"8gUIE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drJuV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetClickTarget = function(target) {
    this.waitEventManager.setClickTarget(target);
    return this;
};
exports.default = SetClickTarget;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7nhv3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetCameraTarget = function(camera) {
    this.waitEventManager.setCameraTarget(camera);
    return this;
};
exports.default = SetCameraTarget;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7QKWW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitAnyJs = require("./utils/wait/WaitAny.js");
var _waitAnyJsDefault = parcelHelpers.interopDefault(_waitAnyJs);
var SetNextPageInput = function(input) {
    var textPlayer = this;
    if (!input) this.nextPageInput = null;
    else if (typeof input === "function") this.nextPageInput = function(callback, scope) {
        var waitEventManager = textPlayer.waitEventManager;
        waitEventManager.clearWaitCompleteCallbacks().addWaitCompleteCallback(callback, scope);
        var waitCompleteTriggerCallback = waitEventManager.getWaitCompleteTriggerCallback();
        input.call(textPlayer, waitCompleteTriggerCallback);
    };
    else this.nextPageInput = function(callback, scope) {
        (0, _waitAnyJsDefault.default)(textPlayer, input, callback, scope);
    };
};
exports.default = SetNextPageInput;

},{"./utils/wait/WaitAny.js":"lIR1H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dHzX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AddImage = function(key, config) {
    this.imageManager.add(key, config);
    return this;
};
exports.default = AddImage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4PCCH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitEventJs = require("../../../../utils/promise/WaitEvent.js");
exports.default = {
    play (content) {
        if (this.isPlaying) return this;
        this.removeChildren();
        this.parser.start(content); // Parse bbcode-content
        this.isPlaying = true;
        this.once("complete", function() {
            this.isPlaying = false;
        }, this);
        this.lastWrapResult = undefined;
        this.typingNextPage();
        return this;
    },
    playPromise (content) {
        var promise = (0, _waitEventJs.WaitComplete)(this);
        this.play(content);
        return promise;
    }
};

},{"../../../../utils/promise/WaitEvent.js":"6ljEN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFjV7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventsJs = require("./utils/Events.js");
var TypingNextPage = function() {
    if (!this.isPlaying || this.isPageTyping) return this;
    this.typeWriter.once((0, _eventsJs.PageFadeOutCompleteEvent), _TypingNextPage, this).fadeOutPage();
    return this;
};
var _TypingNextPage = function() {
    var result = this.runWrap(this.lastWrapResult);
    this.lastWrapResult = result;
    this.emit("page.start");
    var OnTypingPageComplete = function() {
        this.emit((0, _eventsJs.StopPlayEvent)); // Clear registed StopPlayEvent
        if (result.isLastPage) this.emit("complete");
        else {
            this.emit("page.complete");
            if (this.ignoreNextPageInput) TypingNextPage.call(this);
            else if (this.nextPageInput) this.nextPageInput(TypingNextPage, this);
        }
    };
    // Remove event when typing pages has been canceled
    this.once((0, _eventsJs.StopPlayEvent), function() {
        this.typeWriter.off("complete", OnTypingPageComplete, this);
    }, this);
    this.typeWriter.once("complete", OnTypingPageComplete, this).start(result.children);
};
exports.default = TypingNextPage;

},{"./utils/Events.js":"lOfZL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Sh4x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    pause () {
        // Pause typing, typing timer and animation progresses
        this.timeline.pause();
        return this;
    },
    pauseTyping () {
        // Pause typing
        this.typeWriter.pauseTyping();
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbw37":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    resume () {
        // Resume typing timer, animation progresses and typing
        this.timeline.resume();
        return this;
    },
    resumeTyping (offsetTime) {
        // Resume typing
        this.typeWriter.resumeTyping(offsetTime);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cd44v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Wait = function(name) {
    this.typeWriter.wait(name);
    return this;
};
exports.default = Wait;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jSIR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setDefaultTypingSpeed (speed) {
        this.defaultTypingSpeed = speed;
        return this;
    },
    setTypingSpeed (speed) {
        this.typingSpeed = speed;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hDiQR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetIgnoreWait = function(value) {
    this.typeWriter.setIgnoreWait(value);
    return this;
};
exports.default = SetIgnoreWait;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h5JVf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetIgnoreNextPageInput = function(enable) {
    if (enable === undefined) enable = true;
    this.ignoreNextPageInput = enable;
    return this;
};
exports.default = SetIgnoreNextPageInput;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47pHf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ShowPage = function() {
    // Only can work after playing, and before processing last child
    if (!this.isPlaying || !this.isPageTyping) return this;
    // Save parameters
    var typingSpeedSave = this.typeWriter.speed;
    var ignoreWaitSave = this.typeWriter.ignoreWait;
    var skipTypingAnimationSave = this.typeWriter.skipTypingAnimation;
    var skipSoundEffectSave = this.typeWriter.skipSoundEffect;
    this.typeWriter.once("complete", function() {
        // Recover parameters
        this.typeWriter.setTypingSpeed(typingSpeedSave).setIgnoreWait(ignoreWaitSave).setSkipTypingAnimation(skipTypingAnimationSave).setSkipSoundEffect(skipSoundEffectSave);
    }, this).setTypingSpeed(0).skipCurrentTypingDelay().setIgnoreWait(true).setSkipTypingAnimation(true).setSkipSoundEffect(true);
    return this;
};
exports.default = ShowPage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHCkp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getSprite (name) {
        return this.getGameObject("sprite", name);
    },
    addSprite (name, gameObject) {
        this.addGameObject("sprite", name, gameObject);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jm0Kg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setContentOutputEnable (enable) {
        this.parser.setContentOutputEnable(enable);
        return this;
    },
    setContentCallback (callback, scope) {
        this.contentCallback = callback;
        this.contentCallbackScope = scope;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQf6J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventsJs = require("./Events.js");
var ClearEvents = function(textPlayer) {
    for(var i = 0, cnt = (0, _eventsJs.ClearEvents).length; i < cnt; i++)textPlayer.emit((0, _eventsJs.ClearEvents)[i]);
};
exports.default = ClearEvents;

},{"./Events.js":"lOfZL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKib9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasInputJs = require("./CanvasInput.js");
var _canvasInputJsDefault = parcelHelpers.interopDefault(_canvasInputJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("canvasInput", function(x, y, fixedWidth, fixedHeight, config) {
    var gameObject = new (0, _canvasInputJsDefault.default)(this.scene, x, y, fixedWidth, fixedHeight, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CanvasInput", (0, _canvasInputJsDefault.default));
exports.default = (0, _canvasInputJsDefault.default);

},{"./CanvasInput.js":"lDkTr","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lDkTr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasinputJs = require("../../../plugins/canvasinput.js");
var _canvasinputJsDefault = parcelHelpers.interopDefault(_canvasinputJs);
exports.default = (0, _canvasinputJsDefault.default);

},{"../../../plugins/canvasinput.js":"kD3AJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kD3AJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasInputJs = require("./gameobjects/dynamictext/canvasinput/CanvasInput.js");
var _canvasInputJsDefault = parcelHelpers.interopDefault(_canvasInputJs);
exports.default = (0, _canvasInputJsDefault.default);

},{"./gameobjects/dynamictext/canvasinput/CanvasInput.js":"8XtSV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8XtSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dynamicTextJs = require("../dynamictext/DynamicText.js");
var _dynamicTextJsDefault = parcelHelpers.interopDefault(_dynamicTextJs);
var _createHiddenTextEditJs = require("./textedit/CreateHiddenTextEdit.js");
var _createHiddenTextEditJsDefault = parcelHelpers.interopDefault(_createHiddenTextEditJs);
var _injectDefaultConfigJs = require("./methods/InjectDefaultConfig.js");
var _injectDefaultConfigJsDefault = parcelHelpers.interopDefault(_injectDefaultConfigJs);
var _extractByPrefixJs = require("../../../utils/object/ExtractByPrefix.js");
var _extractByPrefixJsDefault = parcelHelpers.interopDefault(_extractByPrefixJs);
var _registerCursorStyleJs = require("./methods/RegisterCursorStyle.js");
var _registerCursorStyleJsDefault = parcelHelpers.interopDefault(_registerCursorStyleJs);
var _registerFocusStyleJs = require("./methods/RegisterFocusStyle.js");
var _registerFocusStyleJsDefault = parcelHelpers.interopDefault(_registerFocusStyleJs);
var _addLastInsertCursorJs = require("./methods/AddLastInsertCursor.js");
var _addLastInsertCursorJsDefault = parcelHelpers.interopDefault(_addLastInsertCursorJs);
var _setTextJs = require("./methods/SetText.js");
var _setTextJsDefault = parcelHelpers.interopDefault(_setTextJs);
var _typesJs = require("../dynamictext/bob/Types.js");
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CanvasInput extends (0, _dynamicTextJsDefault.default) {
    constructor(scene, x, y, fixedWidth, fixedHeight, config){
        if (IsPlainObject(x)) config = x;
        else if (IsPlainObject(fixedWidth)) config = fixedWidth;
        if (config === undefined) config = {};
        (0, _injectDefaultConfigJsDefault.default)(config);
        // Set text later
        var text = config.text;
        if (text) delete config.text;
        var focusStyle = (0, _extractByPrefixJsDefault.default)(config.background, "focus");
        var cursorStyle = (0, _extractByPrefixJsDefault.default)(config.style, "cursor");
        super(scene, x, y, fixedWidth, fixedHeight, config);
        this.type = "rexCanvasInput";
        this._text = "";
        this.textEdit = (0, _createHiddenTextEditJsDefault.default)(this, config);
        if (config.focusStyle) Object.assign(focusStyle, config.focusStyle);
        (0, _registerFocusStyleJsDefault.default).call(this, focusStyle);
        if (config.cursorStyle) Object.assign(cursorStyle, config.cursorStyle);
        (0, _registerCursorStyleJsDefault.default).call(this, cursorStyle);
        var addCharCallback = config.onAddChar;
        if (addCharCallback) this.on("addchar", addCharCallback);
        var cursorOutCallback = config.onCursorOut;
        if (cursorOutCallback) this.on("cursorout", cursorOutCallback);
        var cursorInCallback = config.onCursorIn;
        if (cursorInCallback) this.on("cursorin", cursorInCallback);
        var moveCursorCallback = config.onMoveCursor;
        if (moveCursorCallback) this.on("movecursor", moveCursorCallback);
        this.setParseTextCallback(config.parseTextCallback);
        this.lastInsertCursor = (0, _addLastInsertCursorJsDefault.default)(this);
        if (text) this.setText(text);
        else // Still need run word wrap for lastInsertCursor child
        this.runWordWrap();
    }
    addChild(child, index) {
        super.addChild(child, index);
        if (Array.isArray(child)) {
            var children = child;
            for(var i = 0, cnt = children.length; i < cnt; i++){
                var child = children[i];
                if ((0, _typesJs.IsChar)(child)) this.emit("addchar", child, index + i, this);
            }
        } else if ((0, _typesJs.IsChar)(child)) this.emit("addchar", child, index, this);
        return this;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value == null) value = "";
        else value = value.toString();
        if (this._text === value) return;
        (0, _setTextJsDefault.default)(this, value);
        this._text = value;
    }
    setText(text) {
        this.text = text;
        return this;
    }
    appendText(text) {
        this.setText(this.text + text);
        return this;
    }
    setSize(width, height) {
        if (this.width === width && this.height === height) return this;
        super.setSize(width, height);
        // Run wrap again since fixedWidth and fixedHeight are changed
        this.runWrap();
        return this;
    }
    get displayText() {
        return this.text;
    }
    set displayText(value) {
        this.text = value;
    }
    setDisplayText(value) {
        this.displayText = value;
        return this;
    }
    get inputText() {
        return this.textEdit.text;
    }
    set inputText(value) {
        this.textEdit.text = value;
    }
    setInputText(value) {
        this.inputText = value;
        return this;
    }
    setParseTextCallback(callback) {
        if (!callback) callback = DefaultParseTextCallback;
        this.parseTextCallback = callback;
        return this;
    }
    get value() {
        return this.parseTextCallback(this.text);
    }
    set value(value) {
        this.setText(value);
    }
    getValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    get readOnly() {
        return this.textEdit.readOnly;
    }
    set readOnly(value) {
        this.textEdit.readOnly = value;
    }
    setReadOnly(value) {
        this.textEdit.setReadOnly(value);
        return this;
    }
    open(onCloseCallback) {
        if (onCloseCallback) this.textEdit.once("close", onCloseCallback);
        this.textEdit.open();
        return this;
    }
    close() {
        this.textEdit.close();
        return this;
    }
    get isOpened() {
        return this.textEdit.isOpened;
    }
    setFocusStyle(style) {
        this.focusStyle = style;
        return this;
    }
    setCursorStyle(style) {
        this.cursorStyle = style;
        return this;
    }
    setNumberInput() {
        this.textEdit.setNumberInput();
        this.parseTextCallback = Number;
        return this;
    }
    get maxLength() {
        return this.textEdit.maxLength;
    }
    set maxLength(value) {
        this.textEdit.maxLength = value;
    }
    setMaxLength(value) {
        this.maxLength = value;
        return this;
    }
    get minLength() {
        return this.textEdit.minLength;
    }
    set minLength(value) {
        this.textEdit.minLength = value;
    }
    setMinLength(value) {
        this.minLength = value;
        return this;
    }
}
var DefaultParseTextCallback = function(text) {
    return text;
};
exports.default = CanvasInput;

},{"../dynamictext/DynamicText.js":"eXloc","./textedit/CreateHiddenTextEdit.js":"bEgsc","./methods/InjectDefaultConfig.js":"fHwck","../../../utils/object/ExtractByPrefix.js":"pDwm2","./methods/RegisterCursorStyle.js":"dBhnn","./methods/RegisterFocusStyle.js":"45Idx","./methods/AddLastInsertCursor.js":"jG8wu","./methods/SetText.js":"4536w","../dynamictext/bob/Types.js":"3ngC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bEgsc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddenTextEditJs = require("./HiddenTextEdit.js");
var _hiddenTextEditJsDefault = parcelHelpers.interopDefault(_hiddenTextEditJs);
var _copyPropertyJs = require("../../../../utils/object/CopyProperty.js");
var _copyPropertyJsDefault = parcelHelpers.interopDefault(_copyPropertyJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const PropertiesList = [
    "inputType",
    "onOpen",
    "onFocus",
    "onClose",
    "onBlur",
    "onUpdate",
    "enterClose",
    "readOnly",
    "maxLength",
    "minLength",
    "selectAll"
];
var CreateHiddenTextEdit = function(parent, parentConfig) {
    var config = GetValue(parentConfig, "edit");
    if (config === undefined) config = {};
    (0, _copyPropertyJsDefault.default)(parentConfig, config, PropertiesList);
    return new (0, _hiddenTextEditJsDefault.default)(parent, config);
};
exports.default = CreateHiddenTextEdit;

},{"./HiddenTextEdit.js":"99gn7","../../../../utils/object/CopyProperty.js":"cY7FG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99gn7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddenTextEditBaseJs = require("../../../../behaviors/hiddentextedit/HiddenTextEditBase.js");
var _hiddenTextEditBaseJsDefault = parcelHelpers.interopDefault(_hiddenTextEditBaseJs);
var _numberInputUpdateCallbackJs = require("../../../../behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js");
var _numberInputUpdateCallbackJsDefault = parcelHelpers.interopDefault(_numberInputUpdateCallbackJs);
var _selectRangeJs = require("./SelectRange.js");
var _selectRangeJsDefault = parcelHelpers.interopDefault(_selectRangeJs);
var _moveCursorJs = require("./MoveCursor.js");
var _moveCursorJsDefault = parcelHelpers.interopDefault(_moveCursorJs);
var _clearSelectRangeJs = require("./ClearSelectRange.js");
var _clearSelectRangeJsDefault = parcelHelpers.interopDefault(_clearSelectRangeJs);
var _clearCursorJs = require("./ClearCursor.js");
var _clearCursorJsDefault = parcelHelpers.interopDefault(_clearCursorJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class HiddenTextEdit extends (0, _hiddenTextEditBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this.setSelectAllWhenFocusEnable(GetValue(config, "selectAll", false));
        this.cursorMoveStartIndex = null;
        this.prevCursorPosition = null;
        this.prevSelectionStart = null;
        this.prevSelectionEnd = null;
        this.firstClickAfterOpen = false;
        gameObject// Open editor by 'pointerdown' event
        // Then set cursor position to nearest char
        .on("pointerdown", function(pointer, localX, localY, event) {
            var child = gameObject.getNearestChild(localX, localY);
            var charIndex = gameObject.getCharIndex(child);
            if (!this.selectAllWhenFocus || !this.firstClickAfterOpen) this.setCursorPosition(charIndex);
            this.cursorMoveStartIndex = charIndex;
            this.firstClickAfterOpen = false;
        }, this).on("pointermove", function(pointer, localX, localY, event) {
            if (!pointer.isDown) return;
            var child = gameObject.getNearestChild(localX, localY);
            var charIndex = gameObject.getCharIndex(child);
            if (this.cursorMoveStartIndex < charIndex) this.selectText(this.cursorMoveStartIndex, charIndex + 1);
            else this.selectText(charIndex, this.cursorMoveStartIndex + 1);
        }, this);
        this.on("open", function() {
            if (this.selectAllWhenFocus) this.selectAll();
            this.firstClickAfterOpen = true;
            gameObject.emit("open");
        }, this).on("close", function() {
            gameObject.emit("close");
        }, this);
    }
    initText() {
        var textObject = this.parent;
        this.prevCursorPosition = null;
        this.setText(textObject.text);
        return this;
    }
    updateText() {
        var textObject = this.parent;
        var text = this.text;
        if (this.onUpdateCallback) {
            var newText = this.onUpdateCallback(text, textObject, this);
            if (newText != null) text = newText;
        }
        if (textObject.text !== text) {
            textObject.setText(text);
            textObject.emit("textchange", text, textObject, this);
        }
        if (this.isOpened) {
            if (this.selectionStart !== this.selectionEnd) {
                (0, _clearCursorJsDefault.default)(this);
                (0, _selectRangeJsDefault.default)(this);
            } else {
                (0, _clearSelectRangeJsDefault.default)(this);
                (0, _moveCursorJsDefault.default)(this);
            }
        } else {
            (0, _clearSelectRangeJsDefault.default)(this);
            (0, _clearCursorJsDefault.default)(this);
        }
        return this;
    }
    setNumberInput() {
        this.onUpdateCallback = (0, _numberInputUpdateCallbackJsDefault.default);
        return this;
    }
    setSelectAllWhenFocusEnable(enable) {
        if (enable === undefined) enable = true;
        this.selectAllWhenFocus = enable;
        return this;
    }
}
exports.default = HiddenTextEdit;

},{"../../../../behaviors/hiddentextedit/HiddenTextEditBase.js":"70eFC","../../../../behaviors/hiddentextedit/defaultcallbacks/NumberInputUpdateCallback.js":"76BpE","./SelectRange.js":"lyttP","./MoveCursor.js":"3XWN7","./ClearSelectRange.js":"h7Acv","./ClearCursor.js":"3w1wR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"70eFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _copyElementConfigJs = require("./methods/CopyElementConfig.js");
var _copyElementConfigJsDefault = parcelHelpers.interopDefault(_copyElementConfigJs);
var _isPointerInHitAreaJs = require("../../utils/input/IsPointerInHitArea.js");
var _isPointerInHitAreaJsDefault = parcelHelpers.interopDefault(_isPointerInHitAreaJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class HiddenTextEditBase extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject);
        // this.parent = gameObject;
        var textType = GetValue(config, "inputType", undefined);
        if (textType === undefined) textType = GetValue(config, "type", "text");
        this.setEnterCloseEnable(GetValue(config, "enterClose", textType !== "textarea"));
        var onOpen = GetValue(config, "onOpen", undefined);
        if (!onOpen) onOpen = GetValue(config, "onFocus", undefined);
        this.onOpenCallback = onOpen;
        var onClose = GetValue(config, "onClose", undefined);
        if (!onClose) onClose = GetValue(config, "onBlur", undefined);
        this.onCloseCallback = onClose;
        this.onUpdateCallback = GetValue(config, "onUpdate", undefined);
        this.isOpened = false;
        gameObject.on("pointerdown", function() {
            this.open();
        }, this).setInteractive();
        this.nodeConfig = (0, _copyElementConfigJsDefault.default)(config);
        // Create/remove input text element when opening/closing editor
        this.node = undefined;
    }
    destroy() {
        // this.parent.off('pointerdown', this.open, this);
        this.close();
        super.destroy();
    }
    onClickOutside(pointer) {
        if (!(0, _isPointerInHitAreaJsDefault.default)(this.parent, pointer)) this.close();
    }
    setEnterCloseEnable(enable) {
        if (enable === undefined) enable = true;
        this.enterCloseEnable = enable;
        return this;
    }
    // Override
    initText() {}
    // Override
    updateText() {}
    // Copy from InputText class
    get text() {
        if (!this.node) return "";
        return this.node.value;
    }
    set text(value) {
        if (!this.node) return;
        this.node.value = value;
    }
    setText(value) {
        this.text = value;
        return this;
    }
    get maxLength() {
        return this.nodeConfig.maxLength;
    }
    set maxLength(value) {
        this.nodeConfig.maxLength = value;
        if (this.node) this.node.maxLength = value;
    }
    setMaxLength(value) {
        this.maxLength = value;
        return this;
    }
    get minLength() {
        return this.nodeConfig.minLength;
    }
    set minLength(value) {
        this.nodeConfig.minLength = value;
        if (this.node) this.node.minLength = value;
    }
    setMinLength(value) {
        this.minLength = value;
        return this;
    }
    get placeholder() {
        return this.node.placeholder;
    }
    set placeholder(value) {
        if (!this.node) return;
        this.node.placeholder = value;
    }
    setPlaceholder(value) {
        this.placeholder = value;
        return this;
    }
    selectText(selectionStart, selectionEnd) {
        if (!this.node) return this;
        if (selectionStart === undefined) this.node.select();
        else this.node.setSelectionRange(selectionStart, selectionEnd);
        return this;
    }
    selectAll() {
        this.selectText();
        return this;
    }
    get selectionStart() {
        if (!this.node) return 0;
        return this.node.selectionStart;
    }
    get selectionEnd() {
        if (!this.node) return 0;
        return this.node.selectionEnd;
    }
    get selectedText() {
        if (!this.node) return "";
        var node = this.node;
        return node.value.substring(node.selectionStart, node.selectionEnd);
    }
    get cursorPosition() {
        if (!this.node) return 0;
        return this.node.selectionStart;
    }
    set cursorPosition(value) {
        if (!this.node) return;
        this.node.setSelectionRange(value, value);
    }
    setCursorPosition(value) {
        if (value === undefined) value = this.text.length;
        else if (value < 0) value = this.text.length + value;
        this.cursorPosition = value;
        return this;
    }
    get tooltip() {
        if (!this.node) return "";
        return this.node.title;
    }
    set tooltip(value) {
        if (!this.node) return this;
        this.node.title = value;
    }
    setTooltip(value) {
        this.tooltip = value;
        return this;
    }
    setTextChangedCallback(callback) {
        this.onTextChanged = callback;
        return this;
    }
    get readOnly() {
        return this.nodeConfig.readOnly;
    }
    set readOnly(value) {
        this.nodeConfig.readOnly = value;
        if (this.node) this.node.readOnly = value;
    }
    setReadOnly(value) {
        if (value === undefined) value = true;
        this.readOnly = value;
        return this;
    }
    get spellCheck() {
        if (!this.node) return "";
        return this.node.spellcheck;
    }
    set spellCheck(value) {
        if (!this.node) return;
        this.node.spellcheck = value;
    }
    setSpellCheck(value) {
        this.spellCheck = value;
        return this;
    }
    get fontColor() {
        if (!this.node) return undefined;
        return this.node.style.color;
    }
    set fontColor(value) {
        if (!this.node) return;
        this.node.style.color = value;
    }
    setFontColor(value) {
        this.fontColor = value;
        return this;
    }
    setStyle(key, value) {
        if (!this.node) return this;
        this.node.style[key] = value;
        return this;
    }
    getStyle(key) {
        if (!this.node) return undefined;
        return this.node.style[key];
    }
    scrollToBottom() {
        if (!this.node) return this;
        this.node.scrollTop = this.node.scrollHeight;
        return this;
    }
    setEnabled(enabled) {
        if (!this.node) return this;
        if (enabled === undefined) enabled = true;
        this.node.disabled = !enabled;
        return this;
    }
    setBlur() {
        if (!this.node) return this;
        this.node.blur();
        return this;
    }
    setFocus() {
        if (!this.node) return this;
        this.node.focus();
        return this;
    }
    get isFocused() {
        return this.isOpened;
    }
}
Object.assign(HiddenTextEditBase.prototype, (0, _methodsJsDefault.default));
exports.default = HiddenTextEditBase;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","./methods/CopyElementConfig.js":"lLRPh","../../utils/input/IsPointerInHitArea.js":"4yv3N","./methods/Methods.js":"7NA7r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lLRPh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTextPropertiesJs = require("./InputTextProperties.js");
var _copyPropertyJs = require("../../../utils/object/CopyProperty.js");
var _copyPropertyJsDefault = parcelHelpers.interopDefault(_copyPropertyJs);
var CopyElementConfig = function(from) {
    if (from === undefined) from = {};
    var to = {};
    (0, _copyPropertyJsDefault.default)(from, to, "inputType");
    (0, _copyPropertyJsDefault.default)(from, to, "type");
    (0, _copyPropertyJsDefault.default)(from, to, "style");
    (0, _copyPropertyJsDefault.default)(from, to, (0, _inputTextPropertiesJs.StyleProperties));
    (0, _copyPropertyJsDefault.default)(from, to, (0, _inputTextPropertiesJs.ElementProperties));
    return to;
};
exports.default = CopyElementConfig;

},{"./InputTextProperties.js":"ccUU0","../../../utils/object/CopyProperty.js":"cY7FG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ccUU0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ElementProperties", ()=>ElementProperties);
parcelHelpers.export(exports, "StyleProperties", ()=>StyleProperties);
const ElementProperties = {
    maxLength: [
        "maxLength",
        undefined
    ],
    minLength: [
        "minLength",
        undefined
    ],
    readOnly: [
        "readOnly",
        false
    ]
};
const StyleProperties = {
    direction: [
        "direction",
        undefined
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cY7FG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CopyProperty = function(from, to, key) {
    if (typeof key === "string") {
        if (from.hasOwnProperty(key)) to[key] = from[key];
    } else {
        var keys = key;
        if (Array.isArray(keys)) for(var i = 0, cnt = keys.length; i < cnt; i++)CopyProperty(from, to, keys[i]);
        else for(var key in keys)CopyProperty(from, to, key);
    }
};
exports.default = CopyProperty;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yv3N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsPointerInHitArea = function(gameObject, pointer, preTest, postTest) {
    if (pointer) {
        if (preTest && !preTest(gameObject, pointer)) return false;
        if (!HitTest(gameObject, pointer)) return false;
        if (postTest && !postTest(gameObject, pointer)) return false;
        return true;
    } else {
        var inputManager = gameObject.scene.input.manager;
        var pointersTotal = inputManager.pointersTotal;
        var pointers = inputManager.pointers, pointer;
        for(var i = 0; i < pointersTotal; i++){
            pointer = pointers[i];
            if (preTest && !preTest(gameObject, pointer)) continue;
            if (!HitTest(gameObject, pointer)) continue;
            if (postTest && !postTest(gameObject, pointer)) continue;
            return true;
        }
        return false;
    }
};
var HitTest = function(gameObject, pointer) {
    var scene = gameObject.scene;
    var cameras = scene.input.cameras.getCamerasBelowPointer(pointer);
    var inputManager = scene.input.manager;
    var gameObjects = [
        gameObject
    ];
    var output;
    for(var i = 0, len = cameras.length; i < len; i++){
        output = inputManager.hitTest(pointer, gameObjects, cameras[i]);
        if (output.length > 0) return true;
    }
    return false;
};
exports.default = IsPointerInHitArea;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NA7r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _openJs = require("./Open.js");
var _openJsDefault = parcelHelpers.interopDefault(_openJs);
var _closeJs = require("./Close.js");
var _closeJsDefault = parcelHelpers.interopDefault(_closeJs);
var Methods = {
    open: (0, _openJsDefault.default),
    close: (0, _closeJsDefault.default)
};
exports.default = Methods;

},{"./Open.js":"lhSbT","./Close.js":"Tl3F5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lhSbT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lastOpenedEditorJs = require("./LastOpenedEditor.js");
var _createElementJs = require("./CreateElement.js");
var _createElementJsDefault = parcelHelpers.interopDefault(_createElementJs);
var Open = function() {
    // Already opened
    if (this.isOpened) return this;
    // Read only
    if (this.readOnly) return this;
    (0, _lastOpenedEditorJs.SetLastOpenedEditor)(this);
    this.isOpened = true;
    if (!this.node) // Create input text element when opening editor
    this.node = (0, _createElementJsDefault.default)(this, this.nodeConfig);
    this.setFocus();
    this.initText();
    if (this.enterCloseEnable) this.scene.input.keyboard.once("keydown-ENTER", this.close, this);
    // There is no cursor-position-change event, 
    // so updating cursor position every tick
    this.scene.sys.events.on("postupdate", this.updateText, this);
    this.scene.input.on("pointerdown", this.onClickOutside, this);
    if (this.onOpenCallback) this.onOpenCallback(this.parent, this);
    this.emit("open", this);
    return this;
};
exports.default = Open;

},{"./LastOpenedEditor.js":"4b1Fn","./CreateElement.js":"9Krya","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4b1Fn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetLastOpenedEditor", ()=>SetLastOpenedEditor);
parcelHelpers.export(exports, "CloseLastOpenEditor", ()=>CloseLastOpenEditor);
var LastOpenedEditor = undefined;
var SetLastOpenedEditor = function(editor) {
    if (editor === LastOpenedEditor) return;
    if (LastOpenedEditor !== undefined) LastOpenedEditor.close();
    LastOpenedEditor = editor;
};
var CloseLastOpenEditor = function(editor) {
    if (editor !== LastOpenedEditor) return;
    // Don't call `LastOpenedEditor.close()`
    LastOpenedEditor = undefined;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Krya":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTextPropertiesJs = require("./InputTextProperties.js");
var _setPropertiesJs = require("../../../gameobjects/dom/utils/SetProperties.js");
var _setPropertiesJsDefault = parcelHelpers.interopDefault(_setPropertiesJs);
var _stopPropagationTouchEventsJs = require("../../../gameobjects/dom/utils/StopPropagationTouchEvents.js");
var _stopPropagationTouchEventsJsDefault = parcelHelpers.interopDefault(_stopPropagationTouchEventsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateElement = function(parent, config) {
    var element;
    var textType = GetValue(config, "inputType", undefined);
    if (textType === undefined) textType = GetValue(config, "type", "text");
    if (textType === "textarea") {
        element = document.createElement("textarea");
        element.style.resize = "none";
    } else {
        element = document.createElement("input");
        element.type = textType;
    }
    var style = GetValue(config, "style", undefined);
    // Apply other style properties
    var elementStyle = element.style;
    (0, _setPropertiesJsDefault.default)((0, _inputTextPropertiesJs.StyleProperties), style, elementStyle);
    // Set style
    elementStyle.position = "absolute";
    elementStyle.opacity = 0;
    elementStyle.pointerEvents = "none";
    elementStyle.zIndex = 0;
    // hide native blue text cursor on iOS
    elementStyle.transform = "scale(0)";
    (0, _setPropertiesJsDefault.default)((0, _inputTextPropertiesJs.ElementProperties), config, element);
    // Don't propagate touch/mouse events to parent(game canvas)
    (0, _stopPropagationTouchEventsJsDefault.default)(element);
    // Attach element to fullscreenTarget in full screen mode
    var scaleManager = parent.scene.sys.scale;
    var parentElement = scaleManager.isFullscreen ? scaleManager.fullscreenTarget : document.body;
    parentElement.appendChild(element);
    return element;
};
exports.default = CreateElement;

},{"./InputTextProperties.js":"ccUU0","../../../gameobjects/dom/utils/SetProperties.js":"9EtCg","../../../gameobjects/dom/utils/StopPropagationTouchEvents.js":"e8n0h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9EtCg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var SetProperties = function(properties, config, out) {
    if (out === undefined) out = {};
    var property, value;
    for(var key in properties){
        property = properties[key]; // [propName, defaultValue]
        value = GetValue(config, key, property[1]);
        if (value !== undefined) out[property[0]] = value;
    }
    return out;
};
exports.default = SetProperties;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e8n0h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var StopPropagationTouchEvents = function(element) {
    // Don't propagate touch/mouse events to parent(game canvas)
    element.addEventListener("touchstart", callback, false);
    element.addEventListener("touchmove", callback, false);
    element.addEventListener("touchend", callback, false);
    element.addEventListener("mousedown", callback, false);
    element.addEventListener("mouseup", callback, false);
    element.addEventListener("mousemove", callback, false);
};
var callback = function(e) {
    e.stopPropagation();
};
exports.default = StopPropagationTouchEvents;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Tl3F5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lastOpenedEditorJs = require("./LastOpenedEditor.js");
var _removeElementJs = require("./RemoveElement.js");
var _removeElementJsDefault = parcelHelpers.interopDefault(_removeElementJs);
var Close = function() {
    // Already closed
    if (!this.isOpened) return this;
    (0, _lastOpenedEditorJs.CloseLastOpenEditor)(this);
    this.setBlur();
    this.isOpened = false;
    this.updateText();
    this.scene.sys.events.off("postupdate", this.updateText, this);
    this.scene.input.off("pointerdown", this.onClickOutside, this);
    if (this.onCloseCallback) this.onCloseCallback(this.parent, this);
    // Remove input text element when closing editor
    (0, _removeElementJsDefault.default)(this.node);
    this.node = undefined;
    this.emit("close", this);
    return this;
};
exports.default = Close;

},{"./LastOpenedEditor.js":"4b1Fn","./RemoveElement.js":"2bItD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bItD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemoveElement = function(element) {
    if (!element) return;
    var parentElement = element.parentElement;
    if (parentElement) parentElement.removeChild(element);
};
exports.default = RemoveElement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"76BpE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var NumberInputUpdateCallback = function(text, textObject, hiddenInputText) {
    text = text.replace(" ", "");
    var previousText = hiddenInputText.previousText;
    if (text === previousText) return text;
    if (isNaN(text)) {
        // Enter a NaN character, back to previous text
        hiddenInputText.emit("nan", text, hiddenInputText);
        text = previousText;
        var cursorPosition = hiddenInputText.cursorPosition - 1;
        hiddenInputText.setText(text);
        hiddenInputText.setCursorPosition(cursorPosition);
    } else // New number text, update previous texr
    hiddenInputText.previousText = text;
    return text;
};
exports.default = NumberInputUpdateCallback;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lyttP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnSelectRange = function(hiddenTextEdit) {
    var textObject = hiddenTextEdit.parent;
    // var text = textObject.text;
    var selectionStart = hiddenTextEdit.isOpened ? hiddenTextEdit.selectionStart : null;
    var selectionEnd = hiddenTextEdit.isOpened ? hiddenTextEdit.selectionEnd : null;
    var prevSelectionStart = hiddenTextEdit.prevSelectionStart;
    var prevSelectionEnd = hiddenTextEdit.prevSelectionEnd;
    if (prevSelectionStart === selectionStart && prevSelectionEnd === selectionEnd) return;
    var min, max;
    if (prevSelectionStart === null) {
        min = selectionStart;
        max = selectionEnd;
    } else {
        min = Math.min(prevSelectionStart, selectionStart);
        max = Math.max(prevSelectionEnd, selectionEnd);
    }
    for(var i = min; i < max; i++){
        var inPrevSelectionRange = prevSelectionStart === null ? false : i >= prevSelectionStart && i < prevSelectionEnd;
        var inSelectionRange = i >= selectionStart && i < selectionEnd;
        if (inPrevSelectionRange && inSelectionRange) continue;
        var child = textObject.getCharChild(i);
        if (child) {
            if (inPrevSelectionRange) textObject.emit("cursorout", child, i, textObject);
            else textObject.emit("cursorin", child, i, textObject);
        }
    }
    hiddenTextEdit.prevSelectionStart = selectionStart;
    hiddenTextEdit.prevSelectionEnd = selectionEnd;
};
exports.default = OnSelectRange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XWN7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var MoveCursor = function(hiddenTextEdit) {
    var textObject = hiddenTextEdit.parent;
    var text = textObject.text;
    var cursorPosition = hiddenTextEdit.cursorPosition;
    if (hiddenTextEdit.prevCursorPosition === cursorPosition) return;
    if (hiddenTextEdit.prevCursorPosition !== null) {
        if (hiddenTextEdit.prevCursorPosition > text.length) hiddenTextEdit.prevCursorPosition = null;
    }
    if (hiddenTextEdit.prevCursorPosition !== null) {
        var child = textObject.getCharChild(hiddenTextEdit.prevCursorPosition);
        if (child) textObject.emit("cursorout", child, hiddenTextEdit.prevCursorPosition, textObject);
    }
    if (cursorPosition != null) {
        var child = textObject.getCharChild(cursorPosition);
        if (child) textObject.emit("cursorin", child, cursorPosition, textObject);
    }
    textObject.emit("movecursor", cursorPosition, hiddenTextEdit.prevCursorPosition, textObject);
    hiddenTextEdit.prevCursorPosition = cursorPosition;
};
exports.default = MoveCursor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h7Acv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ClearSelectRange = function(hiddenTextEdit) {
    var prevSelectionStart = hiddenTextEdit.prevSelectionStart;
    if (prevSelectionStart === null) return;
    var prevSelectionEnd = hiddenTextEdit.prevSelectionEnd;
    var textObject = hiddenTextEdit.parent;
    for(var i = prevSelectionStart; i < prevSelectionEnd; i++){
        var child = textObject.getCharChild(i);
        if (child) textObject.emit("cursorout", child, i, textObject);
    }
    hiddenTextEdit.prevSelectionStart = null;
    hiddenTextEdit.prevSelectionEnd = null;
};
exports.default = ClearSelectRange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3w1wR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ClearCursor = function(hiddenTextEdit) {
    var prevCursorPosition = hiddenTextEdit.prevCursorPosition;
    if (prevCursorPosition === null) return;
    var textObject = hiddenTextEdit.parent;
    var child = textObject.getCharChild(prevCursorPosition);
    if (child) textObject.emit("cursorout", child, prevCursorPosition, textObject);
    hiddenTextEdit.prevCursorPosition = null;
};
exports.default = ClearCursor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHwck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hasValueJs = require("../../../../utils/object/HasValue.js");
var _hasValueJsDefault = parcelHelpers.interopDefault(_hasValueJs);
var _setValueJs = require("../../../../utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
var InjectDefaultConfig = function(config) {
    var isSingleLineMode = !config.textArea;
    if (!(0, _hasValueJsDefault.default)(config, "wrap.vAlign")) {
        var defaultValue = isSingleLineMode ? "center" : "top";
        (0, _setValueJsDefault.default)(config, "wrap.vAlign", defaultValue);
    }
    if (!(0, _hasValueJsDefault.default)(config, "wrap.charWrap")) (0, _setValueJsDefault.default)(config, "wrap.charWrap", true);
    if (!(0, _hasValueJsDefault.default)(config, "wrap.maxLines")) {
        var defaultValue = isSingleLineMode ? 1 : undefined;
        (0, _setValueJsDefault.default)(config, "wrap.maxLines", defaultValue);
    }
    if (!(0, _hasValueJsDefault.default)(config, "wrap.useDefaultTextHeight")) (0, _setValueJsDefault.default)(config, "wrap.useDefaultTextHeight", true);
    if (!config.edit) config.edit = {};
    if (!(0, _hasValueJsDefault.default)(config.edit, "inputType")) {
        var defaultValue = isSingleLineMode ? "text" : "textarea";
        (0, _setValueJsDefault.default)(config.edit, "inputType", defaultValue);
    }
    return config;
};
exports.default = InjectDefaultConfig;

},{"../../../../utils/object/HasValue.js":"5PX6B","../../../../utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5PX6B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var HasValue = function(source, key) {
    if (!source || typeof source === "number") return false;
    else if (source.hasOwnProperty(key)) return true;
    else if (key.indexOf(".") !== -1) {
        var keys = key.split(".");
        var parent = source;
        //  Use for loop here so we can break early
        for(var i = 0; i < keys.length; i++){
            if (parent.hasOwnProperty(keys[i])) parent = parent[keys[i]];
            else //  Can't go any further
            return false;
        }
        return true;
    } else return false;
};
exports.default = HasValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBhnn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isEmptyJs = require("../../../../utils/object/IsEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _getPartialDataJs = require("../../../../utils/object/GetPartialData.js");
var _getPartialDataJsDefault = parcelHelpers.interopDefault(_getPartialDataJs);
var _isKeyValueEqualJs = require("../../../../utils/object/IsKeyValueEqual.js");
var _isKeyValueEqualJsDefault = parcelHelpers.interopDefault(_isKeyValueEqualJs);
var RegisterCursorStyle = function(cursorStyle) {
    if ((0, _isEmptyJsDefault.default)(cursorStyle)) return;
    this.setCursorStyle(cursorStyle).on("cursorin", function(child) {
        var cursorStyle = this.cursorStyle;
        var styleSave = (0, _getPartialDataJsDefault.default)(child.style, cursorStyle);
        if ((0, _isKeyValueEqualJsDefault.default)(cursorStyle, styleSave)) return;
        child.styleSave = styleSave;
        child.modifyStyle(cursorStyle);
    }, this).on("cursorout", function(child) {
        if (!child.styleSave) return;
        child.modifyStyle(child.styleSave);
        child.styleSave = undefined;
    }, this);
};
exports.default = RegisterCursorStyle;

},{"../../../../utils/object/IsEmpty.js":"jt8NP","../../../../utils/object/GetPartialData.js":"cUO58","../../../../utils/object/IsKeyValueEqual.js":"hniyP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45Idx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isEmptyJs = require("../../../../utils/object/IsEmpty.js");
var _isEmptyJsDefault = parcelHelpers.interopDefault(_isEmptyJs);
var _getPartialDataJs = require("../../../../utils/object/GetPartialData.js");
var _getPartialDataJsDefault = parcelHelpers.interopDefault(_getPartialDataJs);
var _isKeyValueEqualJs = require("../../../../utils/object/IsKeyValueEqual.js");
var _isKeyValueEqualJsDefault = parcelHelpers.interopDefault(_isKeyValueEqualJs);
var RegisterFocusStyle = function(focusStyle) {
    if ((0, _isEmptyJsDefault.default)(focusStyle)) return;
    this.setFocusStyle(focusStyle).on("open", function() {
        var child = this.background;
        var focusStyle = this.focusStyle;
        var styleSave = (0, _getPartialDataJsDefault.default)(child, focusStyle);
        if ((0, _isKeyValueEqualJsDefault.default)(focusStyle, styleSave)) return;
        child.styleSave = styleSave;
        child.modifyStyle(focusStyle);
    }, this).on("close", function() {
        var child = this.background;
        if (!child.styleSave) return;
        child.modifyStyle(child.styleSave);
        child.styleSave = undefined;
    }, this);
};
exports.default = RegisterFocusStyle;

},{"../../../../utils/object/IsEmpty.js":"jt8NP","../../../../utils/object/GetPartialData.js":"cUO58","../../../../utils/object/IsKeyValueEqual.js":"hniyP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jG8wu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildJs = require("../../dynamictext/methods/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var AddLastInsertCursor = function(textObject) {
    var child = textObject.createCharChild("|"); // Use '|' to update render size
    child.text = ""; // Render empty string ''
    // Invoke DynamicText's addChild method directly
    (0, _addChildJsDefault.default).call(textObject, child);
    return child;
};
exports.default = AddLastInsertCursor;

},{"../../dynamictext/methods/AddChild.js":"h4qoR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4536w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../../../utils/jsdiff/index.js");
const RemoveItem = Phaser.Utils.Array.Remove;
var SetText = function(textObject, newText) {
    var text = textObject.text;
    if (newText === text) return;
    // textObject.setText(newText);
    // Remove lastInsertCursor directly 
    RemoveItem(textObject.children, textObject.lastInsertCursor);
    if (newText === "") textObject.removeChildren();
    else {
        var results = (0, _indexJs.diffChars)(text, newText);
        var charIndex = 0;
        for(var i = 0, cnt = results.length; i < cnt; i++){
            var result = results[i];
            if (result.removed) // Remove character at charIndex
            textObject.removeText(charIndex, result.count);
            else if (result.added) {
                textObject.insertText(charIndex, result.value);
                charIndex += result.count;
            } else charIndex += result.count;
        }
    }
    // Push back lastInsertCursor directly
    textObject.children.push(textObject.lastInsertCursor);
    textObject.runWordWrap();
};
exports.default = SetText;

},{"../../../../utils/jsdiff/index.js":"3gRdn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gRdn":[function(require,module,exports) {
/* See LICENSE file for terms of use */ /*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Diff", ()=>(0, _baseDefault.default));
parcelHelpers.export(exports, "diffChars", ()=>(0, _character.diffChars));
parcelHelpers.export(exports, "diffWords", ()=>(0, _word.diffWords));
parcelHelpers.export(exports, "diffWordsWithSpace", ()=>(0, _word.diffWordsWithSpace));
parcelHelpers.export(exports, "diffLines", ()=>(0, _line.diffLines));
parcelHelpers.export(exports, "diffTrimmedLines", ()=>(0, _line.diffTrimmedLines));
parcelHelpers.export(exports, "diffSentences", ()=>(0, _sentence.diffSentences));
parcelHelpers.export(exports, "diffCss", ()=>(0, _css.diffCss));
parcelHelpers.export(exports, "diffJson", ()=>(0, _json.diffJson));
parcelHelpers.export(exports, "diffArrays", ()=>(0, _array.diffArrays));
parcelHelpers.export(exports, "structuredPatch", ()=>(0, _create.structuredPatch));
parcelHelpers.export(exports, "createTwoFilesPatch", ()=>(0, _create.createTwoFilesPatch));
parcelHelpers.export(exports, "createPatch", ()=>(0, _create.createPatch));
parcelHelpers.export(exports, "applyPatch", ()=>(0, _apply.applyPatch));
parcelHelpers.export(exports, "applyPatches", ()=>(0, _apply.applyPatches));
parcelHelpers.export(exports, "parsePatch", ()=>(0, _parse.parsePatch));
parcelHelpers.export(exports, "merge", ()=>(0, _merge.merge));
parcelHelpers.export(exports, "convertChangesToDMP", ()=>(0, _dmp.convertChangesToDMP));
parcelHelpers.export(exports, "convertChangesToXML", ()=>(0, _xml.convertChangesToXML));
parcelHelpers.export(exports, "canonicalize", ()=>(0, _json.canonicalize));
var _base = require("./diff/base");
var _baseDefault = parcelHelpers.interopDefault(_base);
var _character = require("./diff/character");
var _word = require("./diff/word");
var _line = require("./diff/line");
var _sentence = require("./diff/sentence");
var _css = require("./diff/css");
var _json = require("./diff/json");
var _array = require("./diff/array");
var _apply = require("./patch/apply");
var _parse = require("./patch/parse");
var _merge = require("./patch/merge");
var _create = require("./patch/create");
var _dmp = require("./convert/dmp");
var _xml = require("./convert/xml");

},{"./diff/base":"eRcFo","./diff/character":"g8Jh0","./diff/word":"e1kkA","./diff/line":"aklUc","./diff/sentence":"dz1z6","./diff/css":"k7AII","./diff/json":"25KIC","./diff/array":"fiKHA","./patch/apply":"aWkYJ","./patch/parse":"7IUj9","./patch/merge":"3cX90","./patch/create":"it6BQ","./convert/dmp":"3jeai","./convert/xml":"iU1PK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eRcFo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Diff);
function Diff() {}
Diff.prototype = {
    diff (oldString, newString, options = {}) {
        let callback = options.callback;
        if (typeof options === "function") {
            callback = options;
            options = {};
        }
        this.options = options;
        let self = this;
        function done(value) {
            if (callback) {
                setTimeout(function() {
                    callback(undefined, value);
                }, 0);
                return true;
            } else return value;
        }
        // Allow subclasses to massage the input prior to running
        oldString = this.castInput(oldString);
        newString = this.castInput(newString);
        oldString = this.removeEmpty(this.tokenize(oldString));
        newString = this.removeEmpty(this.tokenize(newString));
        let newLen = newString.length, oldLen = oldString.length;
        let editLength = 1;
        let maxEditLength = newLen + oldLen;
        if (options.maxEditLength) maxEditLength = Math.min(maxEditLength, options.maxEditLength);
        let bestPath = [
            {
                newPos: -1,
                components: []
            }
        ];
        // Seed editLength = 0, i.e. the content starts with the same values
        let oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
        if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) // Identity per the equality and tokenizer
        return done([
            {
                value: this.join(newString),
                count: newString.length
            }
        ]);
        // Main worker method. checks all permutations of a given edit length for acceptance.
        function execEditLength() {
            for(let diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2){
                let basePath;
                let addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
                if (addPath) // No one else is going to attempt to use this value, clear it
                bestPath[diagonalPath - 1] = undefined;
                let canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
                if (!canAdd && !canRemove) {
                    // If this path is a terminal then prune
                    bestPath[diagonalPath] = undefined;
                    continue;
                }
                // Select the diagonal that we want to branch from. We select the prior
                // path whose position in the new string is the farthest from the origin
                // and does not pass the bounds of the diff graph
                if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
                    basePath = clonePath(removePath);
                    self.pushComponent(basePath.components, undefined, true);
                } else {
                    basePath = addPath; // No need to clone, we've pulled it from the list
                    basePath.newPos++;
                    self.pushComponent(basePath.components, true, undefined);
                }
                oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);
                // If we have hit the end of both strings, then we are done
                if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
                else // Otherwise track this path as a potential candidate and continue.
                bestPath[diagonalPath] = basePath;
            }
            editLength++;
        }
        // Performs the length of edit iteration. Is a bit fugly as this has to support the
        // sync and async mode which is never fun. Loops over execEditLength until a value
        // is produced, or until the edit length exceeds options.maxEditLength (if given),
        // in which case it will return undefined.
        if (callback) (function exec() {
            setTimeout(function() {
                if (editLength > maxEditLength) return callback();
                if (!execEditLength()) exec();
            }, 0);
        })();
        else while(editLength <= maxEditLength){
            let ret = execEditLength();
            if (ret) return ret;
        }
    },
    pushComponent (components, added, removed) {
        let last = components[components.length - 1];
        if (last && last.added === added && last.removed === removed) // We need to clone here as the component clone operation is just
        // as shallow array clone
        components[components.length - 1] = {
            count: last.count + 1,
            added: added,
            removed: removed
        };
        else components.push({
            count: 1,
            added: added,
            removed: removed
        });
    },
    extractCommon (basePath, newString, oldString, diagonalPath) {
        let newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
        while(newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])){
            newPos++;
            oldPos++;
            commonCount++;
        }
        if (commonCount) basePath.components.push({
            count: commonCount
        });
        basePath.newPos = newPos;
        return oldPos;
    },
    equals (left, right) {
        if (this.options.comparator) return this.options.comparator(left, right);
        else return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    },
    removeEmpty (array) {
        let ret = [];
        for(let i = 0; i < array.length; i++)if (array[i]) ret.push(array[i]);
        return ret;
    },
    castInput (value) {
        return value;
    },
    tokenize (value) {
        return value.split("");
    },
    join (chars) {
        return chars.join("");
    }
};
function buildValues(diff, components, newString, oldString, useLongestToken) {
    let componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
    for(; componentPos < componentLen; componentPos++){
        let component = components[componentPos];
        if (!component.removed) {
            if (!component.added && useLongestToken) {
                let value = newString.slice(newPos, newPos + component.count);
                value = value.map(function(value, i) {
                    let oldValue = oldString[oldPos + i];
                    return oldValue.length > value.length ? oldValue : value;
                });
                component.value = diff.join(value);
            } else component.value = diff.join(newString.slice(newPos, newPos + component.count));
            newPos += component.count;
            // Common case
            if (!component.added) oldPos += component.count;
        } else {
            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
            oldPos += component.count;
            // Reverse add and remove so removes are output first to match common convention
            // The diffing algorithm is tied to add then remove output and this is the simplest
            // route to get the desired output with minimal overhead.
            if (componentPos && components[componentPos - 1].added) {
                let tmp = components[componentPos - 1];
                components[componentPos - 1] = components[componentPos];
                components[componentPos] = tmp;
            }
        }
    }
    // Special case handle for when one terminal is ignored (i.e. whitespace).
    // For this case we merge the terminal into the prior string and drop the change.
    // This is only available for string mode.
    let lastComponent = components[componentLen - 1];
    if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff.equals("", lastComponent.value)) {
        components[componentLen - 2].value += lastComponent.value;
        components.pop();
    }
    return components;
}
function clonePath(path) {
    return {
        newPos: path.newPos,
        components: path.components.slice(0)
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8Jh0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "characterDiff", ()=>characterDiff);
parcelHelpers.export(exports, "diffChars", ()=>diffChars);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
const characterDiff = new (0, _baseDefault.default)();
function diffChars(oldStr, newStr, options) {
    return characterDiff.diff(oldStr, newStr, options);
}

},{"./base":"eRcFo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1kkA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wordDiff", ()=>wordDiff);
parcelHelpers.export(exports, "diffWords", ()=>diffWords);
parcelHelpers.export(exports, "diffWordsWithSpace", ()=>diffWordsWithSpace);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
var _params = require("../util/params");
// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
//
// Ranges and exceptions:
// Latin-1 Supplement, 0080–00FF
//  - U+00D7  × Multiplication sign
//  - U+00F7  ÷ Division sign
// Latin Extended-A, 0100–017F
// Latin Extended-B, 0180–024F
// IPA Extensions, 0250–02AF
// Spacing Modifier Letters, 02B0–02FF
//  - U+02C7  ˇ &#711;  Caron
//  - U+02D8  ˘ &#728;  Breve
//  - U+02D9  ˙ &#729;  Dot Above
//  - U+02DA  ˚ &#730;  Ring Above
//  - U+02DB  ˛ &#731;  Ogonek
//  - U+02DC  ˜ &#732;  Small Tilde
//  - U+02DD  ˝ &#733;  Double Acute Accent
// Latin Extended Additional, 1E00–1EFF
const extendedWordChars = /^[a-zA-Z\u{C0}-\u{FF}\u{D8}-\u{F6}\u{F8}-\u{2C6}\u{2C8}-\u{2D7}\u{2DE}-\u{2FF}\u{1E00}-\u{1EFF}]+$/u;
const reWhitespace = /\S/;
const wordDiff = new (0, _baseDefault.default)();
wordDiff.equals = function(left, right) {
    if (this.options.ignoreCase) {
        left = left.toLowerCase();
        right = right.toLowerCase();
    }
    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
};
wordDiff.tokenize = function(value) {
    // All whitespace symbols except newline group into one token, each newline - in separate token
    let tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
    // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.
    for(let i = 0; i < tokens.length - 1; i++)// If we have an empty string in the next field and we have only word chars before and after, merge
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
        tokens[i] += tokens[i + 2];
        tokens.splice(i + 1, 2);
        i--;
    }
    return tokens;
};
function diffWords(oldStr, newStr, options) {
    options = (0, _params.generateOptions)(options, {
        ignoreWhitespace: true
    });
    return wordDiff.diff(oldStr, newStr, options);
}
function diffWordsWithSpace(oldStr, newStr, options) {
    return wordDiff.diff(oldStr, newStr, options);
}

},{"./base":"eRcFo","../util/params":"kI9eZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kI9eZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateOptions", ()=>generateOptions);
function generateOptions(options, defaults) {
    if (typeof options === "function") defaults.callback = options;
    else if (options) {
        for(let name in options)/* istanbul ignore else */ if (options.hasOwnProperty(name)) defaults[name] = options[name];
    }
    return defaults;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aklUc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lineDiff", ()=>lineDiff);
parcelHelpers.export(exports, "diffLines", ()=>diffLines);
parcelHelpers.export(exports, "diffTrimmedLines", ()=>diffTrimmedLines);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
var _params = require("../util/params");
const lineDiff = new (0, _baseDefault.default)();
lineDiff.tokenize = function(value) {
    let retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
    // Ignore the final empty token that occurs if the string ends with a new line
    if (!linesAndNewlines[linesAndNewlines.length - 1]) linesAndNewlines.pop();
    // Merge the content and line separators into single tokens
    for(let i = 0; i < linesAndNewlines.length; i++){
        let line = linesAndNewlines[i];
        if (i % 2 && !this.options.newlineIsToken) retLines[retLines.length - 1] += line;
        else {
            if (this.options.ignoreWhitespace) line = line.trim();
            retLines.push(line);
        }
    }
    return retLines;
};
function diffLines(oldStr, newStr, callback) {
    return lineDiff.diff(oldStr, newStr, callback);
}
function diffTrimmedLines(oldStr, newStr, callback) {
    let options = (0, _params.generateOptions)(callback, {
        ignoreWhitespace: true
    });
    return lineDiff.diff(oldStr, newStr, options);
}

},{"./base":"eRcFo","../util/params":"kI9eZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dz1z6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sentenceDiff", ()=>sentenceDiff);
parcelHelpers.export(exports, "diffSentences", ()=>diffSentences);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
const sentenceDiff = new (0, _baseDefault.default)();
sentenceDiff.tokenize = function(value) {
    return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
function diffSentences(oldStr, newStr, callback) {
    return sentenceDiff.diff(oldStr, newStr, callback);
}

},{"./base":"eRcFo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7AII":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssDiff", ()=>cssDiff);
parcelHelpers.export(exports, "diffCss", ()=>diffCss);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
const cssDiff = new (0, _baseDefault.default)();
cssDiff.tokenize = function(value) {
    return value.split(/([{}:;,]|\s+)/);
};
function diffCss(oldStr, newStr, callback) {
    return cssDiff.diff(oldStr, newStr, callback);
}

},{"./base":"eRcFo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"25KIC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jsonDiff", ()=>jsonDiff);
parcelHelpers.export(exports, "diffJson", ()=>diffJson);
// This function handles the presence of circular references by bailing out when encountering an
// object that is already on the "stack" of items being processed. Accepts an optional replacer
parcelHelpers.export(exports, "canonicalize", ()=>canonicalize);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
var _line = require("./line");
const objectPrototypeToString = Object.prototype.toString;
const jsonDiff = new (0, _baseDefault.default)();
// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = (0, _line.lineDiff).tokenize;
jsonDiff.castInput = function(value) {
    const { undefinedReplacement, stringifyReplacer = (k, v)=>typeof v === "undefined" ? undefinedReplacement : v } = this.options;
    return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left, right) {
    return (0, _baseDefault.default).prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
};
function diffJson(oldObj, newObj, options) {
    return jsonDiff.diff(oldObj, newObj, options);
}
function canonicalize(obj, stack, replacementStack, replacer, key) {
    stack = stack || [];
    replacementStack = replacementStack || [];
    if (replacer) obj = replacer(key, obj);
    let i;
    for(i = 0; i < stack.length; i += 1){
        if (stack[i] === obj) return replacementStack[i];
    }
    let canonicalizedObj;
    if ("[object Array]" === objectPrototypeToString.call(obj)) {
        stack.push(obj);
        canonicalizedObj = new Array(obj.length);
        replacementStack.push(canonicalizedObj);
        for(i = 0; i < obj.length; i += 1)canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
        stack.pop();
        replacementStack.pop();
        return canonicalizedObj;
    }
    if (obj && obj.toJSON) obj = obj.toJSON();
    if (typeof obj === "object" && obj !== null) {
        stack.push(obj);
        canonicalizedObj = {};
        replacementStack.push(canonicalizedObj);
        let sortedKeys = [], key;
        for(key in obj)/* istanbul ignore else */ if (obj.hasOwnProperty(key)) sortedKeys.push(key);
        sortedKeys.sort();
        for(i = 0; i < sortedKeys.length; i += 1){
            key = sortedKeys[i];
            canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack, replacer, key);
        }
        stack.pop();
        replacementStack.pop();
    } else canonicalizedObj = obj;
    return canonicalizedObj;
}

},{"./base":"eRcFo","./line":"aklUc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiKHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayDiff", ()=>arrayDiff);
parcelHelpers.export(exports, "diffArrays", ()=>diffArrays);
var _base = require("./base");
var _baseDefault = parcelHelpers.interopDefault(_base);
const arrayDiff = new (0, _baseDefault.default)();
arrayDiff.tokenize = function(value) {
    return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
    return value;
};
function diffArrays(oldArr, newArr, callback) {
    return arrayDiff.diff(oldArr, newArr, callback);
}

},{"./base":"eRcFo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWkYJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyPatch", ()=>applyPatch);
// Wrapper that supports multiple file patches via callbacks.
parcelHelpers.export(exports, "applyPatches", ()=>applyPatches);
var _parse = require("./parse");
var _distanceIterator = require("../util/distance-iterator");
var _distanceIteratorDefault = parcelHelpers.interopDefault(_distanceIterator);
function applyPatch(source, uniDiff, options = {}) {
    if (typeof uniDiff === "string") uniDiff = (0, _parse.parsePatch)(uniDiff);
    if (Array.isArray(uniDiff)) {
        if (uniDiff.length > 1) throw new Error("applyPatch only works with a single input.");
        uniDiff = uniDiff[0];
    }
    // Apply the diff to the input
    let lines = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options.compareLine || ((lineNumber, line, operation, patchContent)=>line === patchContent), errorCount = 0, fuzzFactor = options.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;
    /**
   * Checks if the hunk exactly fits on the provided location
   */ function hunkFits(hunk, toPos) {
        for(let j = 0; j < hunk.lines.length; j++){
            let line = hunk.lines[j], operation = line.length > 0 ? line[0] : " ", content = line.length > 0 ? line.substr(1) : line;
            if (operation === " " || operation === "-") {
                // Context sanity check
                if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
                    errorCount++;
                    if (errorCount > fuzzFactor) return false;
                }
                toPos++;
            }
        }
        return true;
    }
    // Search best fit offsets for each hunk based on the previous ones
    for(let i = 0; i < hunks.length; i++){
        let hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;
        let iterator = (0, _distanceIteratorDefault.default)(toPos, minLine, maxLine);
        for(; localOffset !== undefined; localOffset = iterator())if (hunkFits(hunk, toPos + localOffset)) {
            hunk.offset = offset += localOffset;
            break;
        }
        if (localOffset === undefined) return false;
        // Set lower text limit to end of the current hunk, so next ones don't try
        // to fit over already patched text
        minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
    }
    // Apply patch hunks
    let diffOffset = 0;
    for(let i = 0; i < hunks.length; i++){
        let hunk = hunks[i], toPos = hunk.oldStart + hunk.offset + diffOffset - 1;
        diffOffset += hunk.newLines - hunk.oldLines;
        for(let j = 0; j < hunk.lines.length; j++){
            let line = hunk.lines[j], operation = line.length > 0 ? line[0] : " ", content = line.length > 0 ? line.substr(1) : line, delimiter = hunk.linedelimiters[j];
            if (operation === " ") toPos++;
            else if (operation === "-") {
                lines.splice(toPos, 1);
                delimiters.splice(toPos, 1);
            /* istanbul ignore else */ } else if (operation === "+") {
                lines.splice(toPos, 0, content);
                delimiters.splice(toPos, 0, delimiter);
                toPos++;
            } else if (operation === "\\") {
                let previousOperation = hunk.lines[j - 1] ? hunk.lines[j - 1][0] : null;
                if (previousOperation === "+") removeEOFNL = true;
                else if (previousOperation === "-") addEOFNL = true;
            }
        }
    }
    // Handle EOFNL insertion/removal
    if (removeEOFNL) while(!lines[lines.length - 1]){
        lines.pop();
        delimiters.pop();
    }
    else if (addEOFNL) {
        lines.push("");
        delimiters.push("\n");
    }
    for(let _k = 0; _k < lines.length - 1; _k++)lines[_k] = lines[_k] + delimiters[_k];
    return lines.join("");
}
function applyPatches(uniDiff, options) {
    if (typeof uniDiff === "string") uniDiff = (0, _parse.parsePatch)(uniDiff);
    let currentIndex = 0;
    function processIndex() {
        let index = uniDiff[currentIndex++];
        if (!index) return options.complete();
        options.loadFile(index, function(err, data) {
            if (err) return options.complete(err);
            let updatedContent = applyPatch(data, index, options);
            options.patched(index, updatedContent, function(err) {
                if (err) return options.complete(err);
                processIndex();
            });
        });
    }
    processIndex();
}

},{"./parse":"7IUj9","../util/distance-iterator":"iIf45","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7IUj9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parsePatch", ()=>parsePatch);
function parsePatch(uniDiff, options = {}) {
    let diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/), delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [], list = [], i = 0;
    function parseIndex() {
        let index = {};
        list.push(index);
        // Parse diff metadata
        while(i < diffstr.length){
            let line = diffstr[i];
            // File header found, end parsing diff metadata
            if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) break;
            // Diff index
            let header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
            if (header) index.index = header[1];
            i++;
        }
        // Parse file headers if they are defined. Unified diff requires them, but
        // there's no technical issues to have an isolated hunk without file header
        parseFileHeader(index);
        parseFileHeader(index);
        // Parse hunks
        index.hunks = [];
        while(i < diffstr.length){
            let line = diffstr[i];
            if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(line)) break;
            else if (/^@@/.test(line)) index.hunks.push(parseHunk());
            else if (line && options.strict) // Ignore unexpected content unless in strict mode
            throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(line));
            else i++;
        }
    }
    // Parses the --- and +++ headers, if none are found, no lines
    // are consumed.
    function parseFileHeader(index) {
        const fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
        if (fileHeader) {
            let keyPrefix = fileHeader[1] === "---" ? "old" : "new";
            const data = fileHeader[2].split("	", 2);
            let fileName = data[0].replace(/\\\\/g, "\\");
            if (/^".*"$/.test(fileName)) fileName = fileName.substr(1, fileName.length - 2);
            index[keyPrefix + "FileName"] = fileName;
            index[keyPrefix + "Header"] = (data[1] || "").trim();
            i++;
        }
    }
    // Parses a hunk
    // This assumes that we are at the start of a hunk.
    function parseHunk() {
        let chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
        let hunk = {
            oldStart: +chunkHeader[1],
            oldLines: typeof chunkHeader[2] === "undefined" ? 1 : +chunkHeader[2],
            newStart: +chunkHeader[3],
            newLines: typeof chunkHeader[4] === "undefined" ? 1 : +chunkHeader[4],
            lines: [],
            linedelimiters: []
        };
        // Unified Diff Format quirk: If the chunk size is 0,
        // the first number is one lower than one would expect.
        // https://www.artima.com/weblogs/viewpost.jsp?thread=164293
        if (hunk.oldLines === 0) hunk.oldStart += 1;
        if (hunk.newLines === 0) hunk.newStart += 1;
        let addCount = 0, removeCount = 0;
        for(; i < diffstr.length; i++){
            // Lines starting with '---' could be mistaken for the "remove line" operation
            // But they could be the header for the next file. Therefore prune such cases out.
            if (diffstr[i].indexOf("--- ") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf("+++ ") === 0 && diffstr[i + 2].indexOf("@@") === 0) break;
            let operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
            if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
                hunk.lines.push(diffstr[i]);
                hunk.linedelimiters.push(delimiters[i] || "\n");
                if (operation === "+") addCount++;
                else if (operation === "-") removeCount++;
                else if (operation === " ") {
                    addCount++;
                    removeCount++;
                }
            } else break;
        }
        // Handle the empty block count case
        if (!addCount && hunk.newLines === 1) hunk.newLines = 0;
        if (!removeCount && hunk.oldLines === 1) hunk.oldLines = 0;
        // Perform optional sanity checking
        if (options.strict) {
            if (addCount !== hunk.newLines) throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
            if (removeCount !== hunk.oldLines) throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
        }
        return hunk;
    }
    while(i < diffstr.length)parseIndex();
    return list;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iIf45":[function(require,module,exports) {
// Iterator that traverses in the range of [min, max], stepping
// by distance from a given start position. I.e. for [0, 4], with
// start of 2, this will iterate 2, 3, 1, 4, 0.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(start, minLine, maxLine) {
        let wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
        return function iterator() {
            if (wantForward && !forwardExhausted) {
                if (backwardExhausted) localOffset++;
                else wantForward = false;
                // Check if trying to fit beyond text length, and if not, check it fits
                // after offset location (or desired location on first iteration)
                if (start + localOffset <= maxLine) return localOffset;
                forwardExhausted = true;
            }
            if (!backwardExhausted) {
                if (!forwardExhausted) wantForward = true;
                // Check if trying to fit before text beginning, and if not, check it fits
                // before offset location
                if (minLine <= start - localOffset) return -localOffset++;
                backwardExhausted = true;
                return iterator();
            }
        // We tried to fit hunk before text beginning and beyond text length, then
        // hunk can't fit on the text. Return undefined
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3cX90":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calcLineCount", ()=>calcLineCount);
parcelHelpers.export(exports, "merge", ()=>merge);
var _create = require("./create");
var _parse = require("./parse");
var _array = require("../util/array");
function calcLineCount(hunk) {
    const { oldLines, newLines } = calcOldNewLineCount(hunk.lines);
    if (oldLines !== undefined) hunk.oldLines = oldLines;
    else delete hunk.oldLines;
    if (newLines !== undefined) hunk.newLines = newLines;
    else delete hunk.newLines;
}
function merge(mine, theirs, base) {
    mine = loadPatch(mine, base);
    theirs = loadPatch(theirs, base);
    let ret = {};
    // For index we just let it pass through as it doesn't have any necessary meaning.
    // Leaving sanity checks on this to the API consumer that may know more about the
    // meaning in their own context.
    if (mine.index || theirs.index) ret.index = mine.index || theirs.index;
    if (mine.newFileName || theirs.newFileName) {
        if (!fileNameChanged(mine)) {
            // No header or no change in ours, use theirs (and ours if theirs does not exist)
            ret.oldFileName = theirs.oldFileName || mine.oldFileName;
            ret.newFileName = theirs.newFileName || mine.newFileName;
            ret.oldHeader = theirs.oldHeader || mine.oldHeader;
            ret.newHeader = theirs.newHeader || mine.newHeader;
        } else if (!fileNameChanged(theirs)) {
            // No header or no change in theirs, use ours
            ret.oldFileName = mine.oldFileName;
            ret.newFileName = mine.newFileName;
            ret.oldHeader = mine.oldHeader;
            ret.newHeader = mine.newHeader;
        } else {
            // Both changed... figure it out
            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
        }
    }
    ret.hunks = [];
    let mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
    while(mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length){
        let mineCurrent = mine.hunks[mineIndex] || {
            oldStart: Infinity
        }, theirsCurrent = theirs.hunks[theirsIndex] || {
            oldStart: Infinity
        };
        if (hunkBefore(mineCurrent, theirsCurrent)) {
            // This patch does not overlap with any of the others, yay.
            ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
            mineIndex++;
            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
        } else if (hunkBefore(theirsCurrent, mineCurrent)) {
            // This patch does not overlap with any of the others, yay.
            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
            theirsIndex++;
            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
        } else {
            // Overlap, merge as best we can
            let mergedHunk = {
                oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
                oldLines: 0,
                newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
                newLines: 0,
                lines: []
            };
            mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
            theirsIndex++;
            mineIndex++;
            ret.hunks.push(mergedHunk);
        }
    }
    return ret;
}
function loadPatch(param, base) {
    if (typeof param === "string") {
        if (/^@@/m.test(param) || /^Index:/m.test(param)) return (0, _parse.parsePatch)(param)[0];
        if (!base) throw new Error("Must provide a base reference or pass in a patch");
        return (0, _create.structuredPatch)(undefined, undefined, base, param);
    }
    return param;
}
function fileNameChanged(patch) {
    return patch.newFileName && patch.newFileName !== patch.oldFileName;
}
function selectField(index, mine, theirs) {
    if (mine === theirs) return mine;
    else {
        index.conflict = true;
        return {
            mine,
            theirs
        };
    }
}
function hunkBefore(test, check) {
    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
}
function cloneHunk(hunk, offset) {
    return {
        oldStart: hunk.oldStart,
        oldLines: hunk.oldLines,
        newStart: hunk.newStart + offset,
        newLines: hunk.newLines,
        lines: hunk.lines
    };
}
function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
    // This will generally result in a conflicted hunk, but there are cases where the context
    // is the only overlap where we can successfully merge the content here.
    let mine = {
        offset: mineOffset,
        lines: mineLines,
        index: 0
    }, their = {
        offset: theirOffset,
        lines: theirLines,
        index: 0
    };
    // Handle any leading content
    insertLeading(hunk, mine, their);
    insertLeading(hunk, their, mine);
    // Now in the overlap content. Scan through and select the best changes from each.
    while(mine.index < mine.lines.length && their.index < their.lines.length){
        let mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
        if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) // Both modified ...
        mutualChange(hunk, mine, their);
        else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") // Mine inserted
        hunk.lines.push(...collectChange(mine));
        else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") // Theirs inserted
        hunk.lines.push(...collectChange(their));
        else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") // Mine removed or edited
        removal(hunk, mine, their);
        else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") // Their removed or edited
        removal(hunk, their, mine, true);
        else if (mineCurrent === theirCurrent) {
            // Context identity
            hunk.lines.push(mineCurrent);
            mine.index++;
            their.index++;
        } else // Context mismatch
        conflict(hunk, collectChange(mine), collectChange(their));
    }
    // Now push anything that may be remaining
    insertTrailing(hunk, mine);
    insertTrailing(hunk, their);
    calcLineCount(hunk);
}
function mutualChange(hunk, mine, their) {
    let myChanges = collectChange(mine), theirChanges = collectChange(their);
    if (allRemoves(myChanges) && allRemoves(theirChanges)) {
        // Special case for remove changes that are supersets of one another
        if ((0, _array.arrayStartsWith)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
            hunk.lines.push(...myChanges);
            return;
        } else if ((0, _array.arrayStartsWith)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
            hunk.lines.push(...theirChanges);
            return;
        }
    } else if ((0, _array.arrayEqual)(myChanges, theirChanges)) {
        hunk.lines.push(...myChanges);
        return;
    }
    conflict(hunk, myChanges, theirChanges);
}
function removal(hunk, mine, their, swap) {
    let myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
    if (theirChanges.merged) hunk.lines.push(...theirChanges.merged);
    else conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
}
function conflict(hunk, mine, their) {
    hunk.conflict = true;
    hunk.lines.push({
        conflict: true,
        mine: mine,
        theirs: their
    });
}
function insertLeading(hunk, insert, their) {
    while(insert.offset < their.offset && insert.index < insert.lines.length){
        let line = insert.lines[insert.index++];
        hunk.lines.push(line);
        insert.offset++;
    }
}
function insertTrailing(hunk, insert) {
    while(insert.index < insert.lines.length){
        let line = insert.lines[insert.index++];
        hunk.lines.push(line);
    }
}
function collectChange(state) {
    let ret = [], operation = state.lines[state.index][0];
    while(state.index < state.lines.length){
        let line = state.lines[state.index];
        // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.
        if (operation === "-" && line[0] === "+") operation = "+";
        if (operation === line[0]) {
            ret.push(line);
            state.index++;
        } else break;
    }
    return ret;
}
function collectContext(state, matchChanges) {
    let changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
    while(matchIndex < matchChanges.length && state.index < state.lines.length){
        let change = state.lines[state.index], match = matchChanges[matchIndex];
        // Once we've hit our add, then we are done
        if (match[0] === "+") break;
        contextChanges = contextChanges || change[0] !== " ";
        merged.push(match);
        matchIndex++;
        // Consume any additions in the other block as a conflict to attempt
        // to pull in the remaining context after this
        if (change[0] === "+") {
            conflicted = true;
            while(change[0] === "+"){
                changes.push(change);
                change = state.lines[++state.index];
            }
        }
        if (match.substr(1) === change.substr(1)) {
            changes.push(change);
            state.index++;
        } else conflicted = true;
    }
    if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) conflicted = true;
    if (conflicted) return changes;
    while(matchIndex < matchChanges.length)merged.push(matchChanges[matchIndex++]);
    return {
        merged,
        changes
    };
}
function allRemoves(changes) {
    return changes.reduce(function(prev, change) {
        return prev && change[0] === "-";
    }, true);
}
function skipRemoveSuperset(state, removeChanges, delta) {
    for(let i = 0; i < delta; i++){
        let changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
        if (state.lines[state.index + i] !== " " + changeContent) return false;
    }
    state.index += delta;
    return true;
}
function calcOldNewLineCount(lines) {
    let oldLines = 0;
    let newLines = 0;
    lines.forEach(function(line) {
        if (typeof line !== "string") {
            let myCount = calcOldNewLineCount(line.mine);
            let theirCount = calcOldNewLineCount(line.theirs);
            if (oldLines !== undefined) {
                if (myCount.oldLines === theirCount.oldLines) oldLines += myCount.oldLines;
                else oldLines = undefined;
            }
            if (newLines !== undefined) {
                if (myCount.newLines === theirCount.newLines) newLines += myCount.newLines;
                else newLines = undefined;
            }
        } else {
            if (newLines !== undefined && (line[0] === "+" || line[0] === " ")) newLines++;
            if (oldLines !== undefined && (line[0] === "-" || line[0] === " ")) oldLines++;
        }
    });
    return {
        oldLines,
        newLines
    };
}

},{"./create":"it6BQ","./parse":"7IUj9","../util/array":"7vMRE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"it6BQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "structuredPatch", ()=>structuredPatch);
parcelHelpers.export(exports, "formatPatch", ()=>formatPatch);
parcelHelpers.export(exports, "createTwoFilesPatch", ()=>createTwoFilesPatch);
parcelHelpers.export(exports, "createPatch", ()=>createPatch);
var _line = require("../diff/line");
function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
    if (!options) options = {};
    if (typeof options.context === "undefined") options.context = 4;
    const diff = (0, _line.diffLines)(oldStr, newStr, options);
    if (!diff) return;
    diff.push({
        value: "",
        lines: []
    }); // Append an empty value to make cleanup easier
    function contextLines(lines) {
        return lines.map(function(entry) {
            return " " + entry;
        });
    }
    let hunks = [];
    let oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
    for(let i = 0; i < diff.length; i++){
        const current = diff[i], lines = current.lines || current.value.replace(/\n$/, "").split("\n");
        current.lines = lines;
        if (current.added || current.removed) {
            // If we have previous context, start with that
            if (!oldRangeStart) {
                const prev = diff[i - 1];
                oldRangeStart = oldLine;
                newRangeStart = newLine;
                if (prev) {
                    curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
                    oldRangeStart -= curRange.length;
                    newRangeStart -= curRange.length;
                }
            }
            // Output our changes
            curRange.push(...lines.map(function(entry) {
                return (current.added ? "+" : "-") + entry;
            }));
            // Track the updated file position
            if (current.added) newLine += lines.length;
            else oldLine += lines.length;
        } else {
            // Identical context lines. Track line changes
            if (oldRangeStart) {
                // Close out any changes that have been output (or join overlapping)
                if (lines.length <= options.context * 2 && i < diff.length - 2) // Overlapping
                curRange.push(...contextLines(lines));
                else {
                    // end the range and output
                    let contextSize = Math.min(lines.length, options.context);
                    curRange.push(...contextLines(lines.slice(0, contextSize)));
                    let hunk = {
                        oldStart: oldRangeStart,
                        oldLines: oldLine - oldRangeStart + contextSize,
                        newStart: newRangeStart,
                        newLines: newLine - newRangeStart + contextSize,
                        lines: curRange
                    };
                    if (i >= diff.length - 2 && lines.length <= options.context) {
                        // EOF is inside this hunk
                        let oldEOFNewline = /\n$/.test(oldStr);
                        let newEOFNewline = /\n$/.test(newStr);
                        let noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
                        if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) // special case: old has no eol and no trailing context; no-nl can end up before adds
                        // however, if the old file is empty, do not output the no-nl line
                        curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file");
                        if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) curRange.push("\\ No newline at end of file");
                    }
                    hunks.push(hunk);
                    oldRangeStart = 0;
                    newRangeStart = 0;
                    curRange = [];
                }
            }
            oldLine += lines.length;
            newLine += lines.length;
        }
    }
    return {
        oldFileName: oldFileName,
        newFileName: newFileName,
        oldHeader: oldHeader,
        newHeader: newHeader,
        hunks: hunks
    };
}
function formatPatch(diff) {
    const ret = [];
    if (diff.oldFileName == diff.newFileName) ret.push("Index: " + diff.oldFileName);
    ret.push("===================================================================");
    ret.push("--- " + diff.oldFileName + (typeof diff.oldHeader === "undefined" ? "" : "	" + diff.oldHeader));
    ret.push("+++ " + diff.newFileName + (typeof diff.newHeader === "undefined" ? "" : "	" + diff.newHeader));
    for(let i = 0; i < diff.hunks.length; i++){
        const hunk = diff.hunks[i];
        // Unified Diff Format quirk: If the chunk size is 0,
        // the first number is one lower than one would expect.
        // https://www.artima.com/weblogs/viewpost.jsp?thread=164293
        if (hunk.oldLines === 0) hunk.oldStart -= 1;
        if (hunk.newLines === 0) hunk.newStart -= 1;
        ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
        ret.push.apply(ret, hunk.lines);
    }
    return ret.join("\n") + "\n";
}
function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
    return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
}
function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
}

},{"../diff/line":"aklUc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vMRE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrayEqual", ()=>arrayEqual);
parcelHelpers.export(exports, "arrayStartsWith", ()=>arrayStartsWith);
function arrayEqual(a, b) {
    if (a.length !== b.length) return false;
    return arrayStartsWith(a, b);
}
function arrayStartsWith(array, start) {
    if (start.length > array.length) return false;
    for(let i = 0; i < start.length; i++){
        if (start[i] !== array[i]) return false;
    }
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3jeai":[function(require,module,exports) {
// See: http://code.google.com/p/google-diff-match-patch/wiki/API
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertChangesToDMP", ()=>convertChangesToDMP);
function convertChangesToDMP(changes) {
    let ret = [], change, operation;
    for(let i = 0; i < changes.length; i++){
        change = changes[i];
        if (change.added) operation = 1;
        else if (change.removed) operation = -1;
        else operation = 0;
        ret.push([
            operation,
            change.value
        ]);
    }
    return ret;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iU1PK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertChangesToXML", ()=>convertChangesToXML);
function convertChangesToXML(changes) {
    let ret = [];
    for(let i = 0; i < changes.length; i++){
        let change = changes[i];
        if (change.added) ret.push("<ins>");
        else if (change.removed) ret.push("<del>");
        ret.push(escapeHTML(change.value));
        if (change.added) ret.push("</ins>");
        else if (change.removed) ret.push("</del>");
    }
    return ret.join("");
}
function escapeHTML(s) {
    let n = s;
    n = n.replace(/&/g, "&amp;");
    n = n.replace(/</g, "&lt;");
    n = n.replace(/>/g, "&gt;");
    n = n.replace(/"/g, "&quot;");
    return n;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4X8zR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddenEditJs = require("./HiddenEdit.js");
var _hiddenEditJsDefault = parcelHelpers.interopDefault(_hiddenEditJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("hiddenEdit", function(textObject, config) {
    var gameObject = new (0, _hiddenEditJsDefault.default)(textObject, config);
    // Note: Don't add this game object into scene
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.HiddenEdit", (0, _hiddenEditJsDefault.default));
exports.default = (0, _hiddenEditJsDefault.default);

},{"./HiddenEdit.js":"1fH7U","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1fH7U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddeninputtextJs = require("../../../plugins/hiddeninputtext.js");
var _hiddeninputtextJsDefault = parcelHelpers.interopDefault(_hiddeninputtextJs);
exports.default = (0, _hiddeninputtextJsDefault.default);

},{"../../../plugins/hiddeninputtext.js":"3Sk3G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Sk3G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddenTextEditJs = require("./behaviors/hiddentextedit/HiddenTextEdit.js");
var _hiddenTextEditJsDefault = parcelHelpers.interopDefault(_hiddenTextEditJs);
exports.default = (0, _hiddenTextEditJsDefault.default);

},{"./behaviors/hiddentextedit/HiddenTextEdit.js":"46T02","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46T02":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hiddenTextEditBaseJs = require("./HiddenTextEditBase.js");
var _hiddenTextEditBaseJsDefault = parcelHelpers.interopDefault(_hiddenTextEditBaseJs);
var _numberInputUpdateCallbackJs = require("./defaultcallbacks/NumberInputUpdateCallback.js");
var _numberInputUpdateCallbackJsDefault = parcelHelpers.interopDefault(_numberInputUpdateCallbackJs);
var _getTickDeltaJs = require("../../utils/system/GetTickDelta.js");
var _getTickDeltaJsDefault = parcelHelpers.interopDefault(_getTickDeltaJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Wrap = Phaser.Math.Wrap;
class HiddenTextEdit extends (0, _hiddenTextEditBaseJsDefault.default) {
    constructor(gameObject, config){
        if (config === undefined) config = {};
        if (config.onUpdate === "number") config.onUpdate = (0, _numberInputUpdateCallbackJsDefault.default);
        super(gameObject, config);
        // this.parent = gameObject;
        this.setCursor(GetValue(config, "cursor", "|"));
        this.setCursorFlashDuration(GetValue(config, "cursorFlashDuration", 1000));
        this.cursorFlashTimer = 0;
    }
    initText() {
        this.cursorFlashTimer = 0;
        this.prevCursorPosition = undefined;
        this.setText(this.parent.text);
        this.setCursorPosition();
        return this;
    }
    updateText() {
        var textObject = this.parent;
        var text = this.text;
        if (this.onUpdateCallback) {
            var newText = this.onUpdateCallback(text, textObject, this);
            if (newText != null) text = newText;
        }
        if (this.isOpened && this.hasCursor) {
            // Insert Cursor
            var cursorPosition = this.cursorPosition;
            text = text.substring(0, cursorPosition) + this.cursor + text.substring(cursorPosition);
            if (this.prevCursorPosition !== cursorPosition) // console.log(cursorPosition);
            this.prevCursorPosition = cursorPosition;
        }
        if (textObject.text !== text) {
            textObject.setText(text);
            this.emit("textchange", text, textObject, this);
        }
        return this;
    }
    setCursor(s) {
        this._cursor = s;
        this.hasCursor = s && s !== "";
        return s;
    }
    setCursorFlashDuration(duration) {
        this.cursorFlashDuration = duration;
        return this;
    }
    get cursor() {
        if (!this._isFocused) return this._cursor;
        // Flash Cursor
        var cursor;
        if (this.cursorFlashTimer < this.cursorFlashDuration / 2) cursor = this._cursor;
        else cursor = " ";
        var timerValue = this.cursorFlashTimer + (0, _getTickDeltaJsDefault.default)(this.scene);
        this.cursorFlashTimer = Wrap(timerValue, 0, this.cursorFlashDuration);
        return cursor;
    }
}
exports.default = HiddenTextEdit;

},{"./HiddenTextEditBase.js":"70eFC","./defaultcallbacks/NumberInputUpdateCallback.js":"76BpE","../../utils/system/GetTickDelta.js":"9SgbA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9SgbA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameJs = require("./GetGame.js");
var _getGameJsDefault = parcelHelpers.interopDefault(_getGameJs);
var GetTickDelta = function(game) {
    return (0, _getGameJsDefault.default)(game).loop.delta;
};
exports.default = GetTickDelta;

},{"./GetGame.js":"2z43O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9PauM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxJs = require("./Checkbox.js");
var _checkboxJsDefault = parcelHelpers.interopDefault(_checkboxJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("checkbox", function(x, y, width, height, color, config) {
    var gameObject = new (0, _checkboxJsDefault.default)(this.scene, x, y, width, height, color, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Checkbox", (0, _checkboxJsDefault.default));
exports.default = (0, _checkboxJsDefault.default);

},{"./Checkbox.js":"3gDN4","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gDN4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxJs = require("../../../plugins/checkbox.js");
var _checkboxJsDefault = parcelHelpers.interopDefault(_checkboxJs);
exports.default = (0, _checkboxJsDefault.default);

},{"../../../plugins/checkbox.js":"iylLK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iylLK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxJs = require("./gameobjects/shape/checkbox/Checkbox.js");
var _checkboxJsDefault = parcelHelpers.interopDefault(_checkboxJs);
exports.default = (0, _checkboxJsDefault.default);

},{"./gameobjects/shape/checkbox/Checkbox.js":"4m8Cl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4m8Cl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxShapeJs = require("./CheckboxShape.js");
var _checkboxShapeJsDefault = parcelHelpers.interopDefault(_checkboxShapeJs);
var _buttonJs = require("../../../input/button/Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Checkbox extends (0, _checkboxShapeJsDefault.default) {
    constructor(scene, x, y, width, height, color, config){
        super(scene, x, y, width, height, color, config);
        this._click = new (0, _buttonJsDefault.default)(this, GetValue(config, "click"));
        this._click.on("click", function() {
            this.toggleValue();
        }, this);
        this.setReadOnly(GetValue(config, "readOnly", false));
    }
    get readOnly() {
        return !this._click.enable;
    }
    set readOnly(value) {
        this._click.enable = !value;
    }
    setReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.readOnly = enable;
        return this;
    }
}
exports.default = Checkbox;

},{"./CheckboxShape.js":"lwYG9","../../../input/button/Button.js":"k9qbm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwYG9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultBoxFillColor = 0x005cb2;
const DefaultCheckerColor = 0xffffff;
class CheckboxShape extends (0, _baseShapesJsDefault.default) {
    constructor(scene, x, y, width, height, color, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            color = GetValue(config, "color", DefaultBoxFillColor);
        } else if (IsPlainObject(color)) {
            config = color;
            color = GetValue(config, "color", DefaultBoxFillColor);
        }
        super(scene, x, y, width, height);
        this.type = "rexCheckbox";
        if (color === undefined) color = DefaultBoxFillColor;
        this.setBoxShape(GetValue(config, "circleBox", false));
        this.setBoxFillStyle(color, GetValue(config, "boxFillAlpha", 1));
        this.setUncheckedBoxFillStyle(GetValue(config, "uncheckedColor", null), GetValue(config, "uncheckedBoxFillAlpha", 1));
        this.setBoxStrokeStyle(GetValue(config, "boxLineWidth", 4), GetValue(config, "boxStrokeColor", color), GetValue(config, "boxStrokeAlpha", 1));
        this.setUncheckedBoxStrokeStyle(this.boxLineWidth, GetValue(config, "uncheckedBoxStrokeColor", this.boxStrokeColor), GetValue(config, "uncheckedBoxStrokeAlpha", this.boxStrokeAlpha));
        this.setCheckerStyle(GetValue(config, "checkerColor", DefaultCheckerColor), GetValue(config, "checkerAlpha", 1));
        this.setBoxSize(GetValue(config, "boxSize", 1));
        this.setCheckerSize(GetValue(config, "checkerSize", 1));
        this.setCheckerAnimationDuration(GetValue(config, "animationDuration", 150));
        this.buildShapes();
        var value = GetValue(config, "checked");
        if (value === undefined) value = GetValue(config, "value", false);
        this.setValue(value);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        value = !!value;
        if (this._value === value) return;
        this.dirty = true;
        this._value = value;
        if (value) this.playCheckerAnimation();
        else this.stopCheckerAnimation();
        this.emit("valuechange", value);
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    toggleValue() {
        this.setValue(!this.value);
        return this;
    }
    get checked() {
        return this.value;
    }
    set checked(value) {
        this.value = value;
    }
    setChecked(checked) {
        if (checked === undefined) checked = true;
        this.setValue(checked);
        return this;
    }
    toggleChecked() {
        this.toggleValue();
        return this;
    }
    get checkerAnimProgress() {
        return this._checkerAnimProgress;
    }
    set checkerAnimProgress(value) {
        if (this._checkerAnimProgress === value) return;
        this._checkerAnimProgress = value;
        this.dirty = true;
    }
}
Object.assign(CheckboxShape.prototype, (0, _methodsJsDefault.default));
exports.default = CheckboxShape;

},{"../shapes/BaseShapes.js":"fM8Fj","./methods/Methods.js":"6nuUh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fM8Fj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _renderJs = require("./render/Render.js");
var _renderJsDefault = parcelHelpers.interopDefault(_renderJs);
var _clearJs = require("../../../utils/object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
const Shape = Phaser.GameObjects.Shape;
const RemoveItem = Phaser.Utils.Array.Remove;
class BaseShapes extends Shape {
    constructor(scene, x, y, width, height){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 2;
        if (height === undefined) height = width;
        super(scene, "rexShapes", []);
        this._width = -1;
        this._height = -1;
        this.dirty = true;
        this.isSizeChanged = true;
        this.shapes = {};
        this.setPosition(x, y);
        this.setSize(width, height);
        this.updateDisplayOrigin();
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this.setSize(value, this._height);
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this.setSize(this._width, value);
    }
    setDirty(value) {
        if (value === undefined) value = true;
        this.dirty = value;
        return this;
    }
    setSize(width, height) {
        this.isSizeChanged = this.isSizeChanged || this._width !== width || this._height !== height;
        this.dirty = this.dirty || this.isSizeChanged;
        this._width = width;
        this._height = height;
        this.updateDisplayOrigin();
        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = width;
            input.hitArea.height = height;
        }
        return this;
    }
    resize(width, height) {
        this.setSize(width, height);
        return this;
    }
    get fillColor() {
        return this._fillColor;
    }
    set fillColor(value) {
        this.setFillStyle(value, this._fillAlpha);
    }
    get fillAlpha() {
        return this._fillAlpha;
    }
    set fillAlpha(value) {
        this.setFillStyle(this._fillColor, value);
    }
    setFillStyle(color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.fillColor !== color || this.fillAlpha !== alpha;
        this._fillColor = color;
        this._fillAlpha = alpha;
        return this;
    }
    get lineWidth() {
        return this._lineWidth;
    }
    set lineWidth(value) {
        this.setStrokeStyle(value, this._strokeColor, this._strokeAlpha);
    }
    get strokeColor() {
        return this._strokeColor;
    }
    set strokeColor(value) {
        this.setStrokeStyle(this._lineWidth, value, this._strokeAlpha);
    }
    get strokeAlpha() {
        return this._strokeAlpha;
    }
    set strokeAlpha(value) {
        this.setStrokeStyle(this._lineWidth, this._strokeColor, value);
    }
    setStrokeStyle(lineWidth, color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.lineWidth !== lineWidth || this.strokeColor !== color || this.strokeAlpha !== alpha;
        this._lineWidth = lineWidth;
        this._strokeColor = color;
        this._strokeAlpha = alpha;
        return this;
    }
    updateShapes() {}
    updateData() {
        if (!this.dirty) return this;
        this.updateShapes();
        var shapes = this.geom;
        for(var i = 0, cnt = shapes.length; i < cnt; i++){
            var shape = shapes[i];
            if (shape.dirty) shape.updateData();
        }
        this.isSizeChanged = false;
        this.dirty = false;
        return this;
    }
    clear() {
        this.geom.length = 0;
        (0, _clearJsDefault.default)(this.shapes);
        return this;
    }
    getShape(name) {
        return this.shapes[name];
    }
    getShapes() {
        return this.geom;
    }
    addShape(shape) {
        this.geom.push(shape);
        var name = shape.name;
        if (name) this.shapes[name] = shape;
        this.dirty = true;
        return this;
    }
    deleteShape(name) {
        var shape = this.getShape(name);
        if (shape) {
            delete this.shapes[name];
            RemoveItem(this.geom, shape);
        }
        return this;
    }
}
Object.assign(BaseShapes.prototype, (0, _renderJsDefault.default));
exports.default = BaseShapes;

},{"./render/Render.js":"d1Xm6","../../../utils/object/Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1Xm6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webGLRendererJs = require("./WebGLRenderer.js");
var _webGLRendererJsDefault = parcelHelpers.interopDefault(_webGLRendererJs);
var _canvasRendererJs = require("./CanvasRenderer.js");
var _canvasRendererJsDefault = parcelHelpers.interopDefault(_canvasRendererJs);
exports.default = {
    renderWebGL: (0, _webGLRendererJsDefault.default),
    renderCanvas: (0, _canvasRendererJsDefault.default)
};

},{"./WebGLRenderer.js":"5BV1P","./CanvasRenderer.js":"aeDv6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5BV1P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetCalcMatrix = Phaser.GameObjects.GetCalcMatrix;
var WebGLRenderer = function(renderer, src, camera, parentMatrix) {
    src.updateData();
    camera.addToRenderList(src);
    var pipeline = renderer.pipelines.set(src.pipeline);
    var result = GetCalcMatrix(src, camera, parentMatrix);
    var calcMatrix = pipeline.calcMatrix.copyFrom(result.calc);
    var dx = src._displayOriginX;
    var dy = src._displayOriginY;
    var alpha = camera.alpha * src.alpha;
    renderer.pipelines.preBatch(src);
    var shapes = src.geom;
    for(var i = 0, cnt = shapes.length; i < cnt; i++)shapes[i].webglRender(pipeline, calcMatrix, alpha, dx, dy);
    renderer.pipelines.postBatch(src);
};
exports.default = WebGLRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeDv6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const SetTransform = Phaser.Renderer.Canvas.SetTransform;
var CanvasRenderer = function(renderer, src, camera, parentMatrix) {
    src.updateData();
    camera.addToRenderList(src);
    var ctx = renderer.currentContext;
    if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {
        var dx = src._displayOriginX;
        var dy = src._displayOriginY;
        var shapes = src.geom;
        for(var i = 0, cnt = shapes.length; i < cnt; i++)shapes[i].canvasRender(ctx, dx, dy);
        //  Restore the context saved in SetTransform
        ctx.restore();
    }
};
exports.default = CanvasRenderer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6nuUh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _styleMethodsJs = require("./StyleMethods.js");
var _styleMethodsJsDefault = parcelHelpers.interopDefault(_styleMethodsJs);
var _sizeMethodsJs = require("./SizeMethods.js");
var _sizeMethodsJsDefault = parcelHelpers.interopDefault(_sizeMethodsJs);
var _shapesUpdateMethodsJs = require("./ShapesUpdateMethods.js");
var _shapesUpdateMethodsJsDefault = parcelHelpers.interopDefault(_shapesUpdateMethodsJs);
var _checkerAnimationMethodsJs = require("./CheckerAnimationMethods.js");
var _checkerAnimationMethodsJsDefault = parcelHelpers.interopDefault(_checkerAnimationMethodsJs);
var methods = {};
Object.assign(methods, (0, _styleMethodsJsDefault.default), (0, _sizeMethodsJsDefault.default), (0, _shapesUpdateMethodsJsDefault.default), (0, _checkerAnimationMethodsJsDefault.default));
exports.default = methods;

},{"./StyleMethods.js":"cSHSR","./SizeMethods.js":"3Vzng","./ShapesUpdateMethods.js":"8GfwR","./CheckerAnimationMethods.js":"cnnFO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSHSR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setBoxFillStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.boxFillColor !== color || this.boxFillAlpha !== alpha;
        this.boxFillColor = color;
        this.boxFillAlpha = alpha;
        return this;
    },
    setUncheckedBoxFillStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.uncheckedBoxFillColor !== color || this.uncheckedBoxFillAlpha !== alpha;
        this.uncheckedBoxFillColor = color;
        this.uncheckedBoxFillAlpha = alpha;
        return this;
    },
    setBoxStrokeStyle (lineWidth, color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.boxLineWidth !== lineWidth || this.boxStrokeColor !== color || this.boxStrokeAlpha !== alpha;
        this.boxLineWidth = lineWidth;
        this.boxStrokeColor = color;
        this.boxStrokeAlpha = alpha;
        return this;
    },
    setUncheckedBoxStrokeStyle (lineWidth, color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.uncheckedBoxLineWidth !== lineWidth || this.uncheckedBoxStrokeColor !== color || this.uncheckedBoxStrokeAlpha !== alpha;
        this.uncheckedBoxLineWidth = lineWidth;
        this.uncheckedBoxStrokeColor = color;
        this.uncheckedBoxStrokeAlpha = alpha;
        return this;
    },
    setCheckerStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.checkerColor !== color || this.checkAlpha !== alpha;
        this.checkerColor = color;
        this.checkAlpha = alpha;
        return this;
    },
    setBoxShape (isCircleShape) {
        if (isCircleShape === undefined) isCircleShape = false;
        if (this.isCircleShape === isCircleShape) return this;
        this.isCircleShape = isCircleShape;
        this.isSizeChanged = true;
        this.dirty = true;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Vzng":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setBoxSize (size) {
        this.dirty = this.dirty || this.boxSize !== size;
        this.boxSize = size;
        return this;
    },
    setCheckerSize (size) {
        this.dirty = this.dirty || this.checkerSize !== size;
        this.checkerSize = size;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GfwR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geoms = require("../../shapes/geoms");
exports.default = {
    buildShapes () {
        this.addShape(new (0, _geoms.RoundRectangle)().setName("box")).addShape(new (0, _geoms.Lines)().setName("checker"));
    },
    updateShapes () {
        var centerX = this.width / 2, centerY = this.height / 2, radius = Math.min(centerX, centerY);
        var width = radius * 2;
        var x = centerX - radius, y = centerY - radius;
        var boxLineWidth = this.boxLineWidth;
        var checkLineWidth = Math.max(width / 10, 2);
        var boxShape = this.getShape("box");
        var checkerShape = this.getShape("checker");
        // Setup shapes
        if (this.isSizeChanged) {
            // Box
            var posOffset = width * (1 - this.boxSize) / 2;
            var halfBoxLineWidth = boxLineWidth / 2;
            var boxInnerWidth = width * this.boxSize - boxLineWidth;
            boxShape.setTopLeftPosition(x + halfBoxLineWidth + posOffset, y + halfBoxLineWidth + posOffset).setSize(boxInnerWidth, boxInnerWidth);
            if (this.isCircleShape) boxShape.setRadius(boxInnerWidth / 2);
            else boxShape.setRadius(0);
            // Checker
            var posOffset = width * (1 - this.checkerSize) / 2;
            var unit = width * this.checkerSize / 4;
            var u0 = 0, u1 = unit * 1, u2 = unit * 2, u3 = unit * 3;
            checkerShape.startAt(u1, u2).lineTo(u2, u3).lineTo(u3, u1).offset(x + posOffset, y + posOffset).end();
        }
        // Set styles
        if (this.checked) {
            boxShape.fillStyle(this.boxFillColor, this.boxFillAlpha).lineStyle(boxLineWidth, this.boxStrokeColor, this.boxStrokeAlpha);
            checkerShape.lineStyle(checkLineWidth, this.checkerColor);
        } else {
            boxShape.fillStyle(this.uncheckedBoxFillColor, this.uncheckedBoxFillAlpha).lineStyle(boxLineWidth, this.uncheckedBoxStrokeColor, this.uncheckedBoxStrokeAlpha);
            checkerShape.lineStyle();
        }
        // Play checker animation
        if (this.checked) checkerShape.setDisplayPathSegment(this.checkerAnimProgress);
    }
};

},{"../../shapes/geoms":"9zMQi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9zMQi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Arc", ()=>(0, _arcJsDefault.default));
parcelHelpers.export(exports, "Circle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "Curve", ()=>(0, _curveJsDefault.default));
parcelHelpers.export(exports, "Ellipse", ()=>(0, _ellipseJsDefault.default));
parcelHelpers.export(exports, "Line", ()=>(0, _lineJsDefault.default));
parcelHelpers.export(exports, "Lines", ()=>(0, _linesJsDefault.default));
parcelHelpers.export(exports, "Rectangle", ()=>(0, _rectangleJsDefault.default));
parcelHelpers.export(exports, "RoundRectangle", ()=>(0, _roundRectangleJsDefault.default));
parcelHelpers.export(exports, "Triangle", ()=>(0, _triangleJsDefault.default));
var _arcJs = require("./lines/arc/Arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
var _circleJs = require("./lines/arc/Circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _curveJs = require("./lines/Curve.js");
var _curveJsDefault = parcelHelpers.interopDefault(_curveJs);
var _ellipseJs = require("./lines/arc/Ellipse.js");
var _ellipseJsDefault = parcelHelpers.interopDefault(_ellipseJs);
var _lineJs = require("./lines/Line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _linesJs = require("./lines/Lines.js");
var _linesJsDefault = parcelHelpers.interopDefault(_linesJs);
var _rectangleJs = require("./rectangle/Rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _roundRectangleJs = require("./lines/roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _triangleJs = require("./triangle/Triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);

},{"./lines/arc/Arc.js":"dHRtO","./lines/arc/Circle.js":"d27en","./lines/Curve.js":"4XeVQ","./lines/arc/Ellipse.js":"829Gl","./lines/Line.js":"eJdKR","./lines/Lines.js":"gZnRD","./rectangle/Rectangle.js":"dkhhP","./lines/roundrectangle/RoundRectangle.js":"glu4p","./triangle/Triangle.js":"jSsBT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dHRtO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathBaseJs = require("../PathBase.js");
var _pathBaseJsDefault = parcelHelpers.interopDefault(_pathBaseJs);
var _arcToJs = require("../../../../../../geom/pathdata/ArcTo.js");
var _arcToJsDefault = parcelHelpers.interopDefault(_arcToJs);
var _fillStyleCanvasJs = require("../../../../utils/render/FillStyleCanvas.js");
var _fillStyleCanvasJsDefault = parcelHelpers.interopDefault(_fillStyleCanvasJs);
var _lineStyleCanvasJs = require("../../../../utils/render/LineStyleCanvas.js");
var _lineStyleCanvasJsDefault = parcelHelpers.interopDefault(_lineStyleCanvasJs);
const DegToRad = Phaser.Math.DegToRad;
class Arc extends (0, _pathBaseJsDefault.default) {
    constructor(x, y, radiusX, radiusY, startAngle, endAngle, anticlockwise, pie){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (radiusX === undefined) radiusX = 0;
        if (radiusY === undefined) radiusY = 0;
        if (startAngle === undefined) startAngle = 0;
        if (endAngle === undefined) endAngle = 360;
        if (anticlockwise === undefined) anticlockwise = false;
        if (pie === undefined) pie = false;
        super();
        this.setCenterPosition(x, y);
        this.setRadius(radiusX, radiusY);
        this.setAngle(startAngle, endAngle, anticlockwise);
        this.setPie(pie);
        this.setIterations(32);
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this.dirty = this.dirty || this._x !== value;
        this._x = value;
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this.dirty = this.dirty || this._y !== value;
        this._y = value;
    }
    setCenterPosition(x, y) {
        if (y === undefined) y = x;
        this.x = x;
        this.y = y;
        return this;
    }
    get radiusX() {
        return this._radiusX;
    }
    set radiusX(value) {
        this.dirty = this.dirty || this._radiusX !== value;
        this._radiusX = value;
    }
    get radiusY() {
        return this._radiusY;
    }
    set radiusY(value) {
        this.dirty = this.dirty || this._radiusY !== value;
        this._radiusY = value;
    }
    setRadius(radiusX, radiusY) {
        if (radiusY === undefined) radiusY = radiusX;
        this.radiusX = radiusX;
        this.radiusY = radiusY;
        return this;
    }
    get startAngle() {
        return this._startAngle;
    }
    set startAngle(value) {
        this.dirty = this.dirty || this._startAngle !== value;
        this._startAngle = value;
    }
    get endAngle() {
        return this._endAngle;
    }
    set endAngle(value) {
        this.dirty = this.dirty || this._endAngle !== value;
        this._endAngle = value;
    }
    get anticlockwise() {
        return this._anticlockwise;
    }
    set anticlockwise(value) {
        this.dirty = this.dirty || this._anticlockwise !== value;
        this._anticlockwise = value;
    }
    setAngle(startAngle, endAngle, anticlockwise) {
        // startAngle, endAngle in degrees
        if (anticlockwise === undefined) anticlockwise = false;
        this.startAngle = startAngle;
        this.endAngle = endAngle;
        this.anticlockwise = anticlockwise;
        return this;
    }
    get pie() {
        return this._pie;
    }
    set pie(value) {
        this.dirty = this.dirty || this._pie !== value;
        this._pie = value;
    }
    setPie(pie) {
        if (pie === undefined) pie = true;
        this.pie = pie;
        return this;
    }
    get iterations() {
        return this._iterations;
    }
    set iterations(value) {
        this.dirty = this.dirty || this._iterations !== value;
        this._iterations = value;
    }
    setIterations(iterations) {
        this.iterations = iterations;
        return this;
    }
    updateData() {
        this.pathData.length = 0;
        if (this.pie) this.pathData.push(this.x, this.y);
        (0, _arcToJsDefault.default)(this.x, this.y, this.radiusX, this.radiusY, this.startAngle, this.endAngle, this.anticlockwise, this.iterations, this.pathData);
        if (this.pie) this.pathData.push(this.x, this.y);
        this.pathData.push(this.pathData[0], this.pathData[1]);
        super.updateData();
        return this;
    }
    canvasRender(ctx, dx, dy) {
        ctx.beginPath();
        var x = this.x - dx, y = this.y - dy, startAngle = DegToRad(this.startAngle), endAngle = DegToRad(this.endAngle);
        if (this.pie) {
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(startAngle) * this.radiusX, y + Math.sin(startAngle) * this.radiusY);
        }
        ctx.ellipse(x, y, this.radiusX, this.radiusY, 0, startAngle, endAngle, this.anticlockwise);
        if (this.pie) ctx.lineTo(x, y);
        if (this.isFilled) {
            (0, _fillStyleCanvasJsDefault.default)(ctx, this);
            ctx.fill();
        }
        if (this.isStroked) {
            (0, _lineStyleCanvasJsDefault.default)(ctx, this);
            ctx.stroke();
        }
    }
}
exports.default = Arc;

},{"../PathBase.js":"jzSRC","../../../../../../geom/pathdata/ArcTo.js":"12vFH","../../../../utils/render/FillStyleCanvas.js":"1wMk1","../../../../utils/render/LineStyleCanvas.js":"i6waM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzSRC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGeomJs = require("../base/BaseGeom.js");
var _baseGeomJsDefault = parcelHelpers.interopDefault(_baseGeomJs);
var _fillPathWebGLJs = require("../../../utils/render/FillPathWebGL.js");
var _fillPathWebGLJsDefault = parcelHelpers.interopDefault(_fillPathWebGLJs);
var _strokePathWebGLJs = require("../../../utils/render/StrokePathWebGL.js");
var _strokePathWebGLJsDefault = parcelHelpers.interopDefault(_strokePathWebGLJs);
var _fillStyleCanvasJs = require("../../../utils/render/FillStyleCanvas.js");
var _fillStyleCanvasJsDefault = parcelHelpers.interopDefault(_fillStyleCanvasJs);
var _lineStyleCanvasJs = require("../../../utils/render/LineStyleCanvas.js");
var _lineStyleCanvasJsDefault = parcelHelpers.interopDefault(_lineStyleCanvasJs);
const Earcut = Phaser.Geom.Polygon.Earcut;
class PathBase extends (0, _baseGeomJsDefault.default) {
    constructor(){
        super();
        this.pathData = [];
        this.pathIndexes = [];
        this.closePath = false;
    }
    updateData() {
        this.pathIndexes = Earcut(this.pathData);
        super.updateData();
        return this;
    }
    webglRender(pipeline, calcMatrix, alpha, dx, dy) {
        if (this.isFilled) (0, _fillPathWebGLJsDefault.default)(pipeline, calcMatrix, this, alpha, dx, dy);
        if (this.isStroked) (0, _strokePathWebGLJsDefault.default)(pipeline, this, alpha, dx, dy);
    }
    canvasRender(ctx, dx, dy) {
        var path = this.pathData;
        var pathLength = path.length - 1;
        var px1 = path[0] - dx;
        var py1 = path[1] - dy;
        ctx.beginPath();
        ctx.moveTo(px1, py1);
        if (!this.closePath) pathLength -= 2;
        for(var i = 2; i < pathLength; i += 2){
            var px2 = path[i] - dx;
            var py2 = path[i + 1] - dy;
            ctx.lineTo(px2, py2);
        }
        if (this.closePath) ctx.closePath();
        if (this.isFilled) {
            (0, _fillStyleCanvasJsDefault.default)(ctx, this);
            ctx.fill();
        }
        if (this.isStroked) {
            (0, _lineStyleCanvasJsDefault.default)(ctx, this);
            ctx.stroke();
        }
    }
}
exports.default = PathBase;

},{"../base/BaseGeom.js":"ehwM8","../../../utils/render/FillPathWebGL.js":"6n7Tk","../../../utils/render/StrokePathWebGL.js":"iiBta","../../../utils/render/FillStyleCanvas.js":"1wMk1","../../../utils/render/LineStyleCanvas.js":"i6waM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ehwM8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _styleMethodsJs = require("./StyleMethods.js");
var _styleMethodsJsDefault = parcelHelpers.interopDefault(_styleMethodsJs);
var _dataMethodsJs = require("../../../../../utils/data/DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
class BaseGeom {
    constructor(){
        this.name = undefined;
        this.dirty = true;
        this.data = undefined;
        this.isFilled = false;
        this.fillColor = undefined;
        this.fillAlpha = 1;
        this.isStroked = false;
        this.lineWidth = 1;
        this.strokeColor = undefined;
        this.strokeAlpha = 1;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    reset() {
        this.fillStyle().lineStyle();
        return this;
    }
    webglRender(pipeline, calcMatrix, alpha, dx, dy) {}
    canvasRender(ctx, dx, dy) {}
    updateData() {
        this.dirty = false;
    }
}
Object.assign(BaseGeom.prototype, (0, _styleMethodsJsDefault.default), (0, _dataMethodsJsDefault.default));
exports.default = BaseGeom;

},{"./StyleMethods.js":"6pQxd","../../../../../utils/data/DataMethods.js":"kSQ7j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pQxd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FillStyle = function(color, alpha) {
    if (color == null) this.isFilled = false;
    else {
        if (alpha === undefined) alpha = 1;
        this.isFilled = true;
        this.fillColor = color;
        this.fillAlpha = alpha;
    }
    return this;
};
var LineStyle = function(lineWidth, color, alpha) {
    if (lineWidth == null || color == null) this.isStroked = false;
    else {
        if (alpha === undefined) alpha = 1;
        this.isStroked = true;
        this.lineWidth = lineWidth;
        this.strokeColor = color;
        this.strokeAlpha = alpha;
    }
    return this;
};
exports.default = {
    fillStyle: FillStyle,
    lineStyle: LineStyle
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d27en":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arcJs = require("./Arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
class Circle extends (0, _arcJsDefault.default) {
    constructor(x, y, radius){
        super(x, y, radius, radius, 0, 360);
    }
}
exports.default = Circle;

},{"./Arc.js":"dHRtO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4XeVQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathBaseJs = require("./PathBase.js");
var _pathBaseJsDefault = parcelHelpers.interopDefault(_pathBaseJs);
class Curve extends (0, _pathBaseJsDefault.default) {
    constructor(curve){
        super();
        this.setCurve(curve);
        this.setIterations(32);
    }
    get curve() {
        return this._curve;
    }
    set curve(value) {
        this.dirty = this.dirty || this._curve !== value;
        this._curve = value;
    }
    setCurve(curve) {
        this.curve = curve;
        return this;
    }
    get iterations() {
        return this._iterations;
    }
    set iterations(value) {
        this.dirty = this.dirty || this._iterations !== value;
        this._iterations = value;
    }
    setIterations(iterations) {
        this.iterations = iterations;
        return this;
    }
    updateData() {
        this.pathData.length = 0;
        var points = this.curve.getPoints(this.iterations);
        for(var i = 0, cnt = points.length; i < cnt; i++)this.pathData.push(points[i].x, points[i].y);
        this.pathData.push(points[0].x, points[0].y);
        super.updateData();
        return this;
    }
}
exports.default = Curve;

},{"./PathBase.js":"jzSRC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"829Gl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arcJs = require("./Arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
class Ellipse extends (0, _arcJsDefault.default) {
    constructor(x, y, radiusX, radiusY){
        super(x, y, radiusX, radiusY, 0, 360);
    }
}
exports.default = Ellipse;

},{"./Arc.js":"dHRtO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJdKR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathBaseJs = require("./PathBase.js");
var _pathBaseJsDefault = parcelHelpers.interopDefault(_pathBaseJs);
class Line extends (0, _pathBaseJsDefault.default) {
    constructor(x0, y0, x1, y1){
        if (x0 === undefined) x0 = 0;
        if (y0 === undefined) y0 = 0;
        if (x1 === undefined) x1 = 0;
        if (y1 === undefined) y1 = 0;
        super();
        this.setP0(x0, y0);
        this.setP1(x1, y1);
    }
    get x0() {
        return this._x0;
    }
    set x0(value) {
        this.dirty = this.dirty || this._x0 !== value;
        this._x0 = value;
    }
    get y0() {
        return this._y0;
    }
    set y0(value) {
        this.dirty = this.dirty || this._y0 !== value;
        this._y0 = value;
    }
    setP0(x, y) {
        this.x0 = x;
        this.y0 = y;
        return this;
    }
    get x1() {
        return this._x1;
    }
    set x1(value) {
        this.dirty = this.dirty || this._x1 !== value;
        this._x1 = value;
    }
    get y1() {
        return this._y1;
    }
    set y1(value) {
        this.dirty = this.dirty || this._y1 !== value;
        this._y1 = value;
    }
    setP1(x, y) {
        this.x1 = x;
        this.y1 = y;
        return this;
    }
    updateData() {
        this.pathData.length = 0;
        this.pathData.push(this.x0, this.y0);
        this.pathData.push(this.x1, this.y1);
        this.pathData.push(this.x0, this.y0);
        super.updateData();
        return this;
    }
}
exports.default = Line;

},{"./PathBase.js":"jzSRC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZnRD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathBaseJs = require("./PathBase.js");
var _pathBaseJsDefault = parcelHelpers.interopDefault(_pathBaseJs);
var _pathDataBuilderJs = require("../../../../../geom/pathdata/PathDataBuilder/PathDataBuilder.js");
var _pathDataBuilderJsDefault = parcelHelpers.interopDefault(_pathDataBuilderJs);
class Lines extends (0, _pathBaseJsDefault.default) {
    constructor(){
        super();
        this.builder = new (0, _pathDataBuilderJsDefault.default)(this.pathData);
    }
    get iterations() {
        return this.builder.iterations;
    }
    set iterations(value) {
        this.dirty = this.dirty || this.builder.iterations !== value;
        this.builder.setIterations(value);
    }
    setIterations(iterations) {
        this.iterations = iterations;
        return this;
    }
    get lastPointX() {
        return this.builder.lastPointX;
    }
    get lastPointY() {
        return this.builder.lastPointY;
    }
    start() {
        this.builder.start();
        this.dirty = true;
        return this;
    }
    startAt(x, y) {
        this.builder.startAt(x, y);
        this.dirty = true;
        return this;
    }
    lineTo(x, y, relative) {
        this.builder.lineTo(x, y, relative);
        this.dirty = true;
        return this;
    }
    verticalLineTo(x, relative) {
        this.builder.verticalLineTo(x, relative);
        this.dirty = true;
        return this;
    }
    horizontalLineTo(y, relative) {
        this.builder.horizontalLineTo(y, relative);
        this.dirty = true;
        return this;
    }
    ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise) {
        this.builder.ellipticalArc(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise);
        this.dirty = true;
        return this;
    }
    arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise) {
        this.builder.arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise);
        this.dirty = true;
        return this;
    }
    quadraticBezierTo(cx, cy, x, y) {
        this.builder.quadraticBezierTo(cx, cy, x, y);
        this.dirty = true;
        return this;
    }
    smoothQuadraticBezierTo(x, y) {
        this.builder.smoothQuadraticBezierTo(x, y);
        this.dirty = true;
        return this;
    }
    cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y) {
        this.builder.cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y);
        this.dirty = true;
        return this;
    }
    smoothCubicBezierCurveTo(cx1, cy1, x, y) {
        this.builder.smoothCubicBezierCurveTo(cx1, cy1, x, y);
        this.dirty = true;
        return this;
    }
    close() {
        this.builder.close();
        this.closePath = this.builder.closePath;
        this.dirty = true;
        return this;
    }
    end() {
        this.builder.end();
        this.dirty = true;
        return this;
    }
    rotateAround(centerX, centerY, angle) {
        this.builder.rotateAround(centerX, centerY, angle);
        this.dirty = true;
        return this;
    }
    scale(centerX, centerY, scaleX, scaleY) {
        this.builder.scale(centerX, centerY, scaleX, scaleY);
        this.dirty = true;
        return this;
    }
    offset(x, y) {
        this.builder.offset(x, y);
        this.dirty = true;
        return this;
    }
    toPolygon(polygon) {
        return this.builder.toPolygon(polygon);
    }
    appendPathFrom(src, startT, endT) {
        this.builder.appendFromPathSegment(src.builder, startT, endT);
        return this;
    }
    copyPathFrom(src, startT, endT) {
        this.builder.clear().appendFromPathSegment(src.builder, startT, endT);
        return this;
    }
    setDisplayPathSegment(startT, endT) {
        this.builder.setDisplayPathSegment(startT, endT);
        return this;
    }
}
exports.default = Lines;

},{"./PathBase.js":"jzSRC","../../../../../geom/pathdata/PathDataBuilder/PathDataBuilder.js":"8P2rw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8P2rw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addPathMethodsJs = require("./AddPathMethods.js");
var _addPathMethodsJsDefault = parcelHelpers.interopDefault(_addPathMethodsJs);
var _transformPointsMethodsJs = require("./TransformPointsMethods.js");
var _transformPointsMethodsJsDefault = parcelHelpers.interopDefault(_transformPointsMethodsJs);
var _savePathDataMethodsJs = require("./SavePathDataMethods.js");
var _savePathDataMethodsJsDefault = parcelHelpers.interopDefault(_savePathDataMethodsJs);
var _pathSegmentMethodsJs = require("./PathSegmentMethods.js");
var _pathSegmentMethodsJsDefault = parcelHelpers.interopDefault(_pathSegmentMethodsJs);
var _graphicsMethodsJs = require("./GraphicsMethods.js");
var _graphicsMethodsJsDefault = parcelHelpers.interopDefault(_graphicsMethodsJs);
var _toPointsJs = require("../ToPoints.js");
var _toPointsJsDefault = parcelHelpers.interopDefault(_toPointsJs);
var _toPolygonJs = require("../ToPolygon.js");
var _toPolygonJsDefault = parcelHelpers.interopDefault(_toPolygonJs);
class PathDataBuilder {
    constructor(pathData){
        if (pathData === undefined) pathData = [];
        this.pathData = pathData;
        this.closePath = false;
        this.setIterations(32);
        this.firstPointX = undefined;
        this.firstPointY = undefined;
        this.lastPointX = undefined;
        this.lastPointY = undefined;
        this.accumulationLengths = undefined;
    }
    setIterations(iterations) {
        this.iterations = iterations;
        return this;
    }
    toPoints() {
        return (0, _toPointsJsDefault.default)(this.pathData);
    }
    toPolygon(polygon) {
        return (0, _toPolygonJsDefault.default)(this.pathData, polygon);
    }
}
Object.assign(PathDataBuilder.prototype, (0, _addPathMethodsJsDefault.default), (0, _transformPointsMethodsJsDefault.default), (0, _savePathDataMethodsJsDefault.default), (0, _pathSegmentMethodsJsDefault.default), (0, _graphicsMethodsJsDefault.default));
exports.default = PathDataBuilder;

},{"./AddPathMethods.js":"9UqKk","./TransformPointsMethods.js":"7Wm6h","./SavePathDataMethods.js":"8B1rh","./PathSegmentMethods.js":"4dnSS","./GraphicsMethods.js":"ju4u8","../ToPoints.js":"lUIxz","../ToPolygon.js":"cld3g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UqKk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _startAtJs = require("../StartAt.js");
var _startAtJsDefault = parcelHelpers.interopDefault(_startAtJs);
var _lineToJs = require("../LineTo.js");
var _lineToJsDefault = parcelHelpers.interopDefault(_lineToJs);
var _arcToJs = require("../ArcTo.js");
var _arcToJsDefault = parcelHelpers.interopDefault(_arcToJs);
var _quadraticBezierToJs = require("../QuadraticBezierTo.js");
var _quadraticBezierToJsDefault = parcelHelpers.interopDefault(_quadraticBezierToJs);
var _cubicBezierCurveToJs = require("../CubicBezierCurveTo.js");
var _cubicBezierCurveToJsDefault = parcelHelpers.interopDefault(_cubicBezierCurveToJs);
var _duplicateLastJs = require("../DuplicateLast.js");
var _duplicateLastJsDefault = parcelHelpers.interopDefault(_duplicateLastJs);
exports.default = {
    clear () {
        this.start();
        return this;
    },
    start () {
        this.startAt();
        return this;
    },
    startAt (x, y) {
        this.restorePathData();
        this.accumulationLengths = undefined;
        (0, _startAtJsDefault.default)(x, y, this.pathData);
        this.firstPointX = x;
        this.firstPointY = y;
        this.lastPointX = x;
        this.lastPointY = y;
        return this;
    },
    lineTo (x, y, relative) {
        if (relative === undefined) relative = false;
        if (relative) {
            x += this.lastPointX;
            y += this.lastPointY;
        }
        (0, _lineToJsDefault.default)(x, y, this.pathData);
        this.lastPointX = x;
        this.lastPointY = y;
        return this;
    },
    verticalLineTo (x, relative) {
        this.lineTo(x, this.lastPointY, relative);
        return this;
    },
    horizontalLineTo (y, relative) {
        this.lineTo(this.lastPointX, y, relative);
        return this;
    },
    ellipticalArc (centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise) {
        if (anticlockwise === undefined) anticlockwise = false;
        (0, _arcToJsDefault.default)(centerX, centerY, radiusX, radiusY, startAngle, endAngle, anticlockwise, this.iterations, this.pathData);
        this.lastPointX = this.pathData[this.pathData.length - 2];
        this.lastPointY = this.pathData[this.pathData.length - 1];
        return this;
    },
    arc (centerX, centerY, radius, startAngle, endAngle, anticlockwise) {
        this.ellipticalArc(centerX, centerY, radius, radius, startAngle, endAngle, anticlockwise);
        return this;
    },
    quadraticBezierTo (cx, cy, x, y) {
        (0, _quadraticBezierToJsDefault.default)(cx, cy, x, y, this.iterations, this.pathData);
        this.lastPointX = x;
        this.lastPointY = y;
        this.lastCX = cx;
        this.lastCY = cy;
        return this;
    },
    smoothQuadraticBezierTo (x, y) {
        var cx = this.lastPointX * 2 - this.lastCX;
        var cy = this.lastPointY * 2 - this.lastCY;
        this.quadraticBezierTo(cx, cy, x, y);
        return this;
    },
    cubicBezierCurveTo (cx0, cy0, cx1, cy1, x, y) {
        (0, _cubicBezierCurveToJsDefault.default)(cx0, cy0, cx1, cy1, x, y, this.iterations, this.pathData);
        this.lastPointX = x;
        this.lastPointY = y;
        this.lastCX = cx1;
        this.lastCY = cy1;
        return this;
    },
    smoothCubicBezierCurveTo (cx1, cy1, x, y) {
        var cx0 = this.lastPointX * 2 - this.lastCX;
        var cy0 = this.lastPointY * 2 - this.lastCY;
        this.cubicBezierCurveTo(cx0, cy0, cx1, cy1, x, y);
        return this;
    },
    close () {
        this.closePath = true;
        return this;
    },
    end () {
        (0, _duplicateLastJsDefault.default)(this.pathData);
        return this;
    }
};

},{"../StartAt.js":"f2SqK","../LineTo.js":"hdsKV","../ArcTo.js":"12vFH","../QuadraticBezierTo.js":"7PkRK","../CubicBezierCurveTo.js":"dQU9o","../DuplicateLast.js":"gIsqZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2SqK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var StartAt = function(x, y, pathData) {
    pathData.length = 0;
    if (x != null) pathData.push(x, y);
    return pathData;
};
exports.default = StartAt;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PkRK":[function(require,module,exports) {
//import QuadraticBezierInterpolation from '../../utils/math/interpolation/QuadraticBezierInterpolation.js';
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const QuadraticBezierInterpolation = Phaser.Math.Interpolation.QuadraticBezier;
var QuadraticBezierTo = function(cx, cy, x, y, iterations, pathData) {
    var pathDataCnt = pathData.length;
    var p0x = pathData[pathDataCnt - 2];
    var p0y = pathData[pathDataCnt - 1];
    for(var i = 1, last = iterations - 1; i <= last; i++){
        var t = i / last;
        pathData.push(QuadraticBezierInterpolation(t, p0x, cx, x), QuadraticBezierInterpolation(t, p0y, cy, y));
    }
    return pathData;
};
exports.default = QuadraticBezierTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQU9o":[function(require,module,exports) {
// import CubicBezierInterpolation from '../../utils/math/interpolation/CubicBezierInterpolation.js';
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const CubicBezierInterpolation = Phaser.Math.Interpolation.CubicBezier;
var CubicBezierCurveTo = function(cx0, cy0, cx1, cy1, x, y, iterations, pathData) {
    var pathDataCnt = pathData.length;
    var p0x = pathData[pathDataCnt - 2];
    var p0y = pathData[pathDataCnt - 1];
    for(var i = 1, last = iterations - 1; i <= last; i++){
        var t = i / last;
        pathData.push(CubicBezierInterpolation(t, p0x, cx0, cx1, x), CubicBezierInterpolation(t, p0y, cy0, cy1, y));
    }
    return pathData;
};
exports.default = CubicBezierCurveTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gIsqZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DuplicateLast = function(pathData) {
    var len = pathData.length;
    if (len < 2) return pathData;
    var lastX = pathData[len - 2];
    var lastY = pathData[len - 1];
    pathData.push(lastX);
    pathData.push(lastY);
    return pathData;
};
exports.default = DuplicateLast;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Wm6h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rotateAroundJs = require("../RotateAround.js");
var _rotateAroundJsDefault = parcelHelpers.interopDefault(_rotateAroundJs);
var _scaleJs = require("../Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var _offsetJs = require("../Offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
const DegToRad = Phaser.Math.DegToRad;
const PointRotateAround = Phaser.Math.RotateAround;
exports.default = {
    rotateAround (centerX, centerY, angle) {
        if (this.pathData.length === 0) return this;
        angle = DegToRad(angle);
        (0, _rotateAroundJsDefault.default)(centerX, centerY, angle, this.pathData);
        var pathDataCnt1 = this.pathData.length;
        this.lastPointX = this.pathData[pathDataCnt1 - 2];
        this.lastPointY = this.pathData[pathDataCnt1 - 1];
        if (this.lastCX !== undefined) {
            var point = {
                x: this.lastCX,
                y: this.lastCY
            };
            PointRotateAround(point, centerX, centerY, angle);
            this.lastCX = point.x;
            this.lastCY = point.y;
        }
        return this;
    },
    scale (centerX, centerY, scaleX, scaleY) {
        if (this.pathData.length === 0) return this;
        (0, _scaleJsDefault.default)(centerX, centerY, scaleX, scaleY, this.pathData);
        this.lastPointX = this.pathData[pathDataCnt - 2];
        this.lastPointY = this.pathData[pathDataCnt - 1];
        if (this.lastCX !== undefined) {
            var x = this.lastCX - centerX;
            var y = this.lastCY - centerY;
            x *= scaleX;
            y *= scaleY;
            this.lastCX = x + centerX;
            this.lastCY = y + centerY;
        }
        return this;
    },
    offset (x, y) {
        (0, _offsetJsDefault.default)(x, y, this.pathData);
        return this;
    }
};

},{"../RotateAround.js":"60AKT","../Scale.js":"64AQV","../Offset.js":"3BtS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60AKT":[function(require,module,exports) {
//import PointRotateAround from '../../utils/math/RotateAround.js';
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const PointRotateAround = Phaser.Math.RotateAround;
var RotateAround = function(centerX, centerY, angle, pathData) {
    var point = {
        x: 0,
        y: 0
    };
    for(var i = 0, cnt = pathData.length - 1; i < cnt; i += 2){
        point.x = pathData[i];
        point.y = pathData[i + 1];
        PointRotateAround(point, centerX, centerY, angle);
        pathData[i] = point.x;
        pathData[i + 1] = point.y;
    }
    return pathData;
};
exports.default = RotateAround;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64AQV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Scale = function(centerX, centerY, scaleX, scaleY, pathData) {
    for(var i = 0, cnt = pathData.length - 1; i < cnt; i += 2){
        var x = pathData[i] - centerX;
        var y = pathData[i + 1] - centerY;
        x *= scaleX;
        y *= scaleY;
        pathData[i] = x + centerX;
        pathData[i + 1] = y + centerY;
    }
    return pathData;
};
exports.default = Scale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BtS1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Offset = function(x, y, pathData) {
    for(var i = 0, cnt = pathData.length - 1; i < cnt; i += 2){
        pathData[i] += x;
        pathData[i + 1] += y;
    }
    return pathData;
};
exports.default = Offset;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8B1rh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyJs = require("../../../utils/array/Copy.js");
var _copyJsDefault = parcelHelpers.interopDefault(_copyJs);
exports.default = {
    savePathData () {
        if (this.pathDataSaved) return this;
        this.pathDataSave = [
            ...this.pathData
        ];
        this.pathData.length = 0;
        this.pathDataSaved = true;
        return this;
    },
    restorePathData () {
        if (!this.pathDataSaved) return this;
        (0, _copyJsDefault.default)(this.pathData, this.pathDataSave);
        this.pathDataSave = undefined;
        this.pathDataSaved = false;
        return this;
    }
};

},{"../../../utils/array/Copy.js":"hiamy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hiamy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Copy = function(dest, src, startIdx, endIdx) {
    if (startIdx === undefined) startIdx = 0;
    if (endIdx === undefined) endIdx = src.length;
    dest.length = endIdx - startIdx;
    for(var i = 0, len = dest.length; i < len; i++)dest[i] = src[i + startIdx];
    return dest;
};
exports.default = Copy;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dnSS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _duplicateLast = require("../DuplicateLast");
var _duplicateLastDefault = parcelHelpers.interopDefault(_duplicateLast);
const DistanceBetween = Phaser.Math.Distance.Between;
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
var AppendFromPathSegment = function(srcPathData, accumulationLengths, startT, endT, destPathData) {
    if (endT === undefined) {
        endT = startT;
        startT = 0;
    }
    startT = WrapT(startT);
    endT = WrapT(endT);
    if (startT === endT) return;
    var totalPathLength = accumulationLengths[accumulationLengths.length - 1];
    var startL = totalPathLength * startT;
    var endL = totalPathLength * endT;
    if (startT < endT) AddPathSegment(srcPathData, accumulationLengths, startL, endL, destPathData);
    else {
        AddPathSegment(srcPathData, accumulationLengths, startL, totalPathLength, destPathData);
        AddPathSegment(srcPathData, accumulationLengths, 0, endL, destPathData);
    }
    (0, _duplicateLastDefault.default)(destPathData);
};
var AddPathSegment = function(srcPathData, accumulationLengths, startL, endL, destPathData) {
    var skipState = startL > 0;
    for(var i = 0, cnt = accumulationLengths.length; i < cnt; i++){
        var pIdx = i * 2;
        var d = accumulationLengths[i];
        if (skipState) {
            if (d < startL) continue;
            else if (d == startL) skipState = false;
            else {
                var deltaD = d - accumulationLengths[i - 1];
                var t = 1 - (d - startL) / deltaD;
                destPathData.push(GetInterpolation(srcPathData, pIdx - 2, pIdx, t));
                destPathData.push(GetInterpolation(srcPathData, pIdx - 1, pIdx + 1, t));
                skipState = false;
            }
        }
        if (d <= endL) {
            destPathData.push(srcPathData[pIdx]);
            destPathData.push(srcPathData[pIdx + 1]);
            if (d === endL) break;
        } else {
            var deltaD = d - accumulationLengths[i - 1];
            var t = 1 - (d - endL) / deltaD;
            destPathData.push(GetInterpolation(srcPathData, pIdx - 2, pIdx, t));
            destPathData.push(GetInterpolation(srcPathData, pIdx - 1, pIdx + 1, t));
            break;
        }
    }
};
var GetInterpolation = function(pathData, i0, i1, t) {
    var p0 = pathData[i0], p1 = pathData[i1];
    return Linear(p0, p1, t);
};
var WrapT = function(t) {
    if (t === 0) return 0;
    else if (t % 1 === 0) return 1;
    return Wrap(t, 0, 1);
};
exports.default = {
    updateAccumulationLengths () {
        if (this.accumulationLengths == null) this.accumulationLengths = [];
        else if (this.accumulationLengths.length === this.pathData.length / 2) return this;
        var accumulationLengths = this.accumulationLengths;
        var pathData = this.pathData;
        var prevX, prevY, x, y;
        var d, accumulationLength = 0;
        for(var i = 0, cnt = pathData.length; i < cnt; i += 2){
            x = pathData[i];
            y = pathData[i + 1];
            d = prevX === undefined ? 0 : DistanceBetween(prevX, prevY, x, y);
            accumulationLength += d;
            accumulationLengths.push(accumulationLength);
            prevX = x;
            prevY = y;
        }
        this.totalPathLength = accumulationLength;
        return this;
    },
    setDisplayPathSegment (startT, endT) {
        if (!this.pathDataSaved) {
            this.updateAccumulationLengths();
            this.savePathData();
        }
        this.pathData.length = 0;
        AppendFromPathSegment(this.pathDataSave, this.accumulationLengths, startT, endT, this.pathData);
        return this;
    },
    appendFromPathSegment (src, startT, endT) {
        if (startT === undefined) this.pathData.push(...src.pathData);
        else {
            src.updateAccumulationLengths();
            AppendFromPathSegment(src.pathData, src.accumulationLengths, startT, endT, this.pathData);
        }
        this.firstPointX = this.pathData[0];
        this.firstPointY = this.pathData[1];
        this.lastPointX = this.pathData[this.pathData.length - 2];
        this.lastPointY = this.pathData[this.pathData.length - 1];
        return this;
    }
};

},{"../DuplicateLast":"gIsqZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ju4u8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    draw (graphics, isFill, isStroke) {
        var points = this.toPoints();
        if (isFill) graphics.fillPoints(points, this.closePath, this.closePath);
        if (isStroke) graphics.strokePoints(points, this.closePath, this.closePath);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUIxz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ToPoints = function(pathData, points) {
    if (points === undefined) points = [];
    for(var i = 0, cnt = pathData.length - 1; i < cnt; i += 2)points.push({
        x: pathData[i],
        y: pathData[i + 1]
    });
    return points;
};
exports.default = ToPoints;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cld3g":[function(require,module,exports) {
//import Polygon from '../../utils/geom/polygon/Polygon.js';
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Polygon = Phaser.Geom.Polygon;
var ToPolygon = function(pathData, polygon) {
    if (polygon === undefined) polygon = new Polygon();
    polygon.setTo(pathData);
    return polygon;
};
exports.default = ToPolygon;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dkhhP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGeomJs = require("../base/BaseGeom.js");
var _baseGeomJsDefault = parcelHelpers.interopDefault(_baseGeomJs);
var _strokePathWebGLJs = require("../../../utils/render/StrokePathWebGL.js");
var _strokePathWebGLJsDefault = parcelHelpers.interopDefault(_strokePathWebGLJs);
var _fillStyleCanvasJs = require("../../../utils/render/FillStyleCanvas.js");
var _fillStyleCanvasJsDefault = parcelHelpers.interopDefault(_fillStyleCanvasJs);
var _lineStyleCanvasJs = require("../../../utils/render/LineStyleCanvas.js");
var _lineStyleCanvasJsDefault = parcelHelpers.interopDefault(_lineStyleCanvasJs);
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
class Rectangle extends (0, _baseGeomJsDefault.default) {
    constructor(x, y, width, height){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 0;
        if (height === undefined) height = width;
        super();
        this.pathData = [];
        this.closePath = true;
        this.setTopLeftPosition(x, y);
        this.setSize(width, height);
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this.dirty = this.dirty || this._x !== value;
        this._x = value;
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this.dirty = this.dirty || this._y !== value;
        this._y = value;
    }
    setTopLeftPosition(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this.dirty = this.dirty || this._width !== value;
        this._width = value;
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this.dirty = this.dirty || this._height !== value;
        this._height = value;
    }
    setSize(width, height) {
        this.width = width;
        this.height = height;
        return this;
    }
    get centerX() {
        return this.x + this.width / 2;
    }
    set centerX(value) {
        this.x = value - this.width / 2;
    }
    get centerY() {
        return this.y + this.height / 2;
    }
    set centerY(value) {
        this.y = value - this.height / 2;
    }
    setCenterPosition(x, y) {
        this.centerX = x;
        this.centerY = y;
        return this;
    }
    updateData() {
        this.pathData.length = 0;
        var x0 = this.x, x1 = x0 + this.width, y0 = this.y, y1 = y0 + this.height;
        this.pathData.push(x0, y0);
        this.pathData.push(x1, y0);
        this.pathData.push(x1, y1);
        this.pathData.push(x0, y1);
        this.pathData.push(x0, y0);
        super.updateData();
        return this;
    }
    webglRender(pipeline, calcMatrix, alpha, dx, dy) {
        if (this.isFilled) {
            var fillTint = pipeline.fillTint;
            var fillTintColor = GetTint(this.fillColor, this.fillAlpha * alpha);
            fillTint.TL = fillTintColor;
            fillTint.TR = fillTintColor;
            fillTint.BL = fillTintColor;
            fillTint.BR = fillTintColor;
            pipeline.batchFillRect(-dx + this.x, -dy + this.y, this.width, this.height);
        }
        if (this.isStroked) (0, _strokePathWebGLJsDefault.default)(pipeline, this, alpha, dx, dy);
    }
    canvasRender(ctx, dx, dy) {
        if (this.isFilled) {
            (0, _fillStyleCanvasJsDefault.default)(ctx, this);
            ctx.fillRect(-dx, -dy, this.width, this.height);
        }
        if (this.isStroked) {
            (0, _lineStyleCanvasJsDefault.default)(ctx, this);
            ctx.beginPath();
            ctx.rect(-dx, -dy, this.width, this.height);
            ctx.stroke();
        }
    }
}
exports.default = Rectangle;

},{"../base/BaseGeom.js":"ehwM8","../../../utils/render/StrokePathWebGL.js":"iiBta","../../../utils/render/FillStyleCanvas.js":"1wMk1","../../../utils/render/LineStyleCanvas.js":"i6waM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"glu4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathBaseJs = require("../PathBase.js");
var _pathBaseJsDefault = parcelHelpers.interopDefault(_pathBaseJs);
var _arcToJs = require("../../../../../../geom/pathdata/ArcTo.js");
var _arcToJsDefault = parcelHelpers.interopDefault(_arcToJs);
var _lineToJs = require("../../../../../../geom/pathdata/LineTo.js");
var _lineToJsDefault = parcelHelpers.interopDefault(_lineToJs);
var _offsetJs = require("../../../../../../geom/pathdata/Offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class RoundRectangle extends (0, _pathBaseJsDefault.default) {
    constructor(x, y, width, height, radius, iterations){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 0;
        if (height === undefined) height = width;
        if (radius === undefined) radius = 0;
        if (iterations === undefined) iterations = 6;
        super();
        this.setTopLeftPosition(x, y);
        this.setSize(width, height);
        this.setRadius(radius);
        this.setIterations(iterations);
        this.closePath = true;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this.dirty = this.dirty || this._x !== value;
        this._x = value;
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this.dirty = this.dirty || this._y !== value;
        this._y = value;
    }
    setTopLeftPosition(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this.dirty = this.dirty || this._width !== value;
        this._width = value;
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this.dirty = this.dirty || this._height !== value;
        this._height = value;
    }
    setSize(width, height) {
        this.width = width;
        this.height = height;
        return this;
    }
    get centerX() {
        return this.x + this.width / 2;
    }
    set centerX(value) {
        this.x = value - this.width / 2;
    }
    get centerY() {
        return this.y + this.height / 2;
    }
    set centerY(value) {
        this.y = value - this.height / 2;
    }
    setCenterPosition(x, y) {
        this.centerX = x;
        this.centerY = y;
        return this;
    }
    get radiusTL() {
        return this._radiusTL;
    }
    set radiusTL(value) {
        var isConvex = value > 0;
        this.dirty = this.dirty || this._radiusTL !== value || this._convexTL !== isConvex;
        this._convexTL = isConvex;
        this._radiusTL = Math.abs(value);
    }
    get radiusTR() {
        return this._radiusTR;
    }
    set radiusTR(value) {
        var isConvex = value > 0;
        this.dirty = this.dirty || this._radiusTR !== value || this._convexTR !== isConvex;
        this._convexTR = isConvex;
        this._radiusTR = Math.abs(value);
    }
    get radiusBL() {
        return this._radiusBL;
    }
    set radiusBL(value) {
        var isConvex = value > 0;
        this.dirty = this.dirty || this._radiusBL !== value || this._convexBL !== isConvex;
        this._convexBL = isConvex;
        this._radiusBL = Math.abs(value);
    }
    get radiusBR() {
        return this._radiusBR;
    }
    set radiusBR(value) {
        var isConvex = value > 0;
        this.dirty = this.dirty || this._radiusBR !== value || this._convexBR !== isConvex;
        this._convexBR = isConvex;
        this._radiusBR = Math.abs(value);
    }
    get radius() {
        return Math.max(this.radiusTL, this.radiusTR, this.radiusBL, this.radiusBR);
    }
    set radius(value) {
        if (typeof value === "number") {
            this.radiusTL = value;
            this.radiusTR = value;
            this.radiusBL = value;
            this.radiusBR = value;
        } else {
            this.radiusTL = GetValue(value, "tl", 0);
            this.radiusTR = GetValue(value, "tr", 0);
            this.radiusBL = GetValue(value, "bl", 0);
            this.radiusBR = GetValue(value, "br", 0);
        }
    }
    setRadius(radius) {
        if (radius === undefined) radius = 0;
        this.radius = radius;
        return this;
    }
    get iterations() {
        return this._iterations;
    }
    set iterations(value) {
        this.dirty = this.dirty || this._iterations !== value;
        this._iterations = value;
    }
    setIterations(iterations) {
        this.iterations = iterations;
        return this;
    }
    updateData() {
        var pathData = this.pathData;
        pathData.length = 0;
        var width = this.width, height = this.height, radius, iterations = this.iterations + 1;
        // top-left
        radius = this.radiusTL;
        if (radius > 0) {
            if (this._convexTL) {
                var centerX = radius;
                var centerY = radius;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 180, 270, false, iterations, pathData);
            } else {
                var centerX = 0;
                var centerY = 0;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 90, 0, true, iterations, pathData);
            }
        } else (0, _lineToJsDefault.default)(0, 0, pathData);
        // top-right
        radius = this.radiusTR;
        if (radius > 0) {
            if (this._convexTR) {
                var centerX = width - radius;
                var centerY = radius;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 270, 360, false, iterations, pathData);
            } else {
                var centerX = width;
                var centerY = 0;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 180, 90, true, iterations, pathData);
            }
        } else (0, _lineToJsDefault.default)(width, 0, pathData);
        // bottom-right
        radius = this.radiusBR;
        if (radius > 0) {
            if (this._convexBR) {
                var centerX = width - radius;
                var centerY = height - radius;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 0, 90, false, iterations, pathData);
            } else {
                var centerX = width;
                var centerY = height;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 270, 180, true, iterations, pathData);
            }
        } else (0, _lineToJsDefault.default)(width, height, pathData);
        // bottom-left
        radius = this.radiusBL;
        if (radius > 0) {
            if (this._convexBL) {
                var centerX = radius;
                var centerY = height - radius;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 90, 180, false, iterations, pathData);
            } else {
                var centerX = 0;
                var centerY = height;
                (0, _arcToJsDefault.default)(centerX, centerY, radius, radius, 360, 270, true, iterations, pathData);
            }
        } else (0, _lineToJsDefault.default)(0, height, pathData);
        pathData.push(pathData[0], pathData[1]); // Repeat first point to close curve
        (0, _offsetJsDefault.default)(this.x, this.y, pathData);
        super.updateData();
        return this;
    }
}
exports.default = RoundRectangle;

},{"../PathBase.js":"jzSRC","../../../../../../geom/pathdata/ArcTo.js":"12vFH","../../../../../../geom/pathdata/LineTo.js":"hdsKV","../../../../../../geom/pathdata/Offset.js":"3BtS1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSsBT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseGeomJs = require("../base/BaseGeom.js");
var _baseGeomJsDefault = parcelHelpers.interopDefault(_baseGeomJs);
var _strokePathWebGLJs = require("../../../utils/render/StrokePathWebGL.js");
var _strokePathWebGLJsDefault = parcelHelpers.interopDefault(_strokePathWebGLJs);
var _fillStyleCanvasJs = require("../../../utils/render/FillStyleCanvas.js");
var _fillStyleCanvasJsDefault = parcelHelpers.interopDefault(_fillStyleCanvasJs);
var _lineStyleCanvasJs = require("../../../utils/render/LineStyleCanvas.js");
var _lineStyleCanvasJsDefault = parcelHelpers.interopDefault(_lineStyleCanvasJs);
const GetTint = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha;
class Triangle extends (0, _baseGeomJsDefault.default) {
    constructor(x0, y0, x1, y1, x2, y2){
        if (x0 === undefined) x0 = 0;
        if (y0 === undefined) y0 = 0;
        if (x1 === undefined) x1 = 0;
        if (y1 === undefined) y1 = 0;
        if (x2 === undefined) x2 = 0;
        if (y2 === undefined) y2 = 0;
        super();
        this.pathData = [];
        this.closePath = true;
        this.setP0(x0, y0);
        this.setP1(x1, y1);
        this.setP2(x2, y2);
    }
    get x0() {
        return this._x0;
    }
    set x0(value) {
        this.dirty = this.dirty || this._x0 !== value;
        this._x0 = value;
    }
    get y0() {
        return this._y0;
    }
    set y0(value) {
        this.dirty = this.dirty || this._y0 !== value;
        this._y0 = value;
    }
    setP0(x, y) {
        this.x0 = x;
        this.y0 = y;
        return this;
    }
    get x1() {
        return this._x1;
    }
    set x1(value) {
        this.dirty = this.dirty || this._x1 !== value;
        this._x1 = value;
    }
    get y1() {
        return this._y1;
    }
    set y1(value) {
        this.dirty = this.dirty || this._y1 !== value;
        this._y1 = value;
    }
    setP1(x, y) {
        this.x1 = x;
        this.y1 = y;
        return this;
    }
    get x2() {
        return this._x2;
    }
    set x2(value) {
        this.dirty = this.dirty || this._x2 !== value;
        this._x2 = value;
    }
    get y2() {
        return this._y2;
    }
    set y2(value) {
        this.dirty = this.dirty || this._y2 !== value;
        this._y2 = value;
    }
    setP2(x, y) {
        this.dirty = this.dirty || this.x2 !== x || this.y2 !== y;
        this.x2 = x;
        this.y2 = y;
        return this;
    }
    updateData() {
        this.pathData.length = 0;
        this.pathData.push(this.x0, this.y0);
        this.pathData.push(this.x1, this.y1);
        this.pathData.push(this.x2, this.y2);
        this.pathData.push(this.x0, this.y0);
        super.updateData();
        return this;
    }
    webglRender(pipeline, calcMatrix, alpha, dx, dy) {
        if (this.isFilled) {
            var fillTintColor = GetTint(this.fillColor, this.fillAlpha * alpha);
            var x0 = this.x0 - dx;
            var y0 = this.y0 - dy;
            var x1 = this.x1 - dx;
            var y1 = this.y1 - dy;
            var x2 = this.x2 - dx;
            var y2 = this.y2 - dy;
            var tx0 = calcMatrix.getX(x0, y0);
            var ty0 = calcMatrix.getY(x0, y0);
            var tx1 = calcMatrix.getX(x1, y1);
            var ty1 = calcMatrix.getY(x1, y1);
            var tx2 = calcMatrix.getX(x2, y2);
            var ty2 = calcMatrix.getY(x2, y2);
            pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, fillTintColor, fillTintColor, fillTintColor);
        }
        if (this.isStroked) (0, _strokePathWebGLJsDefault.default)(pipeline, this, alpha, dx, dy);
    }
    canvasRender(ctx, dx, dy) {
        var x1 = this.x1 - dx;
        var y1 = this.y1 - dy;
        var x2 = this.x2 - dx;
        var y2 = this.y2 - dy;
        var x3 = this.x3 - dx;
        var y3 = this.y3 - dy;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.lineTo(x3, y3);
        ctx.closePath();
        if (this.isFilled) {
            (0, _fillStyleCanvasJsDefault.default)(ctx, this);
            ctx.fill();
        }
        if (this.isStroked) {
            (0, _lineStyleCanvasJsDefault.default)(ctx, this);
            ctx.stroke();
        }
    }
}
exports.default = Triangle;

},{"../base/BaseGeom.js":"ehwM8","../../../utils/render/StrokePathWebGL.js":"iiBta","../../../utils/render/FillStyleCanvas.js":"1wMk1","../../../utils/render/LineStyleCanvas.js":"i6waM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnnFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskJs = require("../../../../utils/ease/EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
exports.default = {
    setCheckerAnimationDuration (duration) {
        if (duration === undefined) duration = 0;
        this.checkerAnimDuration = duration;
        return this;
    },
    playCheckerAnimation () {
        if (this.checkerAnimProgressTask === undefined) this.checkerAnimProgressTask = new (0, _easeValueTaskJsDefault.default)(this, {
            eventEmitter: null
        });
        this.checkerAnimProgressTask.restart({
            key: "checkerAnimProgress",
            from: 0,
            to: 1,
            duration: this.checkerAnimDuration
        });
        return this;
    },
    stopCheckerAnimation () {
        if (this.checkerAnimProgressTask === undefined) return this;
        this.checkerAnimProgressTask.stop();
        return this;
    }
};

},{"../../../../utils/ease/EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aL3ys":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
class EaseValueTask extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON();
        this.boot();
    }
    start(config) {
        if (this.timer.isRunning) return this;
        var target = this.target;
        this.propertyKey = GetValue(config, "key", "value");
        var currentValue = target[this.propertyKey];
        this.fromValue = GetValue(config, "from", currentValue);
        this.toValue = GetValue(config, "to", currentValue);
        this.setEase(GetValue(config, "ease", this.ease));
        this.setDuration(GetValue(config, "duration", this.duration));
        this.setRepeat(GetValue(config, "repeat", 0));
        this.setDelay(GetValue(config, "delay", 0));
        this.setRepeatDelay(GetValue(config, "repeatDelay", 0));
        this.timer.setDuration(this.duration).setRepeat(this.repeat).setDelay(this.delay).setRepeatDelay(this.repeatDelay);
        target[this.propertyKey] = this.fromValue;
        super.start();
        return this;
    }
    updateGameObject(target, timer) {
        var t = timer.t;
        t = this.easeFn(t);
        target[this.propertyKey] = Linear(this.fromValue, this.toValue, t);
    }
}
exports.default = EaseValueTask;

},{"../componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9qbm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Button extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this._enable = undefined;
        gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.pointer = undefined;
        this.lastClickTime = undefined;
        this.setEnable(GetValue(o, "enable", true));
        this.setMode(GetValue(o, "mode", 1));
        this.setClickInterval(GetValue(o, "clickInterval", 100));
        this.setDragThreshold(GetValue(o, "threshold", undefined));
        return this;
    }
    boot() {
        var gameObject = this.parent;
        gameObject.on("pointerdown", this.onPress, this);
        gameObject.on("pointerup", this.onRelease, this);
        gameObject.on("pointerout", this.onPointOut, this);
        gameObject.on("pointermove", this.onMove, this);
        gameObject.on("pointerover", this.onOver, this);
        gameObject.on("pointerout", this.onOut, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // GameObject events will be removed when this gameObject destroyed 
        // this.parent.on('pointerdown', this.onPress, this);
        // this.parent.on('pointerup', this.onRelease, this);
        // this.parent.on('pointerout', this.onPointOut, this);
        // this.parent.on('pointermove', this.onMove, this);
        this.pointer = null;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) this.cancel();
        this._enable = e;
        var eventName = e ? "enable" : "disable";
        this.emit(eventName, this, this.parent);
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = CLICKMODE[m];
        this.mode = m;
        return this;
    }
    setClickInterval(interval) {
        this.clickInterval = interval; // ms
        return this;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
    // internal
    onPress(pointer, localX, localY, event) {
        if (this.pointer !== undefined) return;
        this.pointer = pointer;
        if (this.mode === 0) this.click(pointer.downTime, pointer, event);
    }
    onRelease(pointer, localX, localY, event) {
        if (this.pointer !== pointer) return;
        if (this.mode === 1) this.click(pointer.upTime, pointer, event);
        this.pointer = undefined;
    }
    onPointOut(pointer, event) {
        if (this.pointer !== pointer) return;
        this.cancel();
    }
    onMove(pointer, localX, localY, event) {
        if (this.pointer !== pointer) return;
        if (this.dragThreshold === undefined) return;
        if (pointer.getDistance() >= this.dragThreshold) this.cancel();
    }
    click(nowTime, pointer, event) {
        if (!this.enable) return this;
        if (nowTime === undefined) {
            // fires 'click' event manually
            this.emit("click", this, this.parent, pointer, event);
            return this;
        }
        this.pointer = undefined;
        var lastClickTime = this.lastClickTime;
        if (lastClickTime !== undefined && nowTime - lastClickTime <= this.clickInterval) return this;
        this.lastClickTime = nowTime;
        this.emit("click", this, this.parent, pointer, event);
        return this;
    }
    cancel() {
        this.pointer = undefined;
        return this;
    }
    onOver(pointer, localX, localY, event) {
        if (!this.enable) return this;
        this.emit("over", this, this.parent, pointer, event);
        return this;
    }
    onOut(pointer, event) {
        if (!this.enable) return this;
        this.emit("out", this, this.parent, pointer, event);
        return this;
    }
}
const CLICKMODE = {
    press: 0,
    pointerdown: 0,
    release: 1,
    pointerup: 1
};
exports.default = Button;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8dBjH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleSwitchJs = require("./ToggleSwitch.js");
var _toggleSwitchJsDefault = parcelHelpers.interopDefault(_toggleSwitchJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("toggleSwitch", function(x, y, width, height, color, config) {
    var gameObject = new (0, _toggleSwitchJsDefault.default)(this.scene, x, y, width, height, color, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ToggleSwitch", (0, _toggleSwitchJsDefault.default));
exports.default = (0, _toggleSwitchJsDefault.default);

},{"./ToggleSwitch.js":"fDqWl","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDqWl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleswitchJs = require("../../../plugins/toggleswitch.js");
var _toggleswitchJsDefault = parcelHelpers.interopDefault(_toggleswitchJs);
exports.default = (0, _toggleswitchJsDefault.default);

},{"../../../plugins/toggleswitch.js":"ikPWu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ikPWu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleSwitchJs = require("./gameobjects/shape/toggleswitch/ToggleSwitch.js");
var _toggleSwitchJsDefault = parcelHelpers.interopDefault(_toggleSwitchJs);
exports.default = (0, _toggleSwitchJsDefault.default);

},{"./gameobjects/shape/toggleswitch/ToggleSwitch.js":"lPXnq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPXnq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleSwitchShapeJs = require("./ToggleSwitchShape.js");
var _toggleSwitchShapeJsDefault = parcelHelpers.interopDefault(_toggleSwitchShapeJs);
var _buttonJs = require("../../../input/button/Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ToggleSwitch extends (0, _toggleSwitchShapeJsDefault.default) {
    constructor(scene, x, y, width, height, color, config){
        super(scene, x, y, width, height, color, config);
        this._click = new (0, _buttonJsDefault.default)(this, GetValue(config, "click"));
        this._click.on("click", function() {
            this.toggleValue();
        }, this);
        this.setReadOnly(GetValue(config, "readOnly", false));
    }
    get readOnly() {
        return !this._click.enable;
    }
    set readOnly(value) {
        this._click.enable = !value;
    }
    setReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.readOnly = enable;
        return this;
    }
}
exports.default = ToggleSwitch;

},{"./ToggleSwitchShape.js":"b0iAv","../../../input/button/Button.js":"k9qbm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0iAv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _grayScaleJs = require("../../../utils/color/GrayScale.js");
var _grayScaleJsDefault = parcelHelpers.interopDefault(_grayScaleJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultTrackFillColor = 0x005cb2;
const DefaultThumbFillColor = 0xffffff;
class ToggleSwitchShape extends (0, _baseShapesJsDefault.default) {
    constructor(scene, x, y, width, height, color, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            color = GetValue(config, "color", DefaultTrackFillColor);
        } else if (IsPlainObject(color)) {
            config = color;
            color = GetValue(config, "color", DefaultTrackFillColor);
        }
        super(scene, x, y, width, height);
        this.type = "rexToggleSwitch";
        if (color === undefined) color = DefaultTrackFillColor;
        this.setTrackFillStyle(color, GetValue(config, "trackFillAlpha", 1));
        this.setFalseValueTrackFillStyle(GetValue(config, "falseValueTrackColor", (0, _grayScaleJsDefault.default)(color)), GetValue(config, "falseValueTrackFillAlpha", 1));
        this.setThumbStyle(GetValue(config, "thumbColor", DefaultThumbFillColor), GetValue(config, "thumbAlpha", 1));
        this.setTrackSize(GetValue(config, "trackWidth", 0.9), GetValue(config, "trackHeight", 0.5));
        this.setTrackRadius(GetValue(config, "trackRadius", this.trackHeight * 0.5));
        var thumbHeight = GetValue(config, "thumbHeight", undefined);
        var thumbWidth = GetValue(config, "thumbWidth", thumbHeight);
        if (thumbWidth === undefined) thumbWidth = this.trackHeight * 0.9;
        this.setThumbSize(thumbWidth, thumbHeight);
        this.setThumbRadius(GetValue(config, "thumbRadius", this.thumbHeight * 0.5));
        this.setThumbPosition(GetValue(config, "thumbLeft", 0.3), GetValue(config, "thumbRight", undefined));
        this.setRTL(GetValue(config, "rtl", false));
        this.setToggleAnimationDuration(GetValue(config, "animationDuration", 150));
        this.buildShapes();
        this.setValue(GetValue(config, "value", false), 0);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        value = !!value;
        if (this._value === value) return;
        this.dirty = true;
        this._value = value;
        this.playToggleAnimation();
        this.emit("valuechange", value);
    }
    setValue(value, duration) {
        if (duration === undefined) duration = this.toggleAnimDuration;
        var durationSave = this.toggleAnimDuration;
        this.toggleAnimDuration = duration;
        this.value = value;
        this.toggleAnimDuration = durationSave;
        return this;
    }
    toggleValue(duration) {
        this.setValue(!this.value, duration);
        return this;
    }
    get toggleAnimProgress() {
        return this._toggleAnimProgress;
    }
    set toggleAnimProgress(value) {
        if (this._toggleAnimProgress === value) return;
        this._toggleAnimProgress = value;
        this.dirty = true;
    }
}
Object.assign(ToggleSwitchShape.prototype, (0, _methodsJsDefault.default));
exports.default = ToggleSwitchShape;

},{"../shapes/BaseShapes.js":"fM8Fj","./methods/Methods.js":"cozpB","../../../utils/color/GrayScale.js":"5Fado","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cozpB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _styleMethodsJs = require("./StyleMethods.js");
var _styleMethodsJsDefault = parcelHelpers.interopDefault(_styleMethodsJs);
var _sizeMethodsJs = require("./SizeMethods.js");
var _sizeMethodsJsDefault = parcelHelpers.interopDefault(_sizeMethodsJs);
var _positionMethodsJs = require("./PositionMethods.js");
var _positionMethodsJsDefault = parcelHelpers.interopDefault(_positionMethodsJs);
var _shapesUpdateMethodsJs = require("./ShapesUpdateMethods.js");
var _shapesUpdateMethodsJsDefault = parcelHelpers.interopDefault(_shapesUpdateMethodsJs);
var _toggleAnimationMethodsJs = require("./ToggleAnimationMethods.js");
var _toggleAnimationMethodsJsDefault = parcelHelpers.interopDefault(_toggleAnimationMethodsJs);
var methods = {};
Object.assign(methods, (0, _styleMethodsJsDefault.default), (0, _sizeMethodsJsDefault.default), (0, _positionMethodsJsDefault.default), (0, _shapesUpdateMethodsJsDefault.default), (0, _toggleAnimationMethodsJsDefault.default));
exports.default = methods;

},{"./StyleMethods.js":"6P3br","./SizeMethods.js":"f1etA","./PositionMethods.js":"2zWSI","./ShapesUpdateMethods.js":"6UVHZ","./ToggleAnimationMethods.js":"aDJaq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6P3br":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setTrackFillStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.trackFillColor !== color || this.trackFillAlpha !== alpha;
        this.trackFillColor = color;
        this.trackFillAlpha = alpha;
        return this;
    },
    setFalseValueTrackFillStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.falseValueTrackColor !== color || this.uncheckedTrackFillAlpha !== alpha;
        this.falseValueTrackColor = color;
        this.falseValueTrackFillAlpha = alpha;
        return this;
    },
    setThumbStyle (color, alpha) {
        if (alpha === undefined) alpha = 1;
        this.dirty = this.dirty || this.thumbColor !== color || this.checkAlpha !== alpha;
        this.thumbColor = color;
        this.thumbAlpha = alpha;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1etA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setTrackSize (width, height) {
        this.dirty = this.dirty || this.trackWidth !== width || this.trackHeight !== height;
        this.trackWidth = width;
        this.trackHeight = height;
        return this;
    },
    setTrackRadius (radius) {
        this.dirty = this.dirty || this.trackRadius !== radius;
        this.trackRadius = radius;
        return this;
    },
    setThumbSize (width, height) {
        if (height === undefined) height = width;
        this.dirty = this.dirty || this.thumbWidth !== width || this.thumbHeight !== height;
        this.thumbWidth = width;
        this.thumbHeight = height;
        return this;
    },
    setThumbRadius (radius) {
        this.dirty = this.dirty || this.thumbRadius !== radius;
        this.thumbRadius = radius;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zWSI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setThumbPosition (left, right) {
        if (right === undefined) right = 1 - left;
        this.thumbLeftX = left;
        this.thumbRightX = right;
        return this;
    },
    setRTL (rtl) {
        if (rtl === undefined) rtl = true;
        this.rtl = rtl;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UVHZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geoms = require("../../shapes/geoms");
var _mixColor = require("../../../../utils/color/MixColor");
var _mixColorDefault = parcelHelpers.interopDefault(_mixColor);
const Linear = Phaser.Math.Linear;
exports.default = {
    buildShapes () {
        this.addShape(new (0, _geoms.RoundRectangle)().setName("track")).addShape(new (0, _geoms.RoundRectangle)().setName("thumb"));
    },
    updateShapes () {
        var width = this.width, height = this.height;
        var toggleAnimProgress = this.value ? this.toggleAnimProgress : 1 - this.toggleAnimProgress;
        // Track
        var trackShape = this.getShape("track");
        if (this.isSizeChanged) {
            var trackWidth = width * this.trackWidth, trackHeight = height * this.trackHeight, trackX = (width - trackWidth) / 2, trackY = (height - trackHeight) / 2, trackRadius = height * this.trackRadius;
            trackShape.setTopLeftPosition(trackX, trackY).setSize(trackWidth, trackHeight).setRadius(trackRadius);
        }
        var trackFillColor = (0, _mixColorDefault.default)(this.falseValueTrackColor, this.trackFillColor, toggleAnimProgress);
        var trackFillAlpha = Linear(this.falseValueTrackFillAlpha, this.trackFillAlpha, toggleAnimProgress);
        trackShape.fillStyle(trackFillColor, trackFillAlpha);
        // Thumb
        var thumbShape = this.getShape("thumb");
        if (this.isSizeChanged) {
            var thumbWidth = width * this.thumbWidth, thumbHeight = height * this.thumbHeight, thumbRadius = height * this.thumbRadius;
            thumbShape.setSize(thumbWidth, thumbHeight).setRadius(thumbRadius);
        }
        var thumbX = Linear(this.thumbLeftX, this.thumbRightX, toggleAnimProgress) * width;
        if (this.rtl) thumbX = width - thumbX;
        var thumbY = height / 2;
        thumbShape.setCenterPosition(thumbX, thumbY);
        thumbShape.fillStyle(this.thumbColor, this.thumbAlpha);
    }
};

},{"../../shapes/geoms":"9zMQi","../../../../utils/color/MixColor":"eiN34","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiN34":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _linearJs = require("../math/Linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _getRGBJs = require("./GetRGB.js");
var MixColor = function(color0, color1, t) {
    var r = (0, _linearJsDefault.default)((0, _getRGBJs.GetR)(color0), (0, _getRGBJs.GetR)(color1), t);
    var g = (0, _linearJsDefault.default)((0, _getRGBJs.GetG)(color0), (0, _getRGBJs.GetG)(color1), t);
    var b = (0, _linearJsDefault.default)((0, _getRGBJs.GetB)(color0), (0, _getRGBJs.GetB)(color1), t);
    return (r & 0xff) << 16 | (g & 0xff) << 8 | b & 0xff;
};
exports.default = MixColor;

},{"../math/Linear.js":"dqzai","./GetRGB.js":"cIJOn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqzai":[function(require,module,exports) {
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */ /**
 * Calculates a linear (interpolation) value over t.
 *
 * @function Phaser.Math.Linear
 * @since 3.0.0
 *
 * @param {number} p0 - The first point.
 * @param {number} p1 - The second point.
 * @param {number} t - The percentage between p0 and p1 to return, represented as a number between 0 and 1.
 *
 * @return {number} The step t% of the way between p0 and p1.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Linear = function(p0, p1, t) {
    return (p1 - p0) * t + p0;
};
exports.default = Linear;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDJaq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskJs = require("../../../../utils/ease/EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
exports.default = {
    setToggleAnimationDuration (duration) {
        if (duration === undefined) duration = 0;
        this.toggleAnimDuration = duration;
        return this;
    },
    playToggleAnimation () {
        if (this.toggleAnimProgressTask === undefined) this.toggleAnimProgressTask = new (0, _easeValueTaskJsDefault.default)(this, {
            eventEmitter: null
        });
        this.toggleAnimProgressTask.restart({
            key: "toggleAnimProgress",
            from: 0,
            to: 1,
            duration: this.toggleAnimDuration
        });
        return this;
    },
    stopToggleAnimation () {
        if (this.toggleAnimProgressTask === undefined) return this;
        this.toggleAnimProgressTask.stop();
        return this;
    }
};

},{"../../../../utils/ease/EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Fado":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getRGBJs = require("./GetRGB.js");
var GrayScale = function(color) {
    var shade = 0.3 * (0, _getRGBJs.GetR)(color) + 0.59 * (0, _getRGBJs.GetG)(color) + 0.11 * (0, _getRGBJs.GetB)(color);
    return (shade & 0xff) << 16 | (shade & 0xff) << 8 | shade & 0xff;
};
exports.default = GrayScale;

},{"./GetRGB.js":"cIJOn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dv9Ud":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("./Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("canvas", function(x, y, width, height) {
    var gameObject = new (0, _canvasJsDefault.default)(this.scene, x, y, width, height);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Canvas", (0, _canvasJsDefault.default));
exports.default = (0, _canvasJsDefault.default);

},{"./Canvas.js":"h0Okn","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0Okn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../../../plugins/canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
exports.default = (0, _canvasJsDefault.default);

},{"../../../plugins/canvas.js":"gU2I7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gU2I7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("./gameobjects/canvas/canvas/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
exports.default = (0, _canvasJsDefault.default);

},{"./gameobjects/canvas/canvas/Canvas.js":"iQJSy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQJSy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _loadImageMethodsJs = require("./LoadImageMethods.js");
var _loadImageMethodsJsDefault = parcelHelpers.interopDefault(_loadImageMethodsJs);
class Canvas extends (0, _canvasJsDefault.default) {
}
Object.assign(Canvas.prototype, (0, _loadImageMethodsJsDefault.default));
exports.default = Canvas;

},{"../canvasbase/Canvas.js":"lBB2L","./LoadImageMethods.js":"4VesN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4VesN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    loadFromURL (url, callback) {
        var self = this;
        var img = new Image();
        img.onload = function() {
            if (self.width !== img.width || self.height !== img.height) self.resize(img.width, img.height);
            else self.clear();
            self.context.drawImage(img, 0, 0);
            self.updateTexture();
            if (callback) callback();
            img.onload = null;
            img.src = "";
            img.remove();
        };
        img.src = url;
        return this;
    },
    loadFromURLPromise (url) {
        var self = this;
        return new Promise(function(resolve, reject) {
            self.loadFromURL(url, resolve);
        });
    },
    loadFromFile (file, callback) {
        var url = URL.createObjectURL(file);
        this.loadFromURL(url, function() {
            URL.revokeObjectURL(url);
            if (callback) callback();
        });
        return this;
    },
    loadFromFilePromise (file) {
        var self = this;
        return new Promise(function(resolve, reject) {
            self.loadFromFile(file, resolve);
        });
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VXX4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circleMaskImageJs = require("./CircleMaskImage.js");
var _circleMaskImageJsDefault = parcelHelpers.interopDefault(_circleMaskImageJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("circleMaskImage", function(x, y, key, frame, config) {
    var gameObject = new (0, _circleMaskImageJsDefault.default)(this.scene, x, y, key, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CircleMaskImage", (0, _circleMaskImageJsDefault.default));
exports.default = (0, _circleMaskImageJsDefault.default);

},{"./CircleMaskImage.js":"dC6mx","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dC6mx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circlemaskimageJs = require("../../../plugins/circlemaskimage.js");
var _circlemaskimageJsDefault = parcelHelpers.interopDefault(_circlemaskimageJs);
exports.default = (0, _circlemaskimageJsDefault.default);

},{"../../../plugins/circlemaskimage.js":"jrL2p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jrL2p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circleMaskImageJs = require("./gameobjects/canvas/circlemaskimage/CircleMaskImage.js");
var _circleMaskImageJsDefault = parcelHelpers.interopDefault(_circleMaskImageJs);
exports.default = (0, _circleMaskImageJsDefault.default);

},{"./gameobjects/canvas/circlemaskimage/CircleMaskImage.js":"8CpOO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CpOO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _addRoundRectanglePathJs = require("../../../utils/canvas/AddRoundRectanglePath.js");
var _addRoundRectanglePathJsDefault = parcelHelpers.interopDefault(_addRoundRectanglePathJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class CircleMaskImage extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, key, frame, config){
        super(scene, x, y);
        this.type = "rexCircleMaskImage";
        this.setTexture(key, frame, config);
    }
    setTexture(key, frame, config) {
        if (typeof frame === "object") {
            config = frame;
            frame = undefined;
        }
        if (typeof config === "string") config = {
            maskType: config
        };
        var maskType = GetValue(config, "maskType", 0);
        var backgroundColor = GetValue(config, "backgroundColor", undefined);
        var strokeColor = GetValue(config, "strokeColor", undefined);
        var defaultStrokeWidth = strokeColor != null ? 10 : 0;
        var strokeWidth = GetValue(config, "strokeWidth", defaultStrokeWidth);
        if (maskType === undefined) maskType = 0;
        else if (typeof maskType === "string") maskType = MASKTYPE[maskType];
        this._textureKey = key;
        this._frameName = frame;
        if (maskType === null) {
            this.loadTexture(key, frame);
            this.dirty = true;
            return this;
        }
        var textureFrame = this.scene.sys.textures.getFrame(key, frame);
        if (!textureFrame) return this;
        // Resize to frame size
        if (textureFrame.cutWidth !== this.width || textureFrame.cutHeight !== this.height) this.setCanvasSize(textureFrame.cutWidth, textureFrame.cutHeight);
        else this.clear();
        var canvas = this.canvas, ctx = this.context;
        var width = canvas.width, height = canvas.height;
        // Fill background
        if (backgroundColor != null) {
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, width, height);
        }
        ctx.save();
        ctx.beginPath();
        // Build clip path 
        var halfStrokeLineWidth = strokeWidth / 2;
        switch(maskType){
            case 1:
                var centerX = Math.floor(width / 2);
                var centerY = Math.floor(height / 2);
                var radiusX = centerX - halfStrokeLineWidth;
                var radiusY = centerY - halfStrokeLineWidth;
                ctx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);
                break;
            case 2:
                var radiusConfig = GetValue(config, "radius", 0);
                var iteration = GetValue(config, "iteration", undefined);
                (0, _addRoundRectanglePathJsDefault.default)(ctx, halfStrokeLineWidth, halfStrokeLineWidth, width - strokeWidth, height - strokeWidth, radiusConfig, iteration);
                break;
            default:
                var centerX = Math.floor(width / 2);
                var centerY = Math.floor(height / 2);
                var radius = Math.min(centerX, centerY) - halfStrokeLineWidth;
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
                break;
        }
        // Draw stroke line
        if (strokeColor != null) {
            ctx.strokeStyle = strokeColor;
            ctx.lineWidth = strokeWidth;
            ctx.stroke();
        }
        // Clip frame image
        ctx.clip();
        this.loadTexture(key, frame);
        ctx.restore();
        this.dirty = true;
        return this;
    }
    resize(width, height) {
        // Don't draw content again.
        this.setDisplaySize(width, height);
        return this;
    }
}
const MASKTYPE = {
    circle: 0,
    ellipse: 1,
    roundRectangle: 2
};
exports.default = CircleMaskImage;

},{"../canvasbase/Canvas.js":"lBB2L","../../../utils/canvas/AddRoundRectanglePath.js":"6zGPl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bx3Hs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alphaMaskImageJs = require("./AlphaMaskImage.js");
var _alphaMaskImageJsDefault = parcelHelpers.interopDefault(_alphaMaskImageJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("alphaMaskImage", function(x, y, key, frame, config) {
    var gameObject = new (0, _alphaMaskImageJsDefault.default)(this.scene, x, y, key, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.AlphaMaskImage", (0, _alphaMaskImageJsDefault.default));
exports.default = (0, _alphaMaskImageJsDefault.default);

},{"./AlphaMaskImage.js":"lKSyz","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKSyz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alphamaskimageJs = require("../../../plugins/alphamaskimage.js");
var _alphamaskimageJsDefault = parcelHelpers.interopDefault(_alphamaskimageJs);
exports.default = (0, _alphamaskimageJsDefault.default);

},{"../../../plugins/alphamaskimage.js":"e9zGY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e9zGY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alphaMaskImageJs = require("./gameobjects/canvas/alphamaskimage/AlphaMaskImage.js");
var _alphaMaskImageJsDefault = parcelHelpers.interopDefault(_alphaMaskImageJs);
exports.default = (0, _alphaMaskImageJsDefault.default);

},{"./gameobjects/canvas/alphamaskimage/AlphaMaskImage.js":"f6Um3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6Um3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class AlphaMaskImage extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, key, frame, config){
        super(scene, x, y);
        this.type = "rexAlphaMaskImage";
        this.maskFrame = null;
        this.setTexture(key, frame, config);
    }
    setTexture(key, frame, config) {
        if (typeof frame === "object") {
            config = frame;
            frame = undefined;
        }
        if (typeof config === "string") config = {
            mask: {
                key: config
            }
        };
        var maskKey = GetValue(config, "mask.key");
        var maskFrame = GetValue(config, "mask.frame");
        var invertMaskAlpha = GetValue(config, "mask.invertAlpha", false);
        var maskScale = GetValue(config, "mask.scale");
        var backgroundColor = GetValue(config, "backgroundColor");
        if (maskKey) {
            this._maskKey = maskKey;
            this._maskFrame = maskFrame;
            this._maskScale = maskScale;
            var texture = maskKey ? this.scene.sys.textures.get(maskKey) : null;
            this.maskFrame = texture ? texture.get(maskFrame) : null;
        }
        this._textureKey = key;
        this._frameName = frame;
        var maskTextureFrame = this.maskFrame;
        if (maskTextureFrame === null) {
            this.loadTexture(key, frame);
            this.dirty = true;
            return this;
        }
        var hasBackgroundColor = backgroundColor != null;
        this.loadTexture(key, frame);
        // Draw mask
        var canvas = this.canvas, ctx = this.context;
        var width = canvas.width, height = canvas.height;
        ctx.save();
        ctx.globalCompositeOperation = invertMaskAlpha ? "destination-out" : "destination-in";
        var maskWidth, maskHeight;
        if (this._maskScale != null) {
            maskWidth = maskTextureFrame.cutWidth * this._maskScale;
            maskHeight = maskTextureFrame.cutHeight * this._maskScale;
        } else {
            maskWidth = width;
            maskHeight = height;
        }
        var maskX = (width - maskWidth) / 2;
        var maskY = (height - maskHeight) / 2;
        this.drawFrame(this._maskKey, this._maskFrame, maskX, maskY, maskWidth, maskHeight);
        ctx.restore();
        if (hasBackgroundColor) {
            ctx.save();
            ctx.globalCompositeOperation = "destination-over";
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, width, height);
            ctx.restore();
        }
        this.dirty = true;
        return this;
    }
    resize(width, height) {
        // Don't draw content again.
        this.setDisplaySize(width, height);
        return this;
    }
}
exports.default = AlphaMaskImage;

},{"../canvasbase/Canvas.js":"lBB2L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3g6QB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularProgressJs = require("./CircularProgress.js");
var _circularProgressJsDefault = parcelHelpers.interopDefault(_circularProgressJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("circularProgress", function(x, y, radius, barColor, value, config) {
    var gameObject = new (0, _circularProgressJsDefault.default)(this.scene, x, y, radius, barColor, value, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CircularProgress", (0, _circularProgressJsDefault.default));
exports.default = (0, _circularProgressJsDefault.default);

},{"./CircularProgress.js":"dB0HM","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dB0HM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularprogressJs = require("../../../plugins/circularprogress.js");
var _circularprogressJsDefault = parcelHelpers.interopDefault(_circularprogressJs);
exports.default = (0, _circularprogressJsDefault.default);

},{"../../../plugins/circularprogress.js":"jgyS6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgyS6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularProgressJs = require("./gameobjects/shape/circularprogress/CircularProgress.js");
var _circularProgressJsDefault = parcelHelpers.interopDefault(_circularProgressJs);
exports.default = (0, _circularProgressJsDefault.default);

},{"./gameobjects/shape/circularprogress/CircularProgress.js":"1LSGu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LSGu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _progressBaseJs = require("../../../utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _shapesUpdateMethodsJs = require("./ShapesUpdateMethods.js");
var _shapesUpdateMethodsJsDefault = parcelHelpers.interopDefault(_shapesUpdateMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const DefaultStartAngle = Phaser.Math.DegToRad(270);
class CircularProgress extends (0, _progressBaseJsDefault.default)((0, _baseShapesJsDefault.default)) {
    constructor(scene, x, y, radius, barColor, value, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            radius = GetValue(config, "radius", 1);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        }
        if (radius === undefined) radius = 1;
        var width = radius * 2;
        super(scene, x, y, width, width);
        this.type = "rexCircularProgress";
        this.bootProgressBase(config);
        this.setRadius(radius);
        this.setTrackColor(GetValue(config, "trackColor", undefined));
        this.setBarColor(barColor);
        this.setCenterColor(GetValue(config, "centerColor", undefined));
        this.setThickness(GetValue(config, "thickness", 0.2));
        this.setStartAngle(GetValue(config, "startAngle", DefaultStartAngle));
        this.setAnticlockwise(GetValue(config, "anticlockwise", false));
        this.buildShapes();
        this.setValue(value);
    }
    resize(width, height) {
        width = Math.floor(Math.min(width, height));
        if (width === this.width) return this;
        super.resize(width, width);
        this.setRadius(width / 2);
        return this;
    }
    get radius() {
        return this._radius;
    }
    set radius(value) {
        this.dirty = this.dirty || this._radius != value;
        this._radius = value;
        var width = value * 2;
        this.resize(width, width);
    }
    setRadius(radius) {
        this.radius = radius;
        return this;
    }
    get trackColor() {
        return this._trackColor;
    }
    set trackColor(value) {
        this.dirty = this.dirty || this._trackColor != value;
        this._trackColor = value;
    }
    setTrackColor(color) {
        this.trackColor = color;
        return this;
    }
    get barColor() {
        return this._barColor;
    }
    set barColor(value) {
        this.dirty = this.dirty || this._barColor != value;
        this._barColor = value;
    }
    setBarColor(color) {
        this.barColor = color;
        return this;
    }
    get startAngle() {
        return this._startAngle;
    }
    set startAngle(value) {
        this.dirty = this.dirty || this._startAngle != value;
        this._startAngle = value;
    }
    setStartAngle(angle) {
        this.startAngle = angle;
        return this;
    }
    get anticlockwise() {
        return this._anticlockwise;
    }
    set anticlockwise(value) {
        this.dirty = this.dirty || this._anticlockwise != value;
        this._anticlockwise = value;
    }
    setAnticlockwise(anticlockwise) {
        if (anticlockwise === undefined) anticlockwise = true;
        this.anticlockwise = anticlockwise;
        return this;
    }
    get thickness() {
        return this._thickness;
    }
    set thickness(value) {
        value = Clamp(value, 0, 1);
        this.dirty = this.dirty || this._thickness != value;
        this._thickness = value;
    }
    setThickness(thickness) {
        this.thickness = thickness;
        return this;
    }
    get centerColor() {
        return this._centerColor;
    }
    set centerColor(value) {
        this.dirty = this.dirty || this._centerColor != value;
        this._centerColor = value;
    }
    setCenterColor(color) {
        this.centerColor = color;
        return this;
    }
}
Object.assign(CircularProgress.prototype, (0, _shapesUpdateMethodsJsDefault.default));
exports.default = CircularProgress;

},{"../shapes/BaseShapes.js":"fM8Fj","../../../utils/progressbase/ProgressBase.js":"dNXIc","./ShapesUpdateMethods.js":"40x1j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNXIc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(BaseClass) {
        class ProgressBase extends BaseClass {
            bootProgressBase(config) {
                this.eventEmitter = GetValue(config, "eventEmitter", this);
                var callback = GetValue(config, "valuechangeCallback", null);
                if (callback !== null) {
                    var scope = GetValue(config, "valuechangeCallbackScope", undefined);
                    this.eventEmitter.on("valuechange", callback, scope);
                }
                this.setEaseValuePropName("value").setEaseValueDuration(GetValue(config, "easeValue.duration", 0)).setEaseValueFunction(GetValue(config, "easeValue.ease", "Linear"));
                return this;
            }
            get value() {
                return this._value;
            }
            set value(value) {
                value = Clamp(value, 0, 1);
                var oldValue = this._value;
                var valueChanged = oldValue != value;
                this.dirty = this.dirty || valueChanged;
                this._value = value;
                if (valueChanged) this.eventEmitter.emit("valuechange", this._value, oldValue, this.eventEmitter);
            }
        }
        Object.assign(ProgressBase.prototype, (0, _progressValueMethodsJsDefault.default), (0, _easeValueMethodsJsDefault.default));
        return ProgressBase;
    });
var _progressValueMethodsJs = require("../progressvalue/ProgressValueMethods.js");
var _progressValueMethodsJsDefault = parcelHelpers.interopDefault(_progressValueMethodsJs);
var _easeValueMethodsJs = require("../ease/EaseValueMethods.js");
var _easeValueMethodsJsDefault = parcelHelpers.interopDefault(_easeValueMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;

},{"../progressvalue/ProgressValueMethods.js":"5zgf6","../ease/EaseValueMethods.js":"bGnEv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zgf6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Linear = Phaser.Math.Linear;
const Percent = Phaser.Math.Percent;
exports.default = {
    setValue (value, min, max) {
        if (value === undefined || value === null) return this;
        if (min !== undefined) value = Percent(value, min, max);
        this.value = value;
        return this;
    },
    addValue (inc, min, max) {
        if (min !== undefined) inc = Percent(inc, min, max);
        this.value += inc;
        return this;
    },
    getValue (min, max) {
        var value = this.value;
        if (min !== undefined) value = Linear(min, max, value);
        return value;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGnEv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskJs = require("./EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
const Percent = Phaser.Math.Percent;
var SetEaseValuePropName = function(name) {
    this.easeValuePropName = name;
    return this;
};
var SetEaseValueDuration = function(duration) {
    this.easeValueDuration = duration;
    return this;
};
var SetEaseValueFunction = function(ease) {
    this.easeFunction = ease;
    return this;
};
var StopEaseValue = function() {
    if (this.easeValueTask) this.easeValueTask.stop();
    return this;
};
var EaseValueTo = function(value, min, max) {
    if (value === undefined || value === null) return this;
    if (min !== undefined) value = Percent(value, min, max);
    if (this.easeValueTask === undefined) this.easeValueTask = new (0, _easeValueTaskJsDefault.default)(this, {
        eventEmitter: null
    });
    this.easeValueTask.restart({
        key: this.easeValuePropName,
        to: value,
        duration: this.easeValueDuration,
        ease: this.easeFunction
    });
    return this;
};
var EaseValueRepeat = function(from, to, repeat, repeatDelay) {
    if (repeat === undefined) repeat = -1;
    if (repeatDelay === undefined) repeatDelay = 0;
    if (this.easeValueTask === undefined) this.easeValueTask = new (0, _easeValueTaskJsDefault.default)(this, {
        eventEmitter: null
    });
    this.easeValueTask.restart({
        key: this.easeValuePropName,
        from: from,
        to: to,
        duration: this.easeValueDuration,
        ease: this.easeFunction,
        repeat: repeat,
        repeatDelay: repeatDelay
    });
    return this;
};
exports.default = {
    setEaseValuePropName: SetEaseValuePropName,
    setEaseValueDuration: SetEaseValueDuration,
    setEaseValueFunction: SetEaseValueFunction,
    stopEaseValue: StopEaseValue,
    easeValueTo: EaseValueTo,
    easeValueRepeat: EaseValueRepeat
};

},{"./EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"40x1j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geoms = require("../shapes/geoms");
const RadToDeg = Phaser.Math.RadToDeg;
exports.default = {
    buildShapes () {
        this.addShape(new (0, _geoms.Circle)().setName("track")).addShape(new (0, _geoms.Arc)().setName("bar")).addShape(new (0, _geoms.Circle)().setName("center"));
    },
    updateShapes () {
        var x = this.radius;
        var lineWidth = this.thickness * this.radius;
        var barRadius = this.radius - lineWidth / 2;
        var centerRadius = this.radius - lineWidth;
        // Track shape
        var trackShape = this.getShape("track");
        if (this.trackColor != null && lineWidth > 0) trackShape.setCenterPosition(x, x).setRadius(barRadius).lineStyle(lineWidth, this.trackColor);
        else trackShape.reset();
        // Bar shape
        var barShape = this.getShape("bar");
        if (this.barColor != null && barRadius > 0) {
            var anticlockwise, startAngle, endAngle;
            if (this.value === 1) {
                anticlockwise = false;
                startAngle = 0;
                endAngle = 361; // overshoot 1
            } else {
                anticlockwise = this.anticlockwise;
                startAngle = RadToDeg(this.startAngle);
                var deltaAngle = 360 * (anticlockwise ? 1 - this.value : this.value);
                endAngle = deltaAngle + startAngle;
            }
            barShape.setCenterPosition(x, x).setRadius(barRadius).setAngle(startAngle, endAngle, anticlockwise).lineStyle(lineWidth, this.barColor);
        } else barShape.reset();
        // Center shape
        var centerShape = this.getShape("center");
        if (this.centerColor && centerRadius > 0) centerShape.setCenterPosition(x, x).setRadius(centerRadius).fillStyle(this.centerColor);
        else centerShape.reset();
    }
};

},{"../shapes/geoms":"9zMQi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zOyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularProgressCanvasJs = require("./CircularProgressCanvas.js");
var _circularProgressCanvasJsDefault = parcelHelpers.interopDefault(_circularProgressCanvasJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("circularProgressCanvas", function(x, y, radius, barColor, value, config) {
    var gameObject = new (0, _circularProgressCanvasJsDefault.default)(this.scene, x, y, radius, barColor, value, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CircularProgressCanvas", (0, _circularProgressCanvasJsDefault.default));
exports.default = (0, _circularProgressCanvasJsDefault.default);

},{"./CircularProgressCanvas.js":"7j58D","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7j58D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularprogresscanvasJs = require("../../../plugins/circularprogresscanvas.js");
var _circularprogresscanvasJsDefault = parcelHelpers.interopDefault(_circularprogresscanvasJs);
exports.default = (0, _circularprogresscanvasJsDefault.default);

},{"../../../plugins/circularprogresscanvas.js":"ddge4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ddge4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _circularProgressJs = require("./gameobjects/canvas/circularprogress/CircularProgress.js");
var _circularProgressJsDefault = parcelHelpers.interopDefault(_circularProgressJs);
exports.default = (0, _circularProgressJsDefault.default);

},{"./gameobjects/canvas/circularprogress/CircularProgress.js":"7x5df","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7x5df":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _progressBaseJs = require("../../../utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _getStyleJs = require("../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
var _drawContentJs = require("./DrawContent.js");
var _drawContentJsDefault = parcelHelpers.interopDefault(_drawContentJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const DefaultStartAngle = Phaser.Math.DegToRad(270);
class CircularProgress extends (0, _progressBaseJsDefault.default)((0, _canvasJsDefault.default)) {
    constructor(scene, x, y, radius, barColor, value, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            radius = GetValue(config, "radius", 1);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        }
        var width = radius * 2;
        super(scene, x, y, width, width);
        this.type = "rexCircularProgressCanvas";
        this.bootProgressBase(config);
        this.setRadius(radius);
        this.setTrackColor(GetValue(config, "trackColor", undefined));
        this.setBarColor(barColor);
        this.setCenterColor(GetValue(config, "centerColor", undefined));
        this.setThickness(GetValue(config, "thickness", 0.2));
        this.setStartAngle(GetValue(config, "startAngle", DefaultStartAngle));
        this.setAnticlockwise(GetValue(config, "anticlockwise", false));
        this.setTextColor(GetValue(config, "textColor", undefined));
        this.setTextStrokeColor(GetValue(config, "textStrokeColor", undefined), GetValue(config, "textStrokeThickness", undefined));
        var textFont = GetValue(config, "textFont", undefined);
        if (textFont) this.setTextFont(textFont);
        else this.setTextFont(GetValue(config, "textSize", "16px"), GetValue(config, "textFamily", "Courier"), GetValue(config, "textStyle", ""));
        this.setTextFormatCallback(GetValue(config, "textFormatCallback", undefined), GetValue(config, "textFormatCallbackScope", undefined));
        this.setValue(value);
    }
    resize(width, height) {
        width = Math.floor(Math.min(width, height));
        if (width === this.width) return this;
        super.resize(width, width);
        this.setRadius(width / 2);
        return this;
    }
    get radius() {
        return this._radius;
    }
    set radius(value) {
        this.dirty = this.dirty || this._radius != value;
        this._radius = value;
        var width = value * 2;
        this.resize(width, width);
    }
    setRadius(radius) {
        this.radius = radius;
        return this;
    }
    get trackColor() {
        return this._trackColor;
    }
    set trackColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._trackColor != value;
        this._trackColor = value;
    }
    setTrackColor(color) {
        this.trackColor = color;
        return this;
    }
    get barColor() {
        return this._barColor;
    }
    set barColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._barColor != value;
        this._barColor = value;
    }
    setBarColor(color) {
        this.barColor = color;
        return this;
    }
    get startAngle() {
        return this._startAngle;
    }
    set startAngle(value) {
        this.dirty = this.dirty || this._startAngle != value;
        this._startAngle = value;
    }
    setStartAngle(angle) {
        this.startAngle = angle;
        return this;
    }
    get anticlockwise() {
        return this._anticlockwise;
    }
    set anticlockwise(value) {
        this.dirty = this.dirty || this._anticlockwise != value;
        this._anticlockwise = value;
    }
    setAnticlockwise(anticlockwise) {
        if (anticlockwise === undefined) anticlockwise = true;
        this.anticlockwise = anticlockwise;
        return this;
    }
    get thickness() {
        return this._thickness;
    }
    set thickness(value) {
        value = Clamp(value, 0, 1);
        this.dirty = this.dirty || this._thickness != value;
        this._thickness = value;
    }
    setThickness(thickness) {
        this.thickness = thickness;
        return this;
    }
    get centerColor() {
        return this._centerColor;
    }
    set centerColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._centerColor != value;
        this._centerColor = value;
    }
    get centerColor2() {
        return this._centerColor2;
    }
    set centerColor2(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._centerColor2 != value;
        this._centerColor2 = value;
    }
    setCenterColor(color, color2) {
        this.centerColor = color;
        this.centerColor2 = color2;
        return this;
    }
    get textColor() {
        return this._textColor;
    }
    set textColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._textColor != value;
        this._textColor = value;
    }
    setTextColor(color) {
        this.textColor = color;
        return this;
    }
    get textStrokeColor() {
        return this._textStrokeColor;
    }
    set textStrokeColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._textStrokeColor != value;
        this._textStrokeColor = value;
    }
    get textStrokeThickness() {
        return this._textStrokeThickness;
    }
    set textStrokeThickness(value) {
        this.dirty = this.dirty || this._textStrokeThickness != value;
        this._textStrokeThickness = value;
    }
    setTextStrokeColor(color, thickness) {
        if (thickness === undefined) thickness = 2;
        this.textStrokeColor = color;
        this.textStrokeThickness = thickness;
        return this;
    }
    get textFont() {
        return this._textFont;
    }
    set textFont(value) {
        this.dirty = this.dirty || this._textFont != value;
        this._textFont = value;
    }
    setTextFont(fontSize, fontFamily, fontStyle) {
        var font;
        if (fontFamily === undefined) font = fontSize;
        else font = fontStyle + " " + fontSize + " " + fontFamily;
        this.textFont = font;
        return this;
    }
    setTextFormatCallback(callback, scope) {
        this.textFormatCallback = callback;
        this.textFormatCallbackScope = scope;
        return this;
    }
    updateTexture() {
        this.clear();
        (0, _drawContentJsDefault.default).call(this);
        super.updateTexture();
        return this;
    }
    getFormatText(value) {
        if (value === undefined) value = this.value;
        var text;
        if (this.textFormatCallbackScope) text = this.textFormatCallback(value);
        else text = this.textFormatCallback.call(this.textFormatCallbackScope, value);
        return text;
    }
}
exports.default = CircularProgress;

},{"../canvasbase/Canvas.js":"lBB2L","../../../utils/progressbase/ProgressBase.js":"dNXIc","../../../utils/canvas/GetStyle.js":"65BAh","./DrawContent.js":"jluIl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jluIl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawCircleJs = require("../../../utils/canvas/DrawCircle.js");
var _drawCircleJsDefault = parcelHelpers.interopDefault(_drawCircleJs);
var _drawTextJs = require("../../../utils/canvas/DrawText.js");
var _drawTextJsDefault = parcelHelpers.interopDefault(_drawTextJs);
var DrawContent = function() {
    var x = this.radius;
    var lineWidth = this.thickness * this.radius;
    var barRadius = this.radius - lineWidth / 2;
    var centerRadius = this.radius - lineWidth;
    var canvas = this.canvas, context = this.context;
    // Draw track
    if (this.trackColor && lineWidth > 0) {
        context.save();
        (0, _drawCircleJsDefault.default)(canvas, context, x, x, barRadius, barRadius, undefined, this.trackColor, lineWidth);
        context.restore();
    }
    // Draw bar
    if (this.barColor && barRadius > 0) {
        var anticlockwise, startAngle, endAngle;
        if (this.value === 1) {
            anticlockwise = false;
            startAngle = 0;
            endAngle = 2 * Math.PI;
        } else {
            anticlockwise = this.anticlockwise;
            startAngle = this.startAngle;
            var deltaAngle = 2 * Math.PI * (anticlockwise ? 1 - this.value : this.value);
            endAngle = deltaAngle + startAngle;
        }
        context.save();
        (0, _drawCircleJsDefault.default)(canvas, context, x, x, barRadius, barRadius, undefined, this.barColor, lineWidth, startAngle, endAngle, anticlockwise);
        context.restore();
    }
    // Draw center
    if (this.centerColor && centerRadius > 0) {
        var fillStyle;
        if (this.centerColor2) {
            fillStyle = this.context.createRadialGradient(x, x, 0, x, x, centerRadius);
            fillStyle.addColorStop(0, this.centerColor);
            fillStyle.addColorStop(1, this.centerColor2);
        } else fillStyle = this.centerColor;
        context.save();
        (0, _drawCircleJsDefault.default)(canvas, context, x, x, centerRadius, centerRadius, fillStyle);
        context.restore();
    }
    // Draw text
    if (this.textFormatCallback && (this.textColor || this.textStrokeColor)) {
        context.save();
        (0, _drawTextJsDefault.default)(canvas, context, x, x, this.getFormatText(), this.textFont, this.textColor, this.textStrokeColor, this.textStrokeThickness, "center", "middle" // textBaseline
        );
        context.restore();
    }
};
exports.default = DrawContent;

},{"../../../utils/canvas/DrawCircle.js":"hOpgn","../../../utils/canvas/DrawText.js":"lPWq0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hOpgn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DrawCircle = function(canvas, context, x, y, rx, ry, fillStyle, strokeStyle, lineWidth, startAngle, endAngle, anticlockwise) {
    if (startAngle === undefined) startAngle = 0;
    if (endAngle === undefined) endAngle = 2 * Math.PI;
    if (anticlockwise === undefined) anticlockwise = false;
    context.beginPath();
    context.ellipse(x, y, rx, ry, 0, startAngle, endAngle, anticlockwise);
    if (fillStyle != null) {
        context.fillStyle = fillStyle;
        context.fill();
    }
    if (strokeStyle != null) {
        context.strokeStyle = strokeStyle;
        context.lineWidth = lineWidth;
        context.stroke();
    }
};
exports.default = DrawCircle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPWq0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DrawText = function(canvas, context, x, y, text, font, fillStyle, strokeStyle, lineWidth, textAlign, textBaseline) {
    if (lineWidth === undefined && strokeStyle != null) lineWidth = 2;
    if (textAlign === undefined) textAlign = "start";
    if (textBaseline === undefined) textBaseline = "alphabetic";
    context.font = font;
    context.textAlign = textAlign;
    context.textBaseline = textBaseline;
    context.fillStyle = fillStyle;
    context.strokeStyle = strokeStyle;
    context.lineWidth = lineWidth;
    context.lineCap = "round";
    context.lineJoin = "round";
    if (strokeStyle != null && strokeStyle !== "none" && lineWidth > 0) context.strokeText(text, x, y);
    if (fillStyle != null && fillStyle !== "none") context.fillText(text, x, y);
};
exports.default = DrawText;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKSQs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineProgressJs = require("./LineProgress.js");
var _lineProgressJsDefault = parcelHelpers.interopDefault(_lineProgressJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("lineProgress", function(x, y, width, height, barColor, value, config) {
    var gameObject = new (0, _lineProgressJsDefault.default)(this.scene, x, y, width, height, barColor, value, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.LineProgress", (0, _lineProgressJsDefault.default));
exports.default = (0, _lineProgressJsDefault.default);

},{"./LineProgress.js":"kcHCD","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcHCD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineprogressJs = require("../../../plugins/lineprogress.js");
var _lineprogressJsDefault = parcelHelpers.interopDefault(_lineprogressJs);
exports.default = (0, _lineprogressJsDefault.default);

},{"../../../plugins/lineprogress.js":"7g13F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7g13F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineProgressJs = require("./gameobjects/shape/lineprogress/LineProgress.js");
var _lineProgressJsDefault = parcelHelpers.interopDefault(_lineProgressJs);
exports.default = (0, _lineProgressJsDefault.default);

},{"./gameobjects/shape/lineprogress/LineProgress.js":"ihrgv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihrgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _progressBaseJs = require("../../../utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _geoms = require("../shapes/geoms");
var _updateShapesJs = require("./UpdateShapes.js");
var _updateShapesJsDefault = parcelHelpers.interopDefault(_updateShapesJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class LineProgress extends (0, _progressBaseJsDefault.default)((0, _baseShapesJsDefault.default)) {
    constructor(scene, x, y, width, height, barColor, value, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        } else if (IsPlainObject(barColor)) {
            config = barColor;
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        }
        super(scene, x, y, width, height, config);
        this.type = "rexLineProgress";
        this.bootProgressBase(config);
        this.addShape(new (0, _geoms.Lines)().setName("trackFill")).addShape(new (0, _geoms.Lines)().setName("bar")).addShape(new (0, _geoms.Lines)().setName("trackStroke"));
        this.setTrackColor(GetValue(config, "trackColor", undefined));
        this.setBarColor(barColor);
        this.setTrackStroke(GetValue(config, "trackStrokeThickness", 2), GetValue(config, "trackStrokeColor", undefined));
        this.setSkewX(GetValue(config, "skewX", 0));
        this.setRTL(GetValue(config, "rtl", false));
        this.setValue(value);
    }
    get trackColor() {
        return this._trackColor;
    }
    set trackColor(value) {
        this.dirty = this.dirty || this._trackColor != value;
        this._trackColor = value;
    }
    setTrackColor(color) {
        this.trackColor = color;
        return this;
    }
    get trackStrokeColor() {
        return this._trackStrokeColor;
    }
    set trackStrokeColor(value) {
        this.dirty = this.dirty || this._trackStrokeColor != value;
        this._trackStrokeColor = value;
    }
    get trackStrokeThickness() {
        return this._trackStrokeThickness;
    }
    set trackStrokeThickness(value) {
        this.dirty = this.dirty || this._trackStrokeThickness != value;
        this._trackStrokeThickness = value;
    }
    setTrackStroke(lineWidth, color) {
        this.trackStrokeThickness = lineWidth;
        this.trackStrokeColor = color;
        return this;
    }
    get barColor() {
        return this._barColor;
    }
    set barColor(value) {
        this.dirty = this.dirty || this._barColor != value;
        this._barColor = value;
    }
    setBarColor(color) {
        this.barColor = color;
        return this;
    }
    get skewX() {
        return this._skewX;
    }
    set skewX(value) {
        this.dirty = this.dirty || this._skewX != value;
        this._skewX = value;
    }
    setSkewX(value) {
        this.skewX = value;
        return this;
    }
    get rtl() {
        return this._rtl;
    }
    set rtl(value) {
        value = !!value;
        this.dirty = this.dirty || this._rtl != value;
        this._rtl = value;
    }
    setRTL(enable) {
        if (enable === undefined) enable = true;
        this.rtl = enable;
        return this;
    }
}
var Methods = {
    updateShapes: (0, _updateShapesJsDefault.default)
};
Object.assign(LineProgress.prototype, Methods);
exports.default = LineProgress;

},{"../shapes/BaseShapes.js":"fM8Fj","../../../utils/progressbase/ProgressBase.js":"dNXIc","../shapes/geoms":"9zMQi","./UpdateShapes.js":"a8rwF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8rwF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var UpdateShapes = function() {
    var skewX = this.skewX;
    var width = this.width - Math.abs(skewX);
    var height = this.height;
    var trackFill = this.getShape("trackFill");
    trackFill.fillStyle(this.trackColor);
    if (trackFill.isFilled) BuildRectangle(trackFill, 0, 0, width, height, skewX // skewX
    ).close();
    var bar = this.getShape("bar");
    bar.fillStyle(this.barColor);
    if (bar.isFilled) {
        var barX0, barX1;
        if (!this.rtl) {
            barX0 = 0;
            barX1 = width * this.value;
        } else {
            barX0 = width * (1 - this.value);
            barX1 = width;
        }
        BuildRectangle(bar, barX0, 0, barX1, height, skewX // skew
        ).close();
    }
    var trackStroke = this.getShape("trackStroke");
    trackStroke.lineStyle(this.trackStrokeThickness, this.trackStrokeColor);
    if (trackStroke.isStroked) BuildRectangle(trackStroke, 0, 0, width, height, skewX // skewX
    ).end();
};
var BuildRectangle = function(lines, x0, y0, x1, y1, skewX) {
    if (skewX >= 0) lines.startAt(x0 + skewX, y0).lineTo(x1 + skewX, y0).lineTo(x1, y1).lineTo(x0, y1).lineTo(x0 + skewX, y0);
    else lines.startAt(x0, y0).lineTo(x1, y0).lineTo(x1 - skewX, y1).lineTo(x0 - skewX, y1).lineTo(x0, y0);
    return lines;
};
exports.default = UpdateShapes;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2a8jQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineProgressCanvasJs = require("./LineProgressCanvas.js");
var _lineProgressCanvasJsDefault = parcelHelpers.interopDefault(_lineProgressCanvasJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("circularProgressCanvas", function(x, y, width, height, barColor, value, config) {
    var gameObject = new (0, _lineProgressCanvasJsDefault.default)(this.scene, x, y, width, height, barColor, value, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.LineProgressCanvas", (0, _lineProgressCanvasJsDefault.default));
exports.default = (0, _lineProgressCanvasJsDefault.default);

},{"./LineProgressCanvas.js":"aXsrA","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXsrA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineprogresscanvasJs = require("../../../plugins/lineprogresscanvas.js");
var _lineprogresscanvasJsDefault = parcelHelpers.interopDefault(_lineprogresscanvasJs);
exports.default = (0, _lineprogresscanvasJsDefault.default);

},{"../../../plugins/lineprogresscanvas.js":"b2fjG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2fjG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lineProgressJs = require("./gameobjects/canvas/lineprogress/LineProgress.js");
var _lineProgressJsDefault = parcelHelpers.interopDefault(_lineProgressJs);
exports.default = (0, _lineProgressJsDefault.default);

},{"./gameobjects/canvas/lineprogress/LineProgress.js":"j26J7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j26J7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvasbase/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _progressBaseJs = require("../../../utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _getStyleJs = require("../../../utils/canvas/GetStyle.js");
var _getStyleJsDefault = parcelHelpers.interopDefault(_getStyleJs);
var _drawContentJs = require("./DrawContent.js");
var _drawContentJsDefault = parcelHelpers.interopDefault(_drawContentJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class LineProgress extends (0, _progressBaseJsDefault.default)((0, _canvasJsDefault.default)) {
    constructor(scene, x, y, width, height, barColor, value, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        } else if (IsPlainObject(barColor)) {
            config = barColor;
            barColor = GetValue(config, "barColor", undefined);
            value = GetValue(config, "value", 0);
        }
        super(scene, x, y, width, height);
        this.type = "rexLineProgressCanvas";
        this.trackPoints = [];
        this.barPoints = [];
        this.bootProgressBase(config);
        this.setTrackColor(GetValue(config, "trackColor", undefined));
        this.setBarColor(barColor, GetValue(config, "barColor2", undefined), GetValue(config, "isHorizontalGradient", undefined));
        this.setTrackStroke(GetValue(config, "trackStrokeThickness", 2), GetValue(config, "trackStrokeColor", undefined));
        this.setSkewX(GetValue(config, "skewX", 0));
        this.setRTL(GetValue(config, "rtl", false));
        this.setValue(value);
    }
    get trackColor() {
        return this._trackColor;
    }
    set trackColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._trackColor != value;
        this._trackColor = value;
    }
    setTrackColor(color) {
        this.trackColor = color;
        return this;
    }
    get trackStrokeColor() {
        return this._trackStrokeColor;
    }
    set trackStrokeColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._trackStrokeColor != value;
        this._trackStrokeColor = value;
    }
    get trackStrokeThickness() {
        return this._trackStrokeThickness;
    }
    set trackStrokeThickness(value) {
        this.dirty = this.dirty || this._trackStrokeThickness != value;
        this._trackStrokeThickness = value;
    }
    setTrackStroke(lineWidth, color) {
        this.trackStrokeThickness = lineWidth;
        this.trackStrokeColor = color;
        return this;
    }
    get barColor() {
        return this._barColor;
    }
    set barColor(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._barColor != value;
        this._barColor = value;
    }
    get barColor2() {
        return this._barColor2;
    }
    set barColor2(value) {
        value = (0, _getStyleJsDefault.default)(value, this.canvas, this.context);
        this.dirty = this.dirty || this._barColor2 != value;
        this._barColor2 = value;
    }
    get isHorizontalGradient() {
        return this._isHorizontalGradient;
    }
    set isHorizontalGradient(value) {
        this.dirty |= this._isHorizontalGradient != value;
        this._isHorizontalGradient = value;
    }
    setBarColor(color, color2, isHorizontalGradient) {
        if (isHorizontalGradient === undefined) isHorizontalGradient = true;
        this.barColor = color;
        this.barColor2 = color2;
        this.isHorizontalGradient = isHorizontalGradient;
        return this;
    }
    get skewX() {
        return this._skewX;
    }
    set skewX(value) {
        this.dirty = this.dirty || this._skewX != value;
        this._skewX = value;
    }
    setSkewX(value) {
        this.skewX = value;
        return this;
    }
    get rtl() {
        return this._rtl;
    }
    set rtl(value) {
        value = !!value;
        this.dirty = this.dirty || this._rtl != value;
        this._rtl = value;
    }
    setRTL(enable) {
        if (enable === undefined) enable = true;
        this.rtl = enable;
        return this;
    }
    updateTexture() {
        this.clear();
        (0, _drawContentJsDefault.default).call(this);
        super.updateTexture();
        return this;
    }
}
exports.default = LineProgress;

},{"../canvasbase/Canvas.js":"lBB2L","../../../utils/progressbase/ProgressBase.js":"dNXIc","../../../utils/canvas/GetStyle.js":"65BAh","./DrawContent.js":"4EPgE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4EPgE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawPolygonJs = require("../../../utils/canvas/DrawPolygon.js");
var _drawPolygonJsDefault = parcelHelpers.interopDefault(_drawPolygonJs);
var DrawContent = function() {
    var skewX = this.skewX;
    var width = this.width - Math.abs(skewX);
    var height = this.height;
    var canvas = this.canvas, context = this.context;
    // Has track
    if (this.trackColor || this.trackStrokeColor) BuildPolygon(0, 0, width, height, skewX, this.trackPoints);
    // Has bar
    var barX0, barX1;
    if (this.barColor) {
        if (!this.rtl) {
            barX0 = 0;
            barX1 = width * this.value;
        } else {
            barX0 = width * (1 - this.value);
            barX1 = width;
        }
        BuildPolygon(barX0, 0, barX1, height, skewX, this.barPoints);
    }
    if (this.trackColor) {
        context.save();
        (0, _drawPolygonJsDefault.default)(canvas, context, this.trackPoints, this.trackColor);
        context.restore();
    }
    if (this.barColor) {
        context.save();
        var style;
        if (this.barColor2) {
            var grd;
            if (this.isHorizontalGradient) {
                var helfHeight = height / 2;
                grd = context.createLinearGradient(barX0, helfHeight, barX1, helfHeight);
            } else {
                var helfWidth = width / 2;
                grd = context.createLinearGradient(helfWidth, 0, helfWidth, height);
            }
            grd.addColorStop(0, this.rtl ? this.barColor : this.barColor2);
            grd.addColorStop(1, this.rtl ? this.barColor2 : this.barColor);
            style = grd;
        } else style = this.barColor;
        (0, _drawPolygonJsDefault.default)(canvas, context, this.barPoints, style);
        context.restore();
    }
    if (this.trackStrokeColor && this.trackStrokeThickness > 0) {
        context.save();
        (0, _drawPolygonJsDefault.default)(canvas, context, this.trackPoints, undefined, this.trackStrokeColor, this.trackStrokeThickness);
        context.restore();
    }
};
var BuildPolygon = function(x0, y0, x1, y1, skewX, out) {
    if (out === undefined) out = [];
    out.length = 4;
    for(var i = 0; i < 4; i++)if (!out[i]) out[i] = {};
    var p;
    if (skewX >= 0) {
        p = out[0];
        p.x = x0 + skewX;
        p.y = y0;
        p = out[1];
        p.x = x1 + skewX;
        p.y = y0;
        p = out[2];
        p.x = x1;
        p.y = y1;
        p = out[3];
        p.x = x0;
        p.y = y1;
    } else {
        p = out[0];
        p.x = x0;
        p.y = y0;
        p = out[1];
        p.x = x1;
        p.y = y0;
        p = out[2];
        p.x = x1 - skewX;
        p.y = y1;
        p = out[3];
        p.x = x0 - skewX;
        p.y = y1;
    }
    return out;
};
exports.default = DrawContent;

},{"../../../utils/canvas/DrawPolygon.js":"YCYfT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"YCYfT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addPolygonPathJs = require("./AddPolygonPath.js");
var _addPolygonPathJsDefault = parcelHelpers.interopDefault(_addPolygonPathJs);
var DrawPolygon = function(canvas, context, points, fillStyle, strokeStyle, lineWidth, lineJoin) {
    if (lineJoin === undefined) lineJoin = "round";
    (0, _addPolygonPathJsDefault.default)(context, points);
    context.lineJoin = lineJoin;
    if (fillStyle != null) {
        context.fillStyle = fillStyle;
        context.fill();
    }
    if (strokeStyle != null) {
        context.strokeStyle = strokeStyle;
        context.lineWidth = lineWidth;
        context.stroke();
    }
};
exports.default = DrawPolygon;

},{"./AddPolygonPath.js":"gceGS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gceGS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AddPolygonPath = function(context, points) {
    context.save();
    context.beginPath();
    var point = points[0];
    context.moveTo(point.x, point.y);
    for(var i = 1, cnt = points.length; i < cnt; i++){
        point = points[i];
        context.lineTo(point.x, point.y);
    }
    context.closePath();
    context.restore();
};
exports.default = AddPolygonPath;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZjEE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _triangleJs = require("./Triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("triangle", function(x, y, width, height, fillColor, fillAlpha) {
    var gameObject = new (0, _triangleJsDefault.default)(this.scene, x, y, width, height, fillColor, fillAlpha);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Triangle", (0, _triangleJsDefault.default));
exports.default = (0, _triangleJsDefault.default);

},{"./Triangle.js":"dCKra","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dCKra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _triangleJs = require("../../../plugins/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
exports.default = (0, _triangleJsDefault.default);

},{"../../../plugins/triangle.js":"lNKM3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNKM3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _triangleJs = require("./gameobjects/shape/triangle/Triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
exports.default = (0, _triangleJsDefault.default);

},{"./gameobjects/shape/triangle/Triangle.js":"kKaib","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kKaib":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _shapesUpdateMethodsJs = require("./methods/ShapesUpdateMethods.js");
var _shapesUpdateMethodsJsDefault = parcelHelpers.interopDefault(_shapesUpdateMethodsJs);
var _easeDirectionMethodsJs = require("./methods/EaseDirectionMethods.js");
var _easeDirectionMethodsJsDefault = parcelHelpers.interopDefault(_easeDirectionMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
class Triangle extends (0, _baseShapesJsDefault.default) {
    constructor(scene, x, y, width, height, fillColor, fillAlpha){
        var strokeColor, strokeAlpha, strokeWidth, arrowOnly;
        var direction, easeDuration, padding;
        var radius;
        if (IsPlainObject(x)) {
            var config = x;
            x = config.x;
            y = config.y;
            width = config.width;
            height = config.height;
            fillColor = config.color;
            fillAlpha = config.alpha;
            strokeColor = config.strokeColor;
            strokeAlpha = config.strokeAlpha;
            strokeWidth = config.strokeWidth;
            arrowOnly = config.arrowOnly;
            direction = config.direction;
            easeDuration = config.easeDuration;
            padding = config.padding;
            radius = config.radius;
        }
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 1;
        if (height === undefined) height = width;
        if (arrowOnly === undefined) arrowOnly = false;
        if (direction === undefined) direction = 0;
        if (easeDuration === undefined) easeDuration = 0;
        if (padding === undefined) padding = 0;
        if (radius === undefined) radius = undefined;
        super(scene, x, y, width, height);
        this.type = "rexTriangle";
        this.setFillStyle(fillColor, fillAlpha);
        if (strokeColor !== undefined && strokeWidth === undefined) strokeWidth = 2;
        this.setStrokeStyle(strokeWidth, strokeColor, strokeAlpha);
        this.setArrowOnly(arrowOnly);
        this.setDirection(direction, easeDuration);
        this.setPadding(padding);
        this.setRadius(radius);
        this.buildShapes();
    }
    get arrowOnly() {
        return this._arrowOnly;
    }
    set arrowOnly(value) {
        this.dirty = this.dirty || this._arrowOnly != value;
        this._arrowOnly = value;
    }
    setArrowOnly(enable) {
        if (enable === undefined) enable = true;
        this.arrowOnly = enable;
        return this;
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        value = ParseDirection(value);
        if (this._direction === value) return;
        if (this.easeDuration > 0 && this._direction !== undefined) this.previousDirection = this._direction;
        else this.previousDirection = undefined;
        this._direction = value;
        this.verticeAngle = value * 90;
        this.dirty = true;
        if (this.previousDirection !== undefined) this.playEaseDirectionation();
        else this.stopEaseDirection();
    }
    setDirection(direction, easeDuration) {
        if (easeDuration !== undefined) this.setEaseDuration(easeDuration);
        this.direction = direction;
        return this;
    }
    toggleDirection(easeDuration) {
        this.setDirection(this.direction + 2, easeDuration);
        return this;
    }
    get easeDirectionProgress() {
        return this._easeDirectionProgress;
    }
    set easeDirectionProgress(value) {
        if (this._easeDirectionProgress === value) return;
        this._easeDirectionProgress = value;
        this.dirty = true;
    }
    setPadding(left, top, right, bottom) {
        if (typeof left === "object") {
            var config = left;
            //  If they specify x and/or y this applies to all
            var x = GetValue(config, "x", null);
            if (x !== null) {
                left = x;
                right = x;
            } else {
                left = GetValue(config, "left", 0);
                right = GetValue(config, "right", left);
            }
            var y = GetValue(config, "y", null);
            if (y !== null) {
                top = y;
                bottom = y;
            } else {
                top = GetValue(config, "top", 0);
                bottom = GetValue(config, "bottom", top);
            }
        } else {
            if (left === undefined) left = 0;
            if (top === undefined) top = left;
            if (right === undefined) right = left;
            if (bottom === undefined) bottom = top;
        }
        if (this.padding === undefined) this.padding = {};
        this.dirty = this.dirty || this.padding.left != left || this.padding.top != top || this.padding.right != right || this.padding.bottom != bottom;
        this.padding.left = left;
        this.padding.top = top;
        this.padding.right = right;
        this.padding.bottom = bottom;
        // Switch to fit mode
        this.setRadius();
        return this;
    }
    get radius() {
        return this._radius;
    }
    set radius(value) {
        this.dirty = this.dirty || this._radius != value;
        this._radius = value;
    }
    setRadius(radius) {
        this.radius = radius;
        // 0: fit mode
        // 1: circle mode
        this.shapeMode = radius == null ? 0 : 1;
        return this;
    }
    get verticeRotation() {
        return this._verticeRotation;
    }
    set verticeRotation(value) {
        this.dirty = this.dirty || this._verticeRotation != value;
        this._verticeRotation = value;
    }
    setVerticeRotation(rotation) {
        this.verticeRotation = rotation;
        return this;
    }
    get verticeAngle() {
        return RadToDeg(this.verticeRotation);
    }
    set verticeAngle(value) {
        this.verticeRotation = DegToRad(value);
    }
    setVerticeAngle(angle) {
        this.verticeAngle = angle;
        return this;
    }
}
const DirectionNameMap = {
    right: 0,
    down: 1,
    left: 2,
    up: 3
};
var ParseDirection = function(direction) {
    if (typeof direction === "string") direction = DirectionNameMap[direction];
    direction = direction % 4;
    return direction;
};
Object.assign(Triangle.prototype, (0, _shapesUpdateMethodsJsDefault.default), (0, _easeDirectionMethodsJsDefault.default));
exports.default = Triangle;

},{"../shapes/BaseShapes.js":"fM8Fj","./methods/ShapesUpdateMethods.js":"4aMmR","./methods/EaseDirectionMethods.js":"lk0Iw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4aMmR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geoms = require("../../shapes/geoms");
var _drawFitTriangleJs = require("./DrawFitTriangle.js");
var _drawFitTriangleJsDefault = parcelHelpers.interopDefault(_drawFitTriangleJs);
var _drawCircleVerticesTriangle = require("./DrawCircleVerticesTriangle");
var _drawCircleVerticesTriangleDefault = parcelHelpers.interopDefault(_drawCircleVerticesTriangle);
exports.default = {
    buildShapes () {
        this.addShape(new (0, _geoms.Lines)().setName("triangle"));
    },
    updateShapes () {
        // Set style
        var triangle = this.getShape("triangle");
        if (!this.arrowOnly) triangle.fillStyle(this.fillColor, this.fillAlpha).lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha);
        else triangle.fillStyle().lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha);
        // Set points
        if (this.shapeMode === 0) (0, _drawFitTriangleJsDefault.default).call(this);
        else (0, _drawCircleVerticesTriangleDefault.default).call(this);
    }
};

},{"../../shapes/geoms":"9zMQi","./DrawFitTriangle.js":"3qgvg","./DrawCircleVerticesTriangle":"8teJo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3qgvg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
var DrawFitTriangle = function() {
    var triangle = this.getShape("triangle");
    var padding = this.padding;
    var right = this.width - padding.right;
    var left = 0 + padding.left;
    var bottom = this.height - padding.bottom;
    var top = 0 + padding.top;
    var centerX = (left + right) / 2;
    var centerY = (top + bottom) / 2;
    var points = {
        0: {
            a: {
                x: left,
                y: top
            },
            b: {
                x: right,
                y: centerY
            },
            c: {
                x: left,
                y: bottom
            }
        },
        1: {
            a: {
                x: left,
                y: top
            },
            b: {
                x: centerX,
                y: bottom
            },
            c: {
                x: right,
                y: top
            }
        },
        2: {
            a: {
                x: right,
                y: top
            },
            b: {
                x: left,
                y: centerY
            },
            c: {
                x: right,
                y: bottom
            }
        },
        3: {
            a: {
                x: left,
                y: bottom
            },
            b: {
                x: centerX,
                y: top
            },
            c: {
                x: right,
                y: bottom
            }
        }
    };
    var pax, pay, pbx, pby, pcx, pcy;
    if (this.previousDirection === undefined) {
        var currentTrianglePoints = points[this.direction];
        var pa = currentTrianglePoints.a, pb = currentTrianglePoints.b, pc = currentTrianglePoints.c;
        pax = pa.x;
        pay = pa.y;
        pbx = pb.x;
        pby = pb.y;
        pcx = pc.x;
        pcy = pc.y;
    } else {
        var p0 = points[this.previousDirection];
        var p1 = points[this.direction];
        var t = this.easeDirectionProgress;
        pax = Linear(p0.a.x, p1.a.x, t);
        pay = Linear(p0.a.y, p1.a.y, t);
        pbx = Linear(p0.b.x, p1.b.x, t);
        pby = Linear(p0.b.y, p1.b.y, t);
        pcx = Linear(p0.c.x, p1.c.x, t);
        pcy = Linear(p0.c.y, p1.c.y, t);
    }
    triangle.startAt(pax, pay).lineTo(pbx, pby).lineTo(pcx, pcy);
    if (!this.arrowOnly) triangle.close();
    else triangle.end();
};
exports.default = DrawFitTriangle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8teJo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const DegToRad = Phaser.Math.DegToRad;
const Rad120 = DegToRad(120);
var DrawCircleVerticesTriangle = function(triangle) {
    var triangle = this.getShape("triangle");
    var centerX = this.width / 2, centerY = this.height / 2;
    var radius = Math.min(centerX, centerY) * this.radius, verticeRotation = this.verticeRotation;
    triangle.startAt(centerX + radius * Math.cos(verticeRotation + Rad120), centerY + radius * Math.sin(verticeRotation + Rad120)).lineTo(centerX + radius * Math.cos(verticeRotation), centerY + radius * Math.sin(verticeRotation)).lineTo(centerX + radius * Math.cos(verticeRotation - Rad120), centerY + radius * Math.sin(verticeRotation - Rad120));
    if (!this.arrowOnly) triangle.close();
    else triangle.end();
};
exports.default = DrawCircleVerticesTriangle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lk0Iw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskJs = require("../../../../utils/ease/EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
exports.default = {
    setEaseDuration (duration) {
        if (duration === undefined) duration = 0;
        this.easeDuration = duration;
        return this;
    },
    playEaseDirectionation () {
        if (this.easeDirectionProgressTask === undefined) this.easeDirectionProgressTask = new (0, _easeValueTaskJsDefault.default)(this, {
            eventEmitter: null
        });
        this.easeDirectionProgressTask.restart({
            key: "easeDirectionProgress",
            from: 0,
            to: 1,
            duration: this.easeDuration
        });
        return this;
    },
    stopEaseDirection () {
        if (this.easeDirectionProgressTask === undefined) return this;
        this.easeDirectionProgressTask.stop();
        return this;
    }
};

},{"../../../../utils/ease/EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"46rJc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _knobJs = require("./Knob.js");
var _knobJsDefault = parcelHelpers.interopDefault(_knobJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("knob", function(config) {
    var gameObject = new (0, _knobJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Knob", (0, _knobJsDefault.default));
exports.default = (0, _knobJsDefault.default);

},{"./Knob.js":"iSHr7","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iSHr7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _progressBaseJs = require("../../../plugins/utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _circularProgressJs = require("../circularprogress/CircularProgress.js");
var _circularProgressJsDefault = parcelHelpers.interopDefault(_circularProgressJs);
var _onTouchPadJs = require("./input/OnTouchPad.js");
var _onTouchPadJsDefault = parcelHelpers.interopDefault(_onTouchPadJs);
var _onPanPadJs = require("./input/OnPanPad.js");
var _onPanPadJsDefault = parcelHelpers.interopDefault(_onPanPadJs);
var _textObjectMethodsJs = require("./TextObjectMethods.js");
var _textObjectMethodsJsDefault = parcelHelpers.interopDefault(_textObjectMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const SnapTo = Phaser.Math.Snap.To;
class Knob extends (0, _progressBaseJsDefault.default)((0, _overlapSizerJsDefault.default)) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create sizer
        super(scene, config);
        this.type = "rexKnob";
        this.bootProgressBase(config);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var textObject = GetValue(config, "text", undefined);
        if (background) this.addBackground(background);
        // Get text object
        if (textObject) {
            // Don't draw text on knob directly
            config.textColor = undefined;
            config.textStrokeColor = undefined;
            this.setTextFormatCallback(GetValue(config, "textFormatCallback", undefined), GetValue(config, "textFormatCallbackScope", undefined));
        }
        // Create circular progress object
        var knob = new (0, _circularProgressJsDefault.default)(scene, config);
        knob.setDepth(GetValue(config, "knobDepth", 0));
        knob._value = -1; // To trigger text updating
        scene.add.existing(knob);
        this.add(knob, "knob");
        if (textObject) {
            this.add(textObject, "text", "center", 0, false);
            scene.children.moveBelow(knob, textObject); // Move knob below textObject
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("knob", knob);
        this.addChildrenMap("text", textObject);
        this.setEnable(GetValue(config, "enable", undefined));
        this.setGap(GetValue(config, "gap", undefined));
        this.setValue(GetValue(config, "value", 0), GetValue(config, "min", undefined), GetValue(config, "max", undefined));
        // Input
        var inputMode = GetValue(config, "input", 0);
        if (typeof inputMode === "string") inputMode = INPUTMODE[inputMode];
        switch(inputMode){
            case 0:
                (0, _onPanPadJsDefault.default).call(this);
                break;
            case 1:
                (0, _onTouchPadJsDefault.default).call(this);
                break;
        }
    }
    setEnable(enable) {
        if (enable === undefined) enable = true;
        this.enable = enable;
        return this;
    }
    setGap(gap) {
        this.gap = gap;
        return this;
    }
    // Override
    get value() {
        return this.sizerChildren.knob.value;
    }
    // Override
    set value(value) {
        if (this.gap !== undefined) value = SnapTo(value, this.gap);
        var oldValue = this.value;
        this.sizerChildren.knob.value = value;
        var newValue = this.value;
        if (oldValue !== newValue) {
            this.updateText();
            this.eventEmitter.emit("valuechange", newValue, oldValue, this.eventEmitter);
        }
    }
}
const INPUTMODE = {
    pan: 0,
    drag: 0,
    click: 1,
    none: -1
};
Object.assign(Knob.prototype, (0, _textObjectMethodsJsDefault.default));
exports.default = Knob;

},{"../overlapsizer/OverlapSizer.js":"gx7j1","../../../plugins/utils/progressbase/ProgressBase.js":"dNXIc","../circularprogress/CircularProgress.js":"dB0HM","./input/OnTouchPad.js":"dfACc","./input/OnPanPad.js":"1c8in","./TextObjectMethods.js":"2GcZa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gx7j1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSizerJs = require("../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _clearJs = require("../../../plugins/utils/object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
var _indexOfJs = require("../../../plugins/utils/object/IndexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class OverlapSizer extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexOverlapSizer";
        this.sizerChildren = {};
        this.addChildrenMap("items", this.sizerChildren);
    }
    childToKey(gameObject) {
        if (typeof gameObject === "string") {
            var key = gameObject;
            if (this.sizerChildren.hasOwnPropery(key)) return key;
        } else return (0, _indexOfJsDefault.default)(this.sizerChildren, gameObject);
        return null;
    }
}
Object.assign(OverlapSizer.prototype, (0, _methodsJsDefault.default));
exports.default = OverlapSizer;

},{"../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"eN7EW","../../../plugins/utils/object/Clear.js":"7yIf2","../../../plugins/utils/object/IndexOf.js":"hLBen","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHNI2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var _clearJs = require("../../../plugins/utils/object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Base extends (0, _containerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, config){
        super(scene, x, y, 1, 1);
        this.isRexSizer = true;
        this.setMinSize(minWidth, minHeight);
        this.setName(GetValue(config, "name", ""));
        this.rexSizer = {};
        this.space = {};
        this.backgroundChildren = undefined;
        this.sizerChildren = undefined; // [] or {}
        this.childrenMap = {};
        this.layoutedChildren = undefined;
        var anchorConfig = GetValue(config, "anchor", undefined);
        if (anchorConfig) this.setAnchor(anchorConfig);
        this.setInnerPadding(GetValue(config, "space", 0));
        var draggable = GetValue(config, "draggable", false);
        if (draggable) this.setDraggable(draggable);
        this.setSizerEventsEnable(GetValue(config, "sizerEvents", false));
        this.setDirty(true);
        if (GetValue(config, "enableLayer", false)) this.enableLayer();
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        if (fromScene) {
            // In this case, children will be cleared and destroy in scene level
            var sizers = this.getAllChildrenSizers([
                this
            ]);
            for(var i = 0, cnt = sizers.length; i < cnt; i++)sizers[i].sizerEventsEnable = false;
        }
        super.destroy(fromScene);
        (0, _clearJsDefault.default)(this.backgroundChildren);
        (0, _clearJsDefault.default)(this.sizerChildren);
        this.childrenMap = undefined;
        this.space = undefined;
        this.rexSizer = undefined;
        this.layoutedChildren = undefined;
    }
    setMinSize(minWidth, minHeight) {
        this.setMinWidth(minWidth).setMinHeight(minHeight);
        return this;
    }
    setMinWidth(minWidth) {
        if (minWidth == null) minWidth = 0;
        this.minWidth = minWidth;
        return this;
    }
    setMinHeight(minHeight) {
        if (minHeight == null) minHeight = 0;
        this.minHeight = minHeight;
        return this;
    }
    setDirty(dirty) {
        if (dirty === undefined) dirty = true;
        this.dirty = dirty;
        return this;
    }
    setSizerEventsEnable(enable) {
        if (enable === undefined) enable = true;
        this.sizerEventsEnable = enable;
        return this;
    }
    get ignoreLayout() {
        // Skip hidden or !dirty sizer
        return this.rexSizer.hidden || !this.dirty;
    }
    get childrenWidth() {
        if (this._childrenWidth === undefined) this._childrenWidth = this.getChildrenWidth();
        return this._childrenWidth;
    }
    get childrenHeight() {
        if (this._childrenHeight === undefined) this._childrenHeight = this.getChildrenHeight();
        return this._childrenHeight;
    }
    get left() {
        return this.x - (0, _getDisplaySizeJs.GetDisplayWidth)(this) * this.originX;
    }
    set left(value) {
        this.x += value - this.left;
    }
    alignLeft(value) {
        this.left = value;
        return this;
    }
    get right() {
        return this.left + (0, _getDisplaySizeJs.GetDisplayWidth)(this);
    }
    set right(value) {
        this.x += value - this.right;
    }
    alignRight(value) {
        this.right = value;
        return this;
    }
    get centerX() {
        return this.left + (0, _getDisplaySizeJs.GetDisplayWidth)(this) / 2;
    }
    set centerX(value) {
        this.x += value - this.centerX;
    }
    alignCenterX(value) {
        this.centerX = value;
        return this;
    }
    get top() {
        return this.y - (0, _getDisplaySizeJs.GetDisplayHeight)(this) * this.originY;
    }
    set top(value) {
        this.y += value - this.top;
    }
    alignTop(value) {
        this.top = value;
        return this;
    }
    get bottom() {
        return this.top + (0, _getDisplaySizeJs.GetDisplayHeight)(this);
    }
    set bottom(value) {
        this.y += value - this.bottom;
    }
    alignBottom(value) {
        this.bottom = value;
        return this;
    }
    get centerY() {
        return this.top + (0, _getDisplaySizeJs.GetDisplayHeight)(this) / 2;
    }
    set centerY(value) {
        this.y += value - this.centerY;
    }
    alignCenterY(value) {
        this.centerY = value;
        return this;
    }
    get innerLeft() {
        return this.left + this.space.left;
    }
    get innerRight() {
        return this.right - this.space.right;
    }
    get innerTop() {
        return this.top + this.space.top;
    }
    get innerBottom() {
        return this.bottom - this.space.bottom;
    }
    get innerWidth() {
        return this.width - this.space.left - this.space.right;
    }
    get innerHeight() {
        return this.height - this.space.top - this.space.bottom;
    }
    get minInnerWidth() {
        var result = this.minWidth - this.space.left - this.space.right;
        return Math.max(result, 0);
    }
    get minInnerHeight() {
        var result = this.minHeight - this.space.top - this.space.bottom;
        return Math.max(result, 0);
    }
}
Object.assign(Base.prototype, (0, _methodsJsDefault.default));
exports.default = Base;

},{"../container/Container.js":"4qgeZ","./Methods.js":"5bxcT","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","../../../plugins/utils/object/Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qgeZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerliteJs = require("../../../plugins/containerlite.js");
var _containerliteJsDefault = parcelHelpers.interopDefault(_containerliteJs);
exports.default = (0, _containerliteJsDefault.default);

},{"../../../plugins/containerlite.js":"jOzyf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOzyf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerLiteJs = require("./gameobjects/container/containerlite/ContainerLite.js");
var _containerLiteJsDefault = parcelHelpers.interopDefault(_containerLiteJs);
exports.default = (0, _containerLiteJsDefault.default);

},{"./gameobjects/container/containerlite/ContainerLite.js":"kyrI6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyrI6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getParentJs = require("./GetParent.js");
class ContainerLite extends (0, _baseJsDefault.default) {
    constructor(scene, x, y, width, height, children){
        if (Array.isArray(width)) {
            children = width;
            width = undefined;
            height = undefined;
        }
        super(scene, x, y, width, height);
        this.type = "rexContainerLite";
        this.isRexContainerLite = true;
        this.syncChildrenEnable = true;
        this._active = true;
        this._mask = null;
        this._scrollFactorX = 1;
        this._scrollFactorY = 1;
        this.privateRenderLayer = undefined;
        if (children) this.add(children);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.syncChildrenEnable = false; // Don't sync properties changing anymore
        super.destroy(fromScene);
        if (this.privateRenderLayer) {
            this.privateRenderLayer.list.length = 0; // Remove all children without trigger callback
            this.privateRenderLayer.destroy();
        }
    }
    resize(width, height) {
        this.setSize(width, height);
        return this;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        if (this._x === value) return;
        this._x = value;
        this.syncPosition();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        if (this._y === value) return;
        this._y = value;
        this.syncPosition();
    }
    // Override
    get rotation() {
        return super.rotation;
    }
    set rotation(value) {
        if (this.rotation === value) return;
        super.rotation = value;
        this.syncPosition();
    }
    // Override
    get scaleX() {
        return super.scaleX;
    }
    set scaleX(value) {
        if (this.scaleX === value) return;
        super.scaleX = value;
        this.syncPosition();
    }
    // Override
    get scaleY() {
        return super.scaleY;
    }
    set scaleY(value) {
        if (this.scaleY === value) return;
        super.scaleY = value;
        this.syncPosition();
    }
    // Override
    get scale() {
        return super.scale;
    }
    set scale(value) {
        if (this.scale === value) return;
        super.scale = value;
        this.syncPosition();
    }
    // Override
    get visible() {
        return super.visible;
    }
    set visible(value) {
        if (super.visible === value) return;
        super.visible = value;
        this.syncVisible();
    }
    // Override
    get alpha() {
        return super.alpha;
    }
    set alpha(value) {
        if (super.alpha === value) return;
        super.alpha = value;
        this.syncAlpha();
    }
    // Override
    get active() {
        return this._active;
    }
    set active(value) {
        if (this._active === value) return;
        this._active = value;
        this.syncActive();
    }
    // Override
    get mask() {
        return this._mask;
    }
    set mask(mask) {
        if (this._mask === mask) return;
        this._mask = mask;
        this.syncMask();
    }
    // Override
    get scrollFactorX() {
        return this._scrollFactorX;
    }
    set scrollFactorX(value) {
        if (this._scrollFactorX === value) return;
        this._scrollFactorX = value;
        this.syncScrollFactor();
    }
    get scrollFactorY() {
        return this._scrollFactorY;
    }
    set scrollFactorY(value) {
        if (this._scrollFactorY === value) return;
        this._scrollFactorY = value;
        this.syncScrollFactor();
    }
    // Compatiable with container plugin
    get list() {
        return this.children;
    }
    static GetParent(child) {
        return (0, _getParentJs.GetParent)(child);
    }
    // For p3-container
    get parentContainer() {
        return this._parentContainer;
    }
    set parentContainer(value) {
        // Initialize
        if (!this._parentContainer && !value) {
            this._parentContainer = value;
            return;
        }
        // Set this._parentContainer only,
        // if under AddToContainer, or RemoveFromContainer methods
        if (this.setParentContainerFlag) {
            this._parentContainer = value;
            return;
        }
        // else if (!this.setParentContainerFlag)
        // Add itself and all children to container,
        // Or remove itseld and all children from container
        if (this._parentContainer && !value) {
            // Remove from container
            this.removeFromContainer();
            this._parentContainer = value;
        } else if (value) {
            // Add to container
            this._parentContainer = value;
            this.addToContainer(value);
        } else this._parentContainer = value;
    }
    get setParentContainerFlag() {
        if (this._setParentContainerFlag) return true;
        var parent = (0, _getParentJs.GetParent)(this);
        return parent ? parent.setParentContainerFlag : false;
    }
}
Object.assign(ContainerLite.prototype, (0, _methodsJsDefault.default));
exports.default = ContainerLite;

},{"./Base.js":"jq0ID","./Methods.js":"iKs2K","./GetParent.js":"02YdQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jq0ID":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Zone = Phaser.GameObjects.Zone;
const AddItem = Phaser.Utils.Array.Add;
const RemoveItem = Phaser.Utils.Array.Remove;
class Base extends Zone {
    constructor(scene, x, y, width, height){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 1;
        if (height === undefined) height = 1;
        super(scene, x, y, width, height);
        this.children = [];
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        if (fromScene) {
            // Stop scene
            var child;
            for(var i = this.children.length - 1; i >= 0; i--){
                child = this.children[i];
                if (!child.parentContainer && // Not in container
                !child.displayList // Not in scene, neither in layer
                ) // Destroy child which is not in scene, container, or layer manually
                child.destroy(fromScene);
            }
        }
        // Destroy/remove children
        this.clear(!fromScene);
        super.destroy(fromScene);
    }
    contains(gameObject) {
        return this.children.indexOf(gameObject) !== -1;
    }
    add(gameObjects) {
        var parent = this;
        AddItem(this.children, gameObjects, 0, // Callback of item added
        function(gameObject) {
            gameObject.once("destroy", parent.onChildDestroy, parent);
        }, this);
        return this;
    }
    remove(gameObjects, destroyChild) {
        var parent = this;
        RemoveItem(this.children, gameObjects, // Callback of item removed
        function(gameObject) {
            gameObject.off("destroy", parent.onChildDestroy, parent);
            if (destroyChild) gameObject.destroy();
        });
        return this;
    }
    onChildDestroy(child, fromScene) {
        // Only remove reference
        this.remove(child, false);
    }
    clear(destroyChild) {
        var parent = this;
        var gameObject;
        for(var i = 0, cnt = this.children.length; i < cnt; i++){
            gameObject = this.children[i];
            gameObject.off("destroy", parent.onChildDestroy, parent);
            if (destroyChild) gameObject.destroy();
        }
        this.children.length = 0;
        return this;
    }
}
const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Base, [
    Components.Alpha,
    Components.Flip
]);
exports.default = Base;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iKs2K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _parentJs = require("./Parent.js");
var _parentJsDefault = parcelHelpers.interopDefault(_parentJs);
var _addChildJs = require("./AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _removeChildJs = require("./RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _childStateJs = require("./ChildState.js");
var _childStateJsDefault = parcelHelpers.interopDefault(_childStateJs);
var _transformJs = require("./Transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);
var _positionJs = require("./Position.js");
var _positionJsDefault = parcelHelpers.interopDefault(_positionJs);
var _rotationJs = require("./Rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _scaleJs = require("./Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var _visibleJs = require("./Visible.js");
var _visibleJsDefault = parcelHelpers.interopDefault(_visibleJs);
var _alphaJs = require("./Alpha.js");
var _alphaJsDefault = parcelHelpers.interopDefault(_alphaJs);
var _activeJs = require("./Active.js");
var _activeJsDefault = parcelHelpers.interopDefault(_activeJs);
var _scrollFactorJs = require("./ScrollFactor.js");
var _scrollFactorJsDefault = parcelHelpers.interopDefault(_scrollFactorJs);
var _maskJs = require("./Mask.js");
var _maskJsDefault = parcelHelpers.interopDefault(_maskJs);
var _depthJs = require("./Depth.js");
var _depthJsDefault = parcelHelpers.interopDefault(_depthJs);
var _childrenJs = require("./Children.js");
var _childrenJsDefault = parcelHelpers.interopDefault(_childrenJs);
var _tweenJs = require("./Tween.js");
var _tweenJsDefault = parcelHelpers.interopDefault(_tweenJs);
var _p3ContainerJs = require("./P3Container.js");
var _p3ContainerJsDefault = parcelHelpers.interopDefault(_p3ContainerJs);
var _layerJs = require("./Layer.js");
var _layerJsDefault = parcelHelpers.interopDefault(_layerJs);
var _renderTextureJs = require("./RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
var _drawBoundsJs = require("./DrawBounds.js");
var _drawBoundsJsDefault = parcelHelpers.interopDefault(_drawBoundsJs);
var _changeOriginJs = require("./ChangeOrigin.js");
var _changeOriginJsDefault = parcelHelpers.interopDefault(_changeOriginJs);
var methods = {
    changeOrigin: (0, _changeOriginJsDefault.default),
    drawBounds: (0, _drawBoundsJsDefault.default)
};
Object.assign(methods, (0, _parentJsDefault.default), (0, _addChildJsDefault.default), (0, _removeChildJsDefault.default), (0, _childStateJsDefault.default), (0, _transformJsDefault.default), (0, _positionJsDefault.default), (0, _rotationJsDefault.default), (0, _scaleJsDefault.default), (0, _visibleJsDefault.default), (0, _alphaJsDefault.default), (0, _activeJsDefault.default), (0, _scrollFactorJsDefault.default), (0, _maskJsDefault.default), (0, _depthJsDefault.default), (0, _childrenJsDefault.default), (0, _tweenJsDefault.default), (0, _p3ContainerJsDefault.default), (0, _layerJsDefault.default), (0, _renderTextureJsDefault.default));
exports.default = methods;

},{"./Parent.js":"hqhOQ","./AddChild.js":"260TR","./RemoveChild.js":"3pEBJ","./ChildState.js":"dRU99","./Transform.js":"ib8nX","./Position.js":"llGV8","./Rotation.js":"zPbZo","./Scale.js":"1VVxi","./Visible.js":"dDPI5","./Alpha.js":"gTXf8","./Active.js":"3IkKw","./ScrollFactor.js":"gZv9H","./Mask.js":"IP17i","./Depth.js":"iNakq","./Children.js":"d7JQ2","./Tween.js":"lvLv3","./P3Container.js":"jZHAh","./Layer.js":"5iqrR","./RenderTexture.js":"1COLw","./DrawBounds.js":"lTTDk","./ChangeOrigin.js":"6UjUn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqhOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentJs = require("./GetParent.js");
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    setParent (gameObject, parent) {
        if (parent === undefined) parent = this;
        var localState = (0, _getLocalStateJsDefault.default)(gameObject);
        if (parent) {
            localState.parent = parent;
            localState.self = gameObject;
        } else {
            localState.parent = null;
            localState.self = null;
        }
        return this;
    },
    getParent (gameObject, name) {
        if (typeof gameObject === "string") {
            name = gameObject;
            gameObject = undefined;
        }
        if (gameObject === undefined) gameObject = this;
        return (0, _getParentJs.GetParent)(gameObject, name);
    },
    getTopmostParent (gameObject) {
        if (gameObject === undefined) gameObject = this;
        return (0, _getParentJs.GetTopmostParent)(gameObject);
    }
};

},{"./GetParent.js":"02YdQ","./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"02YdQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetParent", ()=>GetParent);
parcelHelpers.export(exports, "GetTopmostParent", ()=>GetTopmostParent);
var GetParent = function(gameObject, name) {
    var parent;
    if (name === undefined) {
        if (gameObject.hasOwnProperty("rexContainer")) parent = gameObject.rexContainer.parent;
    } else {
        parent = GetParent(gameObject);
        while(parent){
            if (parent.name === name) break;
            parent = GetParent(parent);
        }
    }
    return parent;
};
var GetTopmostParent = function(gameObject) {
    var parent = GetParent(gameObject);
    while(parent){
        gameObject = parent;
        parent = GetParent(parent);
    }
    return gameObject;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8OWIy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
var GetLocalState = function(gameObject) {
    if (!gameObject.hasOwnProperty("rexContainer")) {
        var rexContainer = {
            parent: null,
            self: null,
            layer: null,
            x: 0,
            y: 0,
            syncPosition: true,
            rotation: 0,
            syncRotation: true,
            scaleX: 0,
            scaleY: 0,
            syncScale: true,
            alpha: 0,
            syncAlpha: true,
            visible: true,
            active: true
        };
        Object.defineProperty(rexContainer, "angle", {
            get: function() {
                return RadToDeg(this.rotation);
            },
            set: function(value) {
                this.rotation = DegToRad(value);
            }
        });
        Object.defineProperty(rexContainer, "displayWidth", {
            get: function() {
                return gameObject.width * this.scaleX;
            },
            set: function(width) {
                this.scaleX = width / gameObject.width;
            }
        });
        Object.defineProperty(rexContainer, "displayHeight", {
            get: function() {
                return gameObject.height * this.scaleY;
            },
            set: function(height) {
                this.scaleY = height / gameObject.height;
            }
        });
        gameObject.rexContainer = rexContainer;
    }
    return gameObject.rexContainer;
};
exports.default = GetLocalState;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"260TR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const BaseAdd = (0, _baseJsDefault.default).prototype.add;
var Add = function(gameObject, config) {
    this.setParent(gameObject);
    var state = (0, _getLocalStateJsDefault.default)(gameObject);
    SetupSyncFlags(state, config);
    this.resetChildState(gameObject) // Reset local state of child
    .updateChildVisible(gameObject) // Apply parent's visible to child
    .updateChildActive(gameObject) // Apply parent's active to child
    .updateChildScrollFactor(gameObject) // Apply parent's scroll factor to child
    .updateChildMask(gameObject); // Apply parent's mask to child
    BaseAdd.call(this, gameObject);
    this.addToParentContainer(gameObject);
    this.addToRenderLayer(gameObject);
    return this;
};
var AddLocal = function(gameObject, config) {
    this.setParent(gameObject);
    // Set local state from child directly
    var state = (0, _getLocalStateJsDefault.default)(gameObject);
    SetupSyncFlags(state, config);
    // Position
    state.x = gameObject.x;
    state.y = gameObject.y;
    state.rotation = gameObject.rotation;
    state.scaleX = gameObject.scaleX;
    state.scaleY = gameObject.scaleY;
    // Alpha
    state.alpha = gameObject.alpha;
    // Visible
    state.visible = gameObject.visible;
    // Active
    state.active = gameObject.active;
    this.updateChildPosition(gameObject).updateChildAlpha(gameObject).updateChildVisible(gameObject) // Apply parent's visible to child
    .updateChildActive(gameObject) // Apply parent's active to child
    .updateChildScrollFactor(gameObject) // Apply parent's scroll factor to child
    .updateChildMask(gameObject); // Apply parent's mask to child
    BaseAdd.call(this, gameObject);
    this.addToRenderLayer(gameObject);
    return this;
};
var SetupSyncFlags = function(state, config) {
    if (config === undefined) config = true;
    if (typeof config === "boolean") {
        state.syncPosition = config;
        state.syncRotation = config;
        state.syncScale = config;
        state.syncAlpha = config;
        state.syncScrollFactor = config;
    } else {
        state.syncPosition = GetValue(config, "syncPosition", true);
        state.syncRotation = GetValue(config, "syncRotation", true);
        state.syncScale = GetValue(config, "syncScale", true);
        state.syncAlpha = GetValue(config, "syncAlpha", true);
        state.syncScrollFactor = GetValue(config, "syncScrollFactor", true);
    }
};
exports.default = {
    // Can override this method
    add (gameObject) {
        if (Array.isArray(gameObject)) this.addMultiple(gameObject);
        else Add.call(this, gameObject);
        return this;
    },
    // Don't override this method
    pin (gameObject, config) {
        if (Array.isArray(gameObject)) this.addMultiple(gameObject, config);
        else Add.call(this, gameObject, config);
        return this;
    },
    addMultiple (gameObjects) {
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i]);
        return this;
    },
    addLocal (gameObject) {
        if (Array.isArray(gameObject)) this.addMultiple(gameObject);
        else AddLocal.call(this, gameObject);
        return this;
    },
    // Don't override this method
    pinLocal (gameObject, config) {
        if (Array.isArray(gameObject)) this.addMultiple(gameObject, config);
        else AddLocal.call(this, gameObject, config);
        return this;
    },
    addLocalMultiple (gameObjects) {
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)AddLocal.call(this, gameObjects[i]);
        return this;
    }
};

},{"./Base.js":"jq0ID","./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3pEBJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _getParentJs = require("./GetParent.js");
const BaseRemove = (0, _baseJsDefault.default).prototype.remove;
const BaseClear = (0, _baseJsDefault.default).prototype.clear;
exports.default = {
    // Can override this method
    remove (gameObject, destroyChild) {
        if ((0, _getParentJs.GetParent)(gameObject) !== this) return this;
        this.setParent(gameObject, null);
        if (!destroyChild) this.removeFromRenderLayer(gameObject);
        BaseRemove.call(this, gameObject, destroyChild);
        return this;
    },
    // Don't override this method
    unpin (gameObject, destroyChild) {
        if ((0, _getParentJs.GetParent)(gameObject) !== this) return this;
        this.setParent(gameObject, null);
        if (!destroyChild) this.removeFromRenderLayer(gameObject);
        BaseRemove.call(this, gameObject, destroyChild);
        return this;
    },
    clear (destroyChild) {
        var children = this.children;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            var child = children[i];
            this.setParent(child, null);
            if (!destroyChild) this.removeFromRenderLayer(child);
        }
        BaseClear.call(this, destroyChild);
        return this;
    }
};

},{"./Base.js":"jq0ID","./GetParent.js":"02YdQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dRU99":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    getLocalState (gameObject) {
        return (0, _getLocalStateJsDefault.default)(gameObject);
    },
    resetChildState (gameObject) {
        this.resetChildPositionState(gameObject).resetChildVisibleState(gameObject).resetChildAlphaState(gameObject).resetChildActiveState(gameObject);
        return this;
    },
    resetChildrenState (gameObjects) {
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)this.resetChildState(gameObjects[i]);
        return this;
    },
    syncProperties () {
        this.syncPosition().syncVisible().syncAlpha().syncActive().syncScrollFactor().syncMask();
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ib8nX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RotateAround = Phaser.Math.RotateAround;
exports.default = {
    worldToLocal (point) {
        // Transform
        point.x -= this.x;
        point.y -= this.y;
        // Rotate
        RotateAround(point, 0, 0, -this.rotation);
        // Scale
        point.x /= this.scaleX;
        point.y /= this.scaleY;
        return point;
    },
    localToWorld (point) {
        // Scale
        point.x *= this.scaleX;
        point.y *= this.scaleY;
        // Rotate
        RotateAround(point, 0, 0, this.rotation);
        // Transform
        point.x += this.x;
        point.y += this.y;
        return point;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llGV8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
var _getScaleJs = require("./utils/GetScale.js");
var _getScaleJsDefault = parcelHelpers.interopDefault(_getScaleJs);
exports.default = {
    updateChildPosition (child) {
        if (child.isRexContainerLite) child.syncChildrenEnable = false;
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        if (state.syncPosition) {
            child.x = state.x;
            child.y = state.y;
            parent.localToWorld(child);
        }
        if (state.syncRotation) child.rotation = state.rotation + parent.rotation;
        if (state.syncScale) {
            child.scaleX = state.scaleX * parent.scaleX;
            child.scaleY = state.scaleY * parent.scaleY;
        }
        if (child.isRexContainerLite) {
            child.syncChildrenEnable = true;
            child.syncPosition();
        }
        return this;
    },
    syncPosition () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildPosition, this);
        return this;
    },
    resetChildPositionState (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        state.x = child.x;
        state.y = child.y;
        parent.worldToLocal(state);
        state.scaleX = (0, _getScaleJsDefault.default)(child.scaleX, parent.scaleX);
        state.scaleY = (0, _getScaleJsDefault.default)(child.scaleY, parent.scaleY);
        state.rotation = child.rotation - parent.rotation;
        return this;
    },
    setChildPosition (child, x, y) {
        child.x = x;
        child.y = y;
        this.resetChildPositionState(child);
        return this;
    },
    setChildLocalPosition (child, x, y) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        state.x = x;
        state.y = y;
        this.updateChildPosition(child);
        return this;
    },
    resetLocalPositionState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildPositionState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","./utils/GetScale.js":"fzyZa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fzyZa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetScale = function(a, b) {
    if (a === b) return 1;
    else return a / b;
};
exports.default = GetScale;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zPbZo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
const DegToRad = Phaser.Math.DegToRad;
exports.default = {
    updateChildRotation (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        if (state.syncRotation) child.rotation = parent.rotation + state.rotation;
        return this;
    },
    syncRotation () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildRotation, this);
        return this;
    },
    resetChildRotationState (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        state.rotation = child.rotation - parent.rotation;
        return this;
    },
    setChildRotation (child, rotation) {
        child.rotation = rotation;
        this.resetChildRotationState(child);
        return this;
    },
    setChildAngle (child, angle) {
        child.angle = angle;
        this.resetChildRotationState(child);
        return this;
    },
    setChildLocalRotation (child, rotation) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        state.rotation = rotation;
        this.updateChildRotation(child);
        return this;
    },
    setChildLocalAngle (child, angle) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        state.rotation = DegToRad(angle);
        this.updateChildRotation(child);
        return this;
    },
    resetLocalRotationState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildRotationState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VVxi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
var _getScaleJs = require("./utils/GetScale.js");
var _getScaleJsDefault = parcelHelpers.interopDefault(_getScaleJs);
exports.default = {
    updateChildScale (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        if (state.syncScale) {
            child.scaleX = parent.scaleX * state.scaleX;
            child.scaleY = parent.scaleY * state.scaleY;
        }
        return this;
    },
    syncScale () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildScale, this);
        return this;
    },
    resetChildScaleState (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        state.scaleX = (0, _getScaleJsDefault.default)(child.scaleX, parent.scaleX);
        state.scaleY = (0, _getScaleJsDefault.default)(child.scaleY, parent.scaleY);
        return this;
    },
    setChildScale (child, scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        child.scaleX = scaleX;
        child.scaleY = scaleY;
        this.resetChildScaleState(child);
        return this;
    },
    setChildLocalScale (child, scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        var state = (0, _getLocalStateJsDefault.default)(child);
        state.scaleX = scaleX;
        state.scaleY = scaleY;
        this.updateChildScale(child);
        return this;
    },
    setChildDisplaySize (child, width, height) {
        child.setDisplaySize(width, height);
        this.resetChildScaleState(child);
        return this;
    },
    resetLocalScaleState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildScaleState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","./utils/GetScale.js":"fzyZa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDPI5":[function(require,module,exports) {
/*

Visible in localState:

  - visible: original visible of child
  - maskVisible: invisible by parent mask, see MaskChildren.js
      - undefined (not in masking) : Equal to mask visible
      - true (mask visible) : Inside, or across parent's visible area
      - false (maske invisible) : Out of parent's visible area

Visible result of child = (parent visible) && (child visible) && (mask visible)
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    updateChildVisible (child) {
        var localState = (0, _getLocalStateJsDefault.default)(child);
        var parent = localState.parent;
        var maskVisible = localState.hasOwnProperty("maskVisible") ? localState.maskVisible : true;
        child.visible = parent.visible && localState.visible && maskVisible;
        return this;
    },
    syncVisible () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildVisible, this);
        return this;
    },
    resetChildVisibleState (child) {
        var localState = (0, _getLocalStateJsDefault.default)(child);
        // Delete maskVisible property
        if (localState.hasOwnProperty("maskVisible")) delete localState.maskVisible;
        localState.visible = child.visible;
        return this;
    },
    setChildVisible (child, visible) {
        // Visible of child will be affect by parent's visible, and mask visible
        this.setChildLocalVisible(child, visible);
        return this;
    },
    // Internal method
    setChildLocalVisible (child, visible) {
        if (visible === undefined) visible = true;
        var localState = (0, _getLocalStateJsDefault.default)(child);
        localState.visible = visible;
        this.updateChildVisible(child);
        return this;
    },
    // Internal method
    setChildMaskVisible (child, visible) {
        if (visible === undefined) visible = true;
        var localState = (0, _getLocalStateJsDefault.default)(child);
        localState.maskVisible = visible;
        this.updateChildVisible(child);
        return this;
    },
    resetLocalVisibleState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildVisibleState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gTXf8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
var _getScaleJs = require("./utils/GetScale.js");
var _getScaleJsDefault = parcelHelpers.interopDefault(_getScaleJs);
exports.default = {
    updateChildAlpha (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        if (state.syncAlpha) child.alpha = parent.alpha * state.alpha;
        return this;
    },
    syncAlpha () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildAlpha, this);
        return this;
    },
    resetChildAlphaState (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        state.alpha = (0, _getScaleJsDefault.default)(child.alpha, parent.alpha);
        return this;
    },
    setChildAlpha (child, alpha) {
        child.alpha = alpha;
        this.resetChildAlphaState(child);
        return this;
    },
    setChildLocalAlpha (child, alpha) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        state.alpha = alpha;
        this.updateChildAlpha(child);
        return this;
    },
    resetLocalAlphaState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildAlphaState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","./utils/GetScale.js":"fzyZa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3IkKw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    updateChildActive (child) {
        var localState = (0, _getLocalStateJsDefault.default)(child);
        var parent = localState.parent;
        child.active = parent.active && localState.active;
        return this;
    },
    syncActive () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildActive, this);
        return this;
    },
    resetChildActiveState (child) {
        var localState = (0, _getLocalStateJsDefault.default)(child);
        localState.active = child.active;
        return this;
    },
    setChildActive (child, active) {
        child.active = active;
        this.resetChildActiveState(child);
        return this;
    },
    setChildLocalActive (child, active) {
        if (active === undefined) active = true;
        var localState = (0, _getLocalStateJsDefault.default)(child);
        localState.active = active;
        this.updateChildActive(child);
        return this;
    },
    resetLocalActiveState () {
        var parent = (0, _getLocalStateJsDefault.default)(this).parent;
        if (parent) parent.resetChildActiveState(this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZv9H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    updateChildScrollFactor (child) {
        var state = (0, _getLocalStateJsDefault.default)(child);
        var parent = state.parent;
        if (state.syncScrollFactor) child.setScrollFactor(parent.scrollFactorX, parent.scrollFactorY);
        return this;
    },
    syncScrollFactor () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildScrollFactor, this);
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"IP17i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    updateChildMask (child) {
        // Don't propagate null mask to clear children's mask
        if (this.mask == null) return this;
        var maskGameObject = this.mask.hasOwnProperty("geometryMask") ? this.mask.geometryMask : this.mask.bitmapMask;
        if (maskGameObject !== child) child.mask = this.mask;
        return this;
    },
    syncMask () {
        if (this.syncChildrenEnable) this.children.forEach(this.updateChildMask, this);
        return this;
    },
    setMask (mask) {
        this.mask = mask;
        return this;
    },
    clearMask (destroyMask) {
        if (destroyMask === undefined) destroyMask = false;
        // Clear current mask
        this._mask = null;
        // Clear children mask
        this.children.forEach(function(child) {
            child.clearMask(false);
        });
        if (destroyMask && this.mask) this.mask.destroy();
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNakq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sortGameObjectsByDepthJs = require("../../../utils/system/SortGameObjectsByDepth.js");
var _sortGameObjectsByDepthJsDefault = parcelHelpers.interopDefault(_sortGameObjectsByDepthJs);
exports.default = {
    setDepth (value, containerOnly) {
        this.depth = value;
        if (!containerOnly && this.children) {
            var children = this.getAllChildren();
            for(var i = 0, cnt = children.length; i < cnt; i++)children[i].depth = value;
        }
        return this;
    },
    swapDepth (containerB) {
        var depthA = this.depth;
        var depthB = containerB.depth;
        this.setDepth(depthB);
        containerB.setDepth(depthA);
        return this;
    },
    incDepth (inc) {
        this.depth += inc;
        if (this.children) {
            var children = this.getAllChildren();
            for(var i = 0, cnt = children.length; i < cnt; i++)children[i].depth += inc;
        }
        return this;
    },
    bringToTop () {
        var displayList = this.displayList;
        var children = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(children, false);
        for(var i = 0, cnt = children.length; i < cnt; i++){
            var child = children[i];
            if (displayList.exists(child)) displayList.bringToTop(child);
        }
        return this;
    },
    moveDepthBelow (gameObject) {
        var displayList = this.displayList;
        if (gameObject.displayList !== displayList) // Do nothing if not at the same display list
        return this;
        var children = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(children, false);
        for(var i = 0, cnt = children.length; i < cnt; i++){
            var child = children[i];
            if (displayList.exists(child)) {
                displayList.moveBelow(gameObject, child);
                break;
            }
        }
        return this;
    },
    moveDepthAbove (gameObject) {
        var displayList = this.displayList;
        if (gameObject.displayList !== displayList) // Do nothing if not at the same display list
        return this;
        var children = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(children, true);
        for(var i = 0, cnt = children.length; i < cnt; i++){
            var child = children[i];
            if (displayList.exists(child)) {
                displayList.moveAbove(gameObject, child);
                break;
            }
        }
        return this;
    },
    bringChildToTop (gameObject) {
        var children = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(children, true);
        var topChild = children[0];
        if (topChild === gameObject) return this;
        if (topChild.displayList !== gameObject.displayList) return this;
        topChild.displayList.moveAbove(gameObject, topChild);
        return this;
    },
    sendChildToBack (gameObject) {
        var children = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(children, false);
        var bottomChild = children[0];
        if (bottomChild === gameObject) return this;
        if (bottomChild.displayList !== gameObject.displayList) return this;
        bottomChild.displayList.moveBelow(gameObject, bottomChild);
        return this;
    }
};

},{"../../../utils/system/SortGameObjectsByDepth.js":"k2hIt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7JQ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getParentJs = require("./GetParent.js");
var _traversalJs = require("./utils/Traversal.js");
const ArrayUtils = Phaser.Utils.Array;
exports.default = {
    getChildren (out) {
        if (!out) out = this.children; // Return internal children array
        else for(var i = 0, cnt = this.children.length; i < cnt; i++)out.push(this.children[i]);
        return out;
    },
    getAllChildren (out) {
        if (out === undefined) out = [];
        var root = this;
        (0, _traversalJs.BreadthFirstSearch)(root, function(child) {
            // Don't add root
            if (child === root) return;
            out.push(child);
        });
        return out;
    },
    getAllVisibleChildren (out) {
        if (out === undefined) out = [];
        var root = this;
        (0, _traversalJs.BreadthFirstSearch)(root, function(child) {
            // Don't add root
            if (child === root) return;
            // Don't add invisible child
            if (!child.visible) return true;
            out.push(child);
        });
        return out;
    },
    bfs (callback, root) {
        if (root === undefined) root = this;
        (0, _traversalJs.BreadthFirstSearch)(root, callback);
        return this;
    },
    dfs (callback, root) {
        if (root === undefined) root = this;
        (0, _traversalJs.DepthFirstSearch)(root, callback);
        return this;
    },
    contains (gameObject) {
        var parent = (0, _getParentJs.GetParent)(gameObject);
        if (!parent) return false;
        else if (parent === this) return true;
        else return this.contains(parent);
    },
    getByName (name, recursive) {
        if (!recursive) return ArrayUtils.GetFirst(this.children, "name", name); // object, or null if not found
        else {
            // Breadth-first search
            var queue = [
                this
            ];
            var parent, child;
            while(queue.length){
                parent = queue.shift();
                for(var i = 0, cnt = parent.children.length; i < cnt; i++){
                    child = parent.children[i];
                    if (child.name === name) return child;
                    else if (child.isRexContainerLite) queue.push(child);
                }
            }
            return null;
        }
    },
    getRandom (startIndex, length) {
        return ArrayUtils.GetRandom(this.children, startIndex, length);
    },
    getFirst (property, value, startIndex, endIndex) {
        return ArrayUtils.GetFirstElement(this.children, property, value, startIndex, endIndex);
    },
    getAll (property, value, startIndex, endIndex) {
        return ArrayUtils.GetAll(this.children, property, value, startIndex, endIndex);
    },
    count (property, value, startIndex, endIndex) {
        return ArrayUtils.CountAllMatching(this.children, property, value, startIndex, endIndex);
    },
    swap (child1, child2) {
        ArrayUtils.Swap(this.children, child1, child2);
        return this;
    },
    setAll (property, value, startIndex, endIndex) {
        ArrayUtils.SetAll(this.children, property, value, startIndex, endIndex);
        return this;
    }
};

},{"./GetParent.js":"02YdQ","./utils/Traversal.js":"luCwA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luCwA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DepthFirstSearch", ()=>DepthFirstSearch);
parcelHelpers.export(exports, "BreadthFirstSearch", ()=>BreadthFirstSearch);
var DepthFirstSearch = function(root, callback) {
    var skip = callback(root);
    if (!skip && root.isRexContainerLite) {
        var children = root.children;
        for(var i = 0, cnt = children.length; i < cnt; i++)DepthFirstSearch(children[i], callback);
    }
};
var BreadthFirstSearch = function(root, callback) {
    var queue = [
        root
    ];
    while(queue.length > 0){
        var current = queue.shift();
        var skip = callback(current);
        if (!skip && current.isRexContainerLite) queue.push(...current.children);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lvLv3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetLocalStates = function(gameObjects) {
    var localStates = [];
    for(var i = 0, cnt = gameObjects.length; i < cnt; i++){
        var gameObject = gameObjects[i];
        if (!gameObject.hasOwnProperty("rexContainer")) continue;
        localStates.push(gameObject.rexContainer);
    }
    return localStates;
};
var GetScene = function(gameObjects) {
    for(var i = 0, cnt = gameObjects.length; i < cnt; i++){
        var scene = gameObjects[i].scene;
        if (scene) return scene;
    }
    return null;
};
var UpdateChild = function(tween, key, target) {
    if (!target.parent) {
        // target object was removed, so remove this tween too
        tween.remove();
        return;
    }
    var parent = target.parent;
    var child = target.self;
    switch(key){
        case "x":
        case "y":
            parent.updateChildPosition(child);
            break;
        case "angle":
        case "rotation":
            parent.updateChildRotation(child);
            break;
        case "scaleX":
        case "scaleY":
        case "displayWidth":
        case "displayHeight":
            parent.updateChildScale(child);
            break;
        case "alpha":
            parent.updateChildAlpha(child);
            break;
        default:
            parent.updateChildPosition(child);
            parent.updateChildRotation(child);
            parent.updateChildScale(child);
            parent.updateChildAlpha(child);
            break;
    }
};
exports.default = {
    tweenChild (tweenConfig) {
        var targets = tweenConfig.targets;
        if (!Array.isArray(targets)) targets = [
            targets
        ];
        var scene = this.scene || GetScene(targets);
        if (!scene) return;
        // Map child game objects to local states
        tweenConfig.targets = GetLocalStates(targets);
        var tween = scene.tweens.add(tweenConfig);
        // Update child game object in 'update' event
        tween.on("update", UpdateChild);
        return tween;
    },
    tweenSelf (tweenConfig) {
        tweenConfig.targets = [
            this
        ];
        return this.tweenChild(tweenConfig);
    },
    createTweenChildConfig (tweenConfig) {
        var targets = tweenConfig.targets;
        if (targets) {
            if (!Array.isArray(targets)) targets = [
                targets
            ];
            // Map child game objects to local states
            tweenConfig.targets = GetLocalStates(targets);
        }
        var onUpdate = tweenConfig.onUpdate;
        tweenConfig.onUpdate = function(tween, target) {
            if (onUpdate) onUpdate(tween, target);
            UpdateChild(tween, undefined, target);
        };
        return tweenConfig;
    },
    tween (tweenConfig) {
        var scene = this.scene;
        if (!tweenConfig.targets) tweenConfig.targets = this;
        return scene.tweens.add(tweenConfig);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZHAh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sortGameObjectsByDepthJs = require("../../../utils/system/SortGameObjectsByDepth.js");
var _sortGameObjectsByDepthJsDefault = parcelHelpers.interopDefault(_sortGameObjectsByDepthJs);
exports.default = {
    addToContainer (p3Container) {
        this._setParentContainerFlag = true;
        var gameObjects = this.getAllChildren([
            this
        ]);
        (0, _sortGameObjectsByDepthJsDefault.default)(gameObjects);
        p3Container.add(gameObjects);
        this._setParentContainerFlag = false;
        return this;
    },
    addToLayer (layer) {
        this.addToContainer(layer);
        return this;
    },
    removeFromContainer () {
        if (!this.parentContainer) return this;
        // Will add gameObjects to scene
        var gameObjects = this.getAllChildren([
            this
        ]).filter(function(gameObject) {
            return !!gameObject.scene;
        });
        if (gameObjects.length === 0) return this;
        this._setParentContainerFlag = true;
        if (gameObjects.length > 1) {
            (0, _sortGameObjectsByDepthJsDefault.default)(gameObjects);
            gameObjects.reverse();
        }
        this.parentContainer.remove(gameObjects);
        this._setParentContainerFlag = false;
        return this;
    },
    getParentContainer () {
        if (this.parentContainer) return this.parentContainer;
        // One of parent container has a layer
        var parent = this.getParent();
        while(parent){
            var p3Container = parent.parentContainer;
            if (p3Container) return p3Container;
            parent = parent.getParent();
        }
        return null;
    },
    addToParentContainer (gameObject) {
        // Don't add to layer if gameObject is not in any displayList
        if (!gameObject.displayList) return this;
        var p3Container = this.getParentContainer();
        if (!p3Container) return this;
        if (gameObject.isRexContainerLite) // Add containerLite and its children
        gameObject.addToContainer(p3Container);
        else // Add gameObject directly
        p3Container.add(gameObject);
        return this;
    }
};

},{"../../../utils/system/SortGameObjectsByDepth.js":"k2hIt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iqrR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLocalStateJs = require("./utils/GetLocalState.js");
var _getLocalStateJsDefault = parcelHelpers.interopDefault(_getLocalStateJs);
exports.default = {
    enableLayer () {
        if (this.privateRenderLayer) return this;
        var layer = this.scene.add.layer();
        // layer.name = (this.name) ? `${this.name}.privateLayer` : 'privateLayer';
        this.moveDepthBelow(layer);
        this.addToLayer(layer);
        this.privateRenderLayer = layer;
        return this;
    },
    getLayer () {
        if (!this.privateRenderLayer) this.enableLayer();
        return this.privateRenderLayer;
    },
    getRenderLayer () {
        // This containerLite has a layer
        if (this.privateRenderLayer) return this.privateRenderLayer;
        // One of parent container has a layer
        var parent = this.getParent();
        while(parent){
            var layer = parent.privateRenderLayer;
            if (layer) return layer;
            parent = parent.getParent();
        }
        return null;
    },
    // Internal method for adding child
    addToRenderLayer (gameObject) {
        // Don't add to layer if gameObject is not in any displayList
        if (!gameObject.displayList) return this;
        // Move gameObject from scene to layer
        var layer = this.getRenderLayer();
        if (!layer) return this;
        if (gameObject.isRexContainerLite) // Add containerLite and its children
        gameObject.addToLayer(layer);
        else // Add gameObject directly
        layer.add(gameObject);
        var state = (0, _getLocalStateJsDefault.default)(gameObject);
        state.layer = layer;
        return this;
    },
    // Internal method for removing child
    removeFromRenderLayer (gameObject) {
        // Move gameObject from layer to scene
        var state = (0, _getLocalStateJsDefault.default)(gameObject);
        var layer = state.layer;
        if (!layer) return this;
        layer.remove(gameObject);
        state.layer = null;
        return this;
    }
};

},{"./utils/GetLocalState.js":"8OWIy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1COLw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _snapshotJs = require("../../../utils/rendertexture/Snapshot.js");
var _snapshotJsDefault = parcelHelpers.interopDefault(_snapshotJs);
exports.default = {
    snapshot (config) {
        // Save scale
        var scaleXSave = this.scaleX;
        var scaleYSave = this.scaleY;
        var scale1 = scaleXSave === 1 && scaleYSave === 1;
        if (!scale1) this.setScale(1);
        // Snapshot with scale = 1
        if (config === undefined) config = {};
        config.gameObjects = this.getAllVisibleChildren();
        config.x = this.x;
        config.y = this.y;
        config.originX = this.originX;
        config.originY = this.originY;
        var rt = (0, _snapshotJsDefault.default)(config);
        var isValidRT = !!rt.scene;
        // Restore scale
        if (!scale1) {
            this.setScale(scaleXSave, scaleYSave);
            if (isValidRT) rt.setScale(scaleXSave, scaleYSave);
        }
        return isValidRT ? rt : this;
    }
};

},{"../../../utils/rendertexture/Snapshot.js":"fjgt2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fjgt2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsOfGameObjectsJs = require("../bounds/GetBoundsOfGameObjects.js");
var _getBoundsOfGameObjectsJsDefault = parcelHelpers.interopDefault(_getBoundsOfGameObjectsJs);
var _cloneJs = require("../object/Clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _sortGameObjectsByDepthJs = require("../system/SortGameObjectsByDepth.js");
var _sortGameObjectsByDepthJsDefault = parcelHelpers.interopDefault(_sortGameObjectsByDepthJs);
var _isGameObjectJs = require("../system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var GetValue = Phaser.Utils.Objects.GetValue;
var DynamicTexture = Phaser.Textures.DynamicTexture;
var UUID = Phaser.Utils.String.UUID;
var Snapshot = function(config) {
    if (!config) return;
    var gameObjects = config.gameObjects;
    var renderTexture = config.renderTexture; // renderTexture, or dynamicTexture
    var x = GetValue(config, "x", undefined);
    var y = GetValue(config, "y", undefined);
    var width = GetValue(config, "width", undefined);
    var height = GetValue(config, "height", undefined);
    var originX = GetValue(config, "originX", 0);
    var originY = GetValue(config, "originY", 0);
    var padding = GetValue(config, "padding", 0);
    var scrollX, scrollY;
    if (width === undefined || height === undefined || x === undefined || y === undefined) {
        // Union bounds of gameObjects
        var bounds = (0, _getBoundsOfGameObjectsJsDefault.default)(gameObjects, true);
        var isCenterOrigin = x !== undefined && y !== undefined;
        if (isCenterOrigin) {
            width = Math.max(x - bounds.left, bounds.right - x) * 2;
            height = Math.max(y - bounds.top, bounds.bottom - y) * 2;
            originX = 0.5;
            originY = 0.5;
        } else {
            x = bounds.x;
            y = bounds.y;
            width = bounds.width;
            height = bounds.height;
            originX = 0;
            originY = 0;
        }
        scrollX = bounds.x;
        scrollY = bounds.y;
    } else {
        scrollX = x + (0 - originX) * width;
        scrollY = y + (0 - originY) * height;
    }
    scrollX -= padding;
    scrollY -= padding;
    width += padding * 2;
    height += padding * 2;
    var scene = gameObjects[0].scene;
    // Snapshot on dynamicTexture directly
    if (saveTexture && !renderTexture) renderTexture = new DynamicTexture(scene.sys.textures, UUID(), width, height);
    // Return a renderTexture
    if (!renderTexture) renderTexture = scene.add.renderTexture(0, 0, width, height);
    if (renderTexture.setPosition) renderTexture.setPosition(x, y);
    if (renderTexture.width !== width || renderTexture.height !== height) renderTexture.setSize(width, height);
    if (renderTexture.setOrigin) renderTexture.setOrigin(originX, originY);
    renderTexture.camera.setScroll(scrollX, scrollY);
    // Draw gameObjects
    gameObjects = (0, _sortGameObjectsByDepthJsDefault.default)((0, _cloneJsDefault.default)(gameObjects));
    renderTexture.draw(gameObjects);
    // Save render result to texture    
    var saveTexture = config.saveTexture;
    if (saveTexture) {
        if ((0, _isGameObjectJsDefault.default)(renderTexture)) renderTexture.saveTexture(saveTexture);
        else {
            var dynamicTexture = renderTexture;
            var textureManager = dynamicTexture.manager;
            if (textureManager.exists(dynamicTexture.key)) // Rename texture
            textureManager.renameTexture(dynamicTexture.key, key);
            else {
                // Add texture to texture manager
                dynamicTexture.key = key;
                textureManager.list[key] = dynamicTexture;
                textureManager.emit("addtexture", key, dynamicTexture);
                textureManager.emit(`addtexture-${key}`, dynamicTexture);
            }
        }
    }
    return renderTexture;
};
exports.default = Snapshot;

},{"../bounds/GetBoundsOfGameObjects.js":"jbO5F","../object/Clone.js":"iFVih","../system/SortGameObjectsByDepth.js":"k2hIt","../system/IsGameObject.js":"cLBuU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbO5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsJs = require("./GetBounds.js");
const Rectangle = Phaser.Geom.Rectangle;
const Union = Phaser.Geom.Rectangle.Union;
var GetBoundsOfGameObjects = function(gameObjects, out) {
    if (out === undefined) out = new Rectangle();
    else if (out === true) {
        if (GlobRect === undefined) GlobRect = new Rectangle();
        out = GlobRect;
    }
    out.setTo(0, 0, 0, 0);
    var gameObject;
    var firstClone = true;
    for(var i = 0, cnt = gameObjects.length; i < cnt; i++){
        gameObject = gameObjects[i];
        if (!gameObject.getBounds) continue;
        var boundsRect = (0, _getBoundsJs.GetBounds)(gameObject, true);
        if (firstClone) {
            out.setTo(boundsRect.x, boundsRect.y, boundsRect.width, boundsRect.height);
            firstClone = false;
        } else Union(boundsRect, out, out);
    }
    return out;
};
var GlobRect;
exports.default = GetBoundsOfGameObjects;

},{"./GetBounds.js":"45Kmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLBuU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GameObjectClass = Phaser.GameObjects.GameObject;
var IsGameObject = function(object) {
    return object instanceof GameObjectClass;
};
exports.default = IsGameObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTTDk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawBoundsJs = require("../../../utils/bounds/DrawBounds.js");
var _drawBoundsJsDefault = parcelHelpers.interopDefault(_drawBoundsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var DrawBounds = function(graphics, config) {
    var drawContainer = GetValue(config, "drawContainer", true);
    var gameObjects = GetValue(config, "children");
    if (gameObjects === undefined) gameObjects = this.getAllVisibleChildren([
        this
    ]);
    if (!drawContainer) gameObjects = gameObjects.filter(function(gameObject) {
        return !gameObject.isRexContainerLite;
    });
    (0, _drawBoundsJsDefault.default)(gameObjects, graphics, config);
    return this;
};
exports.default = DrawBounds;

},{"../../../utils/bounds/DrawBounds.js":"1gWFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6UjUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _changeOriginJs = require("../../../utils/origin/ChangeOrigin.js");
var _changeOriginJsDefault = parcelHelpers.interopDefault(_changeOriginJs);
var ChangeOrigin = function(originX, originY) {
    this.syncChildrenEnable = false;
    (0, _changeOriginJsDefault.default)(this, originX, originY);
    this.syncChildrenEnable = true;
    var children = this.getAllChildren();
    for(var i = 0, cnt = children.length; i < cnt; i++)this.resetChildPositionState(children[i]);
    return this;
};
exports.default = ChangeOrigin;

},{"../../../utils/origin/ChangeOrigin.js":"a2A90","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2A90":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RotateAround = Phaser.Math.RotateAround;
var ChangeOrigin = function(gameObject, originX, originY) {
    if (originY === undefined) originY = originX;
    var deltaXY = {
        x: (originX - gameObject.originX) * gameObject.displayWidth,
        y: (originY - gameObject.originY) * gameObject.displayHeight
    };
    RotateAround(deltaXY, 0, 0, gameObject.rotation);
    gameObject.originX = originX;
    gameObject.originY = originY;
    gameObject.x = gameObject.x + deltaXY.x;
    gameObject.y = gameObject.y + deltaXY.y;
    return gameObject;
};
exports.default = ChangeOrigin;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bxcT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSizerConfigJs = require("./GetSizerConfig.js");
var _getSizerConfigJsDefault = parcelHelpers.interopDefault(_getSizerConfigJs);
var _getChildPrevStateJs = require("../utils/GetChildPrevState.js");
var _getChildPrevStateJsDefault = parcelHelpers.interopDefault(_getChildPrevStateJs);
var _pushIntoBoundsJs = require("./PushIntoBounds.js");
var _pushIntoBoundsJsDefault = parcelHelpers.interopDefault(_pushIntoBoundsJs);
var _drawBoundsJs = require("./DrawBounds.js");
var _drawBoundsJsDefault = parcelHelpers.interopDefault(_drawBoundsJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _addChildrenMapJs = require("./AddChildrenMap.js");
var _addChildrenMapJsDefault = parcelHelpers.interopDefault(_addChildrenMapJs);
var _removeChildrenMapJs = require("./RemoveChildrenMap.js");
var _removeChildrenMapJsDefault = parcelHelpers.interopDefault(_removeChildrenMapJs);
var _getElementJs = require("./GetElement.js");
var _getElementJsDefault = parcelHelpers.interopDefault(_getElementJs);
var _paddingMethodsJs = require("./PaddingMethods.js");
var _paddingMethodsJsDefault = parcelHelpers.interopDefault(_paddingMethodsJs);
var _resolveWidthJs = require("./ResolveWidth.js");
var _resolveWidthJsDefault = parcelHelpers.interopDefault(_resolveWidthJs);
var _resolveChildrenWidthJs = require("./ResolveChildrenWidth.js");
var _resolveChildrenWidthJsDefault = parcelHelpers.interopDefault(_resolveChildrenWidthJs);
var _resolveHeightJs = require("./ResolveHeight.js");
var _resolveHeightJsDefault = parcelHelpers.interopDefault(_resolveHeightJs);
var _postResolveSizeJs = require("./PostResolveSize.js");
var _postResolveSizeJsDefault = parcelHelpers.interopDefault(_postResolveSizeJs);
var _getChildWidthJs = require("./GetChildWidth.js");
var _getChildWidthJsDefault = parcelHelpers.interopDefault(_getChildWidthJs);
var _getChildHeightJs = require("./GetChildHeight.js");
var _getChildHeightJsDefault = parcelHelpers.interopDefault(_getChildHeightJs);
var _getExpandedChildWidthJs = require("./GetExpandedChildWidth.js");
var _getExpandedChildWidthJsDefault = parcelHelpers.interopDefault(_getExpandedChildWidthJs);
var _getExpandedChildHeightJs = require("./GetExpandedChildHeight.js");
var _getExpandedChildHeightJsDefault = parcelHelpers.interopDefault(_getExpandedChildHeightJs);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getAllChildrenSizersJs = require("./GetAllChildrenSizers.js");
var _getAllChildrenSizersJsDefault = parcelHelpers.interopDefault(_getAllChildrenSizersJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _getShownChildrenMethodsJs = require("./GetShownChildrenMethods.js");
var _getShownChildrenMethodsJsDefault = parcelHelpers.interopDefault(_getShownChildrenMethodsJs);
var _preLayoutJs = require("./PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _layoutJs = require("./Layout.js");
var _layoutJsDefault = parcelHelpers.interopDefault(_layoutJs);
var _runLayoutJs = require("./RunLayout.js");
var _runLayoutJsDefault = parcelHelpers.interopDefault(_runLayoutJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _postLayoutJs = require("./PostLayout.js");
var _postLayoutJsDefault = parcelHelpers.interopDefault(_postLayoutJs);
var _runWidthWrapJs = require("./RunWidthWrap.js");
var _runWidthWrapJsDefault = parcelHelpers.interopDefault(_runWidthWrapJs);
var _setAnchorJs = require("./SetAnchor.js");
var _setAnchorJsDefault = parcelHelpers.interopDefault(_setAnchorJs);
var _scaleMethodsJs = require("./ScaleMethods.js");
var _scaleMethodsJsDefault = parcelHelpers.interopDefault(_scaleMethodsJs);
var _fadeMethodsJs = require("./FadeMethods.js");
var _fadeMethodsJsDefault = parcelHelpers.interopDefault(_fadeMethodsJs);
var _easeMoveMethodsJs = require("./EaseMoveMethods.js");
var _easeMoveMethodsJsDefault = parcelHelpers.interopDefault(_easeMoveMethodsJs);
var _shakeMethodsJs = require("./ShakeMethods.js");
var _shakeMethodsJsDefault = parcelHelpers.interopDefault(_shakeMethodsJs);
var _easeDataMethodsJs = require("./EaseDataMethods.js");
var _easeDataMethodsJsDefault = parcelHelpers.interopDefault(_easeDataMethodsJs);
var _hideMethodsJs = require("./HideMethods.js");
var _hideMethodsJsDefault = parcelHelpers.interopDefault(_hideMethodsJs);
var _modalMethodsJs = require("./ModalMethods.js");
var _modalMethodsJsDefault = parcelHelpers.interopDefault(_modalMethodsJs);
var _isInTouchingJs = require("./IsInTouching.js");
var _isInTouchingJsDefault = parcelHelpers.interopDefault(_isInTouchingJs);
var _pointToChildJs = require("./PointToChild.js");
var _pointToChildJsDefault = parcelHelpers.interopDefault(_pointToChildJs);
var _getParentSizerMethodsJs = require("./GetParentSizerMethods.js");
var _getParentSizerMethodsJsDefault = parcelHelpers.interopDefault(_getParentSizerMethodsJs);
var _layoutBackgroundsJs = require("./LayoutBackgrounds.js");
var _layoutBackgroundsJsDefault = parcelHelpers.interopDefault(_layoutBackgroundsJs);
var _setDraggableJs = require("./SetDraggable.js");
var _setDraggableJsDefault = parcelHelpers.interopDefault(_setDraggableJs);
var _clickMethodsJs = require("./ClickMethods.js");
var _clickMethodsJsDefault = parcelHelpers.interopDefault(_clickMethodsJs);
var _clickOutsideMethodsJs = require("./ClickOutsideMethods.js");
var _clickOutsideMethodsJsDefault = parcelHelpers.interopDefault(_clickOutsideMethodsJs);
var _touchingMethodsJs = require("./TouchingMethods.js");
var _touchingMethodsJsDefault = parcelHelpers.interopDefault(_touchingMethodsJs);
var _setChildrenInteractiveJs = require("./SetChildrenInteractive.js");
var _setChildrenInteractiveJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveJs);
var _broadcastEventJs = require("./BroadcastEvent.js");
var _broadcastEventJsDefault = parcelHelpers.interopDefault(_broadcastEventJs);
var methods = {
    getSizerConfig: (0, _getSizerConfigJsDefault.default),
    getChildPrevState: (0, _getChildPrevStateJsDefault.default),
    pushIntoBounds: (0, _pushIntoBoundsJsDefault.default),
    drawBounds: (0, _drawBoundsJsDefault.default),
    resolveWidth: (0, _resolveWidthJsDefault.default),
    resolveChildrenWidth: (0, _resolveChildrenWidthJsDefault.default),
    resolveHeight: (0, _resolveHeightJsDefault.default),
    postResolveSize: (0, _postResolveSizeJsDefault.default),
    getChildWidth: (0, _getChildWidthJsDefault.default),
    getChildHeight: (0, _getChildHeightJsDefault.default),
    getExpandedChildWidth: (0, _getExpandedChildWidthJsDefault.default),
    getExpandedChildHeight: (0, _getExpandedChildHeightJsDefault.default),
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    addChildrenMap: (0, _addChildrenMapJsDefault.default),
    addElement: (0, _addChildrenMapJsDefault.default),
    removeChildrenMap: (0, _removeChildrenMapJsDefault.default),
    getElement: (0, _getElementJsDefault.default),
    getAllChildrenSizers: (0, _getAllChildrenSizersJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    preLayout: (0, _preLayoutJsDefault.default),
    layout: (0, _layoutJsDefault.default),
    runLayout: (0, _runLayoutJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default),
    runWidthWrap: (0, _runWidthWrapJsDefault.default),
    layoutBackgrounds: (0, _layoutBackgroundsJsDefault.default),
    postLayout: (0, _postLayoutJsDefault.default),
    setAnchor: (0, _setAnchorJsDefault.default),
    isInTouching: (0, _isInTouchingJsDefault.default),
    pointToChild: (0, _pointToChildJsDefault.default),
    setDraggable: (0, _setDraggableJsDefault.default),
    setChildrenInteractive: (0, _setChildrenInteractiveJsDefault.default),
    broadcastEvent: (0, _broadcastEventJsDefault.default)
};
Object.assign(methods, (0, _paddingMethodsJsDefault.default), (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default), (0, _getParentSizerMethodsJsDefault.default), (0, _scaleMethodsJsDefault.default), (0, _fadeMethodsJsDefault.default), (0, _easeMoveMethodsJsDefault.default), (0, _shakeMethodsJsDefault.default), (0, _easeDataMethodsJsDefault.default), (0, _clickMethodsJsDefault.default), (0, _clickOutsideMethodsJsDefault.default), (0, _touchingMethodsJsDefault.default), (0, _hideMethodsJsDefault.default), (0, _modalMethodsJsDefault.default), (0, _getShownChildrenMethodsJsDefault.default));
exports.default = methods;

},{"./GetSizerConfig.js":"dCcBA","../utils/GetChildPrevState.js":"1oWcv","./PushIntoBounds.js":"kEPTT","./DrawBounds.js":"4mucS","./AddChildMethods.js":"7VvPk","./RemoveChildMethods.js":"4kWTX","./AddChildrenMap.js":"9NaDA","./RemoveChildrenMap.js":"2BxBA","./GetElement.js":"k0piw","./PaddingMethods.js":"huO1Z","./ResolveWidth.js":"kxpW2","./ResolveChildrenWidth.js":"7L0Xh","./ResolveHeight.js":"gy3cB","./PostResolveSize.js":"W49ma","./GetChildWidth.js":"kl0Na","./GetChildHeight.js":"wvVwE","./GetExpandedChildWidth.js":"iZAAV","./GetExpandedChildHeight.js":"6H6AG","./GetChildrenWidth.js":"dP96H","./GetChildrenHeight.js":"98WxN","./GetAllChildrenSizers.js":"5d7vv","./GetChildrenSizers.js":"7NSGF","./GetShownChildrenMethods.js":"gLOiq","./PreLayout.js":"1Q5WG","./Layout.js":"7wOyD","./RunLayout.js":"91LiD","./LayoutChildren.js":"4B46P","./PostLayout.js":"9IS4c","./RunWidthWrap.js":"bTYQn","./SetAnchor.js":"MDGzC","./ScaleMethods.js":"8iY6L","./FadeMethods.js":"21J3d","./EaseMoveMethods.js":"emShr","./ShakeMethods.js":"aml3e","./EaseDataMethods.js":"7pNUs","./HideMethods.js":"cB28J","./ModalMethods.js":"kM77h","./IsInTouching.js":"ec7MA","./PointToChild.js":"221Py","./GetParentSizerMethods.js":"03OCx","./LayoutBackgrounds.js":"fJwi4","./SetDraggable.js":"iooIp","./ClickMethods.js":"jSQAy","./ClickOutsideMethods.js":"e0JSo","./TouchingMethods.js":"3gEov","./SetChildrenInteractive.js":"fVVgX","./BroadcastEvent.js":"73vZj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dCcBA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(gameObject) {
        if (gameObject === undefined) gameObject = this;
        return (0, _getSizerConfigJsDefault.default)(gameObject);
    });
var _getSizerConfigJs = require("../utils/GetSizerConfig.js");
var _getSizerConfigJsDefault = parcelHelpers.interopDefault(_getSizerConfigJs);

},{"../utils/GetSizerConfig.js":"1URrW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1URrW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetSizerConfig = function(gameObject) {
    if (!gameObject.hasOwnProperty("rexSizer")) gameObject.rexSizer = {};
    return gameObject.rexSizer;
};
exports.default = GetSizerConfig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oWcv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSizerConfigJs = require("./GetSizerConfig.js");
var _getSizerConfigJsDefault = parcelHelpers.interopDefault(_getSizerConfigJs);
var GetChildPrevState = function(child) {
    var childConfig = (0, _getSizerConfigJsDefault.default)(child);
    if (!childConfig.hasOwnProperty("prevState")) childConfig.prevState = {};
    return childConfig.prevState;
};
exports.default = GetChildPrevState;

},{"./GetSizerConfig.js":"1URrW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEPTT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getViewportJs = require("../../../plugins/utils/system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
var PushIntoBounds = function(bounds) {
    if (bounds === undefined) bounds = (0, _getViewportJsDefault.default)(this.scene);
    this.left = Math.max(this.left, bounds.left);
    this.right = Math.min(this.right, bounds.right);
    this.top = Math.max(this.top, bounds.top);
    this.bottom = Math.min(this.bottom, bounds.bottom);
    return this;
};
exports.default = PushIntoBounds;

},{"../../../plugins/utils/system/GetViewport.js":"2Aw1Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mucS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
var _alignInJs = require("../../../plugins/utils/actions/AlignIn.js");
var _alignInJsDefault = parcelHelpers.interopDefault(_alignInJs);
var _getBoundsJs = require("../../../plugins/utils/bounds/GetBounds.js");
const GetValue = Phaser.Utils.Objects.GetValue;
const Group = Phaser.GameObjects.Group;
var DrawBounds = function(graphics, config) {
    var scene = graphics.scene;
    var color, lineWidth;
    var createTextCallback, createTextCallbackScope, textAlign;
    if (typeof config === "number") color = config;
    else {
        color = GetValue(config, "color");
        lineWidth = GetValue(config, "lineWidth");
        var nameTextConfig = GetValue(config, "name", false);
        if (nameTextConfig) {
            createTextCallback = GetValue(nameTextConfig, "createTextCallback", DefaultCreateTextCallback);
            createTextCallbackScope = GetValue(nameTextConfig, "createTextCallbackScope", undefined);
            textAlign = GetValue(nameTextConfig, "align", "left-top");
            if (typeof textAlign === "string") textAlign = (0, _alignConstJsDefault.default)[textAlign];
        }
    }
    if (color === undefined) color = 0xffffff;
    if (lineWidth === undefined) lineWidth = 1;
    if (createTextCallback && !graphics.children) {
        graphics.children = new Group(scene);
        graphics.once("destroy", function(graphics, fromScene) {
            graphics.children.destroy(!fromScene);
            graphics.children = undefined;
        });
        var graphicsClear = graphics.clear.bind(graphics);
        graphics.clear = function() {
            graphicsClear();
            graphics.children.clear(false, true);
        };
    }
    var children = this.getAllShownChildren([
        this
    ]), child;
    var nameText;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.getBounds || child.width !== undefined && child.height !== undefined) GlobRect = (0, _getBoundsJs.GetBounds)(child, GlobRect);
        else continue;
        if (color != null) graphics.lineStyle(lineWidth, color).strokeRectShape(GlobRect);
        if (child.name && createTextCallback) {
            if (createTextCallbackScope) nameText = createTextCallback.call(createTextCallbackScope, scene);
            else nameText = createTextCallback(scene);
            if (nameText) {
                nameText.setText(child.name);
                graphics.children.add(nameText);
                (0, _alignInJsDefault.default)(nameText, GlobRect.x, GlobRect.y, GlobRect.width, GlobRect.height, textAlign);
            }
        }
    }
    return this;
};
var DefaultCreateTextCallback = function(scene, child, childBoundsRect) {
    return scene.add.text(0, 0, "");
};
var GlobRect = undefined;
exports.default = DrawBounds;

},{"../utils/AlignConst.js":"8t4Uc","../../../plugins/utils/actions/AlignIn.js":"7glhd","../../../plugins/utils/bounds/GetBounds.js":"45Kmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8t4Uc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignConstJs = require("../../../plugins/utils/actions/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
exports.default = (0, _alignConstJsDefault.default);

},{"../../../plugins/utils/actions/AlignConst.js":"16scB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"16scB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const ALIGN = Phaser.Display.Align;
exports.default = {
    center: ALIGN.CENTER,
    left: ALIGN.LEFT_CENTER,
    right: ALIGN.RIGHT_CENTER,
    top: ALIGN.TOP_CENTER,
    bottom: ALIGN.BOTTOM_CENTER,
    "left-top": ALIGN.TOP_LEFT,
    "left-center": ALIGN.LEFT_CENTER,
    "left-bottom": ALIGN.BOTTOM_LEFT,
    "center-top": ALIGN.TOP_CENTER,
    "center-center": ALIGN.CENTER,
    "center-bottom": ALIGN.BOTTOM_CENTER,
    "right-top": ALIGN.TOP_RIGHT,
    "right-center": ALIGN.RIGHT_CENTER,
    "right-bottom": ALIGN.BOTTOM_RIGHT
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7glhd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _globZoneJs = require("./GlobZone.js");
var _globZoneJsDefault = parcelHelpers.interopDefault(_globZoneJs);
var _quickSetJs = require("../align/align/in/QuickSet.js");
var _quickSetJsDefault = parcelHelpers.interopDefault(_quickSetJs);
var AlignIn = function(child, x, y, width, height, align) {
    (0, _globZoneJsDefault.default).setPosition(x, y).setSize(width, height);
    (0, _quickSetJsDefault.default)(child, (0, _globZoneJsDefault.default), align);
};
exports.default = AlignIn;

},{"./GlobZone.js":"1cmsJ","../align/align/in/QuickSet.js":"7yKm5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cmsJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var globZone = new Phaser.GameObjects.Zone({
    sys: {
        queueDepthSort: (0, _noopJsDefault.default),
        events: {
            once: (0, _noopJsDefault.default)
        }
    }
}, 0, 0, 1, 1);
globZone.setOrigin(0);
exports.default = globZone;

},{"../object/NOOP.js":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yKm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("../const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _bottomCenterJs = require("./BottomCenter.js");
var _bottomCenterJsDefault = parcelHelpers.interopDefault(_bottomCenterJs);
var _bottomLeftJs = require("./BottomLeft.js");
var _bottomLeftJsDefault = parcelHelpers.interopDefault(_bottomLeftJs);
var _bottomRightJs = require("./BottomRight.js");
var _bottomRightJsDefault = parcelHelpers.interopDefault(_bottomRightJs);
var _centerJs = require("./Center.js");
var _centerJsDefault = parcelHelpers.interopDefault(_centerJs);
var _leftCenterJs = require("./LeftCenter.js");
var _leftCenterJsDefault = parcelHelpers.interopDefault(_leftCenterJs);
var _rightCenterJs = require("./RightCenter.js");
var _rightCenterJsDefault = parcelHelpers.interopDefault(_rightCenterJs);
var _topCenterJs = require("./TopCenter.js");
var _topCenterJsDefault = parcelHelpers.interopDefault(_topCenterJs);
var _topLeftJs = require("./TopLeft.js");
var _topLeftJsDefault = parcelHelpers.interopDefault(_topLeftJs);
var _topRightJs = require("./TopRight.js");
var _topRightJsDefault = parcelHelpers.interopDefault(_topRightJs);
var AlignInMap = [];
AlignInMap[(0, _constJsDefault.default).BOTTOM_CENTER] = (0, _bottomCenterJsDefault.default);
AlignInMap[(0, _constJsDefault.default).BOTTOM_LEFT] = (0, _bottomLeftJsDefault.default);
AlignInMap[(0, _constJsDefault.default).BOTTOM_RIGHT] = (0, _bottomRightJsDefault.default);
AlignInMap[(0, _constJsDefault.default).CENTER] = (0, _centerJsDefault.default);
AlignInMap[(0, _constJsDefault.default).LEFT_CENTER] = (0, _leftCenterJsDefault.default);
AlignInMap[(0, _constJsDefault.default).RIGHT_CENTER] = (0, _rightCenterJsDefault.default);
AlignInMap[(0, _constJsDefault.default).TOP_CENTER] = (0, _topCenterJsDefault.default);
AlignInMap[(0, _constJsDefault.default).TOP_LEFT] = (0, _topLeftJsDefault.default);
AlignInMap[(0, _constJsDefault.default).TOP_RIGHT] = (0, _topRightJsDefault.default);
var QuickSet = function(child, alignIn, position, offsetX, offsetY) {
    return AlignInMap[position](child, alignIn, offsetX, offsetY);
};
exports.default = QuickSet;

},{"../const.js":"hEw4L","./BottomCenter.js":"k7iiv","./BottomLeft.js":"4xYXs","./BottomRight.js":"5I9j2","./Center.js":"9ALaZ","./LeftCenter.js":"lGXgJ","./RightCenter.js":"19ZEY","./TopCenter.js":"iCCiH","./TopLeft.js":"5MNBJ","./TopRight.js":"4Lftm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hEw4L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ALIGN_CONST = {
    /**
    * A constant representing a top-left alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_LEFT
    * @since 3.0.0
    * @type {integer}
    */ TOP_LEFT: 0,
    /**
    * A constant representing a top-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_CENTER
    * @since 3.0.0
    * @type {integer}
    */ TOP_CENTER: 1,
    /**
    * A constant representing a top-right alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_RIGHT
    * @since 3.0.0
    * @type {integer}
    */ TOP_RIGHT: 2,
    /**
    * A constant representing a left-top alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_TOP
    * @since 3.0.0
    * @type {integer}
    */ LEFT_TOP: 3,
    /**
    * A constant representing a left-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_CENTER
    * @since 3.0.0
    * @type {integer}
    */ LEFT_CENTER: 4,
    /**
    * A constant representing a left-bottom alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_BOTTOM
    * @since 3.0.0
    * @type {integer}
    */ LEFT_BOTTOM: 5,
    /**
    * A constant representing a center alignment or position.
    * @constant
    * @name Phaser.Display.Align.CENTER
    * @since 3.0.0
    * @type {integer}
    */ CENTER: 6,
    /**
    * A constant representing a right-top alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_TOP
    * @since 3.0.0
    * @type {integer}
    */ RIGHT_TOP: 7,
    /**
    * A constant representing a right-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_CENTER
    * @since 3.0.0
    * @type {integer}
    */ RIGHT_CENTER: 8,
    /**
    * A constant representing a right-bottom alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_BOTTOM
    * @since 3.0.0
    * @type {integer}
    */ RIGHT_BOTTOM: 9,
    /**
    * A constant representing a bottom-left alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_LEFT
    * @since 3.0.0
    * @type {integer}
    */ BOTTOM_LEFT: 10,
    /**
    * A constant representing a bottom-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_CENTER
    * @since 3.0.0
    * @type {integer}
    */ BOTTOM_CENTER: 11,
    /**
    * A constant representing a bottom-right alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_RIGHT
    * @since 3.0.0
    * @type {integer}
    */ BOTTOM_RIGHT: 12
};
exports.default = ALIGN_CONST;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7iiv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBottomJs = require("../../bounds/GetBottom.js");
var _getBottomJsDefault = parcelHelpers.interopDefault(_getBottomJs);
var _getCenterXJs = require("../../bounds/GetCenterX.js");
var _getCenterXJsDefault = parcelHelpers.interopDefault(_getCenterXJs);
var _setBottomJs = require("../../bounds/SetBottom.js");
var _setBottomJsDefault = parcelHelpers.interopDefault(_setBottomJs);
var _setCenterXJs = require("../../bounds/SetCenterX.js");
var _setCenterXJsDefault = parcelHelpers.interopDefault(_setCenterXJs);
var BottomCenter = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setCenterXJsDefault.default)(gameObject, (0, _getCenterXJsDefault.default)(alignIn) + offsetX);
    (0, _setBottomJsDefault.default)(gameObject, (0, _getBottomJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = BottomCenter;

},{"../../bounds/GetBottom.js":"j12aT","../../bounds/GetCenterX.js":"570Vf","../../bounds/SetBottom.js":"h0ro8","../../bounds/SetCenterX.js":"jadps","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j12aT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetBottom = function(gameObject) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    return gameObject.y + height - height * gameObject.originY;
};
exports.default = GetBottom;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"570Vf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetCenterX = function(gameObject) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    return gameObject.x - width * gameObject.originX + width * 0.5;
};
exports.default = GetCenterX;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0ro8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetBottom = function(gameObject, value) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    gameObject.y = value - height + height * gameObject.originY;
    return gameObject;
};
exports.default = SetBottom;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jadps":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetCenterX = function(gameObject, x) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    var offsetX = width * gameObject.originX;
    gameObject.x = x + offsetX - width * 0.5;
    return gameObject;
};
exports.default = SetCenterX;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4xYXs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBottomJs = require("../../bounds/GetBottom.js");
var _getBottomJsDefault = parcelHelpers.interopDefault(_getBottomJs);
var _getLeftJs = require("../../bounds/GetLeft.js");
var _getLeftJsDefault = parcelHelpers.interopDefault(_getLeftJs);
var _setBottomJs = require("../../bounds/SetBottom.js");
var _setBottomJsDefault = parcelHelpers.interopDefault(_setBottomJs);
var _setLeftJs = require("../../bounds/SetLeft.js");
var _setLeftJsDefault = parcelHelpers.interopDefault(_setLeftJs);
var BottomLeft = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setLeftJsDefault.default)(gameObject, (0, _getLeftJsDefault.default)(alignIn) - offsetX);
    (0, _setBottomJsDefault.default)(gameObject, (0, _getBottomJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = BottomLeft;

},{"../../bounds/GetBottom.js":"j12aT","../../bounds/GetLeft.js":"9Tp83","../../bounds/SetBottom.js":"h0ro8","../../bounds/SetLeft.js":"3CXiY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Tp83":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetLeft = function(gameObject) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    return gameObject.x - width * gameObject.originX;
};
exports.default = GetLeft;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3CXiY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetLeft = function(gameObject, value) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    gameObject.x = value + width * gameObject.originX;
    return gameObject;
};
exports.default = SetLeft;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5I9j2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBottomJs = require("../../bounds/GetBottom.js");
var _getBottomJsDefault = parcelHelpers.interopDefault(_getBottomJs);
var _getRightJs = require("../../bounds/GetRight.js");
var _getRightJsDefault = parcelHelpers.interopDefault(_getRightJs);
var _setBottomJs = require("../../bounds/SetBottom.js");
var _setBottomJsDefault = parcelHelpers.interopDefault(_setBottomJs);
var _setRightJs = require("../../bounds/SetRight.js");
var _setRightJsDefault = parcelHelpers.interopDefault(_setRightJs);
var BottomRight = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setRightJsDefault.default)(gameObject, (0, _getRightJsDefault.default)(alignIn) + offsetX);
    (0, _setBottomJsDefault.default)(gameObject, (0, _getBottomJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = BottomRight;

},{"../../bounds/GetBottom.js":"j12aT","../../bounds/GetRight.js":"ajCbC","../../bounds/SetBottom.js":"h0ro8","../../bounds/SetRight.js":"c0omX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajCbC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetRight = function(gameObject) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    return gameObject.x + width - width * gameObject.originX;
};
exports.default = GetRight;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c0omX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetRight = function(gameObject, value) {
    var width = (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject);
    gameObject.x = value - width + width * gameObject.originX;
    return gameObject;
};
exports.default = SetRight;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ALaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _centerOnJs = require("../../bounds/CenterOn.js");
var _centerOnJsDefault = parcelHelpers.interopDefault(_centerOnJs);
var _getCenterXJs = require("../../bounds/GetCenterX.js");
var _getCenterXJsDefault = parcelHelpers.interopDefault(_getCenterXJs);
var _getCenterYJs = require("../../bounds/GetCenterY.js");
var _getCenterYJsDefault = parcelHelpers.interopDefault(_getCenterYJs);
var Center = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _centerOnJsDefault.default)(gameObject, (0, _getCenterXJsDefault.default)(alignIn) + offsetX, (0, _getCenterYJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = Center;

},{"../../bounds/CenterOn.js":"kAjGv","../../bounds/GetCenterX.js":"570Vf","../../bounds/GetCenterY.js":"8y2hC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kAjGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setCenterXJs = require("./SetCenterX.js");
var _setCenterXJsDefault = parcelHelpers.interopDefault(_setCenterXJs);
var _setCenterYJs = require("./SetCenterY.js");
var _setCenterYJsDefault = parcelHelpers.interopDefault(_setCenterYJs);
var CenterOn = function(gameObject, x, y) {
    (0, _setCenterXJsDefault.default)(gameObject, x);
    return (0, _setCenterYJsDefault.default)(gameObject, y);
};
exports.default = CenterOn;

},{"./SetCenterX.js":"jadps","./SetCenterY.js":"9mOdO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9mOdO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetCenterY = function(gameObject, y) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    var offsetY = height * gameObject.originY;
    gameObject.y = y + offsetY - height * 0.5;
    return gameObject;
};
exports.default = SetCenterY;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8y2hC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetCenterY = function(gameObject) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    return gameObject.y - height * gameObject.originY + height * 0.5;
};
exports.default = GetCenterY;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lGXgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getCenterYJs = require("../../bounds/GetCenterY.js");
var _getCenterYJsDefault = parcelHelpers.interopDefault(_getCenterYJs);
var _getLeftJs = require("../../bounds/GetLeft.js");
var _getLeftJsDefault = parcelHelpers.interopDefault(_getLeftJs);
var _setCenterYJs = require("../../bounds/SetCenterY.js");
var _setCenterYJsDefault = parcelHelpers.interopDefault(_setCenterYJs);
var _setLeftJs = require("../../bounds/SetLeft.js");
var _setLeftJsDefault = parcelHelpers.interopDefault(_setLeftJs);
var LeftCenter = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setLeftJsDefault.default)(gameObject, (0, _getLeftJsDefault.default)(alignIn) - offsetX);
    (0, _setCenterYJsDefault.default)(gameObject, (0, _getCenterYJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = LeftCenter;

},{"../../bounds/GetCenterY.js":"8y2hC","../../bounds/GetLeft.js":"9Tp83","../../bounds/SetCenterY.js":"9mOdO","../../bounds/SetLeft.js":"3CXiY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"19ZEY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getCenterYJs = require("../../bounds/GetCenterY.js");
var _getCenterYJsDefault = parcelHelpers.interopDefault(_getCenterYJs);
var _getRightJs = require("../../bounds/GetRight.js");
var _getRightJsDefault = parcelHelpers.interopDefault(_getRightJs);
var _setCenterYJs = require("../../bounds/SetCenterY.js");
var _setCenterYJsDefault = parcelHelpers.interopDefault(_setCenterYJs);
var _setRightJs = require("../../bounds/SetRight.js");
var _setRightJsDefault = parcelHelpers.interopDefault(_setRightJs);
var RightCenter = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setRightJsDefault.default)(gameObject, (0, _getRightJsDefault.default)(alignIn) + offsetX);
    (0, _setCenterYJsDefault.default)(gameObject, (0, _getCenterYJsDefault.default)(alignIn) + offsetY);
    return gameObject;
};
exports.default = RightCenter;

},{"../../bounds/GetCenterY.js":"8y2hC","../../bounds/GetRight.js":"ajCbC","../../bounds/SetCenterY.js":"9mOdO","../../bounds/SetRight.js":"c0omX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iCCiH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getCenterXJs = require("../../bounds/GetCenterX.js");
var _getCenterXJsDefault = parcelHelpers.interopDefault(_getCenterXJs);
var _getTopJs = require("../../bounds/GetTop.js");
var _getTopJsDefault = parcelHelpers.interopDefault(_getTopJs);
var _setCenterXJs = require("../../bounds/SetCenterX.js");
var _setCenterXJsDefault = parcelHelpers.interopDefault(_setCenterXJs);
var _setTopJs = require("../../bounds/SetTop.js");
var _setTopJsDefault = parcelHelpers.interopDefault(_setTopJs);
var TopCenter = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setCenterXJsDefault.default)(gameObject, (0, _getCenterXJsDefault.default)(alignIn) + offsetX);
    (0, _setTopJsDefault.default)(gameObject, (0, _getTopJsDefault.default)(alignIn) - offsetY);
    return gameObject;
};
exports.default = TopCenter;

},{"../../bounds/GetCenterX.js":"570Vf","../../bounds/GetTop.js":"TXcjP","../../bounds/SetCenterX.js":"jadps","../../bounds/SetTop.js":"aH1Kc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"TXcjP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var GetTop = function(gameObject) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    return gameObject.y - height * gameObject.originY;
};
exports.default = GetTop;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aH1Kc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../size/GetDisplaySize.js");
var SetTop = function(gameObject, value) {
    var height = (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject);
    gameObject.y = value + height * gameObject.originY;
    return gameObject;
};
exports.default = SetTop;

},{"../../size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MNBJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLeftJs = require("../../bounds/GetLeft.js");
var _getLeftJsDefault = parcelHelpers.interopDefault(_getLeftJs);
var _getTopJs = require("../../bounds/GetTop.js");
var _getTopJsDefault = parcelHelpers.interopDefault(_getTopJs);
var _setLeftJs = require("../../bounds/SetLeft.js");
var _setLeftJsDefault = parcelHelpers.interopDefault(_setLeftJs);
var _setTopJs = require("../../bounds/SetTop.js");
var _setTopJsDefault = parcelHelpers.interopDefault(_setTopJs);
var TopLeft = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setLeftJsDefault.default)(gameObject, (0, _getLeftJsDefault.default)(alignIn) - offsetX);
    (0, _setTopJsDefault.default)(gameObject, (0, _getTopJsDefault.default)(alignIn) - offsetY);
    return gameObject;
};
exports.default = TopLeft;

},{"../../bounds/GetLeft.js":"9Tp83","../../bounds/GetTop.js":"TXcjP","../../bounds/SetLeft.js":"3CXiY","../../bounds/SetTop.js":"aH1Kc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Lftm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getRightJs = require("../../bounds/GetRight.js");
var _getRightJsDefault = parcelHelpers.interopDefault(_getRightJs);
var _getTopJs = require("../../bounds/GetTop.js");
var _getTopJsDefault = parcelHelpers.interopDefault(_getTopJs);
var _setRightJs = require("../../bounds/SetRight.js");
var _setRightJsDefault = parcelHelpers.interopDefault(_setRightJs);
var _setTopJs = require("../../bounds/SetTop.js");
var _setTopJsDefault = parcelHelpers.interopDefault(_setTopJs);
var TopRight = function(gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    (0, _setRightJsDefault.default)(gameObject, (0, _getRightJsDefault.default)(alignIn) + offsetX);
    (0, _setTopJsDefault.default)(gameObject, (0, _getTopJsDefault.default)(alignIn) - offsetY);
    return gameObject;
};
exports.default = TopRight;

},{"../../bounds/GetRight.js":"ajCbC","../../bounds/GetTop.js":"TXcjP","../../bounds/SetRight.js":"c0omX","../../bounds/SetTop.js":"aH1Kc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7VvPk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsConfigJs = require("../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _addChildJs = require("./utils/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
exports.default = {
    addBackground (gameObject, paddingConfig, childKey) {
        if (this.backgroundChildren === undefined) this.backgroundChildren = [];
        if (typeof paddingConfig === "string") {
            childKey = paddingConfig;
            paddingConfig = undefined;
        }
        if (paddingConfig === undefined) paddingConfig = 0;
        (0, _addChildJsDefault.default).call(this, gameObject);
        this.backgroundChildren.push(gameObject);
        var config = this.getSizerConfig(gameObject);
        config.padding = (0, _getBoundsConfigJsDefault.default)(paddingConfig);
        if (childKey !== undefined) this.addChildrenMap(childKey, gameObject);
        return this;
    },
    isBackground (gameObject) {
        if (this.backgroundChildren === undefined) return false;
        return this.backgroundChildren.indexOf(gameObject) !== -1;
    }
};

},{"../utils/GetBoundsConfig.js":"arnT9","./utils/AddChild.js":"7fpET","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"arnT9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsConfigJs = require("../../../plugins/utils/bounds/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
exports.default = (0, _getBoundsConfigJsDefault.default);

},{"../../../plugins/utils/bounds/GetBoundsConfig.js":"feHso","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"feHso":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var GetBoundsConfig = function(config, out) {
    if (out === undefined) out = {};
    if (typeof config === "number") {
        out.left = config;
        out.right = config;
        out.top = config;
        out.bottom = config;
    } else {
        out.left = GetValue(config, "left", 0);
        out.right = GetValue(config, "right", 0);
        out.top = GetValue(config, "top", 0);
        out.bottom = GetValue(config, "bottom", 0);
    }
    return out;
};
exports.default = GetBoundsConfig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7fpET":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("../../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
const ContainerAdd = (0, _containerJsDefault.default).prototype.add;
var AddChild = function(gameObject) {
    ContainerAdd.call(this, gameObject);
    if (this.sizerEventsEnable) {
        gameObject.emit("sizer.add", gameObject, this);
        this.emit("add", gameObject, this);
    }
    return this;
};
exports.default = AddChild;

},{"../../container/Container.js":"4qgeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4kWTX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeChildJs = require("./utils/RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _getParentSizerMethodsJs = require("./GetParentSizerMethods.js");
var _getParentSizerMethodsJsDefault = parcelHelpers.interopDefault(_getParentSizerMethodsJs);
const RemoveItem = Phaser.Utils.Array.Remove;
exports.default = {
    removeFromParentSizer () {
        var parent = (0, _getParentSizerMethodsJsDefault.default).getParentSizer(gameObject);
        if (parent) parent.remove(this);
        return this;
    },
    removeBackground (gameObject1, destroyChild) {
        if (this.backgroundChildren === undefined) return this;
        if (this.getParentSizer(gameObject1) !== this) return this;
        RemoveItem(this.backgroundChildren, gameObject1);
        (0, _removeChildJsDefault.default).call(this, gameObject1, destroyChild);
        return this;
    },
    removeAllBackgrounds (destroyChild) {
        if (this.backgroundChildren === undefined) return this;
        for(var i = this.backgroundChildren.length - 1; i >= 0; i--)this.remove(this.backgroundChildren[i], destroyChild);
        return this;
    }
};

},{"./utils/RemoveChild.js":"95KmV","./GetParentSizerMethods.js":"03OCx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95KmV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("../../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
const RemoveItem = Phaser.Utils.Array.Remove;
const ContainerRemove = (0, _containerJsDefault.default).prototype.remove;
var RemoveChild = function(gameObject, destroyChild) {
    if (this.isBackground(gameObject)) RemoveItem(this.backgroundChildren, gameObject);
    ContainerRemove.call(this, gameObject, destroyChild);
    if (!destroyChild && this.sizerEventsEnable) {
        gameObject.emit("sizer.remove", gameObject, this);
        this.emit("remove", gameObject, this);
    }
    return this;
};
exports.default = RemoveChild;

},{"../../container/Container.js":"4qgeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03OCx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetParent = function(gameObject, name) {
    var parent = null;
    if (name === undefined) {
        if (gameObject.hasOwnProperty("rexContainer")) {
            parent = gameObject.rexContainer.parent;
            if (parent) {
                if (!parent.isRexSizer) // Try to get sizer parent
                parent = GetParent(parent);
            } else parent = null;
        }
    } else {
        parent = GetParent(gameObject);
        while(parent){
            if (parent.name === name) break;
            parent = GetParent(parent);
        }
    }
    return parent;
};
var GetTopmostParent = function(gameObject) {
    var parent = GetParent(gameObject);
    while(parent){
        gameObject = parent;
        parent = GetParent(parent);
    }
    return gameObject;
};
exports.default = {
    getParentSizer (gameObject, name) {
        if (typeof gameObject === "string") {
            name = gameObject;
            gameObject = undefined;
        }
        if (gameObject === undefined) gameObject = this;
        return GetParent(gameObject, name);
    },
    getTopmostSizer (gameObject) {
        if (gameObject === undefined) gameObject = this;
        return GetTopmostParent(gameObject);
    },
    hasParentSizer (parentGameObject, gameObject) {
        if (gameObject === undefined) gameObject = this;
        var parent = GetParent(gameObject);
        while(parent){
            if (parent === parentGameObject) return true;
            parent = GetParent(parent);
        }
        return false;
    },
    hasChild (child, gameObject) {
        if (gameObject === undefined) gameObject = this;
        return this.hasParentSizer(gameObject, child);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NaDA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AddChildrenMap = function(key, gameObject) {
    if (typeof key === "string") this.childrenMap[key] = gameObject;
    else {
        var config = key;
        for(key in config)this.childrenMap[key] = config[key];
    }
    return this;
};
exports.default = AddChildrenMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BxBA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemoveChildrenMap = function(key) {
    if (typeof key === "object") {
        var gameObject = key;
        for(var key in this.childrenMap)if (this.childrenMap[key] === gameObject) {
            delete this.childrenMap[key];
            return this;
        }
    }
    delete this.childrenMap[key];
    return this;
};
exports.default = RemoveChildrenMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0piw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetElement = function(mapNameList, recursive) {
    if (typeof mapNameList === "string") mapNameList = mapNameList.split(".");
    if (mapNameList.length === 0) return undefined;
    var name = mapNameList.shift(), element = null;
    if (name.charAt(0) === "#") {
        name = name.substring(1);
        element = this.getByName(name, recursive);
    } else if (name.indexOf("[") === -1) {
        if (this.childrenMap) element = this.childrenMap[name];
    } else {
        var innerMatch = name.match(RE_OBJ);
        if (innerMatch != null) {
            if (this.childrenMap) {
                var elements = this.childrenMap[innerMatch[1]];
                if (elements) element = elements[innerMatch[2]];
            }
        }
    }
    if (mapNameList.length === 0) return element;
    else if (element && element.childrenMap) return element.getElement(mapNameList);
    else return null;
};
const RE_OBJ = /(\S+)\[(\d+)\]/i;
exports.default = GetElement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huO1Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _paddingMethodsJs = require("../../../plugins/utils/padding/PaddingMethods.js");
exports.default = {
    getInnerPadding (key) {
        return (0, _paddingMethodsJs.GetPadding)(this.space, key);
    },
    setInnerPadding (key, value) {
        (0, _paddingMethodsJs.SetPadding)(this.space, key, value);
        return this;
    },
    getOuterPadding (key) {
        return (0, _paddingMethodsJs.GetPadding)(this.getSizerConfig(this).padding, key);
    },
    setOuterPadding (key, value) {
        (0, _paddingMethodsJs.SetPadding)(this.getSizerConfig(this).padding, key, value);
        return this;
    },
    getChildOuterPadding (child, key) {
        if (typeof child === "string") child = this.getElement(child);
        return (0, _paddingMethodsJs.GetPadding)(this.getSizerConfig(child).padding, key);
    },
    setChildOuterPadding (child, key, value) {
        if (typeof child === "string") child = this.getElement(child);
        (0, _paddingMethodsJs.SetPadding)(this.getSizerConfig(child).padding, key, value);
        return this;
    }
};

},{"../../../plugins/utils/padding/PaddingMethods.js":"dcX3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxpW2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResolveWidth = function(width) {
    var childrenWidth = this.childrenWidth;
    var minWidth = this.minWidth !== undefined ? this.minWidth : 0;
    if (width === undefined) {
        width = Math.max(minWidth, childrenWidth);
        if (minWidth > 0 && childrenWidth > minWidth) console.warn(`Layout width warn: ${this.constructor.name}'s minWidth (${minWidth}) < childrenWidth (${childrenWidth})`);
    } else if (minWidth > width || childrenWidth > width) console.warn(`Layout width warn: ${this.constructor.name}'s minWidth (${minWidth}) or childrenWidth (${childrenWidth} > targetWidth ${width}`);
    return width;
};
exports.default = ResolveWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7L0Xh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResolveChildrenWidth = function(parentWidth) {
    // Resolve width of sizer children
    var child, childWidth;
    for(var i in this.sizerChildren){
        child = this.sizerChildren[i];
        if (child && child.isRexSizer && !child.ignoreLayout) {
            childWidth = this.getExpandedChildWidth(child, parentWidth);
            childWidth = child.resolveWidth(childWidth);
            child.resolveChildrenWidth(childWidth);
        }
    }
};
exports.default = ResolveChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gy3cB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResolveHeight = function(height) {
    var childrenHeight = this.childrenHeight;
    var minHeight = this.minHeight !== undefined ? this.minHeight : 0;
    if (height === undefined) {
        height = Math.max(minHeight, childrenHeight);
        if (minHeight > 0 && childrenHeight > minHeight) console.warn(`Layout height warn: ${this.constructor.name}'s minHeight (${minHeight}) < childrenHeight (${childrenHeight})`);
    } else if (minHeight > height || childrenHeight > height) console.warn(`Layout height warn: ${this.constructor.name}'s minHeight (${minHeight}) or childrenHeight (${childrenHeight}) > targetHeight (${height})`);
    return height;
};
exports.default = ResolveHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"W49ma":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PostResolveSize = function(width, height) {};
exports.default = PostResolveSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kl0Na":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildWidth = function(child) {
    var childWidth;
    if (child.isRexSizer) childWidth = Math.max(child.minWidth, child.childrenWidth);
    else if (child.minWidth !== undefined) childWidth = child.minWidth;
    else childWidth = (0, _getDisplaySizeJs.GetDisplayWidth)(child);
    return childWidth;
};
exports.default = GetChildWidth;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wvVwE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildHeight = function(child) {
    var childHeight;
    if (child.isRexSizer) childHeight = Math.max(child.minHeight, child.childrenHeight);
    else if (child.minHeight !== undefined) childHeight = child.minHeight;
    else childHeight = (0, _getDisplaySizeJs.GetDisplayHeight)(child);
    return childHeight;
};
exports.default = GetChildHeight;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iZAAV":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildWidth = function(child, parentWidth) {
    return parentWidth;
};
exports.default = GetExpandedChildWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6H6AG":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildHeight = function(child, parentHeight) {
    return parentHeight;
};
exports.default = GetExpandedChildHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dP96H":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenWidth = function() {
    return 0;
};
exports.default = GetChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"98WxN":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenHeight = function() {
    return 0;
};
exports.default = GetChildrenHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5d7vv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetAllChildrenSizers = function(out) {
    if (out === undefined) out = [];
    var startIdx = out.length;
    var children = this.getChildrenSizers(out);
    var endIdx = out.length;
    for(var i = startIdx; i < endIdx; i++)children[i].getAllChildrenSizers(out);
    return out;
};
exports.default = GetAllChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NSGF":[function(require,module,exports) {
// Default method
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gLOiq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getShownChildren (out) {
        if (out === undefined) out = [];
        var children = this.children, child;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            child = children[i];
            if (child.rexSizer && child.rexSizer.hidden) continue;
            out.push(child);
        }
        return out;
    },
    getAllShownChildren (out) {
        if (out === undefined) out = [];
        var queue = [
            this
        ];
        while(queue.length > 0){
            var current = queue.shift();
            if (current.rexSizer && current.rexSizer.hidden) continue;
            if (current !== this) out.push(current);
            if (current.isRexContainerLite) queue.push(...current.children);
        }
        return out;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Q5WG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PreLayout = function() {
    this._childrenWidth = undefined;
    this._childrenHeight = undefined;
    var children = this.getChildrenSizers(), child;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.ignoreLayout) continue;
        child.preLayout();
    }
};
exports.default = PreLayout;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wOyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Layout = function() {
    // Save scale
    var scaleXSave = this.scaleX;
    var scaleYSave = this.scaleY;
    var scale1 = scaleXSave === 1 && scaleYSave === 1;
    if (!scale1) this.setScale(1);
    // Run layout with scale = 1
    this.runLayout();
    // Restore scale
    if (!scale1) this.setScale(scaleXSave, scaleYSave);
    return this;
};
exports.default = Layout;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91LiD":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RunLayout = function(parent, newWidth, newHeight) {
    // Skip hidden or !dirty sizer
    if (this.ignoreLayout) return this;
    var isTopmostParent = !parent;
    // Preprocessor, top parent only
    if (isTopmostParent) this.preLayout();
    // Calculate parent width
    newWidth = this.resolveWidth(newWidth);
    // Calculate all children width, run width wrap
    if (isTopmostParent) {
        this.resolveChildrenWidth(newWidth);
        this.runWidthWrap(newWidth);
    }
    // Calculate parent height
    newHeight = this.resolveHeight(newHeight);
    // The last chance of resolving size
    this.postResolveSize(newWidth, newHeight);
    // Resize parent
    this.resize(newWidth, newHeight);
    if (this.sizerEventsEnable) {
        if (this.layoutedChildren === undefined) this.layoutedChildren = [];
    }
    // Layout children    
    this.layoutChildren();
    // Layout background children
    this.layoutBackgrounds();
    if (this.sizerEventsEnable) {
        this.emit("postlayout", this.layoutedChildren, this);
        this.layoutedChildren.length = 0;
    }
    return this.postLayout();
};
exports.default = RunLayout;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4B46P":[function(require,module,exports) {
// Override
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var LayoutChildren = function() {};
exports.default = LayoutChildren;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9IS4c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var PostLayout = function(parent, newWidth, newHeight) {
    if (this._anchor) this._anchor.updatePosition();
    return this;
};
exports.default = PostLayout;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTYQn":[function(require,module,exports) {
// Default method
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RunWidthWrap = function(parentWidth) {
    var child, childWidth;
    for(var i in this.sizerChildren){
        child = this.sizerChildren[i];
        if (!child || child.isRexSizer && child.ignoreLayout || !child.runWidthWrap) continue;
        childWidth = this.getExpandedChildWidth(child, parentWidth);
        if (child.isRexSizer) childWidth = child.resolveWidth(childWidth);
        child.runWidthWrap(childWidth);
    }
    return this;
};
exports.default = RunWidthWrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"MDGzC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anchorJs = require("../anchor/Anchor.js");
var _anchorJsDefault = parcelHelpers.interopDefault(_anchorJs);
var SetAnchor = function(config) {
    if (config === undefined) config = {};
    // Assign default onResizeCallback if not given    
    var hasMinWidth = config.hasOwnProperty("width");
    var hasMinHeight = config.hasOwnProperty("height");
    var hasOnResizeCallback = config.hasOwnProperty("onResizeCallback");
    if ((hasMinWidth || hasMinHeight) && !hasOnResizeCallback) config.onResizeCallback = function(width, height, sizer) {
        if (hasMinWidth) sizer.setMinWidth(width);
        if (hasMinHeight) sizer.setMinHeight(height);
        sizer.layout();
    };
    if (this._anchor === undefined) this._anchor = new (0, _anchorJsDefault.default)(this, config);
    else this._anchor.resetFromJSON(config);
    return this;
};
exports.default = SetAnchor;

},{"../anchor/Anchor.js":"1nc3X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1nc3X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anchorJs = require("../../../plugins/behaviors/anchor/Anchor.js");
var _anchorJsDefault = parcelHelpers.interopDefault(_anchorJs);
exports.default = (0, _anchorJsDefault.default);

},{"../../../plugins/behaviors/anchor/Anchor.js":"904wO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"904wO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _getViewportJs = require("../../utils/system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
class Anchor extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, {
            eventEmitter: false
        });
        // No event emitter
        // this.parent = gameObject;
        this.viewport = undefined;
        this.resetFromJSON(config);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.autoAnchor(false);
        this.viewport = undefined;
        this.onUpdateViewportCallback = undefined;
        this.onUpdateViewportCallbackScope = undefined;
        this.onResizeCallback = undefined;
        this.onResizeCallbackScope = undefined;
        super.shutdown(fromScene);
    }
    resetFromJSON(o) {
        if (o === undefined) o = {};
        // Position
        var alignX, configX;
        if (o.x !== undefined) {
            alignX = null;
            configX = o.x;
        } else if (o.left !== undefined) {
            alignX = 0;
            configX = o.left;
        } else if (o.right !== undefined) {
            alignX = 1;
            configX = o.right;
        } else if (o.centerX !== undefined) {
            alignX = 0.5;
            configX = o.centerX;
        }
        var alignY, configY;
        if (o.y !== undefined) {
            alignY = null;
            configY = o.y;
        } else if (o.top !== undefined) {
            alignY = 0;
            configY = o.top;
        } else if (o.bottom !== undefined) {
            alignY = 1;
            configY = o.bottom;
        } else if (o.centerY !== undefined) {
            alignY = 0.5;
            configY = o.centerY;
        }
        var percentageX, offsetX;
        if (configX !== undefined) {
            configX = configX.replace("left", "0%").replace("right", "100%").replace("center", "50%").split("%");
            percentageX = parseFloat(configX[0]) / 100;
            offsetX = configX[1] === "" ? 0 : parseFloat(configX[1]);
        }
        var percentageY, offsetY;
        if (configY !== undefined) {
            configY = configY.replace("top", "0%").replace("bottom", "100%").replace("center", "50%").split("%");
            percentageY = parseFloat(configY[0]) / 100;
            offsetY = configY[1] === "" ? 0 : parseFloat(configY[1]);
        }
        // Size
        var configWidth = o.width;
        var percentageWidth, paddingWidth;
        if (configWidth !== undefined) {
            configWidth = configWidth.split("%");
            percentageWidth = parseFloat(configWidth[0]) / 100;
            paddingWidth = configWidth[1] === "" ? 0 : parseFloat(configWidth[1]);
        }
        var configHeight = o.height;
        var percentageHeight, paddingHeight;
        if (configHeight !== undefined) {
            configHeight = configHeight.split("%");
            percentageHeight = parseFloat(configHeight[0]) / 100;
            paddingHeight = configHeight[1] === "" ? 0 : parseFloat(configHeight[1]);
        }
        // Position
        this.setAlign(alignX, alignY);
        this.setPercentage(percentageX, percentageY);
        this.setOffset(offsetX, offsetY);
        // Size
        this.setSizePercentage(percentageWidth, percentageHeight);
        this.setSizePadding(paddingWidth, paddingHeight);
        var onResizeCallback = o.onResizeCallback;
        var onResizeCallbackScope = o.onResizeCallbackScope;
        if (onResizeCallback !== undefined) this.setResizeCallback(onResizeCallback, onResizeCallbackScope);
        var onUpdateViewportCallback = o.onUpdateViewportCallback;
        var onUpdateViewportCallbackScope = o.onUpdateViewportCallbackScope;
        if (onUpdateViewportCallback !== undefined) this.setUpdateViewportCallback(onUpdateViewportCallback, onUpdateViewportCallbackScope);
        this.autoAnchor(o.enable);
        return this;
    }
    autoAnchor(enable) {
        if (enable === undefined) enable = true;
        enable = !!enable;
        if (this.autoAnchorEnable === enable) return this;
        if (enable) {
            this.scene.sys.scale.on("resize", this.anchor, this);
            this.anchor();
        } else this.scene.sys.scale.off("resize", this.anchor, this);
        this.autoAnchorEnable = enable;
        return this;
    }
    // Position
    setAlign(x, y) {
        this.alignX = x;
        this.alignY = y;
        return this;
    }
    setPercentage(x, y) {
        this.percentageX = x;
        this.percentageY = y;
        return this;
    }
    setOffset(x, y) {
        this.offsetX = x;
        this.offsetY = y;
        return this;
    }
    // Size
    setSizePercentage(width, height) {
        this.percentageWidth = width;
        this.percentageHeight = height;
        return this;
    }
    setSizePadding(width, height) {
        this.paddingWidth = width;
        this.paddingHeight = height;
        return this;
    }
    setResizeCallback(callback, scope) {
        this.onResizeCallback = callback;
        this.onResizeCallbackScope = scope;
        return this;
    }
    setUpdateViewportCallback(callback, scope) {
        this.onUpdateViewportCallback = callback;
        this.onUpdateViewportCallbackScope = scope;
        return this;
    }
    anchor() {
        this.updateViewport();
        this.updateSize();
        this.updatePosition();
        return this;
    }
    updateSize() {
        var callback = this.onResizeCallback, scope = this.onResizeCallbackScope;
        var newWidth = this.anchorWidth, newHeight = this.anchorHeight;
        if (newWidth === undefined && newHeight === undefined || !callback) return;
        var gameObject = this.parent;
        if (newWidth === undefined) newWidth = gameObject.width;
        if (newHeight === undefined) newHeight = gameObject.height;
        if (scope) callback.call(scope, newWidth, newHeight, gameObject, this);
        else callback(newWidth, newHeight, gameObject, this);
    }
    updatePosition() {
        var gameObject = this.parent;
        if (this.alignX === null) gameObject.x = this.anchorX;
        else if (this.alignX !== undefined) gameObject.x = this.anchorX + gameObject.displayWidth * (gameObject.originX - this.alignX);
        if (this.alignY === null) gameObject.y = this.anchorY;
        else if (this.alignY !== undefined) gameObject.y = this.anchorY + gameObject.displayHeight * (gameObject.originY - this.alignY);
        return this;
    }
    get anchorX() {
        return this.viewport.x + this.viewport.width * this.percentageX + this.offsetX;
    }
    get anchorY() {
        return this.viewport.y + this.viewport.height * this.percentageY + this.offsetY;
    }
    get anchorWidth() {
        if (this.percentageWidth === undefined) return undefined;
        return this.viewport.width * this.percentageWidth + this.paddingWidth;
    }
    get anchorHeight() {
        if (this.percentageHeight === undefined) return undefined;
        return this.viewport.height * this.percentageHeight + this.paddingHeight;
    }
    updateViewport() {
        var camera = this.parent.scene.cameras.main;
        this.viewport = (0, _getViewportJsDefault.default)(this.scene, camera, this.viewport);
        var viewport = this.viewport;
        var callback = this.onUpdateViewportCallback, scope = this.onUpdateViewportCallbackScope;
        if (callback) {
            if (scope) callback.call(scope, viewport, this.parent, this);
            else callback(viewport, this.parent, this);
        }
    }
}
exports.default = Anchor;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/system/GetViewport.js":"2Aw1Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8iY6L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _popupJs = require("../../../plugins/popup.js");
var _popupJsDefault = parcelHelpers.interopDefault(_popupJs);
var _scaleDownDestroyJs = require("../../../plugins/scale-down-destroy.js");
var _scaleDownDestroyJsDefault = parcelHelpers.interopDefault(_scaleDownDestroyJs);
var _yoyoJs = require("../../../plugins/behaviors/scale/Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
var _waitEventJs = require("../utils/WaitEvent.js");
var _getParentSizerMethodsJs = require("./GetParentSizerMethods.js");
var _getParentSizerMethodsJsDefault = parcelHelpers.interopDefault(_getParentSizerMethodsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitScale = function(gameObject, scale) {
    // Route 'complete' of scale to gameObject
    scale.completeEventName = undefined;
    scale.on("complete", function() {
        if (scale.completeEventName) {
            gameObject.emit(scale.completeEventName, gameObject);
            scale.completeEventName = undefined;
        }
    });
    // Update local state
    scale.on("update", function() {
        var parent = (0, _getParentSizerMethodsJsDefault.default).getParentSizer(gameObject);
        if (parent) parent.resetChildPositionState(gameObject);
    });
};
exports.default = {
    popUp (duration, orientation, ease) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            orientation = config.orientation;
            ease = config.ease;
        }
        var isInit = this._scaleBehavior === undefined;
        this._scaleBehavior = (0, _popupJsDefault.default)(this, duration, orientation, ease, this._scaleBehavior);
        if (isInit) OnInitScale(this, this._scaleBehavior);
        this._scaleBehavior.completeEventName = "popup.complete";
        return this;
    },
    popUpPromise (duration, orientation, ease) {
        this.popUp(duration, orientation, ease);
        return (0, _waitEventJs.WaitComplete)(this._scaleBehavior);
    },
    scaleDownDestroy (duration, orientation, ease, destroyMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            orientation = config.orientation;
            ease = config.ease;
            destroyMode = config.destroy;
        }
        var isInit = this._scaleBehavior === undefined;
        this._scaleBehavior = (0, _scaleDownDestroyJsDefault.default)(this, duration, orientation, ease, destroyMode, this._scaleBehavior);
        if (isInit) OnInitScale(this, this._scaleBehavior);
        this._scaleBehavior.completeEventName = "scaledown.complete";
        return this;
    },
    scaleDownDestroyPromise (duration, orientation, ease, destroyMode) {
        this.scaleDownDestroy(duration, orientation, ease, destroyMode);
        return (0, _waitEventJs.WaitComplete)(this._scaleBehavior);
    },
    scaleDown (duration, orientation, ease) {
        this.scaleDownDestroy(duration, orientation, ease, false);
        return this;
    },
    scaleDownPromise (duration, orientation, ease) {
        this.scaleDown(duration, orientation, ease);
        return (0, _waitEventJs.WaitComplete)(this._scaleBehavior);
    },
    scaleYoyo (duration, peakValue, repeat, orientation, ease) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            peakValue = config.peakValue;
            repeat = config.repeat;
            orientation = config.orientation;
            ease = config.ease;
        }
        var isInit = this._scaleBehavior === undefined;
        this._scaleBehavior = (0, _yoyoJsDefault.default)(this, duration, peakValue, repeat, orientation, ease, this._scaleBehavior);
        if (isInit) OnInitScale(this, this._scaleBehavior);
        this._scaleBehavior.completeEventName = "scaleyoyo.complete";
        return this;
    },
    scaleYoyoPromise (duration, peakValue, repeat, orientation, ease) {
        this.scaleYoyo(duration, peakValue, repeat, orientation, ease);
        return (0, _waitEventJs.WaitComplete)(this._scaleBehavior);
    }
};

},{"../../../plugins/popup.js":"fwUSv","../../../plugins/scale-down-destroy.js":"hAt1k","../../../plugins/behaviors/scale/Yoyo.js":"cW9YK","../utils/WaitEvent.js":"39jq1","./GetParentSizerMethods.js":"03OCx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fwUSv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _popUpJs = require("./behaviors/scale/PopUp.js");
var _popUpJsDefault = parcelHelpers.interopDefault(_popUpJs);
exports.default = (0, _popUpJsDefault.default);

},{"./behaviors/scale/PopUp.js":"eBWnT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eBWnT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleJs = require("./Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var PopUp = function(gameObject, duration, orientation, ease, scale) {
    if (ease === undefined) ease = "Cubic";
    // Ease scale from 0 to current scale
    var start, end;
    switch(orientation){
        case 0:
        case "x":
            start = {
                x: 0
            };
            end = {
                x: gameObject.scaleX
            };
            break;
        case 1:
        case "y":
            start = {
                y: 0
            };
            end = {
                y: gameObject.scaleY
            };
            break;
        default:
            start = 0;
            end = gameObject.scale;
            break;
    }
    var config = {
        mode: 0,
        start: start,
        end: end,
        duration: duration,
        ease: ease
    };
    if (scale === undefined) scale = new (0, _scaleJsDefault.default)(gameObject, config);
    else scale.resetFromJSON(config);
    scale.restart();
    return scale;
};
exports.default = PopUp;

},{"./Scale.js":"ivJli","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ivJli":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Scale extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.scaleStart = {};
        this.scaleEnd = {};
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setMode(GetValue(o, "mode", 0));
        this.setScaleRange(GetAdvancedValue(o, "start", undefined), GetAdvancedValue(o, "end", 0));
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = MODE[m];
        this.mode = m;
        return this;
    }
    setScaleRange(start, end) {
        if (typeof start === "number") {
            this.startX = start;
            this.startY = start;
        } else {
            this.startX = GetAdvancedValue(start, "x", this.parent.scaleX);
            this.startY = GetAdvancedValue(start, "y", this.parent.scaleY);
        }
        if (typeof end === "number") {
            this.endX = end;
            this.endY = end;
        } else {
            this.endX = GetAdvancedValue(end, "x", undefined);
            this.endY = GetAdvancedValue(end, "y", undefined);
        }
        this.hasScaleX = this.startX !== undefined && this.endX !== undefined;
        this.hasScaleY = this.startY !== undefined && this.endY !== undefined;
        return this;
    }
    start() {
        if (this.timer.isRunning) return this;
        var gameObject = this.parent;
        if (this.hasScaleX) gameObject.scaleX = this.startX;
        if (this.hasScaleY) gameObject.scaleY = this.startY;
        var repeat = this.repeat;
        if (this.mode === 2) {
            if (repeat !== -1) repeat = (repeat + 1) * 2 - 1;
        }
        this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(repeat);
        super.start();
        return this;
    }
    updateGameObject(gameObject, timer) {
        var t = timer.t;
        if (timer.isOddIteration) t = 1 - t;
        t = this.easeFn(t);
        if (this.hasScaleX) gameObject.scaleX = Linear(this.startX, this.endX, t);
        if (this.hasScaleY) gameObject.scaleY = Linear(this.startY, this.endY, t);
    }
    complete() {
        super.complete();
        if (this.mode === 1) this.parent.destroy();
        return this;
    }
}
const MODE = {
    stop: 0,
    destroy: 1,
    yoyo: 2
};
exports.default = Scale;

},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAt1k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleDownDestroyJs = require("./behaviors/scale/ScaleDownDestroy.js");
var _scaleDownDestroyJsDefault = parcelHelpers.interopDefault(_scaleDownDestroyJs);
exports.default = (0, _scaleDownDestroyJsDefault.default);

},{"./behaviors/scale/ScaleDownDestroy.js":"9L9sM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9L9sM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleJs = require("./Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var ScaleDownDestroy = function(gameObject, duration, orientation, ease, destroyMode, scale) {
    if (ease === undefined) ease = "Linear";
    // Ease from current scale to 0
    if (destroyMode instanceof (0, _scaleJsDefault.default)) {
        scale = destroyMode;
        destroyMode = undefined;
    }
    if (destroyMode === undefined) destroyMode = true;
    var config = {};
    config.mode = destroyMode ? 1 : 0;
    switch(orientation){
        case 0:
        case "x":
            config.end = {
                x: 0
            };
            break;
        case 1:
        case "y":
            config.end = {
                y: 0
            };
            break;
        default:
            config.end = 0;
            break;
    }
    config.duration = duration;
    config.ease = ease;
    if (scale === undefined) scale = new (0, _scaleJsDefault.default)(gameObject, config);
    else scale.resetFromJSON(config);
    scale.restart();
    return scale;
};
exports.default = ScaleDownDestroy;

},{"./Scale.js":"ivJli","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cW9YK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleJs = require("./Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var Yoyo = function(gameObject, duration, peakValue, repeat, orientation, ease, scale) {
    if (peakValue === undefined) peakValue = 1.2;
    if (repeat === undefined) repeat = 0;
    if (ease === undefined) ease = "Cubic";
    // Ease scale from 0 to current scale
    var start, end;
    switch(orientation){
        case 0:
        case "x":
            start = {
                x: gameObject.scaleX
            };
            end = {
                x: peakValue
            };
            break;
        case 1:
        case "y":
            start = {
                y: gameObject.scaleX
            };
            end = {
                y: peakValue
            };
            break;
        default:
            start = gameObject.scaleX;
            end = peakValue;
            break;
    }
    var config = {
        mode: 2,
        start: start,
        end: end,
        duration: duration / 2,
        ease: ease,
        repeat: repeat
    };
    if (scale === undefined) scale = new (0, _scaleJsDefault.default)(gameObject, config);
    else scale.resetFromJSON(config);
    scale.restart();
    return scale;
};
exports.default = Yoyo;

},{"./Scale.js":"ivJli","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"39jq1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WaitEvent", ()=>(0, _waitEventJs.WaitEvent));
parcelHelpers.export(exports, "WaitComplete", ()=>(0, _waitEventJs.WaitComplete));
var _waitEventJs = require("../../../plugins/utils/promise/WaitEvent.js");

},{"../../../plugins/utils/promise/WaitEvent.js":"6ljEN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21J3d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("../fade/Fade.js");
var _waitEventJs = require("../utils/WaitEvent.js");
var _getParentSizerMethodsJs = require("./GetParentSizerMethods.js");
var _getParentSizerMethodsJsDefault = parcelHelpers.interopDefault(_getParentSizerMethodsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitFade = function(gameObject, fade) {
    // Route 'complete' of fade to gameObject
    fade.completeEventName = undefined;
    fade.on("complete", function() {
        if (fade.completeEventName) {
            gameObject.emit(fade.completeEventName, gameObject);
            fade.completeEventName = undefined;
        }
    });
    // Update local state
    fade.on("update", function() {
        var parent = (0, _getParentSizerMethodsJsDefault.default).getParentSizer(gameObject);
        if (parent) parent.resetChildAlphaState(gameObject);
    });
};
exports.default = {
    fadeIn (duration, alpha) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            alpha = config.alpha;
        }
        var isInit = this._fade === undefined;
        this._fade = (0, _fadeJs.FadeIn)(this, duration, alpha, this._fade);
        if (isInit) OnInitFade(this, this._fade);
        this._fade.completeEventName = "fadein.complete";
        return this;
    },
    fadeInPromise (duration, alpha) {
        this.fadeIn(duration, alpha);
        return (0, _waitEventJs.WaitComplete)(this._fade);
    },
    fadeOutDestroy (duration, destroyMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            destroyMode = config.destroy;
        }
        var isInit = this._fade === undefined;
        this._fade = (0, _fadeJs.FadeOutDestroy)(this, duration, destroyMode, this._fade);
        if (isInit) OnInitFade(this, this._fade);
        this._fade.completeEventName = "fadeout.complete";
        return this;
    },
    fadeOutDestroyPromise (duration, destroyMode) {
        this.fadeOutDestroy(duration, destroyMode);
        return (0, _waitEventJs.WaitComplete)(this._fade);
    },
    fadeOut (duration) {
        this.fadeOutDestroy(duration, false);
        return this;
    },
    fadeOutPromise (duration) {
        this.fadeOut(duration);
        return (0, _waitEventJs.WaitComplete)(this._fade);
    }
};

},{"../fade/Fade.js":"6AdBr","../utils/WaitEvent.js":"39jq1","./GetParentSizerMethods.js":"03OCx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AdBr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Fade", ()=>(0, _fadeJsDefault.default));
parcelHelpers.export(exports, "FadeIn", ()=>(0, _fadeInJsDefault.default));
parcelHelpers.export(exports, "FadeOutDestroy", ()=>(0, _fadeOutDestroyJsDefault.default));
var _fadeJs = require("../../../plugins/fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
var _fadeInJs = require("../../../plugins/fade-in.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutDestroyJs = require("../../../plugins/fade-out-destroy.js");
var _fadeOutDestroyJsDefault = parcelHelpers.interopDefault(_fadeOutDestroyJs);

},{"../../../plugins/fade.js":"4AvzU","../../../plugins/fade-in.js":"3iZji","../../../plugins/fade-out-destroy.js":"cQBis","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4AvzU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("./behaviors/fade/Fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
exports.default = (0, _fadeJsDefault.default);

},{"./behaviors/fade/Fade.js":"kxCNh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxCNh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Fade extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setMode(GetValue(o, "mode", 0));
        this.setAlphaRange(GetAdvancedValue(o, "start", this.parent.alpha), GetAdvancedValue(o, "end", 0));
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = MODE[m];
        this.mode = m;
        return this;
    }
    setAlphaRange(start, end) {
        this.alphaStart = start;
        this.alphaEnd = end;
        return this;
    }
    start() {
        if (this.timer.isRunning) return this;
        var gameObject = this.parent;
        gameObject.setAlpha(this.alphaStart);
        this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(this.mode === 2 ? -1 : 0);
        super.start();
        return this;
    }
    updateGameObject(gameObject, timer) {
        var t = timer.t;
        if (timer.isOddIteration) t = 1 - t;
        gameObject.alpha = Linear(this.alphaStart, this.alphaEnd, t);
    }
    complete() {
        super.complete();
        if (this.mode === 1) this.parent.destroy();
        return this;
    }
}
const MODE = {
    stop: 0,
    destroy: 1,
    yoyo: 2
};
exports.default = Fade;

},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3iZji":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("./fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var FadeIn = function(gameObject, duration, alpha, fade) {
    var startAlpha, endAlpha;
    if (IsPlainObject(alpha)) {
        startAlpha = alpha.start;
        endAlpha = alpha.end;
    } else endAlpha = alpha;
    if (startAlpha === undefined) startAlpha = 0;
    if (endAlpha === undefined) endAlpha = 1;
    var config = {
        mode: 0,
        start: startAlpha,
        end: endAlpha,
        duration: duration
    };
    if (fade === undefined) fade = new (0, _fadeJsDefault.default)(gameObject, config);
    else fade.resetFromJSON(config);
    fade.restart();
    return fade;
};
exports.default = FadeIn;

},{"./fade.js":"4AvzU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQBis":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fadeJs = require("./fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
var FadeOutDestroy = function(gameObject, duration, destroyMode, fade) {
    if (destroyMode instanceof (0, _fadeJsDefault.default)) {
        fade = destroyMode;
        destroyMode = undefined;
    }
    if (destroyMode === undefined) destroyMode = true;
    var config = {
        mode: destroyMode ? 1 : 0,
        end: 0,
        duration: duration
    };
    if (fade === undefined) fade = new (0, _fadeJsDefault.default)(gameObject, config);
    else fade.resetFromJSON(config);
    fade.restart();
    return fade;
};
exports.default = FadeOutDestroy;

},{"./fade.js":"4AvzU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"emShr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeMoveJs = require("../easemove/EaseMove.js");
var _waitEventJs = require("../utils/WaitEvent.js");
var _getParentSizerMethodsJs = require("./GetParentSizerMethods.js");
var _getParentSizerMethodsJsDefault = parcelHelpers.interopDefault(_getParentSizerMethodsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DistanceBetween = Phaser.Math.Distance.Between;
var OnInitEaseMove = function(gameObject, easeMove) {
    // Route 'complete' of easeMove to gameObject
    easeMove.completeEventName = undefined;
    easeMove.on("complete", function() {
        if (easeMove.completeEventName) {
            gameObject.emit(easeMove.completeEventName, gameObject);
            easeMove.completeEventName = undefined;
        }
    });
    // Update local state
    easeMove.on("update", function() {
        var parent = (0, _getParentSizerMethodsJsDefault.default).getParentSizer(gameObject);
        if (parent) parent.resetChildPositionState(gameObject);
    });
};
exports.default = {
    moveFrom (duration, x, y, ease, destroyMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            x = config.x;
            y = config.y;
            if (config.hasOwnProperty("speed")) duration = DistanceBetween(x, y, this.x, this.y) * 1000 / config.speed;
            else duration = config.duration;
            ease = config.ease;
        }
        var isInit = this._easeMove === undefined;
        this._easeMove = (0, _easeMoveJs.EaseMoveFrom)(this, duration, x, y, ease, destroyMode, this._easeMove);
        if (isInit) OnInitEaseMove(this, this._easeMove);
        this._easeMove.completeEventName = "movefrom.complete";
        return this;
    },
    moveFromPromise (duration, x, y, ease, destroyMode) {
        this.moveFrom(duration, x, y, ease, destroyMode);
        return (0, _waitEventJs.WaitComplete)(this._easeMove);
    },
    moveFromDestroy (duration, x, y, ease) {
        this.moveFrom(duration, x, y, ease, true);
        return this;
    },
    moveFromDestroyPromise (duration, x, y, ease) {
        this.moveFromDestroy(duration, x, y, ease);
        return (0, _waitEventJs.WaitComplete)(this._easeMove);
    },
    moveTo (duration, x, y, ease, destroyMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            x = config.x;
            y = config.y;
            if (config.hasOwnProperty("speed")) duration = DistanceBetween(x, y, this.x, this.y) * 1000 / config.speed;
            else duration = config.duration;
            ease = config.ease;
        }
        var isInit = this._easeMove === undefined;
        this._easeMove = (0, _easeMoveJs.EaseMoveTo)(this, duration, x, y, ease, destroyMode, this._easeMove);
        if (isInit) OnInitEaseMove(this, this._easeMove);
        this._easeMove.completeEventName = "moveto.complete";
        return this;
    },
    moveToPromise (duration, x, y, ease, destroyMode) {
        this.moveTo(duration, x, y, ease, destroyMode);
        return (0, _waitEventJs.WaitComplete)(this._easeMove);
    },
    moveToDestroy (duration, x, y, ease) {
        this.moveTo(duration, x, y, ease, true);
        return this;
    },
    moveToDestroyPromise (duration, x, y, ease) {
        this.moveToDestroy(duration, x, y, ease, true);
        return (0, _waitEventJs.WaitComplete)(this._easeMove);
    },
    moveStop (toEnd) {
        if (!this._easeMove) return this;
        this._easeMove.stop(toEnd);
        return this;
    }
};

},{"../easemove/EaseMove.js":"limoQ","../utils/WaitEvent.js":"39jq1","./GetParentSizerMethods.js":"03OCx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"limoQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EaseMove", ()=>(0, _easemoveJs.EaseMove));
parcelHelpers.export(exports, "EaseMoveTo", ()=>(0, _easemoveJs.EaseMoveTo));
parcelHelpers.export(exports, "EaseMoveFrom", ()=>(0, _easemoveJs.EaseMoveFrom));
var _easemoveJs = require("../../../plugins/easemove.js");

},{"../../../plugins/easemove.js":"b0O1p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0O1p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EaseMove", ()=>(0, _easeMoveJsDefault.default));
parcelHelpers.export(exports, "EaseMoveTo", ()=>(0, _easeMoveToJsDefault.default));
parcelHelpers.export(exports, "EaseMoveToDestroy", ()=>EaseMoveToDestroy);
parcelHelpers.export(exports, "EaseMoveFrom", ()=>(0, _easeMoveFromJsDefault.default));
parcelHelpers.export(exports, "EaseMoveFromDestroy", ()=>EaseMoveFromDestroy);
var _easeMoveJs = require("./behaviors/easemove/EaseMove.js");
var _easeMoveJsDefault = parcelHelpers.interopDefault(_easeMoveJs);
var _easeMoveToJs = require("./behaviors/easemove/EaseMoveTo.js");
var _easeMoveToJsDefault = parcelHelpers.interopDefault(_easeMoveToJs);
var _easeMoveFromJs = require("./behaviors/easemove/EaseMoveFrom.js");
var _easeMoveFromJsDefault = parcelHelpers.interopDefault(_easeMoveFromJs);
var EaseMoveToDestroy = function(gameObject, duration, endX, endY, ease, easeMove) {
    return (0, _easeMoveToJsDefault.default)(gameObject, duration, endX, endY, ease, true, easeMove);
};
var EaseMoveFromDestroy = function(gameObject, duration, startX, startY, ease, easeMove) {
    return (0, _easeMoveFromJsDefault.default)(gameObject, duration, startX, startY, ease, true, easeMove);
};

},{"./behaviors/easemove/EaseMove.js":"4sWDx","./behaviors/easemove/EaseMoveTo.js":"azd7e","./behaviors/easemove/EaseMoveFrom.js":"iZsaS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sWDx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class EaseMove extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setMode(GetValue(o, "mode", 0));
        if (o && (o.hasOwnProperty("x") || o.hasOwnProperty("y"))) {
            var endX = GetAdvancedValue(o, "x", undefined);
            var endY = GetAdvancedValue(o, "y", undefined);
            this.setTargetPosition(endX, endY);
        } else this.setTargetPosition(o);
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = MODE[m];
        this.mode = m;
        return this;
    }
    setTargetPosition(x, y) {
        if (typeof x === "number" || typeof y === "number") {
            // endX, endY
            // x,y : a number, or undefined
            this.startX = this.parent.x;
            this.startY = this.parent.y;
            this.endX = x;
            this.endY = y;
        } else {
            var config = x;
            this.startX = GetAdvancedValue(config, "startX", undefined);
            this.startY = GetAdvancedValue(config, "startY", undefined);
            this.endX = GetAdvancedValue(config, "endX", undefined);
            this.endY = GetAdvancedValue(config, "endY", undefined);
        }
        this.hasMoveX = this.startX !== undefined && this.endX !== undefined;
        this.hasMoveY = this.startY !== undefined && this.endY !== undefined;
        return this;
    }
    start() {
        if (this.timer.isRunning) return this;
        var gameObject = this.parent;
        if (this.hasMoveX) gameObject.x = this.startX;
        if (this.hasMoveY) gameObject.y = this.startY;
        this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(this.mode === 2 ? -1 : 0);
        super.start();
        return this;
    }
    updateGameObject(gameObject, timer) {
        var t = timer.t;
        if (timer.isOddIteration) t = 1 - t;
        t = this.easeFn(t);
        if (this.hasMoveX) gameObject.x = Linear(this.startX, this.endX, t);
        if (this.hasMoveY) gameObject.y = Linear(this.startY, this.endY, t);
    }
    complete() {
        super.complete();
        if (this.mode === 1) this.parent.destroy();
        return this;
    }
}
const MODE = {
    stop: 0,
    destroy: 1,
    yoyo: 2
};
exports.default = EaseMove;

},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"azd7e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeMoveJs = require("./EaseMove.js");
var _easeMoveJsDefault = parcelHelpers.interopDefault(_easeMoveJs);
var _parseValueJs = require("./ParseValue.js");
var _parseValueJsDefault = parcelHelpers.interopDefault(_parseValueJs);
var EaseMoveTo = function(gameObject, duration, endX, endY, ease, destroyMode, easeMove) {
    if (destroyMode instanceof (0, _easeMoveJsDefault.default)) {
        easeMove = destroyMode;
        destroyMode = undefined;
    }
    if (destroyMode === undefined) destroyMode = false;
    var config = {};
    config.mode = destroyMode ? 1 : 0;
    if (endX !== undefined) {
        config.startX = gameObject.x;
        config.endX = (0, _parseValueJsDefault.default)(endX, gameObject.x);
    }
    if (endY !== undefined) {
        config.startY = gameObject.y;
        config.endY = (0, _parseValueJsDefault.default)(endY, gameObject.y);
    }
    config.duration = duration;
    config.ease = ease === undefined ? "Linear" : ease;
    if (easeMove === undefined) easeMove = new (0, _easeMoveJsDefault.default)(gameObject, config);
    else easeMove.resetFromJSON(config);
    easeMove.restart();
    return easeMove;
};
exports.default = EaseMoveTo;

},{"./EaseMove.js":"4sWDx","./ParseValue.js":"lXqL1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lXqL1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ParseValue = function(propertyValue, startValue) {
    // propertyValue : number or string
    if (typeof propertyValue === "number") return propertyValue;
    else {
        var op = propertyValue[0];
        var num = parseFloat(propertyValue.substr(2));
        switch(op){
            case "+":
                return startValue + num;
            case "-":
                return startValue - num;
            case "*":
                return startValue * num;
            case "/":
                return startValue / num;
        }
    }
};
exports.default = ParseValue;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iZsaS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeMoveJs = require("./EaseMove.js");
var _easeMoveJsDefault = parcelHelpers.interopDefault(_easeMoveJs);
var _parseValueJs = require("./ParseValue.js");
var _parseValueJsDefault = parcelHelpers.interopDefault(_parseValueJs);
var EaseMoveFrom = function(gameObject, duration, startX, startY, ease, destroyMode, easeMove) {
    if (destroyMode instanceof (0, _easeMoveJsDefault.default)) {
        easeMove = destroyMode;
        destroyMode = undefined;
    }
    if (destroyMode === undefined) destroyMode = false;
    var config = {};
    config.mode = destroyMode ? 1 : 0;
    if (startX !== undefined) {
        config.startX = (0, _parseValueJsDefault.default)(startX, gameObject.x);
        config.endX = gameObject.x;
    }
    if (startY !== undefined) {
        config.startY = (0, _parseValueJsDefault.default)(startY, gameObject.y);
        config.endY = gameObject.y;
    }
    config.duration = duration;
    config.ease = ease === undefined ? "Linear" : ease;
    if (easeMove === undefined) easeMove = new (0, _easeMoveJsDefault.default)(gameObject, config);
    else easeMove.resetFromJSON(config);
    easeMove.restart();
    return easeMove;
};
exports.default = EaseMoveFrom;

},{"./EaseMove.js":"4sWDx","./ParseValue.js":"lXqL1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aml3e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shakeJs = require("../shake/Shake.js");
var _shakeJsDefault = parcelHelpers.interopDefault(_shakeJs);
var _waitEventJs = require("../utils/WaitEvent.js");
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var OnInitShake = function(gameObject, shake) {
    // Route 'complete' of shake to gameObject
    shake.on("complete", function() {
        gameObject.emit("shake.complete", gameObject);
    });
// Shake effect won't change position
};
exports.default = {
    shake (duration, magnitude, magnitudeMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = config.duration;
            magnitude = config.magnitude;
            magnitudeMode = config.magnitudeMode;
        }
        if (this._shake === undefined) {
            this._shake = new (0, _shakeJsDefault.default)(this, {
                mode: 0,
                magnitudeMode: 1
            });
            OnInitShake(this, this._shake);
        }
        if (duration !== undefined) this._shake.setDuration(duration);
        if (magnitude !== undefined) this._shake.setMagnitude(magnitude);
        if (magnitudeMode !== undefined) this._shake.setMagnitudeMode(magnitudeMode);
        this._shake.shake();
        return this;
    },
    shakePromise (duration, alpha) {
        this.shake(duration, alpha);
        return (0, _waitEventJs.WaitComplete)(this._shake);
    }
};

},{"../shake/Shake.js":"cKF0q","../utils/WaitEvent.js":"39jq1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKF0q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shakepositionJs = require("../../../plugins/shakeposition.js");
var _shakepositionJsDefault = parcelHelpers.interopDefault(_shakepositionJs);
exports.default = (0, _shakepositionJsDefault.default);

},{"../../../plugins/shakeposition.js":"e51pY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e51pY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shakePositionJs = require("./behaviors/shake/ShakePosition.js");
var _shakePositionJsDefault = parcelHelpers.interopDefault(_shakePositionJs);
exports.default = (0, _shakePositionJsDefault.default);

},{"./behaviors/shake/ShakePosition.js":"hdguL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdguL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tickTaskJs = require("../../utils/componentbase/TickTask.js");
var _tickTaskJsDefault = parcelHelpers.interopDefault(_tickTaskJs);
var _timerJs = require("../../utils/componentbase/timerticktask/Timer.js");
var _timerJsDefault = parcelHelpers.interopDefault(_timerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ShakePosition extends (0, _tickTaskJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this.timer = new (0, _timerJsDefault.default)();
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.timer.resetFromJSON(GetValue(o, "timer"));
        this.setEnable(GetValue(o, "enable", true));
        this.setMode(GetValue(o, "mode", 1));
        this.isRunning = GetValue(o, "isRunning", false);
        this.setMagnitudeMode(GetValue(o, "magnitudeMode", 1));
        this.setAxisMode(GetValue(o, "axis", 0));
        this.setDuration(GetValue(o, "duration", 500));
        this.setMagnitude(GetValue(o, "magnitude", 10));
        this.ox = GetValue(o, "ox", undefined);
        this.oy = GetValue(o, "oy", undefined);
        return this;
    }
    toJSON() {
        return {
            timer: this.timer.toJSON(),
            enable: this.enable,
            mode: this.mode,
            isRunning: this.isRunning,
            magnitudeMode: magnitudeMode,
            duration: this.duration,
            magnitude: this.magnitude,
            ox: this.ox,
            oy: this.oy
        };
    }
    // override
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        super.shutdown(fromScene);
        this.timer.destroy();
        this.timer = undefined;
    }
    startTicking() {
        super.startTicking();
        if (this.mode === 0) {
            this.scene.game.events.on("poststep", this.update, this);
            this.scene.game.events.on("prestep", this.backToOrigin, this);
        } else this.scene.sys.events.on("preupdate", this.update, this);
    }
    stopTicking() {
        super.stopTicking();
        if (this.scene) {
            if (this.mode === 0) {
                this.scene.game.events.off("poststep", this.update, this);
                this.scene.game.events.off("prestep", this.backToOrigin, this);
            } else this.scene.sys.events.off("preupdate", this.update, this);
        }
    }
    setEnable(e) {
        if (e == undefined) e = true;
        this.enable = e;
        return this;
    }
    setMode(mode) {
        if (typeof mode === "string") mode = MODE[mode];
        this.mode = mode;
        return this;
    }
    setMagnitudeMode(magnitudeMode1) {
        if (typeof magnitudeMode1 === "string") magnitudeMode1 = MANITUDEMODE[magnitudeMode1];
        this.magnitudeMode = magnitudeMode1;
        return this;
    }
    setAxisMode(m) {
        if (typeof m === "string") m = DIRECTIONNODE[m];
        this.axisMode = m;
        return this;
    }
    setDuration(duration) {
        this.duration = duration;
        return this;
    }
    setMagnitude(magnitude) {
        this.magnitude = magnitude;
        return this;
    }
    start(duration, magnitude) {
        if (typeof duration !== "number") {
            var config = duration;
            magnitude = GetValue(config, "magnitude", undefined);
            duration = GetValue(config, "duration", undefined);
        }
        if (magnitude !== undefined) this.setMagnitude(magnitude);
        if (duration !== undefined) this.setDuration(duration);
        this.timer.setDuration(this.duration).start();
        super.start();
        return this;
    }
    shake(duration, magnitude) {
        this.start(duration, magnitude);
        return this;
    }
    update(time, delta) {
        if (!this.isRunning || !this.enable) return this;
        var gameObject = this.parent;
        if (!gameObject.active) return this;
        this.timer.update(time, delta);
        if (this.timer.isDone) {
            this.backToOrigin();
            this.complete();
        } else {
            if (this.ox === undefined) {
                this.ox = gameObject.x;
                this.oy = gameObject.y;
            }
            var magnitude = this.magnitude;
            if (this.magnitudeMode === 1) magnitude *= 1 - this.timer.t;
            var a = Math.random() * Math.PI * 2;
            var x = this.ox + Math.cos(a) * magnitude;
            var y = this.oy + Math.sin(a) * magnitude;
            switch(this.axisMode){
                case 1:
                    gameObject.x = x;
                    break;
                case 2:
                    gameObject.y = y;
                    break;
                default:
                    gameObject.x = x;
                    gameObject.y = y;
                    break;
            }
        }
        return this;
    }
    backToOrigin() {
        if (!this.isRunning || !this.enable) return this;
        if (this.ox === undefined) return this;
        var gameObject = this.parent;
        switch(this.axisMode){
            case 1:
                gameObject.x = this.ox;
                break;
            case 2:
                gameObject.y = this.oy;
                break;
            default:
                gameObject.x = this.ox;
                gameObject.y = this.oy;
                break;
        }
        this.ox = undefined;
        this.oy = undefined;
        return this;
    }
}
const MODE = {
    effect: 0,
    behavior: 1
};
const DIRECTIONNODE = {
    "both": 0,
    "h&v": 0,
    "x&y": 0,
    "horizontal": 1,
    "h": 1,
    "x": 1,
    "vertical": 2,
    "v": 2,
    "y": 2
};
const MANITUDEMODE = {
    constant: 0,
    decay: 1
};
exports.default = ShakePosition;

},{"../../utils/componentbase/TickTask.js":"GCHOX","../../utils/componentbase/timerticktask/Timer.js":"1ug9o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7pNUs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easedataJs = require("../../../plugins/easedata.js");
var _waitEventJs = require("../utils/WaitEvent.js");
var OnInitEaseData = function(gameObject, easeData) {
    // Route 'complete' of easeData to gameObject
    easeData.on("complete", function(key) {
        gameObject.emit(`easedata.${key}.complete`, gameObject);
        gameObject.emit("easedata.complete", key, gameObject);
    });
};
exports.default = {
    easeDataTo (key, value, duration, ease) {
        if (!this._easeData) {
            this._easeData = new (0, _easedataJs.EaseData)(this);
            OnInitEaseData(this, this._easeData);
        }
        this._easeData.easeTo(key, value, duration, ease);
        return this;
    },
    easeDataToPromise (key, value, duration, ease) {
        this.easeDataTo(key, value, duration, ease);
        return (0, _waitEventJs.WaitEvent)(this._easeData, `complete-${key}`);
    },
    stopEaseData (key, toEnd) {
        if (!this._easeData) return this;
        this._easeData.stopEase(key, toEnd);
        return this;
    },
    stopAllEaseData (toEnd) {
        if (!this._easeData) return this;
        this._easeData.stopAll(toEnd);
        return this;
    }
};

},{"../../../plugins/easedata.js":"aaTwF","../utils/WaitEvent.js":"39jq1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aaTwF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EaseData", ()=>(0, _easeDataJsDefault.default));
var _easeDataJs = require("./behaviors/easedata/EaseData.js");
var _easeDataJsDefault = parcelHelpers.interopDefault(_easeDataJs);

},{"./behaviors/easedata/EaseData.js":"ctGhC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctGhC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _easeValueTaskJs = require("../../utils/ease/EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class EaseData extends (0, _componentBaseJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        this.parent.setDataEnabled();
        this.easeTasks = {};
    }
    complete(key) {
        this.emit(`complete-${key}`, this.parent, this);
        this.emit("complete", key, this.parent, this);
    }
    getEaseTask(key) {
        var easeTask = this.easeTasks[key];
        if (easeTask === undefined) {
            easeTask = new (0, _easeValueTaskJsDefault.default)(this.parent);
            this.easeTasks[key] = easeTask;
            easeTask.setTarget(this.parent.data.values).on("complete", function() {
                this.complete(key);
            }, this);
        }
        return easeTask;
    }
    easeTo(key, value, duration, ease) {
        if (IsPlainObject(key)) {
            var config = key;
            key = config.key;
            value = config.value;
            duration = config.duration;
            ease = config.ease;
            var speed = config.speed;
            if (duration === undefined && speed !== undefined) duration = Math.abs(value - this.parent.data.values[key]) / speed * 1000;
        }
        if (duration === undefined) duration = 1000;
        if (ease === undefined) ease = "Linear";
        var easeTask = this.getEaseTask(key);
        easeTask.restart({
            key: key,
            to: value,
            duration: duration,
            ease: ease
        });
        return this;
    }
    easeFrom(key, value, duration, ease) {
        if (IsPlainObject(key)) {
            var config = key;
            key = config.key;
            value = config.value;
            duration = config.duration;
            ease = config.ease;
            var speed = config.speed;
            if (duration === undefined && speed !== undefined) duration = Math.abs(value - this.parent.data.values[key]) / speed * 1000;
        }
        if (duration === undefined) duration = 1000;
        if (ease === undefined) ease = "Linear";
        var easeTask = this.getEaseTask(key);
        easeTask.restart({
            key: key,
            from: value,
            duration: duration,
            ease: ease
        });
        return this;
    }
    stopEase(key, toEnd) {
        if (toEnd === undefined) toEnd = true;
        var easeTask = this.easeTasks[key];
        if (easeTask) easeTask.stop(toEnd);
        return this;
    }
    stopAll(toEnd) {
        if (toEnd === undefined) toEnd = true;
        for(var key in this.easeTasks)this.stopEase(key, toEnd);
        return this;
    }
}
exports.default = EaseData;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/ease/EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cB28J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hideJs = require("../utils/Hide.js");
exports.default = {
    show (gameObject) {
        if (gameObject === undefined) gameObject = this;
        (0, _hideJs.Show)(gameObject, false);
        return this;
    },
    hide (gameObject) {
        if (gameObject === undefined) gameObject = this;
        (0, _hideJs.Hide)(gameObject, true);
        return this;
    },
    isShow (gameObject) {
        if (gameObject === undefined) gameObject = this;
        return (0, _hideJs.IsShown)(gameObject);
    }
};

},{"../utils/Hide.js":"jy7YF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jy7YF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Show", ()=>Show);
parcelHelpers.export(exports, "Hide", ()=>Hide);
parcelHelpers.export(exports, "IsShown", ()=>IsShown);
var _getSizerConfigJs = require("./GetSizerConfig.js");
var _getSizerConfigJsDefault = parcelHelpers.interopDefault(_getSizerConfigJs);
var _getParentJs = require("../../../plugins/gameobjects/container/containerlite/GetParent.js");
var Show = function(gameObject) {
    _hide(gameObject, false);
};
var Hide = function(gameObject) {
    _hide(gameObject, true);
};
var IsShown = function(gameObject) {
    if (!gameObject) return false;
    var config = (0, _getSizerConfigJsDefault.default)(gameObject);
    return !config.hidden;
};
var _hide = function(gameObject, hidden) {
    if (!gameObject) return;
    var config = (0, _getSizerConfigJsDefault.default)(gameObject);
    config.hidden = hidden;
    var parent = (0, _getParentJs.GetParent)(gameObject);
    if (parent) parent.setChildVisible(gameObject, !hidden);
    else gameObject.setVisible(!hidden);
};

},{"./GetSizerConfig.js":"1URrW","../../../plugins/gameobjects/container/containerlite/GetParent.js":"02YdQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kM77h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _modalJs = require("../modal/Modal.js");
var _isFunctionJs = require("../../../plugins/utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
exports.default = {
    // Override
    // onCreateModalBehavior(self, config) { },
    modal (config, onClose) {
        if ((0, _isFunctionJsDefault.default)(config)) {
            onClose = config;
            config = undefined;
        }
        if (this._modalBehavior === undefined) {
            if (this.onCreateModalBehavior) this.onCreateModalBehavior(this, config);
            this._modalBehavior = (0, _modalJs.Modal)(this, config);
        }
        if (onClose) this._modalBehavior.once("close", onClose);
        this._modalBehavior.requestOpen();
        return this;
    },
    modalPromise (config) {
        var self = this;
        return new Promise(function(resolve, reject) {
            self.modal(config, resolve);
        });
    },
    modalClose (closeEventData) {
        (0, _modalJs.ModalClose)(this, closeEventData);
        return this;
    }
};

},{"../modal/Modal.js":"d1OFC","../../../plugins/utils/object/IsFunction.js":"5hi03","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1OFC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalBehavoir", ()=>(0, _modalJs.ModalBehavoir));
parcelHelpers.export(exports, "Modal", ()=>(0, _modalJs.Modal));
parcelHelpers.export(exports, "ModalPromise", ()=>(0, _modalJs.ModalPromise));
parcelHelpers.export(exports, "ModalClose", ()=>(0, _modalJs.ModalClose));
var _modalJs = require("../../../plugins/modal.js");

},{"../../../plugins/modal.js":"aqwKj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aqwKj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ModalBehavoir", ()=>(0, _modalJsDefault.default));
parcelHelpers.export(exports, "Modal", ()=>(0, _modalPromiseJs.Modal));
parcelHelpers.export(exports, "ModalPromise", ()=>(0, _modalPromiseJs.ModalPromise));
parcelHelpers.export(exports, "ModalClose", ()=>(0, _modalPromiseJs.ModalClose));
var _modalJs = require("./behaviors/modal/Modal.js");
var _modalJsDefault = parcelHelpers.interopDefault(_modalJs);
var _modalPromiseJs = require("./behaviors/modal/ModalPromise.js");

},{"./behaviors/modal/Modal.js":"kqk6A","./behaviors/modal/ModalPromise.js":"7oLu0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqk6A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _openCloseTransitionJs = require("../openclosetransition/OpenCloseTransition.js");
var _openCloseTransitionJsDefault = parcelHelpers.interopDefault(_openCloseTransitionJs);
var _createCoverJs = require("./CreateCover.js");
var _createCoverJsDefault = parcelHelpers.interopDefault(_createCoverJs);
var _defaultTransitCallbacksJs = require("./DefaultTransitCallbacks.js");
var _defaultTransitCallbacksJsDefault = parcelHelpers.interopDefault(_defaultTransitCallbacksJs);
var _defaultCoverTransitCallbacksJs = require("./DefaultCoverTransitCallbacks.js");
var _isPointInBoundsJs = require("../../utils/bounds/IsPointInBounds.js");
var _isPointInBoundsJsDefault = parcelHelpers.interopDefault(_isPointInBoundsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Modal extends (0, _openCloseTransitionJsDefault.default) {
    constructor(gameObject, config){
        if (config === undefined) config = {};
        if (config.transitIn == null) config.transitIn = TransitionMode.popUp;
        if (config.transitOut == null) config.transitOut = TransitionMode.scaleDown;
        config.destroy = GetValue(config, "destroy", true);
        super(gameObject, config);
        // this.parent = gameObject;
        // this.scene
        // Cover : key of modal, to block touch input        
        var coverConfig = GetValue(config, "cover");
        this.cover = coverConfig !== false ? (0, _createCoverJsDefault.default)(gameObject, coverConfig) : undefined;
        if (this.cover) {
            this.setCoverTransitInCallback(GetValue(coverConfig, "transitIn", (0, _defaultCoverTransitCallbacksJs.DefaultCoverTransitInCallback)));
            this.setCoverTransitOutCallback(GetValue(coverConfig, "transitOut", (0, _defaultCoverTransitCallbacksJs.DefaultCoverTransitOutCallback)));
        }
        // Close conditions:
        var touchOutsideClose = GetValue(config, "touchOutsideClose", false);
        var timeOutDuration = GetValue(config, "duration.hold", -1);
        var timeOutClose = GetValue(config, "timeOutClose", timeOutDuration >= 0);
        var anyTouchClose = GetValue(config, "anyTouchClose", false);
        var manualClose = GetValue(config, "manualClose", false);
        if (manualClose) {
            touchOutsideClose = false;
            anyTouchClose = false;
            timeOutClose = false;
        }
        if (anyTouchClose) touchOutsideClose = false;
        if (timeOutClose) this.setDisplayTime(timeOutDuration);
        else this.setDisplayTime(-1);
        // Registet touch-close event after opened
        if (anyTouchClose) this.once("open", this.anyTouchClose, this);
        else if (touchOutsideClose) this.once("open", this.touchOutsideClose, this);
        if (GetValue(config, "openOnStart", true)) // Run this.requestOpen() next tick
        // User can register events before this.requestOpen()
        this.delayCall(0, this.requestOpen, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // Registered in touchOutsideClose(), or anyTouchClose()
        if (!this.cover) this.scene.input.off("pointerup", this.touchCloseCallback, this);
        if (this.cover && !fromScene) {
            this.cover.destroy();
            this.cover = undefined;
        }
        super.shutdown(fromScene);
    }
    touchOutsideClose() {
        if (this.cover) this.cover.on("pointerup", this.touchCloseCallback, this);
        else this.scene.input.on("pointerup", this.touchCloseCallback, this);
        this.clickOutsideTest = true;
        return this;
    }
    anyTouchClose() {
        if (this.cover) this.cover.once("pointerup", this.touchCloseCallback, this);
        else this.scene.input.once("pointerup", this.touchCloseCallback, this);
        return this;
    }
    touchCloseCallback(pointer) {
        if (this.clickOutsideTest && (0, _isPointInBoundsJsDefault.default)(this.parent, pointer.worldX, pointer.worldY)) return;
        this.requestClose();
    }
    runTransitionInCallback() {
        var duration = super.runTransitionInCallback();
        var cover = this.cover;
        if (cover && this.coverTransitInCallback) this.coverTransitInCallback(cover, duration);
        return duration;
    }
    runTransitionOutCallback() {
        var duration = super.runTransitionOutCallback();
        var cover = this.cover;
        if (cover && this.coverTransitOutCallback) this.coverTransitOutCallback(cover, duration);
        return duration;
    }
    onOpen() {
        var duration = this.displayTime;
        if (duration >= 0) this.delayCall(duration, this.requestClose, this // scope
        );
        this.emit("open", this.parent, this);
        super.onOpen();
    }
    onClose() {
        this.emit("close", this.closeEventData);
        super.onClose();
    }
    setDisplayTime(time) {
        this.displayTime = time;
        return this;
    }
    setTransitInCallback(callback) {
        if (typeof callback === "string") callback = TransitionMode[callback];
        switch(callback){
            case TransitionMode.popUp:
                callback = (0, _defaultTransitCallbacksJsDefault.default).popUp;
                break;
            case TransitionMode.fadeIn:
                callback = (0, _defaultTransitCallbacksJsDefault.default).fadeIn;
                break;
        }
        super.setTransitInCallback(callback);
        // callback = function(gameObject, duration) {}
        return this;
    }
    setTransitOutCallback(callback) {
        if (typeof callback === "string") callback = TransitionMode[callback];
        switch(callback){
            case TransitionMode.scaleDown:
                callback = (0, _defaultTransitCallbacksJsDefault.default).scaleDown;
                break;
            case TransitionMode.fadeOut:
                callback = (0, _defaultTransitCallbacksJsDefault.default).fadeOut;
                break;
        }
        super.setTransitOutCallback(callback);
        // callback = function(gameObject, duration) {}
        return this;
    }
    setCoverTransitInCallback(callback) {
        this.coverTransitInCallback = callback;
        return this;
    }
    setCoverTransitOutCallback(callback) {
        this.coverTransitOutCallback = callback;
        return this;
    }
}
const TransitionMode = {
    popUp: 0,
    fadeIn: 1,
    scaleDown: 0,
    fadeOut: 1
};
exports.default = Modal;

},{"../openclosetransition/OpenCloseTransition.js":"iLdcA","./CreateCover.js":"8KaOO","./DefaultTransitCallbacks.js":"cObPI","./DefaultCoverTransitCallbacks.js":"2SaKv","../../utils/bounds/IsPointInBounds.js":"jJBEI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iLdcA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _stateJs = require("./State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class OpenCloseTransition extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.scene
        this.setTransitInTime(GetValue(config, "duration.in", 200));
        this.setTransitOutTime(GetValue(config, "duration.out", 200));
        this.setTransitInCallback(GetValue(config, "transitIn"));
        this.setTransitOutCallback(GetValue(config, "transitOut"));
        this.oneShotMode = GetValue(config, "destroy", false);
        this.delayCallTimer = undefined;
        this._state = new (0, _stateJsDefault.default)(this, {
            eventEmitter: false,
            initState: GetValue(config, "initState", "IDLE")
        });
        this.openEventData = undefined;
        this.closeEventData = undefined;
    }
    get state() {
        return this._state.state;
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.transitInCallback = undefined;
        this.transitOutCallback = undefined;
        this.openEventData = undefined;
        this.closeEventData = undefined;
        this.removeDelayCall();
        super.shutdown(fromScene);
    }
}
Object.assign(OpenCloseTransition.prototype, (0, _methodsJsDefault.default));
exports.default = OpenCloseTransition;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","./State.js":"ix7G1","./methods/Methods.js":"5jJXF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ix7G1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fsmJs = require("../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
/*
graph TD

IDLE --> |"requestOpen()"| TRANS_OPNE["TRAN_OPEN<br>runTransitionInCallback()"]
TRANS_OPNE --> |transitInTime| OPEN
OPEN --> |"requestClose()"| TRANS_CLOSE["TRANS_CLOSE<br>runTransitionOutCallback()"]
TRANS_CLOSE --> |transitOutTime| CLOSE
CLOSE --> |"requestOpen()"| TRANS_OPNE
*/ class State extends (0, _fsmJsDefault.default) {
    constructor(parent, config){
        super(config);
        this.parent = parent;
        var initState = config.initState || "IDLE";
        this.start(initState);
    }
    init() {
        this.start("IDLE");
    }
    // IDLE -> TRANS_OPNE
    next_IDLE() {
        return "TRANS_OPNE";
    }
    // IDLE
    // TRANS_OPNE -> OPEN
    next_TRANS_OPNE() {
        return "OPEN";
    }
    enter_TRANS_OPNE() {
        var transitionBehavior = this.parent;
        if (transitionBehavior.transitInTime > 0) {
            var delay = transitionBehavior.runTransitionInCallback();
            transitionBehavior.delayCall(delay, this.next, this);
        } else this.next();
    }
    exit_TRANS_OPNE() {
        var transitionBehavior = this.parent;
        transitionBehavior.removeDelayCall();
    }
    // TRANS_OPNE
    // OPEN -> TRANS_CLOSE
    next_OPEN() {
        return "TRANS_CLOSE";
    }
    enter_OPEN() {
        var transitionBehavior = this.parent;
        transitionBehavior.onOpen();
    }
    exit_OPEN() {
        var transitionBehavior = this.parent;
        transitionBehavior.removeDelayCall();
    }
    // OPEN
    // TRANS_CLOSE -> CLOSE
    next_TRANS_CLOSE() {
        return "CLOSE";
    }
    enter_TRANS_CLOSE() {
        var transitionBehavior = this.parent;
        if (transitionBehavior.transitOutTime > 0) {
            var delay = transitionBehavior.runTransitionOutCallback();
            transitionBehavior.delayCall(delay, this.next, this);
        } else this.next();
    }
    exit_TRANS_CLOSE() {
        var transitionBehavior = this.parent;
        transitionBehavior.removeDelayCall();
    }
    // TRANS_CLOSE
    // CLOSE -> TRANS_OPNE
    next_CLOSE() {
        return "TRANS_OPNE";
    }
    enter_CLOSE() {
        var transitionBehavior = this.parent;
        transitionBehavior.onClose();
    }
    exit_CLOSE() {}
    // CLOSE
    canOpen() {
        return this.state === "IDLE" || this.state === "CLOSE";
    }
    canClose() {
        return this.state === "IDLE" || this.state === "OPEN";
    }
}
exports.default = State;

},{"../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ftkbz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fsmJs = require("./logic/fsm/FSM.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
exports.default = (0, _fsmJsDefault.default);

},{"./logic/fsm/FSM.js":"dOxrt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOxrt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fsmbaseJs = require("./FSMBase.js");
var _fsmbaseJsDefault = parcelHelpers.interopDefault(_fsmbaseJs);
var _getValueJs = require("../../utils/object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _hasListenerJs = require("../../utils/eventemitter/HasListener.js");
var _hasListenerJsDefault = parcelHelpers.interopDefault(_hasListenerJs);
const StateProperties = [
    "next",
    "exit",
    "enter",
    "update",
    "preupdate",
    "postupdate"
];
class FSM extends (0, _fsmbaseJsDefault.default) {
    /*
    var config = {
        start: 'A',   // default: undefined
        states: {
            A: {
                next: 'B',  // function() { return 'B'; }
                enter: function() {},
                exit: function() {},
                update: function(time, delta) {},
                preupdate: function(time, delta) {},
                postupdate: function(time, delta) {},
            },
            // ...
        },        
        extend: {
            i: 0,
            name: 'abc'
            // ...
        },
        init: function() {},
        enable: true,
        scene: undefined,
        eventEmitter: true,
    };
    */ shutdown() {
        this.stopUpdate();
        this.stopPreUpdate();
        this.stopPostUpdate();
        this._scene = undefined;
        super.shutdown();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this._scene = (0, _getValueJsDefault.default)(o, "scene", undefined);
        return this;
    }
    get stateProperties() {
        return StateProperties;
    }
    update(time, delta) {
        this.runMethod("update", time, delta);
    }
    preupdate(time, delta) {
        this.runMethod("preupdate", time, delta);
    }
    postupdate(time, delta) {
        this.runMethod("postupdate", time, delta);
    }
    startUpdate(scene) {
        if (!scene) scene = this._scene;
        var eventEmitter = scene.sys.events;
        if ((0, _hasListenerJsDefault.default)(eventEmitter, "update", this.update, this)) return this;
        this._scene = scene;
        eventEmitter.on("update", this.update, this);
        return this;
    }
    stopUpdate() {
        if (!this._scene) return this;
        this._scene.sys.events.off("update", this.update, this);
        return this;
    }
    startPreUpdate(scene) {
        if (!scene) scene = this._scene;
        var eventEmitter = scene.sys.events;
        if ((0, _hasListenerJsDefault.default)(eventEmitter, "preupdate", this.preupdate, this)) return this;
        this._scene = scene;
        eventEmitter.on("preupdate", this.preupdate, this);
        return this;
    }
    stopPreUpdate() {
        if (!this._scene) return this;
        this._scene.sys.events.off("preupdate", this.preupdate, this);
        return this;
    }
    startPostUpdate(scene) {
        if (!scene) scene = this._scene;
        var eventEmitter = scene.sys.events;
        if ((0, _hasListenerJsDefault.default)(eventEmitter, "postupdate", this.postupdate, this)) return this;
        this._scene = scene;
        eventEmitter.on("postupdate", this.postupdate, this);
        return this;
    }
    stopPostUpdate() {
        if (!this._scene) return this;
        this._scene.sys.events.off("postupdate", this.postupdate, this);
        return this;
    }
}
exports.default = FSM;

},{"./FSMBase.js":"7TCqz","../../utils/object/GetValue.js":"7bT3a","../../utils/eventemitter/HasListener.js":"fdBY5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TCqz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../../utils/eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _getValueJs = require("../../utils/object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
const StateProperties = [
    "next",
    "exit",
    "enter"
];
class FSM {
    /*
    var config = {
        start: 'A',   // default: undefined
        states: {
            A: {
                next: 'B',  // function() { return 'B'; }
                enter: function() {},
                exit: function() {},
            },
            // ...
        },        
        extend: {
            i: 0,
            name: 'abc'
            // ...
        },
        init: function() {},
        enable: true,
        eventEmitter: true,
    };
    */ constructor(config){
        // Attach get-next-state function
        var states = (0, _getValueJsDefault.default)(config, "states", undefined);
        if (states) this.addStates(states);
        // Attach extend members
        var extend = (0, _getValueJsDefault.default)(config, "extend", undefined);
        if (extend) {
            for(var name in extend)if (!this.hasOwnProperty(name) || this[name] === undefined) this[name] = extend[name];
        }
        // Event emitter
        var eventEmitter = (0, _getValueJsDefault.default)(config, "eventEmitter", undefined);
        var EventEmitterClass = (0, _getValueJsDefault.default)(config, "EventEmitterClass", undefined);
        this.setEventEmitter(eventEmitter, EventEmitterClass);
        this._stateLock = false;
        this.resetFromJSON(config);
    }
    shutdown() {
        this.destroyEventEmitter();
    }
    destroy() {
        this.shutdown();
    }
    resetFromJSON(o) {
        this.setEnable((0, _getValueJsDefault.default)(o, "enable", true));
        this.start((0, _getValueJsDefault.default)(o, "start", undefined));
        var init = (0, _getValueJsDefault.default)(o, "init", undefined);
        if (init) init.call(this);
        return this;
    }
    toJSON() {
        return {
            curState: this.state,
            prevState: this.prevState,
            enable: this.enable,
            start: this._start
        };
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    set state(newState) {
        if (!this.enable || this._stateLock) return;
        if (this._state === newState) return;
        this._prevState = this._state;
        this._state = newState;
        this._stateLock = true; // lock state
        this.emit("statechange", this);
        if (this._prevState != null) {
            var exitEventName = "exit_" + this._prevState;
            var exitCallback = this[exitEventName];
            if (exitCallback) exitCallback.call(this);
            this.emit(exitEventName, this);
        }
        this._stateLock = false;
        if (this._state != null) {
            var enterEventName = "enter_" + this._state;
            var enterCallback = this[enterEventName];
            if (enterCallback) enterCallback.call(this);
            this.emit(enterEventName, this);
        }
    }
    get state() {
        return this._state;
    }
    get prevState() {
        return this._prevState;
    }
    start(state) {
        this._start = state;
        this._prevState = undefined;
        this._state = state; // Won't fire statechange events
        return this;
    }
    goto(nextState) {
        if (nextState != null) this.state = nextState;
        return this;
    }
    next() {
        var nextState;
        var getNextState = this["next_" + this.state];
        if (getNextState) {
            if (typeof getNextState === "string") nextState = getNextState;
            else nextState = getNextState.call(this);
        }
        this.goto(nextState);
        return this;
    }
    get stateProperties() {
        return StateProperties;
    }
    addState(name, state) {
        if (typeof name !== "string") {
            state = name;
            name = state.name;
        }
        var stateProperties = this.stateProperties;
        for(var i = 0, cnt = stateProperties.length; i < cnt; i++){
            var propertyName = stateProperties[i];
            var propertyValue = state[propertyName];
            if (propertyValue) this[`${propertyName}_${name}`] = propertyValue;
        }
        return this;
    }
    addStates(states) {
        if (Array.isArray(states)) for(var i = 0, cnt = states.length; i < cnt; i++)this.addState(states[i]);
        else for(var name in states)this.addState(name, states[name]);
        return this;
    }
    runMethod(methodName, a1, a2, a3, a4, a5) {
        var fn = this[methodName + "_" + this.state];
        if (!fn) return undefined;
        // Copy from eventemitter3
        var len = arguments.length;
        switch(len){
            case 1:
                return fn.call(this);
            case 2:
                return fn.call(this, a1);
            case 3:
                return fn.call(this, a1, a2);
            case 4:
                return fn.call(this, a1, a2, a3);
            case 5:
                return fn.call(this, a1, a2, a3, a4);
            case 6:
                return fn.call(this, a1, a2, a3, a4, a5);
        }
        var args = new Array(len - 1);
        for(var i = 1; i < len; i++)args[i - 1] = arguments[i];
        return fn.apply(this, args);
    }
}
Object.assign(FSM.prototype, (0, _eventEmitterMethodsJsDefault.default));
exports.default = FSM;

},{"../../utils/eventemitter/EventEmitterMethods.js":"67KVT","../../utils/object/GetValue.js":"7bT3a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdBY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var HasListener = function(eventEmitter, eventName, fn, context, once) {
    if (once === undefined) once = false;
    var listeners = eventEmitter._events[eventName];
    if (!listeners) return false;
    for(var i = 0, cnt = listeners.length; i < cnt; i++){
        var listener = listeners[i];
        if (listener.fn === fn && listener.context === context && listener.once === once) return true;
    }
    return false;
};
exports.default = HasListener;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jJXF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _delayCallMethodsJs = require("./DelayCallMethods.js");
var _delayCallMethodsJsDefault = parcelHelpers.interopDefault(_delayCallMethodsJs);
var _configurationMethodsJs = require("./ConfigurationMethods.js");
var _configurationMethodsJsDefault = parcelHelpers.interopDefault(_configurationMethodsJs);
var _openMethodsJs = require("./OpenMethods.js");
var _openMethodsJsDefault = parcelHelpers.interopDefault(_openMethodsJs);
var _closeMethodsJs = require("./CloseMethods.js");
var _closeMethodsJsDefault = parcelHelpers.interopDefault(_closeMethodsJs);
var methods = {};
Object.assign(methods, (0, _delayCallMethodsJsDefault.default), (0, _configurationMethodsJsDefault.default), (0, _openMethodsJsDefault.default), (0, _closeMethodsJsDefault.default));
exports.default = methods;

},{"./DelayCallMethods.js":"6ck1j","./ConfigurationMethods.js":"4o7ry","./OpenMethods.js":"kiANe","./CloseMethods.js":"aUeJI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ck1j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _postStepDelayCallJs = require("../../../utils/time/PostStepDelayCall.js");
var _postStepDelayCallJsDefault = parcelHelpers.interopDefault(_postStepDelayCallJs);
exports.default = {
    delayCall (delay, callback, scope) {
        // Invoke callback under scene's 'postupdate' event
        this.delayCallTimer = (0, _postStepDelayCallJsDefault.default)(this, delay, callback, scope);
        return this;
    },
    removeDelayCall () {
        if (this.delayCallTimer) {
            this.delayCallTimer.remove(false);
            this.delayCallTimer = undefined;
        }
        return this;
    }
};

},{"../../../utils/time/PostStepDelayCall.js":"2wkGI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2wkGI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSceneObjectJs = require("../system/GetSceneObject.js");
var _getSceneObjectJsDefault = parcelHelpers.interopDefault(_getSceneObjectJs);
var PostStepDelayCall = function(gameObject, delay, callback, scope, args) {
    // Invoke callback under game's 'poststep' event
    var scene = (0, _getSceneObjectJsDefault.default)(gameObject);
    var timer = scene.time.delayedCall(delay, function() {
        scene.game.events.once("poststep", function() {
            callback.call(scope, args);
        });
    });
    return timer;
};
exports.default = PostStepDelayCall;

},{"../system/GetSceneObject.js":"kXtDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4o7ry":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../../../utils/object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
exports.default = {
    setTransitInTime (time) {
        this.transitInTime = time;
        return this;
    },
    setTransitOutTime (time) {
        this.transitOutTime = time;
        return this;
    },
    setTransitInCallback (callback) {
        if (!callback) callback = (0, _noopJsDefault.default);
        this.transitInCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    setTransitOutCallback (callback) {
        if (!callback) callback = (0, _noopJsDefault.default);
        this.transitOutCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    }
};

},{"../../../utils/object/NOOP.js":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kiANe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Override
    runTransitionInCallback () {
        this.transitInCallback(this.parent, this.transitInTime);
        return this.transitInTime;
    },
    // Override
    onOpen () {},
    requestOpen (openEventData, duration) {
        if (!this._state.canOpen()) return this;
        this.openEventData = arguments.length > 0 ? openEventData : this.parent;
        var transitionTimeSave = this.transitInTime;
        if (duration !== undefined) this.transitInTime = duration;
        this._state.goto("TRANS_OPNE");
        this.transitInTime = transitionTimeSave;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aUeJI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Override
    runTransitionOutCallback () {
        this.transitOutCallback(this.parent, this.transitOutTime);
        return this.transitOutTime;
    },
    // Override
    onClose () {
        // Destroy parent and this behavior
        if (this.oneShotMode) this.parent.destroy();
    },
    requestClose (closeEventData, duration) {
        if (!this._state.canClose) return this;
        this.closeEventData = arguments.length > 0 ? closeEventData : this.parent;
        var transitionTimeSave = this.transitOutTime;
        if (duration !== undefined) this.transitOutTime = duration;
        this._state.goto("TRANS_CLOSE");
        this.transitOutTime = transitionTimeSave;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8KaOO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coverJs = require("../../gameobjects/shape/cover/Cover.js");
var _coverJsDefault = parcelHelpers.interopDefault(_coverJs);
var CreateCover = function(gameObject, config) {
    var scene = gameObject.scene;
    var cover = new (0, _coverJsDefault.default)(scene, config);
    scene.add.existing(cover);
    // Put cover behind game object
    if (gameObject.isRexContainerLite) {
        gameObject.moveDepthBelow(cover);
        gameObject.pin(cover, {
            syncPosition: false,
            syncRotation: false,
            syncScale: false,
            syncAlpha: false,
            syncScrollFactor: false
        });
    } else scene.children.moveBelow(cover, gameObject);
    return cover;
};
exports.default = CreateCover;

},{"../../gameobjects/shape/cover/Cover.js":"can6F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"can6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fullWindowRectangleJs = require("../fullwindowrectangle/FullWindowRectangle.js");
var _fullWindowRectangleJsDefault = parcelHelpers.interopDefault(_fullWindowRectangleJs);
var _touchEventStopJs = require("../../../input/toucheventstop/TouchEventStop.js");
var _touchEventStopJsDefault = parcelHelpers.interopDefault(_touchEventStopJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Cover extends (0, _fullWindowRectangleJsDefault.default) {
    constructor(scene, config){
        var fillColor = GetValue(config, "color", 0x0);
        var fillAlpha = GetValue(config, "alpha", 0.8);
        super(scene, fillColor, fillAlpha);
        this.touchEventStop = new (0, _touchEventStopJsDefault.default)(this, {
            hitAreaMode: 1
        });
    }
}
exports.default = Cover;

},{"../fullwindowrectangle/FullWindowRectangle.js":"72RzD","../../../input/toucheventstop/TouchEventStop.js":"fbMGp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72RzD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Rectangle = Phaser.GameObjects.Rectangle;
class FullWindowRectangle extends Rectangle {
    constructor(scene, color, alpha){
        super(scene, 0, 0, 2, 2, color, 1);
        this.setAlpha(alpha);
        this.setScrollFactor(0);
        this.boot();
    }
    boot() {
        var scene = this.scene;
        scene.sys.events.on("prerender", this.resize, this);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.scene.sys.events.off("prerender", this.resize, this);
        super.destroy(fromScene);
    }
    get tint() {
        return this.fillColor;
    }
    set tint(value) {
        this.setFillStyle(value, this.fillAlpha);
    }
    resize() {
        var scene = this.scene;
        var gameSize = scene.sys.scale.gameSize;
        var camera = scene.sys.cameras.main;
        var gameWidth = gameSize.width, gameHeight = gameSize.height, scale = 1 / camera.zoom;
        var x = gameWidth / 2, y = gameHeight / 2, width = gameWidth * scale, height = gameHeight * scale;
        if (this.x !== x || this.y !== y) this.setPosition(x, y);
        if (this.width !== width || this.height !== height) this.setSize(width, height).setOrigin(0.5);
    }
}
exports.default = FullWindowRectangle;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fbMGp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TouchEventStop extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, {
            eventEmitter: false
        });
        // No event emitter
        // this.parent = gameObject;
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.setHitAreaMode(GetValue(o, "hitAreaMode", 0));
        this.setEnable(GetValue(o, "enable", true));
        this.setStopMode(GetValue(o, "stopAllLevels", true));
        return this;
    }
    boot() {
        this.parent.on("pointerdown", function(pointer, localX, localY, event) {
            if (this.stopAllLevels) event.stopPropagation();
        }, this).on("pointerup", function(pointer, localX, localY, event) {
            if (this.stopAllLevels) event.stopPropagation();
        }, this).on("pointermove", function(pointer, localX, localY, event) {
            if (this.stopAllLevels) event.stopPropagation();
        }, this).on("pointerover", function(pointer, localX, localY, event) {
            if (this.stopAllLevels) event.stopPropagation();
        }, this).on("pointerout", function(pointer, event) {
            if (this.stopAllLevels) event.stopPropagation();
        }, this);
    }
    setHitAreaMode(mode) {
        if (typeof mode === "string") mode = HitAreaMode[mode];
        var gameObject = this.parent;
        if (gameObject.input) gameObject.removeInteractive();
        if (mode === 0) gameObject.setInteractive();
        else gameObject.setInteractive({
            hitArea: {},
            hitAreaCallback: function() {
                return true;
            }
        });
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        if (e) this.parent.setInteractive();
        else this.parent.disableInteractive();
        this.enable = e;
        return this;
    }
    setStopMode(allLevels) {
        if (allLevels === undefined) allLevels = true;
        this.stopAllLevels = allLevels;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
}
var HitAreaMode = {
    default: 0,
    fullWindow: 1
};
exports.default = TouchEventStop;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cObPI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _popupJs = require("../../popup.js");
var _popupJsDefault = parcelHelpers.interopDefault(_popupJs);
var _scaleDownDestroyJs = require("../../scale-down-destroy.js");
var _scaleDownDestroyJsDefault = parcelHelpers.interopDefault(_scaleDownDestroyJs);
var _fadeInJs = require("../../fade-in.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutDestroyJs = require("../../fade-out-destroy.js");
var _fadeOutDestroyJsDefault = parcelHelpers.interopDefault(_fadeOutDestroyJs);
exports.default = {
    popUp (gameObject, duration) {
        if (gameObject._modalScaleSave !== undefined) {
            gameObject.scaleX = gameObject._modalScaleSave;
            gameObject.scaleY = gameObject._modalScaleSave;
        } else gameObject._modalScaleSave = gameObject.scaleX;
        (0, _popupJsDefault.default)(gameObject, duration);
    },
    scaleDown (gameObject, duration) {
        // Don't destroy here
        (0, _scaleDownDestroyJsDefault.default)(gameObject, duration, undefined, undefined, false);
    },
    fadeIn (gameObject, duration) {
        if (gameObject._modalAlphaSave !== undefined) gameObject.alpha = gameObject._modalAlphaSave;
        else gameObject._modalAlphaSave = gameObject.alpha;
        (0, _fadeInJsDefault.default)(gameObject, duration);
    },
    fadeOut (gameObject, duration) {
        // Don't destroy here
        (0, _fadeOutDestroyJsDefault.default)(gameObject, duration, false);
    }
};

},{"../../popup.js":"fwUSv","../../scale-down-destroy.js":"hAt1k","../../fade-in.js":"3iZji","../../fade-out-destroy.js":"cQBis","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SaKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultCoverTransitInCallback", ()=>DefaultCoverTransitInCallback);
parcelHelpers.export(exports, "DefaultCoverTransitOutCallback", ()=>DefaultCoverTransitOutCallback);
var _fadeInJs = require("../../fade-in.js");
var _fadeInJsDefault = parcelHelpers.interopDefault(_fadeInJs);
var _fadeOutDestroyJs = require("../../fade-out-destroy.js");
var _fadeOutDestroyJsDefault = parcelHelpers.interopDefault(_fadeOutDestroyJs);
var DefaultCoverTransitInCallback = function(cover, duration) {
    if (cover._modalAlphaSave !== undefined) cover.alpha = cover._modalAlphaSave;
    else cover._modalAlphaSave = cover.alpha;
    (0, _fadeInJsDefault.default)(cover, duration, cover.alpha);
};
var DefaultCoverTransitOutCallback = function(cover, duration) {
    (0, _fadeOutDestroyJsDefault.default)(cover, duration, false);
};

},{"../../fade-in.js":"3iZji","../../fade-out-destroy.js":"cQBis","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJBEI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBoundsJs = require("./GetBounds.js");
var IsPointInBounds = function(gameObject, x, y, preTest, postTest) {
    // Can't get bounds
    if (!gameObject) return false;
    if (preTest && !preTest(gameObject, x, y)) return false;
    var boundsRect = (0, _getBoundsJs.GetBounds)(gameObject, true);
    if (!boundsRect.contains(x, y)) return false;
    if (postTest && !postTest(gameObject, x, y)) return false;
    return true;
};
exports.default = IsPointInBounds;

},{"./GetBounds.js":"45Kmj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oLu0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Modal", ()=>Modal);
parcelHelpers.export(exports, "ModalPromise", ()=>ModalPromise);
parcelHelpers.export(exports, "ModalClose", ()=>ModalClose);
var _modalJs = require("./Modal.js");
var _modalJsDefault = parcelHelpers.interopDefault(_modalJs);
var Modal = function(gameObject, config) {
    var modalBehavior = new (0, _modalJsDefault.default)(gameObject, config);
    // Route modal's 'open', 'close' event
    modalBehavior.on("open", function() {
        gameObject.emit("modal.open", modalBehavior);
    });
    modalBehavior.on("close", function(closeEventData) {
        gameObject.emit("modal.close", closeEventData, modalBehavior);
    });
    // Reigster 'modal.requestClose' event for invoking modalBehavior.requestClose() method
    gameObject.on("modal.requestClose", modalBehavior.requestClose, modalBehavior);
    /*
    It is not necessary to turn off gameObject's 'modal.requestClose' event because that :

    - If `config.destroy` is `undefined` (or `true), gameObject and modalBehavior will be destroyed
    - If `config.destroy` is `false` (for reusing dialog), keeping gameObject and modalBehavior 
    */ return modalBehavior;
};
var ModalPromise = function(gameObject, config) {
    var modalBehavior = Modal(gameObject, config);
    return new Promise(function(resolve, reject) {
        modalBehavior.once("close", function(closeEventData) {
            resolve(closeEventData);
        });
    });
};
var ModalClose = function(gameObject, closeEventData) {
    gameObject.emit("modal.requestClose", closeEventData);
};

},{"./Modal.js":"kqk6A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hi03":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsFunction = function(obj) {
    return obj && typeof obj === "function";
};
exports.default = IsFunction;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ec7MA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPointerInBoundsJs = require("../../../plugins/utils/input/IsPointerInBounds.js");
var _isPointerInBoundsJsDefault = parcelHelpers.interopDefault(_isPointerInBoundsJs);
var _isGameObjectJs = require("../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var IsInTouching = function(pointer, gameObject) {
    if ((0, _isGameObjectJsDefault.default)(pointer) || typeof pointer === "string") {
        gameObject = pointer;
        pointer = undefined;
    }
    if (gameObject === undefined) gameObject = this;
    else if (typeof gameObject === "string") gameObject = this.getElement(gameObject);
    return (0, _isPointerInBoundsJsDefault.default)(gameObject, pointer);
};
exports.default = IsInTouching;

},{"../../../plugins/utils/input/IsPointerInBounds.js":"5Oc1O","../../../plugins/utils/system/IsGameObject.js":"cLBuU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Oc1O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPointInBoundsJs = require("../bounds/IsPointInBounds.js");
var _isPointInBoundsJsDefault = parcelHelpers.interopDefault(_isPointInBoundsJs);
var IsPointerInBounds = function(gameObject, pointer, preTest, postTest) {
    if (pointer) return (0, _isPointInBoundsJsDefault.default)(gameObject, pointer.worldX, pointer.worldY, preTest, postTest);
    else {
        var inputManager = gameObject.scene.input.manager;
        var pointersTotal = inputManager.pointersTotal;
        var pointers = inputManager.pointers;
        for(var i = 0; i < pointersTotal; i++){
            pointer = pointers[i];
            if ((0, _isPointInBoundsJsDefault.default)(gameObject, pointer.worldX, pointer.worldY, preTest, postTest)) return true;
        }
        return false;
    }
};
exports.default = IsPointerInBounds;

},{"../bounds/IsPointInBounds.js":"jJBEI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"221Py":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("../../../plugins/utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _containsPointJs = require("../utils/ContainsPoint.js");
var _containsPointJsDefault = parcelHelpers.interopDefault(_containsPointJs);
var PointToChild = function(x, y, preTest, postTest, children) {
    if (!(0, _isFunctionJsDefault.default)(preTest)) {
        children = preTest;
        preTest = undefined;
        postTest = undefined;
    }
    if (children === undefined) {
        if (this.sizerChildren) children = this.sizerChildren;
        else children = this.children;
    }
    if ((0, _isArrayJsDefault.default)(children)) {
        var child;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            child = children[i];
            if ((0, _containsPointJsDefault.default)(child, x, y, preTest, postTest)) return child;
        }
    } else {
        var child;
        for(var key in children){
            child = children[key];
            if ((0, _containsPointJsDefault.default)(child, x, y, preTest, postTest)) return child;
        }
    }
    return null;
};
exports.default = PointToChild;

},{"../../../plugins/utils/object/IsFunction.js":"5hi03","../../../plugins/utils/object/IsArray.js":"2k7ne","../utils/ContainsPoint.js":"le8aT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2k7ne":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsArray = function(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
};
exports.default = IsArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"le8aT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPointInBoundsJs = require("../../../plugins/utils/bounds/IsPointInBounds.js");
var _isPointInBoundsJsDefault = parcelHelpers.interopDefault(_isPointInBoundsJs);
var ContainsPoint = function(gameObject, x, y, preTest, postTest) {
    return (0, _isPointInBoundsJsDefault.default)(gameObject, x, y, GetPreTestCallback(preTest), GetPostTestCallback(postTest));
};
var IsNotHiddenSizer = function(gameObject) {
    var isHiddenSizer = gameObject.rexSizer && gameObject.rexSizer.hidden;
    return !isHiddenSizer;
};
var GetPreTestCallback = function(preTest) {
    if (!preTest) return IsNotHiddenSizer;
    return function(gameObject, x, y) {
        if (!IsNotHiddenSizer(gameObject)) return false;
        preTest(gameObject, x, y);
        return true;
    };
};
var GetPostTestCallback = function(postTest) {
    return postTest;
};
exports.default = ContainsPoint;

},{"../../../plugins/utils/bounds/IsPointInBounds.js":"jJBEI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJwi4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _preLayoutChildJs = require("./utils/PreLayoutChild.js");
var _preLayoutChildJsDefault = parcelHelpers.interopDefault(_preLayoutChildJs);
var _layoutChildJs = require("./utils/LayoutChild.js");
var _layoutChildJsDefault = parcelHelpers.interopDefault(_layoutChildJs);
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var LayoutBackgrounds = function() {
    if (this.backgroundChildren === undefined) return;
    var backgrounds = this.backgroundChildren;
    var startX = this.left, startY = this.top;
    var parentWidth = this.width, parentHeight = this.height;
    var child, childConfig, padding, x, y, width, height;
    for(var i = 0, cnt = backgrounds.length; i < cnt; i++){
        child = backgrounds[i];
        childConfig = child.rexSizer;
        if (childConfig.hidden) continue;
        padding = childConfig.padding;
        (0, _preLayoutChildJsDefault.default).call(this, child);
        x = startX + padding.left;
        y = startY + padding.top;
        width = parentWidth - padding.left - padding.right;
        height = parentHeight - padding.top - padding.bottom;
        (0, _resizeGameObjectJsDefault.default)(child, width, height);
        (0, _layoutChildJsDefault.default).call(this, child, x, y, width, height, ALIGN_CENTER);
    }
};
exports.default = LayoutBackgrounds;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","./utils/PreLayoutChild.js":"67npU","./utils/LayoutChild.js":"gUIXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9D5SO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResizeGameObject = function(gameObject, newWidth, newHeight) {
    if (!gameObject || newWidth === undefined && newHeight === undefined) return;
    if (gameObject.resize || gameObject.setSize) {
        if (newWidth === undefined) newWidth = gameObject.width;
        if (newHeight === undefined) newHeight = gameObject.height;
        if (gameObject.resize) gameObject.resize(newWidth, newHeight);
        else gameObject.setSize(newWidth, newHeight);
    } else {
        if (newWidth !== undefined) gameObject.displayWidth = newWidth;
        if (newHeight !== undefined) gameObject.displayHeight = newHeight;
    }
};
exports.default = ResizeGameObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67npU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _copyState = require("../../utils/CopyState");
var _copyStateDefault = parcelHelpers.interopDefault(_copyState);
var PreLayoutChild = function(child) {
    if (this.sizerEventsEnable) {
        (0, _copyStateDefault.default)(child, this.getChildPrevState(child));
        this.layoutedChildren.push(child);
    }
};
exports.default = PreLayoutChild;

},{"../../utils/CopyState":"2gXNa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2gXNa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CopyState = function(gamObject, out) {
    if (out === undefined) out = {};
    else if (out === true) out = GlobState;
    out.x = gamObject.x;
    out.y = gamObject.y;
    out.scaleX = gamObject.scaleX;
    out.scaleY = gamObject.scaleY;
    out.width = gamObject.width;
    out.height = gamObject.height;
    out.displayWidth = gamObject.displayWidth;
    out.displayHeight = gamObject.displayHeight;
    return out;
};
var GlobState = {};
exports.default = CopyState;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUIXa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignInJs = require("../../../../plugins/utils/actions/AlignIn.js");
var _alignInJsDefault = parcelHelpers.interopDefault(_alignInJs);
var LayoutChild = function(child, x, y, width, height, align, offsetX, offsetY) {
    (0, _alignInJsDefault.default)(child, x, y, width, height, align);
    if (offsetX !== undefined) child.x += offsetX;
    if (offsetY !== undefined) child.y += offsetY;
    this.resetChildPositionState(child);
    if (this.sizerEventsEnable) child.emit("sizer.postlayout", child, this);
};
exports.default = LayoutChild;

},{"../../../../plugins/utils/actions/AlignIn.js":"7glhd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iooIp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetDraggable = function(senser, draggable) {
    var senserType = typeof senser;
    if (senserType === "string") {
        var senserName = senser;
        senser = this.getElement(senserName);
        if (!senser) {
            console.error(`Can get element '${senserName}'`);
            return this;
        }
    } else if (senser === undefined || senserType != "object") {
        draggable = senser;
        senser = this;
    }
    if (draggable === undefined) draggable = true;
    if (senser.input && senser.input._dragTopmostSizer) // Draggable is already registered
    senser.input.draggable = draggable;
    else if (draggable) {
        // Register draggable
        senser.setInteractive();
        senser.scene.input.setDraggable(senser);
        senser.on("drag", function(pointer, dragX, dragY) {
            var topmostParent = this.getTopmostSizer();
            topmostParent.x += dragX - senser.x;
            topmostParent.y += dragY - senser.y;
            topmostParent.emit("sizer.drag", pointer, dragX, dragY);
        }, this).on("dragstart", function(pointer, dragX, dragY) {
            var topmostParent = this.getTopmostSizer();
            topmostParent.emit("sizer.dragstart", pointer, dragX, dragY);
        }, this).on("dragend", function(pointer, dragX, dragY, dropped) {
            var topmostParent = this.getTopmostSizer();
            topmostParent.emit("sizer.dragend", pointer, dragX, dragY, dropped);
        }, this);
        senser.input._dragTopmostSizer = true;
    }
    return this;
};
exports.default = SetDraggable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSQAy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickJs = require("../click/Click.js");
var _clickJsDefault = parcelHelpers.interopDefault(_clickJs);
exports.default = {
    onClick (gameObject, callback, scope, config) {
        if (!gameObject) return this;
        if (typeof gameObject === "function") {
            config = scope;
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._click === undefined) gameObject._click = new (0, _clickJsDefault.default)(gameObject, config);
        gameObject._click.on("click", callback, scope);
        return this;
    },
    offClick (gameObject, callback, scope) {
        if (typeof gameObject === "function") {
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._click === undefined) return this;
        gameObject._click.off("click", callback, scope);
        return this;
    },
    enableClick (gameObject, enabled) {
        if (gameObject && typeof gameObject !== "object") {
            enabled = gameObject;
            gameObject = this;
        }
        if (gameObject._click === undefined) return this;
        gameObject._click.setEnable(enabled);
        return this;
    },
    disableClick (gameObject) {
        if (gameObject && typeof gameObject !== "object") gameObject = this;
        if (gameObject._click === undefined) return this;
        gameObject._click.setEnable(false);
        return this;
    }
};

},{"../click/Click.js":"1KCLI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1KCLI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonJs = require("../../../plugins/button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
exports.default = (0, _buttonJsDefault.default);

},{"../../../plugins/button.js":"bqsAm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqsAm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonJs = require("./input/button/Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
exports.default = (0, _buttonJsDefault.default);

},{"./input/button/Button.js":"k9qbm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e0JSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickOutsideJs = require("../clickoutside/ClickOutside.js");
var _clickOutsideJsDefault = parcelHelpers.interopDefault(_clickOutsideJs);
exports.default = {
    onClickOutside (gameObject, callback, scope, config) {
        if (!gameObject) return this;
        if (typeof gameObject === "function") {
            config = scope;
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._clickOutside === undefined) gameObject._clickOutside = new (0, _clickOutsideJsDefault.default)(gameObject, config);
        gameObject._clickOutside.on("clickoutside", callback, scope);
        return this;
    },
    offClickOutside (gameObject, callback, scope) {
        if (typeof gameObject === "function") {
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._clickOutside === undefined) return this;
        gameObject._clickOutside.off("clickoutside", callback, scope);
        return this;
    },
    enableClickOutside (gameObject, enabled) {
        if (gameObject && typeof gameObject !== "object") {
            enabled = gameObject;
            gameObject = this;
        }
        if (gameObject._clickOutside === undefined) return this;
        gameObject._clickOutside.setEnable(enabled);
        return this;
    },
    disableClickOutside (gameObject) {
        if (gameObject && typeof gameObject !== "object") gameObject = this;
        if (gameObject._clickOutside === undefined) return this;
        gameObject._clickOutside.setEnable(false);
        return this;
    }
};

},{"../clickoutside/ClickOutside.js":"7gsz8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7gsz8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickoutsideJs = require("../../../plugins/clickoutside.js");
var _clickoutsideJsDefault = parcelHelpers.interopDefault(_clickoutsideJs);
exports.default = (0, _clickoutsideJsDefault.default);

},{"../../../plugins/clickoutside.js":"cm9Yz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cm9Yz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickOutsideJs = require("./input/clickoutside/ClickOutside.js");
var _clickOutsideJsDefault = parcelHelpers.interopDefault(_clickOutsideJs);
exports.default = (0, _clickOutsideJsDefault.default);

},{"./input/clickoutside/ClickOutside.js":"1lD6S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1lD6S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _isPointerInHitAreaJs = require("../../utils/input/IsPointerInHitArea.js");
var _isPointerInHitAreaJsDefault = parcelHelpers.interopDefault(_isPointerInHitAreaJs);
var _isPointerInBoundsJs = require("../../utils/input/IsPointerInBounds.js");
var _isPointerInBoundsJsDefault = parcelHelpers.interopDefault(_isPointerInBoundsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ClickOutside extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this._enable = undefined;
        var inputConfig = GetValue(config, "inputConfig", undefined);
        if (inputConfig) gameObject.setInteractive(inputConfig);
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.setEnable(GetValue(o, "enable", true));
        this.setMode(GetValue(o, "mode", 1));
        this.setClickInterval(GetValue(o, "clickInterval", 100));
        return this;
    }
    boot() {
        var scene = this.parent.scene;
        scene.input.on("pointerdown", this.onPress, this);
        scene.input.on("pointerup", this.onRelease, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        var scene = this.parent.scene;
        scene.input.off("pointerdown", this.onPress, this);
        scene.input.off("pointerup", this.onRelease, this);
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        this._enable = e;
        var eventName = e ? "enable" : "disable";
        this.emit(eventName, this, this.parent);
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    setMode(m) {
        if (typeof m === "string") m = CLICKMODE[m];
        this.mode = m;
        return this;
    }
    setClickInterval(interval) {
        this.clickInterval = interval; // ms
        return this;
    }
    isPointerInside(pointer) {
        var gameObject = this.parent;
        var isInsideCallback = gameObject.input ? (0, _isPointerInHitAreaJsDefault.default) : (0, _isPointerInBoundsJsDefault.default);
        return isInsideCallback(gameObject, pointer);
    }
    // internal
    onPress(pointer) {
        if (this.mode === 0) {
            // Do nothing if game object is not visible
            if (!this.parent.willRender(pointer.camera)) return;
            if (!this.isPointerInside(pointer)) this.click(pointer.downTime, pointer);
        }
    }
    onRelease(pointer) {
        if (this.mode === 1) {
            // Do nothing if game object is not visible
            if (!this.parent.willRender(pointer.camera)) return;
            if (!this.isPointerInside(pointer)) this.click(pointer.upTime, pointer);
        }
    }
    click(nowTime, pointer) {
        if (!this.enable) return this;
        if (nowTime === undefined) {
            // fires 'clickoutside' event manually
            this.emit("clickoutside", this, this.parent, pointer);
            return this;
        }
        var lastClickTime = this.lastClickTime;
        if (lastClickTime !== undefined && nowTime - lastClickTime <= this.clickInterval) return this;
        this.lastClickTime = nowTime;
        this.emit("clickoutside", this, this.parent, pointer);
        return this;
    }
}
const CLICKMODE = {
    press: 0,
    pointerdown: 0,
    release: 1,
    pointerup: 1
};
exports.default = ClickOutside;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/input/IsPointerInHitArea.js":"4yv3N","../../utils/input/IsPointerInBounds.js":"5Oc1O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3gEov":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inTouchingJs = require("../intouching/InTouching.js");
var _inTouchingJsDefault = parcelHelpers.interopDefault(_inTouchingJs);
var _isPointerInBoundsJs = require("../../../plugins/utils/input/IsPointerInBounds.js");
var _isPointerInBoundsJsDefault = parcelHelpers.interopDefault(_isPointerInBoundsJs);
exports.default = {
    isPointerInBounds (target) {
        if (target === undefined) target = this;
        else if (typeof target === "string") target = this.getElement(target);
        if (!target) return false;
        return (0, _isPointerInBoundsJsDefault.default)(target);
    },
    onTouching (gameObject, callback, scope, config) {
        if (!gameObject) return this;
        if (typeof gameObject === "function") {
            config = scope;
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._inTouching === undefined) gameObject._inTouching = new (0, _inTouchingJsDefault.default)(gameObject, config);
        gameObject._inTouching.on("intouch", callback, scope);
        return this;
    },
    offTouching (gameObject, callback, scope) {
        if (typeof gameObject === "function") {
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._inTouching === undefined) return this;
        gameObject._inTouching.off("intouch", callback, scope);
        return this;
    },
    onTouchingEnd (gameObject, callback, scope, config) {
        if (!gameObject) return this;
        if (typeof gameObject === "function") {
            config = scope;
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._inTouching === undefined) gameObject._inTouching = new (0, _inTouchingJsDefault.default)(gameObject, config);
        gameObject._inTouching.on("touchend", callback, scope);
        return this;
    },
    offTouchingEnd (gameObject, callback, scope) {
        if (typeof gameObject === "function") {
            scope = callback;
            callback = gameObject;
            gameObject = this;
        }
        if (gameObject._inTouching === undefined) return this;
        gameObject._inTouching.off("touchend", callback, scope);
        return this;
    },
    enableTouching (gameObject, enabled) {
        if (gameObject && typeof gameObject !== "object") {
            enabled = gameObject;
            gameObject = this;
        }
        if (gameObject._inTouching === undefined) return this;
        gameObject._inTouching.setEnable(enabled);
        return this;
    },
    disableTouching (gameObject) {
        if (gameObject && typeof gameObject !== "object") gameObject = this;
        if (gameObject._inTouching === undefined) return this;
        gameObject._inTouching.setEnable(false);
        return this;
    }
};

},{"../intouching/InTouching.js":"1HeWv","../../../plugins/utils/input/IsPointerInBounds.js":"5Oc1O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1HeWv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _intouchingJs = require("../../../plugins/intouching.js");
var _intouchingJsDefault = parcelHelpers.interopDefault(_intouchingJs);
exports.default = (0, _intouchingJsDefault.default);

},{"../../../plugins/intouching.js":"2HVzM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2HVzM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inTouchingJs = require("./input/intouching/InTouching.js");
var _inTouchingJsDefault = parcelHelpers.interopDefault(_inTouchingJs);
exports.default = (0, _inTouchingJsDefault.default);

},{"./input/intouching/InTouching.js":"keOXw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"keOXw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _cooldownJs = require("../../utils/time/cooldown/Cooldown.js");
var _cooldownJsDefault = parcelHelpers.interopDefault(_cooldownJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class InTouching extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this._enable = undefined;
        this.cooldown = new (0, _cooldownJsDefault.default)();
        this.parent.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.pointer = undefined;
        this.prevIsInTouch = false;
        this.isInTouching = false;
        this.setEnable(GetValue(o, "enable", true));
        this.setCooldown(GetValue(o, "cooldown", undefined));
        return this;
    }
    boot() {
        var gameObject = this.parent;
        gameObject.on("pointerdown", this.onPointIn, this);
        gameObject.on("pointerover", this.onPointIn, this);
        gameObject.on("pointerup", this.onPointOut, this);
        gameObject.on("pointerout", this.onPointOut, this);
        this.scene.sys.events.on("preupdate", this.preupdate, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // GameObject events will be removed when this gameObject destroyed 
        // this.parent.off('pointerdown', this.onPointIn, this);
        // this.parent.off('pointerover', this.onPointIn, this);
        // this.parent.off('pointerup', this.onPointOut, this);
        // this.parent.off('pointerout', this.onPointOut, this);
        this.scene.sys.events.off("preupdate", this.preupdate, this);
        this.pointer = undefined;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) {
            this.prevIsInTouch = false;
            this.isInTouching = false;
            this.pointer = undefined;
        }
        this._enable = e;
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    get cooldownTime() {
        return this.cooldown.cooldownTime;
    }
    set cooldownTime(time) {
        this.cooldown.setCooldownTime(time);
    }
    setCooldown(time) {
        this.cooldownTime = time;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    // internal
    onPointIn(pointer, localX, localY) {
        if (!this.enable || !pointer.isDown || this.pointer !== undefined) return;
        this.pointer = pointer;
        this.isInTouching = true;
    }
    onPointOut(pointer) {
        if (!this.enable || this.pointer !== pointer) return;
        this.pointer = undefined;
        this.isInTouching = false;
    }
    preupdate(time, delta) {
        this.cooldown.update(time, delta);
        if (!this.prevIsInTouch && this.isInTouching) this.emit("touchstart", this, this.parent);
        if (this.isInTouching && this.cooldown.request()) this.emit("intouch", this, this.parent, this.pointer);
        if (this.prevIsInTouch && !this.isInTouching) this.emit("touchend", this, this.parent);
        this.prevIsInTouch = this.isInTouching;
    }
}
exports.default = InTouching;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/time/cooldown/Cooldown.js":"aIgui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIgui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fsmJs = require("../../../logic/fsm/FSM.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
class Cooldown extends (0, _fsmJsDefault.default) {
    constructor(){
        super({
            eventEmitter: false
        });
        this.goto("IDLE");
    }
    setCooldownTime(time) {
        this.cooldownTime = time;
        this.cooldownMode = time !== undefined;
        return this;
    }
    request() {
        return this.runMethod("request");
    }
    // IDLE state
    update_IDLE() {
        this.compensationTime = 0;
    }
    request_IDLE() {
        this.next();
        return true;
    }
    next_IDLE() {
        if (this.cooldownMode) return "COOLDOWN";
    }
    // COOLDOWN state
    enter_COOLDOWN() {
        this.remainderTime = this.cooldownTime + this.compensationTime;
    }
    update_COOLDOWN(time, delta) {
        this.remainderTime -= delta;
        if (this.remainderTime < 0) {
            this.compensationTime = this.cooldownTime > delta ? -this.remainderTime : 0;
            this.goto("IDLE");
        }
    }
    request_COOLDOWN() {
        return false;
    }
}
exports.default = Cooldown;

},{"../../../logic/fsm/FSM.js":"dOxrt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fVVgX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setChildrenInteractiveJs = require("../utils/setchildreninteractive/SetChildrenInteractive.js");
var _setChildrenInteractiveJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveJs);
var SetChildrenInteractiveWrap = function(config) {
    (0, _setChildrenInteractiveJsDefault.default)(this, config);
    return this;
};
exports.default = SetChildrenInteractiveWrap;

},{"../utils/setchildreninteractive/SetChildrenInteractive.js":"1E3PM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1E3PM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _downChildJs = require("./DownChild.js");
var _downChildJsDefault = parcelHelpers.interopDefault(_downChildJs);
var _upChildJs = require("./UpChild.js");
var _upChildJsDefault = parcelHelpers.interopDefault(_upChildJs);
var _overChildJs = require("./OverChild.js");
var _overChildJsDefault = parcelHelpers.interopDefault(_overChildJs);
var _clickChildJs = require("./ClickChild.js");
var _clickChildJsDefault = parcelHelpers.interopDefault(_clickChildJs);
var _tapChildJs = require("./TapChild.js");
var _tapChildJsDefault = parcelHelpers.interopDefault(_tapChildJs);
var _pressChildJs = require("./PressChild.js");
var _pressChildJsDefault = parcelHelpers.interopDefault(_pressChildJs);
var _swipeChildJs = require("./SwipeChild.js");
var _swipeChildJsDefault = parcelHelpers.interopDefault(_swipeChildJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var SetChildrenInteractive = function(gameObject, config) {
    gameObject.setInteractive();
    gameObject._childrenInteractive = {
        targetSizers: GetValue(config, "targets", [
            gameObject
        ]),
        eventEmitter: GetValue(config, "eventEmitter", gameObject),
        eventNamePrefix: GetValue(config, "inputEventPrefix", "child.")
    };
    (0, _downChildJsDefault.default).call(gameObject, config);
    (0, _upChildJsDefault.default).call(gameObject, config);
    (0, _overChildJsDefault.default).call(gameObject, config);
    (0, _clickChildJsDefault.default).call(gameObject, config);
    (0, _tapChildJsDefault.default).call(gameObject, config);
    (0, _pressChildJsDefault.default).call(gameObject, config);
    (0, _swipeChildJsDefault.default).call(gameObject, config);
    return gameObject;
};
exports.default = SetChildrenInteractive;

},{"./DownChild.js":"gnXSC","./UpChild.js":"lRb8S","./OverChild.js":"kDZaJ","./ClickChild.js":"bsshu","./TapChild.js":"8c1Cx","./PressChild.js":"ehwrJ","./SwipeChild.js":"kGvh3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gnXSC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var DownChild = function(config) {
    var downConfig = GetValue(config, "down", undefined);
    if (downConfig === false) return;
    else if (downConfig === true) downConfig = undefined;
    this.on("pointerdown", OnDown, this);
};
var OnDown = function(pointer, localX, localY, event) {
    var childrenInteractive = this._childrenInteractive;
    (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}down`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
};
exports.default = DownChild;

},{"./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GRzz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointToChildJs = require("./PointToChild.js");
var _pointToChildJsDefault = parcelHelpers.interopDefault(_pointToChildJs);
var EmitChildEvent = function(eventEmitter, eventName, parents, x, y, pointer, event) {
    var child;
    if (y === undefined) child = x;
    else child = (0, _pointToChildJsDefault.default)(parents, x, y);
    if (!child) return;
    eventEmitter.emit(eventName, child, pointer, event);
};
exports.default = EmitChildEvent;

},{"./PointToChild.js":"8Af9u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Af9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containsPointJs = require("../ContainsPoint.js");
var _containsPointJsDefault = parcelHelpers.interopDefault(_containsPointJs);
var PointToChild = function(parents, x, y) {
    var parent;
    for(var i = 0, cnt = parents.length; i < cnt; i++){
        parent = parents[i];
        if (!(0, _containsPointJsDefault.default)(parent, x, y)) continue;
        return parent.pointToChild(x, y);
    }
    return null;
};
exports.default = PointToChild;

},{"../ContainsPoint.js":"le8aT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRb8S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var UpChild = function(config) {
    var upConfig = GetValue(config, "up", undefined);
    if (upConfig === false) return;
    else if (upConfig === true) upConfig = undefined;
    this.on("pointerup", OnUp, this);
};
var OnUp = function(pointer, localX, localY, event) {
    var childrenInteractive = this._childrenInteractive;
    (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}up`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
};
exports.default = UpChild;

},{"./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kDZaJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointToChildJs = require("./PointToChild.js");
var _pointToChildJsDefault = parcelHelpers.interopDefault(_pointToChildJs);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var OverChild = function(config) {
    var overConfig = GetValue(config, "over", undefined);
    if (overConfig === false) return;
    else if (overConfig === true) overConfig = undefined;
    this.on("pointermove", OnMove, this).on("pointerover", OnMove, this).on("pointerout", OnOut, this) // pointer-up is included too
    ;
};
var OnMove = function(pointer, localX, localY, event) {
    var childrenInteractive = this._childrenInteractive;
    var child = (0, _pointToChildJsDefault.default)(childrenInteractive.targetSizers, pointer.worldX, pointer.worldY);
    var preChild = childrenInteractive.lastOverChild;
    if (child && preChild && child === preChild) return;
    childrenInteractive.lastOverChild = child;
    (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}out`, childrenInteractive.targetSizers, preChild, undefined, pointer, event);
    (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}over`, childrenInteractive.targetSizers, child, undefined, pointer, event);
};
var OnOut = function(pointer, event) {
    var childrenInteractive = this._childrenInteractive;
    var child = childrenInteractive.lastOverChild;
    childrenInteractive.lastOverChild = null;
    (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}out`, childrenInteractive.targetSizers, child, undefined, pointer, event);
};
exports.default = OverChild;

},{"./PointToChild.js":"8Af9u","./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsshu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonJs = require("../../../../plugins/input/button/Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var ClickChild = function(config) {
    var clickConfig = GetValue(config, "click", undefined);
    if (clickConfig === false) return;
    else if (clickConfig === true) clickConfig = undefined;
    if (clickConfig === undefined) clickConfig = {};
    if (!clickConfig.hasOwnProperty("threshold")) clickConfig.threshold = 10;
    var childrenInteractive = this._childrenInteractive;
    this._click = new (0, _buttonJsDefault.default)(this, clickConfig);
    this._click.on("click", function(button, gameObject, pointer, event) {
        (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}click`, childrenInteractive.targetSizers, pointer.worldX, pointer.worldY, pointer, event);
    }, this);
};
exports.default = ClickChild;

},{"../../../../plugins/input/button/Button.js":"k9qbm","./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8c1Cx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tapJs = require("../../tap/Tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var TapChild = function(config) {
    var tapConfig = GetValue(config, "tap", undefined);
    if (tapConfig === false) return;
    else if (tapConfig === true) tapConfig = undefined;
    var childrenInteractive = this._childrenInteractive;
    this._tap = new (0, _tapJsDefault.default)(this, tapConfig);
    this._tap.on("tap", function(tap, gameObject, lastPointer) {
        (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}${tap.tapsCount}tap`, childrenInteractive.targetSizers, tap.worldX, tap.worldY, lastPointer);
    }, this);
};
exports.default = TapChild;

},{"../../tap/Tap.js":"18whP","./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18whP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gesturesJs = require("../../../plugins/gestures.js");
exports.default = (0, _gesturesJs.Tap);

},{"../../../plugins/gestures.js":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7vo1R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tap", ()=>(0, _tapJsDefault.default));
parcelHelpers.export(exports, "Press", ()=>(0, _pressJsDefault.default));
parcelHelpers.export(exports, "Pan", ()=>(0, _panJsDefault.default));
parcelHelpers.export(exports, "Swipe", ()=>(0, _swipeJsDefault.default));
parcelHelpers.export(exports, "Pinch", ()=>(0, _pinchJsDefault.default));
parcelHelpers.export(exports, "Rotate", ()=>(0, _rotateJsDefault.default));
var _tapJs = require("./input/gestures/tap/Tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _pressJs = require("./input/gestures/press/Press.js");
var _pressJsDefault = parcelHelpers.interopDefault(_pressJs);
var _panJs = require("./input/gestures/pan/Pan.js");
var _panJsDefault = parcelHelpers.interopDefault(_panJs);
var _swipeJs = require("./input/gestures/swipe/Swipe.js");
var _swipeJsDefault = parcelHelpers.interopDefault(_swipeJs);
var _pinchJs = require("./input/gestures/pinch/Pinch.js");
var _pinchJsDefault = parcelHelpers.interopDefault(_pinchJs);
var _rotateJs = require("./input/gestures/rotate/Rotate.js");
var _rotateJsDefault = parcelHelpers.interopDefault(_rotateJs);

},{"./input/gestures/tap/Tap.js":"fo6ZO","./input/gestures/press/Press.js":"ioszO","./input/gestures/pan/Pan.js":"fK0jP","./input/gestures/swipe/Swipe.js":"iB6oJ","./input/gestures/pinch/Pinch.js":"gXHvL","./input/gestures/rotate/Rotate.js":"bWQqT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fo6ZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onePointerTracerJs = require("../onepointertracer/OnePointerTracer.js");
var _onePointerTracerJsDefault = parcelHelpers.interopDefault(_onePointerTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
class Tap extends (0, _onePointerTracerJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function() {
                        self.stop();
                        self.tapsCount = 0;
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function() {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function() {
                        self.start();
                        self.tapsCount = 0;
                        self.emit("tappingstart", self, self.gameObject, self.lastPointer);
                    }
                },
                RECOGNIZED: {
                    enter: function() {
                        self.start();
                        self.emit("tap", self, self.gameObject, self.lastPointer);
                        self.emit(`${self.tapsCount}tap`, self, self.gameObject, self.lastPointer);
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setHoldTime(GetValue(o, "time", 250)); // min-hold-time of Press is 251
        this.setTapInterval(GetValue(o, "tapInterval", 200));
        this.setDragThreshold(GetValue(o, "threshold", 9));
        this.setTapOffset(GetValue(o, "tapOffset", 10));
        var taps = GetValue(o, "taps", undefined);
        if (taps !== undefined) this.setTaps(taps);
        else {
            this.setMaxTaps(GetValue(o, "maxTaps", undefined));
            this.setMinTaps(GetValue(o, "minTaps", undefined));
        }
        return this;
    }
    onDragStart() {
        switch(this.state){
            case IDLE:
                this.state = BEGIN;
                break;
            case BEGIN:
                var pointer = this.lastPointer;
                var tapsOffset = DistanceBetween(pointer.upX, pointer.upY, pointer.x, pointer.y);
                if (tapsOffset > this.tapOffset) {
                    this.state = RECOGNIZED;
                    this.state = BEGIN;
                }
                break;
            case RECOGNIZED:
                this.state = BEGIN;
                break;
        }
    }
    onDragEnd() {
        if (this.state === BEGIN) {
            this.tapsCount++; // Try recognize next level
            this.emit("tapping", this, this.gameObject, this.lastPointer);
            if (this.maxTaps !== undefined && this.tapsCount === this.maxTaps) this.state = RECOGNIZED;
        }
    }
    onDrag() {
        if (this.state === IDLE) return;
        if (this.pointer.getDistance() > this.dragThreshold) this.state = IDLE;
    }
    preUpdate(time, delta) {
        if (!this.isRunning || !this.enable) return;
        if (this.state === BEGIN) {
            var pointer = this.lastPointer;
            if (pointer.isDown) {
                var holdTime = time - pointer.downTime;
                if (holdTime > this.holdTime) this.state = IDLE;
            } else {
                var releasedTime = time - pointer.upTime;
                if (releasedTime > this.tapInterval) {
                    if (this.minTaps === undefined || this.tapsCount >= this.minTaps) this.state = RECOGNIZED;
                    else this.state = IDLE;
                }
            }
        }
    }
    postUpdate(time, delta) {
        if (!this.isRunning || !this.enable) return;
        // Clear RECOGNIZED after update()
        if (this.state === RECOGNIZED) this.state = IDLE;
    }
    get isTapped() {
        return this.state === RECOGNIZED;
    }
    setHoldTime(time) {
        this.holdTime = time; // ms
        return this;
    }
    setTapInterval(time) {
        this.tapInterval = time; // ms
        return this;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
    setTapOffset(distance) {
        this.tapOffset = distance;
        return this;
    }
    setMaxTaps(taps) {
        this.maxTaps = taps;
        return this;
    }
    setMinTaps(taps) {
        this.minTaps = taps;
        return this;
    }
    setTaps(minTaps, maxTaps) {
        if (maxTaps === undefined) maxTaps = minTaps;
        this.setMinTaps(minTaps).setMaxTaps(maxTaps);
        return this;
    }
}
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Tap;

},{"../onepointertracer/OnePointerTracer.js":"lghmX","../../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lghmX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tickTaskJs = require("../../../utils/componentbase/TickTask.js");
var _tickTaskJsDefault = parcelHelpers.interopDefault(_tickTaskJs);
var _getSceneObjectJs = require("../../../utils/system/GetSceneObject.js");
var _getSceneObjectJsDefault = parcelHelpers.interopDefault(_getSceneObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class OnePointerTracer extends (0, _tickTaskJsDefault.default) {
    constructor(gameObject, config){
        var scene = (0, _getSceneObjectJsDefault.default)(gameObject);
        if (scene === gameObject) gameObject = undefined;
        super(scene, config);
        this.gameObject = gameObject;
        if (gameObject) gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this._enable = undefined;
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.setEnable(GetValue(o, "enable", true));
        this.setDetectBounds();
        if (this.gameObject === undefined) this.setDetectBounds(GetValue(o, "bounds", undefined));
        else this.setDetectBounds();
        this.tracerState = TOUCH0;
        // this.recongizedState = new stateClass(this);
        this.pointer = undefined;
        this.lastPointer = undefined; // Last catched pointer
        this.movedState = false;
        this.isTouchingAnyObject = false;
        return this;
    }
    boot() {
        super.boot();
        if (this.gameObject) this.gameObject.on("pointerdown", this.onPointerDown, this);
        else this.scene.input.on("pointerdown", this.onPointerDown, this);
        this.scene.input.on("pointerup", this.onPointerUp, this);
        this.scene.input.on("gameout", this.dragCancel, this);
        this.scene.input.on("pointermove", this.onPointerMove, this);
        this.scene.sys.events.once("shutdown", this.destroy, this);
    }
    shutdown(fromScene) {
        if (!this.scene) return;
        if (this.gameObject) ;
        else this.scene.input.off("pointerdown", this.onPointerDown, this);
        this.scene.input.off("pointerup", this.onPointerUp, this);
        this.scene.input.off("gameout", this.dragCancel, this);
        this.scene.input.off("pointermove", this.onPointerMove, this);
        this.scene.sys.events.off("shutdown", this.destroy, this);
        this.gameObject = undefined;
        this.bounds = undefined;
        this.pointer = undefined;
        this.lastPointer = undefined; // Last catched pointer
        this.movedState = false;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) this.dragCancel();
        this._enable = e;
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    setDetectBounds(bounds) {
        this.bounds = bounds;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    onPointerDown(pointer, gameObjects) {
        if (!this.enable) return;
        if (this.pointer !== undefined) return;
        var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) return;
        if (this.pointer === pointer) return;
        this.pointer = pointer;
        this.lastPointer = pointer;
        this.movedState = false;
        this.tracerState = TOUCH1;
        if (this.gameObject === undefined) this.isTouchingAnyObject = gameObjects.length > 0;
        this.onDragStart();
    }
    onPointerUp(pointer) {
        if (!this.enable) return;
        var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) return;
        if (this.pointer !== pointer) return;
        this.pointer = undefined;
        this.movedState = false;
        this.tracerState = TOUCH0;
        this.onDragEnd();
    }
    onPointerMove(pointer) {
        if (!this.enable) return;
        if (pointer.isDown) {
            var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
            var isCatchedPointer = this.pointer === pointer;
            if (!isCatchedPointer && isInsideBounds) ;
            else if (isCatchedPointer && !isInsideBounds) this.onPointerUp(pointer);
            else {
                if (!this.movedState) this.movedState = pointer.x !== pointer.downX || pointer.y !== pointer.downY;
                if (this.movedState) this.onDrag();
            }
        }
    }
    dragCancel() {
        if (this.tracerState === TOUCH1) this.onDragEnd();
        this.pointer = undefined;
        this.tracerState = TOUCH0;
        return this;
    }
    onDragStart() {
        this.emit("dragstart", this);
    }
    onDragEnd() {
        this.emit("dragend", this);
    }
    onDrag() {
        this.emit("drag", this);
    }
    // onLastPointerMove() { }
    preUpdate(time, delta) {}
    postUpdate(time, delta) {}
    startTicking() {
        super.startTicking();
        this.scene.sys.events.on("preupdate", this.preUpdate, this);
        this.scene.sys.events.on("postupdate", this.postUpdate, this);
    }
    stopTicking() {
        super.stopTicking();
        if (this.scene) {
            this.scene.sys.events.off("preupdate", this.preUpdate, this);
            this.scene.sys.events.off("postupdate", this.postUpdate, this);
        }
    }
    setRecongizedStateObject(stateObject) {
        this.recongizedState = stateObject;
        return this;
    }
    get state() {
        return this.recongizedState.state;
    }
    set state(newState) {
        this.recongizedState.state = newState;
    }
    cancel() {
        this.state = IDLE;
        return this;
    }
}
const TOUCH0 = 0;
const TOUCH1 = 1;
const IDLE = "IDLE";
exports.default = OnePointerTracer;

},{"../../../utils/componentbase/TickTask.js":"GCHOX","../../../utils/system/GetSceneObject.js":"kXtDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioszO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onePointerTracerJs = require("../onepointertracer/OnePointerTracer.js");
var _onePointerTracerJsDefault = parcelHelpers.interopDefault(_onePointerTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Press extends (0, _onePointerTracerJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function() {
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function() {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function() {
                        self.start();
                    },
                    exit: function() {
                        self.stop();
                    }
                },
                RECOGNIZED: {
                    enter: function() {
                        self.emit("pressstart", self, self.gameObject, self.lastPointer);
                    },
                    exit: function() {
                        self.emit("pressend", self, self.gameObject, self.lastPointer);
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, "threshold", 9));
        this.setHoldTime(GetValue(o, "time", 251));
        return this;
    }
    onDragStart() {
        this.state = BEGIN;
        if (this.holdTime === 0) this.state = RECOGNIZED;
    }
    onDragEnd() {
        this.state = IDLE;
    }
    onDrag() {
        if (this.state === IDLE) return;
        if (this.pointer.getDistance() > this.dragThreshold) this.state = IDLE;
    }
    preUpdate(time, delta) {
        if (!this.isRunning || !this.enable) return;
        if (this.state === BEGIN) {
            var holdTime = time - this.pointer.downTime;
            if (holdTime >= this.holdTime) this.state = RECOGNIZED;
        }
    }
    get isPressed() {
        return this.state === RECOGNIZED;
    }
    setHoldTime(time) {
        this.holdTime = time; // ms
        return this;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Press;

},{"../onepointertracer/OnePointerTracer.js":"lghmX","../../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK0jP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onePointerTracerJs = require("../onepointertracer/OnePointerTracer.js");
var _onePointerTracerJsDefault = parcelHelpers.interopDefault(_onePointerTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Pan extends (0, _onePointerTracerJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {},
                BEGIN: {
                    enter: function() {
                        var pointer = self.pointer;
                        self.startX = pointer.x;
                        self.startY = pointer.y;
                        self.startWorldX = pointer.worldX;
                        self.startWorldY = pointer.worldY;
                    }
                },
                RECOGNIZED: {
                    enter: function() {
                        self.emit("panstart", self, self.gameObject, self.lastPointer);
                    },
                    exit: function() {
                        var pointer = self.lastPointer;
                        self.endX = pointer.x;
                        self.endY = pointer.y;
                        self.endWorldX = pointer.worldX;
                        self.endWorldY = pointer.worldY;
                        self.emit("panend", self, self.gameObject, self.lastPointer);
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, "threshold", 10));
        return this;
    }
    onDragStart() {
        this.state = BEGIN;
        if (this.dragThreshold === 0) this.state = RECOGNIZED;
    }
    onDragEnd() {
        this.state = IDLE;
    }
    onDrag() {
        switch(this.state){
            case BEGIN:
                if (this.pointer.getDistance() >= this.dragThreshold) this.state = RECOGNIZED;
                break;
            case RECOGNIZED:
                var p1 = this.pointer.position;
                var p0 = this.pointer.prevPosition;
                this.dx = p1.x - p0.x;
                this.dy = p1.y - p0.y;
                var pointer = this.pointer;
                this.x = pointer.x;
                this.y = pointer.y;
                this.worldX = pointer.worldX;
                this.worldY = pointer.worldY;
                this.emit("pan", this, this.gameObject, this.lastPointer);
                break;
        }
    }
    get isPanned() {
        return this.state === RECOGNIZED;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Pan;

},{"../onepointertracer/OnePointerTracer.js":"lghmX","../../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iB6oJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onePointerTracerJs = require("../onepointertracer/OnePointerTracer.js");
var _onePointerTracerJsDefault = parcelHelpers.interopDefault(_onePointerTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
var _velocityMethodsJs = require("./VelocityMethods.js");
var _velocityMethodsJsDefault = parcelHelpers.interopDefault(_velocityMethodsJs);
var _constJs = require("../../../utils/math/angle/angletodirections/Const.js");
var _constJsDefault = parcelHelpers.interopDefault(_constJs);
var _angleToDirectionsJs = require("../../../utils/math/angle/angletodirections/AngleToDirections.js");
var _angleToDirectionsJsDefault = parcelHelpers.interopDefault(_angleToDirectionsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const RadToDeg = Phaser.Math.RadToDeg;
class Swipe extends (0, _onePointerTracerJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function() {
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function() {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function() {
                        self.validDrag = false;
                    }
                },
                RECOGNIZED: {
                    enter: function() {
                        self.start();
                        self.updateDirectionStates();
                        self.emit("swipe", self, self.gameObject, self.lastPointer);
                    },
                    exit: function() {
                        self.stop();
                        self.clearDirectionStates();
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
        this.clearDirectionStates();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, "threshold", 10));
        this.setVelocityThreshold(GetValue(o, "velocityThreshold", 1000));
        this.setDirectionMode(GetValue(o, "dir", "8dir"));
        return this;
    }
    onDragStart() {
        this.state = BEGIN;
    }
    onDragEnd() {
        this.state = IDLE;
    }
    onDrag() {
        if (this.state === BEGIN) {
            if (!this.validDrag) this.validDrag = this.dragThreshold === 0 || this.pointer.getDistance() >= this.dragThreshold;
            if (this.validDrag && this.dragVelocity > this.velocityThreshold) this.state = RECOGNIZED;
        }
    }
    postUpdate(time, delta) {
        if (!this.isRunning || !this.enable) return;
        // Clear RECOGNIZED after update()
        if (this.state === RECOGNIZED) this.state = IDLE;
    }
    get isSwiped() {
        return this.state === RECOGNIZED;
    }
    get dragVelocity() {
        var velocity;
        switch(this.dirMode){
            case 0:
                velocity = this.getVelocityY();
                break; // up & down
            case 1:
                velocity = this.getVelocityX();
                break; // left & right
            default:
                velocity = this.getVelocity();
                break; // 4 dir, 8 dir
        }
        return velocity;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
    setVelocityThreshold(velocity) {
        this.velocityThreshold = velocity;
        return this;
    }
    setDirectionMode(m) {
        if (typeof m === "string") m = (0, _constJsDefault.default)[m];
        this.dirMode = m;
        return this;
    }
    updateDirectionStates() {
        var angle = RadToDeg(this.getVelocityAngle());
        (0, _angleToDirectionsJsDefault.default)(angle, this.dirMode, this);
        return this;
    }
    clearDirectionStates() {
        this.left = false;
        this.right = false;
        this.up = false;
        this.down = false;
        return this;
    }
}
Object.assign(Swipe.prototype, (0, _velocityMethodsJsDefault.default));
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Swipe;

},{"../onepointertracer/OnePointerTracer.js":"lghmX","../../../fsm.js":"ftkbz","./VelocityMethods.js":"7iWsi","../../../utils/math/angle/angletodirections/Const.js":"ammpm","../../../utils/math/angle/angletodirections/AngleToDirections.js":"l0WXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7iWsi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTickDeltaJs = require("../../../utils/system/GetTickDelta.js");
var _getTickDeltaJsDefault = parcelHelpers.interopDefault(_getTickDeltaJs);
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;
exports.default = {
    getDt: function() {
        var dt = (0, _getTickDeltaJsDefault.default)(this.scene);
        return dt;
    },
    getVelocity: function() {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = DistanceBetween(p0.x, p0.y, p1.x, p1.y);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },
    getVelocityX: function() {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = Math.abs(p1.x - p0.x);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },
    getVelocityY: function() {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = Math.abs(p1.y - p0.y);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },
    getVelocityAngle: function() {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var angle = AngleBetween(p0.x, p0.y, p1.x, p1.y);
        return angle;
    }
};

},{"../../../utils/system/GetTickDelta.js":"9SgbA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ammpm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "up&down": 0,
    "left&right": 1,
    "4dir": 2,
    "8dir": 3
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0WXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var AngleToDirections = function(angle, dirMode, out) {
    if (out === undefined) out = {};
    else if (out === true) out = globOut;
    out.left = false;
    out.right = false;
    out.up = false;
    out.down = false;
    angle = (angle + 360) % 360;
    switch(dirMode){
        case 0:
            if (angle < 180) out.down = true;
            else out.up = true;
            break;
        case 1:
            if (angle > 90 && angle <= 270) out.left = true;
            else out.right = true;
            break;
        case 2:
            if (angle > 45 && angle <= 135) out.down = true;
            else if (angle > 135 && angle <= 225) out.left = true;
            else if (angle > 225 && angle <= 315) out.up = true;
            else out.right = true;
            break;
        case 3:
            if (angle > 22.5 && angle <= 67.5) {
                out.down = true;
                out.right = true;
            } else if (angle > 67.5 && angle <= 112.5) out.down = true;
            else if (angle > 112.5 && angle <= 157.5) {
                out.down = true;
                out.left = true;
            } else if (angle > 157.5 && angle <= 202.5) out.left = true;
            else if (angle > 202.5 && angle <= 247.5) {
                out.left = true;
                out.up = true;
            } else if (angle > 247.5 && angle <= 292.5) out.up = true;
            else if (angle > 292.5 && angle <= 337.5) {
                out.up = true;
                out.right = true;
            } else out.right = true;
            break;
    }
    return out;
};
var globOut = {};
exports.default = AngleToDirections;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gXHvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _twoPointersTracerJs = require("../twopointerstracer/TwoPointersTracer.js");
var _twoPointersTracerJsDefault = parcelHelpers.interopDefault(_twoPointersTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Pinch extends (0, _twoPointersTracerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function() {
                        self.prevDistance = undefined;
                        self.scaleFactor = 1;
                    }
                },
                BEGIN: {},
                RECOGNIZED: {
                    enter: function() {
                        self.emit("pinchstart", self);
                    },
                    exit: function() {
                        self.emit("pinchend", self);
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, "threshold", 0));
        return this;
    }
    onDrag2Start() {
        this.scaleFactor = 1;
        this.prevDistance = this.distanceBetween;
        this.state = BEGIN;
        if (this.dragThreshold === 0) this.state = RECOGNIZED;
    }
    onDrag2End() {
        this.state = IDLE;
    }
    onDrag2() {
        switch(this.state){
            case BEGIN:
                if (this.pointers[0].getDistance() >= this.dragThreshold && this.pointers[1].getDistance() >= this.dragThreshold) {
                    var curDistance = this.distanceBetween;
                    this.scaleFactor = curDistance / this.prevDistance;
                    this.prevDistance = curDistance;
                    this.state = RECOGNIZED;
                }
                break;
            case RECOGNIZED:
                var curDistance = this.distanceBetween;
                this.scaleFactor = curDistance / this.prevDistance;
                this.emit("pinch", this);
                this.prevDistance = curDistance;
                break;
        }
    }
    get isPinched() {
        return this.state === RECOGNIZED;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Pinch;

},{"../twopointerstracer/TwoPointersTracer.js":"bpigz","../../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpigz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventEmitterMethodsJs = require("../../../utils/eventemitter/EventEmitterMethods.js");
var _eventEmitterMethodsJsDefault = parcelHelpers.interopDefault(_eventEmitterMethodsJs);
var _clearJs = require("../../../utils/object/Clear.js");
var _clearJsDefault = parcelHelpers.interopDefault(_clearJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;
class TwoPointersTracer {
    constructor(scene, config){
        var amount = scene.input.manager.pointersTotal - 1;
        if (amount < 2) scene.input.addPointer(2 - amount);
        this.scene = scene;
        // Event emitter
        this.setEventEmitter(GetValue(config, "eventEmitter", undefined));
        this._enable = undefined;
        this.pointers = [];
        this.movedState = {};
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.setEnable(GetValue(o, "enable", true));
        this.bounds = GetValue(o, "bounds", undefined);
        this.tracerState = TOUCH0;
        this.pointers.length = 0;
        (0, _clearJsDefault.default)(this.movedState);
        return this;
    }
    boot() {
        this.scene.input.on("pointerdown", this.onPointerDown, this);
        this.scene.input.on("pointerup", this.onPointerUp, this);
        this.scene.input.on("gameout", this.dragCancel, this);
        this.scene.input.on("pointermove", this.onPointerMove, this);
        this.scene.sys.events.once("shutdown", this.destroy, this);
    }
    shutdown() {
        if (!this.scene) return;
        this.destroyEventEmitter();
        this.pointers.length = 0;
        (0, _clearJsDefault.default)(this.movedState);
        this.scene.input.off("pointerdown", this.onPointerDown, this);
        this.scene.input.off("pointerup", this.onPointerUp, this);
        this.scene.input.off("gameout", this.dragCancel, this);
        this.scene.input.off("pointermove", this.onPointerMove, this);
        this.scene.sys.events.off("shutdown", this.destroy, this);
        this.scene = undefined;
    }
    destroy() {
        this.shutdown();
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) this.dragCancel();
        this._enable = e;
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    onPointerDown(pointer) {
        if (!this.enable) return;
        if (this.pointers.length === 2) return;
        var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) return;
        var index = this.pointers.indexOf(pointer);
        if (index !== -1) return;
        this.movedState[pointer.id] = false;
        this.pointers.push(pointer);
        switch(this.tracerState){
            case TOUCH0:
                this.tracerState = TOUCH1;
                this.onDrag1Start();
                break;
            case TOUCH1:
                this.tracerState = TOUCH2;
                this.onDrag2Start();
                break;
        }
    }
    onPointerUp(pointer) {
        if (!this.enable) return;
        var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) return;
        var index = this.pointers.indexOf(pointer);
        if (index === -1) return;
        else {
            delete this.movedState[pointer.id];
            SpliceOne(this.pointers, index);
        }
        switch(this.tracerState){
            case TOUCH1:
                this.tracerState = TOUCH0;
                this.onDrag1End();
                break;
            case TOUCH2:
                this.tracerState = TOUCH1;
                this.onDrag2End();
                this.onDrag1Start();
                break;
        }
    }
    onPointerMove(pointer) {
        if (!this.enable) return;
        if (pointer.isDown) {
            var isInsideBounds = this.bounds ? this.bounds.contains(pointer.x, pointer.y) : true;
            var isCatchedPointer = this.pointers.indexOf(pointer) !== -1;
            if (!isCatchedPointer && isInsideBounds) ;
            else if (isCatchedPointer && !isInsideBounds) this.onPointerUp(pointer);
            else {
                if (!this.movedState[pointer.id]) this.movedState[pointer.id] = pointer.x !== pointer.downX || pointer.y !== pointer.downY;
                if (this.movedState[pointer.id]) switch(this.tracerState){
                    case TOUCH1:
                        this.onDrag1();
                        break;
                    case TOUCH2:
                        this.onDrag2();
                        break;
                }
            }
        }
    }
    dragCancel() {
        if (this.tracerState === TOUCH2) this.onDrag2End();
        this.pointers.length = 0;
        (0, _clearJsDefault.default)(this.movedState);
        this.tracerState = TOUCH0;
        return this;
    }
    onDrag1Start() {
        this.emit("drag1start", this);
    }
    onDrag1End() {
        this.emit("drag1end", this);
    }
    onDrag1() {
        this.emit("drag1", this);
    }
    onDrag2Start() {
        this.emit("drag2start", this);
    }
    onDrag2End() {
        this.emit("drag2end", this);
    }
    onDrag2() {
        this.emit("drag2", this);
    }
    get distanceBetween() {
        if (this.tracerState !== TOUCH2) return 0;
        var p0 = this.pointers[0], p1 = this.pointers[1];
        return DistanceBetween(p0.x, p0.y, p1.x, p1.y);
    }
    get angleBetween() {
        if (this.tracerState !== TOUCH2) return 0;
        var p0 = this.pointers[0], p1 = this.pointers[1];
        return AngleBetween(p0.x, p0.y, p1.x, p1.y);
    }
    get drag1Vector() {
        var pointer = this.pointers[0];
        if (pointer && this.movedState[pointer.id]) {
            var p1 = pointer.position;
            var p0 = pointer.prevPosition;
            tmpDragVector.x = p1.x - p0.x;
            tmpDragVector.y = p1.y - p0.y;
        } else {
            tmpDragVector.x = 0;
            tmpDragVector.y = 0;
        }
        return tmpDragVector;
    }
    get centerX() {
        if (this.tracerState !== TOUCH2) return 0;
        var p0 = this.pointers[0].position;
        var p1 = this.pointers[1].position;
        return (p0.x + p1.x) / 2;
    }
    get centerY() {
        if (this.tracerState !== TOUCH2) return 0;
        var p0 = this.pointers[0].position;
        var p1 = this.pointers[1].position;
        return (p0.y + p1.y) / 2;
    }
    get prevCenterX() {
        if (this.tracerState !== TOUCH2) return 0;
        var preP0 = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position;
        var preP1 = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
        return (preP0.x + preP1.x) / 2;
    }
    get prevCenterY() {
        if (this.tracerState !== TOUCH2) return 0;
        var preP0 = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position;
        var preP1 = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
        return (preP0.y + preP1.y) / 2;
    }
    get movementCenterX() {
        return this.centerX - this.prevCenterX;
    }
    get movementCenterY() {
        return this.centerY - this.prevCenterY;
    }
    setRecongizedStateObject(stateObject) {
        this.recongizedState = stateObject;
        return this;
    }
    get state() {
        return this.recongizedState.state;
    }
    set state(newState) {
        this.recongizedState.state = newState;
    }
    cancel() {
        this.state = IDLE;
        return this;
    }
}
Object.assign(TwoPointersTracer.prototype, (0, _eventEmitterMethodsJsDefault.default));
var tmpDragVector = {};
const TOUCH0 = 0;
const TOUCH1 = 1;
const TOUCH2 = 2;
const IDLE = "IDLE";
exports.default = TwoPointersTracer;

},{"../../../utils/eventemitter/EventEmitterMethods.js":"67KVT","../../../utils/object/Clear.js":"7yIf2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWQqT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _twoPointersTracerJs = require("../twopointerstracer/TwoPointersTracer.js");
var _twoPointersTracerJsDefault = parcelHelpers.interopDefault(_twoPointersTracerJs);
var _fsmJs = require("../../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
var _spinObjectJs = require("./SpinObject.js");
var _spinObjectJsDefault = parcelHelpers.interopDefault(_spinObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees; // Wrap degrees: -180 to 180 
const ShortestBetween = Phaser.Math.Angle.ShortestBetween;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
class Rotate extends (0, _twoPointersTracerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function() {
                        self.prevAngle = undefined;
                        self.angle = 0;
                    }
                },
                BEGIN: {},
                RECOGNIZED: {
                    enter: function() {
                        self.emit("rotatestart", self);
                    },
                    exit: function() {
                        self.emit("rotateend", self);
                    }
                }
            },
            init: function() {
                this.state = IDLE;
            },
            eventEmitter: false
        };
        this.setRecongizedStateObject(new (0, _fsmJsDefault.default)(stateConfig));
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, "threshold", 0));
        return this;
    }
    onDrag2Start() {
        this.prevAngle = WrapDegrees(RadToDeg(this.angleBetween)); // Degrees
        this.state = BEGIN;
        if (this.dragThreshold === 0) this.state = RECOGNIZED;
    }
    onDrag2End() {
        this.state = IDLE;
    }
    onDrag2() {
        switch(this.state){
            case BEGIN:
                if (this.pointers[0].getDistance() >= this.dragThreshold && this.pointers[1].getDistance() >= this.dragThreshold) {
                    var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
                    this.angle = ShortestBetween(this.prevAngle, curAngle);
                    this.prevAngle = curAngle;
                    this.state = RECOGNIZED;
                }
                break;
            case RECOGNIZED:
                var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
                this.angle = ShortestBetween(this.prevAngle, curAngle);
                this.prevAngle = curAngle;
                this.emit("rotate", this);
                break;
        }
    }
    get isRotated() {
        return this.state === RECOGNIZED;
    }
    get rotation() {
        return DegToRad(this.angle);
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}
var methods = {
    spinObject: (0, _spinObjectJsDefault.default)
};
Object.assign(Rotate.prototype, methods);
const IDLE = "IDLE";
const BEGIN = "BEGIN";
const RECOGNIZED = "RECOGNIZED";
exports.default = Rotate;

},{"../twopointerstracer/TwoPointersTracer.js":"bpigz","../../../fsm.js":"ftkbz","./SpinObject.js":"6lkNk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lkNk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rotateObjectAroundJs = require("../../../utils/actions/RotateObjectAround.js");
var _rotateObjectAroundJsDefault = parcelHelpers.interopDefault(_rotateObjectAroundJs);
var _screenXYToWorldXYJs = require("../../../utils/position/ScreenXYToWorldXY.js");
var _screenXYToWorldXYJsDefault = parcelHelpers.interopDefault(_screenXYToWorldXYJs);
var SpinObject = function(gameObject, camera) {
    if (!this.isRotation) return this;
    if (camera === undefined) camera = this.pointers[0].camera;
    var movementX = this.movementCenterX, movementY = this.movementCenterY;
    var worldXY = (0, _screenXYToWorldXYJsDefault.default)(this.centerX, this.centerY, camera, true);
    var centerWorldX = worldXY.x;
    var centerWorldY = worldXY.y;
    var angle = this.rotation;
    if (Array.isArray(gameObject)) {
        var gameObjects = gameObject;
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++){
            gameObject = gameObjects[i];
            gameObject.x += movementX;
            gameObject.y += movementY;
            (0, _rotateObjectAroundJsDefault.default)(gameObject, centerWorldX, centerWorldY, angle);
        }
    } else {
        gameObject.x += movementX;
        gameObject.y += movementY;
        (0, _rotateObjectAroundJsDefault.default)(gameObject, centerWorldX, centerWorldY, angle);
    }
    return this;
};
exports.default = SpinObject;

},{"../../../utils/actions/RotateObjectAround.js":"58L0q","../../../utils/position/ScreenXYToWorldXY.js":"bPQ09","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58L0q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RotateAround = Phaser.Math.RotateAround;
var RotateObjectAround = function(gameObject, x, y, angle) {
    RotateAround(gameObject, x, y, angle);
    gameObject.rotation += angle;
    return gameObject;
};
exports.default = RotateObjectAround;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPQ09":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ScreenXYToWorldXY = function(screenX, screenY, camera, out) {
    if (out === undefined) out = {};
    else if (out === true) out = globalOut;
    camera.getWorldPoint(screenX, screenY, out);
    return out;
};
var globalOut = {};
exports.default = ScreenXYToWorldXY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ehwrJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pressJs = require("../../press/Press.js");
var _pressJsDefault = parcelHelpers.interopDefault(_pressJs);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var PressChild = function(config) {
    var pressConfig = GetValue(config, "press", undefined);
    if (pressConfig === false) return;
    else if (pressConfig === true) pressConfig = undefined;
    var childrenInteractive = this._childrenInteractive;
    this._press = new (0, _pressJsDefault.default)(this, pressConfig);
    this._press.on("pressstart", function(press, gameObject, lastPointer) {
        (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}pressstart`, childrenInteractive.targetSizers, press.worldX, press.worldY, lastPointer);
    }, this).on("pressend", function(press, gameObject, lastPointer) {
        (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}pressend`, childrenInteractive.targetSizers, press.worldX, press.worldY, lastPointer);
    }, this);
};
exports.default = PressChild;

},{"../../press/Press.js":"5quO4","./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5quO4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gesturesJs = require("../../../plugins/gestures.js");
exports.default = (0, _gesturesJs.Press);

},{"../../../plugins/gestures.js":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kGvh3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _swipeJs = require("../../swipe/Swipe.js");
var _swipeJsDefault = parcelHelpers.interopDefault(_swipeJs);
var _emitChildEventJs = require("./EmitChildEvent.js");
var _emitChildEventJsDefault = parcelHelpers.interopDefault(_emitChildEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var SwipeChild = function(config) {
    var swipeConfig = GetValue(config, "swipe", undefined);
    if (swipeConfig === false) return;
    else if (swipeConfig === true) swipeConfig = undefined;
    if (swipeConfig === undefined) swipeConfig = {};
    if (!swipeConfig.hasOwnProperty("dir")) swipeConfig.dir = "4dir";
    var childrenInteractive = this._childrenInteractive;
    this._swipe = new (0, _swipeJsDefault.default)(this, swipeConfig);
    this._swipe.on("swipe", function(swipe, gameObject, lastPointer) {
        var dirName = swipe.left ? "left" : swipe.right ? "right" : swipe.up ? "up" : "down";
        (0, _emitChildEventJsDefault.default)(childrenInteractive.eventEmitter, `${childrenInteractive.eventNamePrefix}swipe${dirName}`, childrenInteractive.targetSizers, swipe.worldX, swipe.worldY, lastPointer);
    }, this);
};
exports.default = SwipeChild;

},{"../../swipe/Swipe.js":"ljpfa","./EmitChildEvent.js":"3GRzz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ljpfa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gesturesJs = require("../../../plugins/gestures.js");
exports.default = (0, _gesturesJs.Swipe);

},{"../../../plugins/gestures.js":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"73vZj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var BroadcastEvent = function() {
    var gameObjects = this.getAllChildren([
        this
    ]);
    for(var i = 0, cnt = gameObjects.length; i < cnt; i++){
        var gameObject = gameObjects[i];
        gameObject.emit.apply(gameObject, arguments);
    }
    return this;
};
exports.default = BroadcastEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eN7EW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getExpandedChildWidthJs = require("./GetExpandedChildWidth.js");
var _getExpandedChildWidthJsDefault = parcelHelpers.interopDefault(_getExpandedChildWidthJs);
var _getExpandedChildHeightJs = require("./GetExpandedChildHeight.js");
var _getExpandedChildHeightJsDefault = parcelHelpers.interopDefault(_getExpandedChildHeightJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var methods = {
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    getExpandedChildWidth: (0, _getExpandedChildWidthJsDefault.default),
    getExpandedChildHeight: (0, _getExpandedChildHeightJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default)
};
Object.assign(methods, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default));
exports.default = methods;

},{"./GetChildrenWidth.js":"lbHaE","./GetChildrenHeight.js":"9kJtn","./GetExpandedChildWidth.js":"cyscI","./GetExpandedChildHeight.js":"bZ4NH","./GetChildrenSizers.js":"g81bG","./LayoutChildren.js":"hRS3v","./AddChildMethods.js":"5Q6Qs","./RemoveChildMethods.js":"flvuE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lbHaE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenWidth = function() {
    if (this.rexSizer.hidden) return 0;
    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childWidth;
    for(var key in children){
        child = children[key];
        padding = child.rexSizer.padding;
        childWidth = this.getChildWidth(child) + padding.left + padding.right;
        result = Math.max(childWidth, result);
    }
    return result + this.space.left + this.space.right;
};
exports.default = GetChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kJtn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetChildrenHeight = function() {
    if (this.rexSizer.hidden) return 0;
    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childHeight;
    for(var key in children){
        child = children[key];
        childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.minHeight !== undefined ? child.minHeight : (0, _getDisplaySizeJs.GetDisplayHeight)(child);
        padding = child.rexSizer.padding;
        childHeight += padding.top + padding.bottom;
        result = Math.max(childHeight, result);
    }
    return result + this.space.top + this.space.bottom;
};
exports.default = GetChildrenHeight;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyscI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildWidth = function(child, parentWidth) {
    if (parentWidth === undefined) parentWidth = this.width;
    var childWidth;
    var childConfig = child.rexSizer;
    if (childConfig.expandWidth) {
        var innerWidth = parentWidth - this.space.left - this.space.right;
        var padding = childConfig.padding;
        childWidth = innerWidth - padding.left - padding.right;
    }
    return childWidth;
};
exports.default = GetExpandedChildWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZ4NH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildHeight = function(child, parentHeight) {
    if (parentHeight === undefined) parentHeight = this.height;
    var childHeight;
    var childConfig = child.rexSizer;
    if (childConfig.expandHeight) {
        var innerHeight = parentHeight - this.space.top - this.space.bottom;
        var padding = childConfig.padding;
        childHeight = innerHeight - padding.top - padding.bottom;
    }
    return childHeight;
};
exports.default = GetExpandedChildHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g81bG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    var children = this.sizerChildren, child;
    for(var key in children){
        child = children[key];
        if (child.isRexSizer) out.push(child);
    }
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hRS3v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _preLayoutChildJs = require("../basesizer/utils/PreLayoutChild.js");
var _preLayoutChildJsDefault = parcelHelpers.interopDefault(_preLayoutChildJs);
var _layoutChildJs = require("../basesizer/utils/LayoutChild.js");
var _layoutChildJsDefault = parcelHelpers.interopDefault(_layoutChildJs);
var _checkSizeJs = require("../basesizer/utils/CheckSize.js");
var _checkSizeJsDefault = parcelHelpers.interopDefault(_checkSizeJs);
var LayoutChildren = function() {
    var child, childConfig, padding;
    var startX = this.innerLeft, startY = this.innerTop;
    var innerWidth = this.innerWidth, innerHeight = this.innerHeight;
    var x, y, width, height; // Align zone
    var childWidth, childHeight;
    // Layout current page
    var children = this.sizerChildren;
    for(var key in children){
        child = children[key];
        if (child.rexSizer.hidden) continue;
        childConfig = child.rexSizer;
        padding = childConfig.padding;
        (0, _preLayoutChildJsDefault.default).call(this, child);
        // Set size
        if (child.isRexSizer) {
            child.runLayout(this, this.getExpandedChildWidth(child), this.getExpandedChildHeight(child));
            (0, _checkSizeJsDefault.default)(child, this);
        } else {
            childWidth = undefined;
            childHeight = undefined;
            if (childConfig.expandWidth) childWidth = innerWidth - padding.left - padding.right;
            if (childConfig.expandHeight) childHeight = innerHeight - padding.top - padding.bottom;
            (0, _resizeGameObjectJsDefault.default)(child, childWidth, childHeight);
        }
        // Set position
        x = startX + padding.left;
        width = innerWidth - padding.left - padding.right;
        y = startY + padding.top;
        height = innerHeight - padding.top - padding.bottom;
        (0, _layoutChildJsDefault.default).call(this, child, x, y, width, height, childConfig.align, childConfig.alignOffsetX, childConfig.alignOffsetY);
    }
};
exports.default = LayoutChildren;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","../basesizer/utils/PreLayoutChild.js":"67npU","../basesizer/utils/LayoutChild.js":"gUIXa","../basesizer/utils/CheckSize.js":"czd4p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czd4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CheckSize = function(child, parent) {
    if (child.width < child.childrenWidth) // Warning
    console.warn(`Layout width error: Parent=${parent.constructor.name}, Child=${child.constructor.name}`);
    if (child.height < child.childrenHeight) // Warning
    console.warn(`Layout height error: Parent=${parent.constructor.name}, Child=${child.constructor.name}`);
};
exports.default = CheckSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Q6Qs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildJs = require("../basesizer/utils/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
var _getBoundsConfigJs = require("../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
const UUID = Phaser.Utils.String.UUID;
var Add = function(gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY) {
    (0, _addChildJsDefault.default).call(this, gameObject);
    if (IsPlainObject(childKey)) {
        var config = childKey;
        childKey = GetValue(config, "key", undefined);
        align = GetValue(config, "align", ALIGN_CENTER);
        offsetX = GetValue(config, "offsetX", 0);
        offsetY = GetValue(config, "offsetY", 0);
        padding = GetValue(config, "padding", 0);
        expand = GetValue(config, "expand", true);
        if (!gameObject.isRexSizer) {
            // Get minWidth,minHeight from config
            minWidth = GetValue(config, "minWidth", gameObject._minWidth);
            minHeight = GetValue(config, "minHeight", gameObject._minHeighted);
        }
    }
    var hasValidKey = childKey !== undefined;
    if (!hasValidKey) childKey = UUID();
    if (typeof align === "string") align = (0, _alignConstJsDefault.default)[align];
    if (align === undefined) align = ALIGN_CENTER;
    if (offsetX === undefined) offsetX = 0;
    if (offsetY === undefined) offsetY = 0;
    if (padding === undefined) padding = 0;
    if (expand === undefined) expand = true;
    if (!gameObject.isRexSizer) {
        // Get minWidth,minHeight from game object
        if (minWidth === undefined) minWidth = gameObject._minWidth;
        if (minHeight === undefined) minHeight = gameObject._minHeight;
    }
    var config = this.getSizerConfig(gameObject);
    config.align = align;
    config.alignOffsetX = offsetX;
    config.alignOffsetY = offsetY;
    config.padding = (0, _getBoundsConfigJsDefault.default)(padding);
    if (IsPlainObject(expand)) {
        config.expandWidth = GetValue(expand, "width", false);
        config.expandHeight = GetValue(expand, "height", false);
    } else {
        config.expandWidth = expand;
        config.expandHeight = expand;
    }
    if (!gameObject.isRexSizer) {
        if (config.expandWidth) // minWidth is still undefined, uses current display width
        gameObject.minWidth = minWidth === undefined ? (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) : minWidth;
        if (config.expandHeight) // minHeight is still undefined, uses current display height
        gameObject.minHeight = minHeight === undefined ? (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) : minHeight;
    }
    if (this.sizerChildren.hasOwnProperty(childKey)) this.sizerChildren[childKey].destroy();
    this.sizerChildren[childKey] = gameObject;
    if (hasValidKey) this.addChildrenMap(childKey, gameObject);
    return this;
};
exports.default = {
    add: Add
};

},{"../basesizer/utils/AddChild.js":"7fpET","../utils/AlignConst.js":"8t4Uc","../utils/GetBoundsConfig.js":"arnT9","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"flvuE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeChildJs = require("../basesizer/utils/RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _clearChildrenJs = require("../basesizer/utils/ClearChildren.js");
var _clearChildrenJsDefault = parcelHelpers.interopDefault(_clearChildrenJs);
exports.default = {
    remove (gameObject, destroyChild) {
        var key;
        if (typeof gameObject === "string") {
            key = gameObject;
            gameObject = this.sizerChildren[key];
            if (!gameObject) return this;
        } else if (this.getParentSizer(gameObject) !== this) return this;
        else key = this.childToKey(gameObject);
        if (key) {
            delete this.sizerChildren[key];
            if (this.childrenMap.hasOwnProperty(key)) delete this.childrenMap[key];
        }
        (0, _removeChildJsDefault.default).call(this, gameObject, destroyChild);
        return this;
    },
    removeAll (destroyChild) {
        for(var key in this.sizerChildren)this.remove(key, destroyChild);
        return this;
    },
    clear (destroyChild) {
        for(var key in this.sizerChildren){
            delete this.sizerChildren[key];
            if (this.childrenMap.hasOwnProperty(key)) delete this.childrenMap[key];
        }
        (0, _clearChildrenJsDefault.default).call(this, destroyChild);
        return this;
    }
};

},{"../basesizer/utils/RemoveChild.js":"95KmV","../basesizer/utils/ClearChildren.js":"cD93u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cD93u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("../../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
const ContainerClear = (0, _containerJsDefault.default).prototype.clear;
var ClearChildren = function(destroyChild) {
    if (this.backgroundChildren) this.backgroundChildren.length = 0;
    var fireRemoveEvent = !destroyChild && this.sizerEventsEnable;
    var children;
    if (fireRemoveEvent) children = this.getChildren([]);
    ContainerClear.call(this, destroyChild);
    if (fireRemoveEvent) {
        var gameObject;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            gameObject = children[i];
            gameObject.emit("sizer.remove", gameObject, this);
            this.emit("remove", gameObject, this);
        }
    }
    return this;
};
exports.default = ClearChildren;

},{"../../container/Container.js":"4qgeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hLBen":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IndexOf = function(obj, child) {
    if (Array.isArray(obj)) return obj.indexOf(child);
    else {
        for(var key in obj){
            if (obj[key] === child) return key;
        }
        return null;
    }
};
exports.default = IndexOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfACc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isLocalPointInKnobJs = require("./IsLocalPointInKnob.js");
var _isLocalPointInKnobJsDefault = parcelHelpers.interopDefault(_isLocalPointInKnobJs);
const GetAngle = Phaser.Math.Angle.Between;
const NormalizeAngle = Phaser.Math.Angle.Normalize;
var OnTouchPad = function(pointer, localX, localY) {
    if (!this.enable) return;
    if (!pointer.isDown) return;
    var knob = this.sizerChildren.knob;
    if (!(0, _isLocalPointInKnobJsDefault.default)(knob, localX, localY)) return;
    var centerX = knob.width / 2;
    var startAngle = knob.startAngle;
    var endAngle = GetAngle(centerX, centerX, localX, localY);
    var deltaAngle = knob.anticlockwise ? startAngle - endAngle : endAngle - startAngle;
    var value = NormalizeAngle(deltaAngle) / (2 * Math.PI);
    this.stopEaseValue();
    if (this.easeValueDuration === 0 || Math.abs(this.value - value) < 0.1) this.value = value;
    else this.easeValueTo(value);
};
var InstallEvents = function() {
    var knob = this.sizerChildren.knob;
    knob.on("pointerdown", OnTouchPad, this).on("pointermove", OnTouchPad, this).setInteractive();
};
exports.default = InstallEvents;

},{"./IsLocalPointInKnob.js":"5H1Ya","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5H1Ya":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetDistance = Phaser.Math.Distance.Between;
var IsLocalPointInKnob = function(knob, localX, localY) {
    var centerX = knob.width / 2;
    return GetDistance(centerX, centerX, localX, localY) <= centerX;
};
exports.default = IsLocalPointInKnob;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1c8in":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isLocalPointInKnobJs = require("./IsLocalPointInKnob.js");
var _isLocalPointInKnobJsDefault = parcelHelpers.interopDefault(_isLocalPointInKnobJs);
const GetAngle = Phaser.Math.Angle.Between;
const WrapAngle = Phaser.Math.Angle.Wrap;
var OnPointerDown = function(pointer, localX, localY) {
    if (!this.enable || this.panPointer) return;
    var knob = this.sizerChildren.knob;
    if (!(0, _isLocalPointInKnobJsDefault.default)(knob, localX, localY)) return;
    OnPanStart.call(this, pointer);
};
var OnPointerMove = function(pointer, localX, localY) {
    if (!this.enable) return;
    if (!pointer.isDown) return;
    var knob = this.sizerChildren.knob;
    switch(this.panState){
        case TOUCH0:
            if ((0, _isLocalPointInKnobJsDefault.default)(knob, localX, localY)) OnPanStart.call(this, pointer);
            break;
        case TOUCH1:
            if ((0, _isLocalPointInKnobJsDefault.default)(knob, localX, localY)) OnPan.call(this);
            else OnPanEnd.call(this);
            break;
    }
};
var OnPointerUp = function(pointer, localX, localY) {
    if (!this.enable || this.panPointer !== pointer) return;
    OnPanEnd.call(this);
};
var OnPanStart = function(pointer) {
    this.panPointer = pointer;
    this.panState = TOUCH1;
};
var OnPanEnd = function() {
    this.panPointer = undefined;
    this.panState = TOUCH0;
};
var OnPan = function() {
    var p0 = this.panPointer.prevPosition, p1 = this.panPointer.position;
    var knob = this.sizerChildren.knob;
    var startAngle = GetAngle(knob.x, knob.y, p0.x, p0.y), endAngle = GetAngle(knob.x, knob.y, p1.x, p1.y);
    var deltaAngle = knob.anticlockwise ? startAngle - endAngle : endAngle - startAngle;
    var deltaValue = WrapAngle(deltaAngle) / (Math.PI * 2);
    this.stopEaseValue();
    this.value += deltaValue;
};
const TOUCH0 = 0;
const TOUCH1 = 1;
var InstallEvents = function() {
    var knob = this.sizerChildren.knob;
    knob.on("pointerdown", OnPointerDown, this).on("pointermove", OnPointerMove, this).on("pointerup", OnPointerUp, this).setInteractive();
    this.panPointer = undefined;
    this.panState = TOUCH0;
};
exports.default = InstallEvents;

},{"./IsLocalPointInKnob.js":"5H1Ya","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GcZa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTextFormatCallback = function(callback, scope) {
    this.textFormatCallback = callback;
    this.textFormatCallbackScope = scope;
    return this;
};
var GetFormatText = function(value) {
    if (value === undefined) value = this.value;
    var text;
    if (this.textFormatCallbackScope) text = this.textFormatCallback(value);
    else text = this.textFormatCallback.call(this.textFormatCallbackScope, value);
    return text;
};
var UpdateText = function(value) {
    var textObject = this.sizerChildren.text;
    if (textObject && this.textFormatCallback) {
        textObject.setText(GetFormatText.call(this, value));
        if (textObject.layout) textObject.layout();
    }
    return this;
};
exports.default = {
    setTextFormatCallback: SetTextFormatCallback,
    getFormatText: GetFormatText,
    updateText: UpdateText
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g0Zx5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customShapesJs = require("./CustomShapes.js");
var _customShapesJsDefault = parcelHelpers.interopDefault(_customShapesJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("customShapes", function(x, y, width, height, config) {
    var gameObject = new (0, _customShapesJsDefault.default)(this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CustomShapes", (0, _customShapesJsDefault.default));
exports.default = (0, _customShapesJsDefault.default);

},{"./CustomShapes.js":"iaC3U","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iaC3U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customshapesJs = require("../../../plugins/customshapes.js");
var _customshapesJsDefault = parcelHelpers.interopDefault(_customshapesJs);
exports.default = (0, _customshapesJsDefault.default);

},{"../../../plugins/customshapes.js":"71B4I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71B4I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customShapesJs = require("./gameobjects/shape/customshapes/CustomShapes.js");
var _customShapesJsDefault = parcelHelpers.interopDefault(_customShapesJs);
exports.default = (0, _customShapesJsDefault.default);

},{"./gameobjects/shape/customshapes/CustomShapes.js":"fHHvq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHHvq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseShapesJs = require("../shapes/BaseShapes.js");
var _baseShapesJsDefault = parcelHelpers.interopDefault(_baseShapesJs);
var _shapesUpdateMethodsJs = require("./ShapesUpdateMethods.js");
var _shapesUpdateMethodsJsDefault = parcelHelpers.interopDefault(_shapesUpdateMethodsJs);
var _worldXYToGameObjectLocalXYJs = require("../../../utils/position/WorldXYToGameObjectLocalXY.js");
var _worldXYToGameObjectLocalXYJsDefault = parcelHelpers.interopDefault(_worldXYToGameObjectLocalXYJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CustomShapes extends (0, _baseShapesJsDefault.default) {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
        }
        super(scene, x, y, width, height);
        this.type = GetValue(config, "type", "rexCustomShapes");
        this.buildShapes(config);
    }
    get centerX() {
        return this.width / 2;
    }
    get centerY() {
        return this.height / 2;
    }
    worldToLocalXY(worldX, worldY, camera, out) {
        if (typeof camera === "boolean") {
            out = camera;
            camera = undefined;
        }
        return (0, _worldXYToGameObjectLocalXYJsDefault.default)(this, worldX, worldY, camera, out);
    }
}
Object.assign(CustomShapes.prototype, (0, _shapesUpdateMethodsJsDefault.default));
exports.default = CustomShapes;

},{"../shapes/BaseShapes.js":"fM8Fj","./ShapesUpdateMethods.js":"fiOA8","../../../utils/position/WorldXYToGameObjectLocalXY.js":"cSiE7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiOA8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _geoms = require("../shapes/geoms");
const ShapeClasses = {
    arc: (0, _geoms.Arc),
    circle: (0, _geoms.Circle),
    curve: (0, _geoms.Curve),
    ellipse: (0, _geoms.Ellipse),
    line: (0, _geoms.Line),
    lines: (0, _geoms.Lines),
    rectangle: (0, _geoms.Rectangle),
    roundRectangle: (0, _geoms.RoundRectangle),
    triangle: (0, _geoms.Triangle)
};
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const ClearAll = function() {
    var shapes = this.getShapes();
    for(var i = 0, cnt = shapes.length; i < cnt; i++)shapes[i].lineStyle().fillStyle();
};
exports.default = {
    createShape (shapeType, name) {
        var ShapeClass = ShapeClasses[shapeType];
        var shape = new ShapeClass();
        if (name) shape.setName(name);
        return shape;
    },
    buildShapes (config) {
        var createCallback = GetValue(config, "create", undefined);
        if (IsPlainObject(createCallback)) {
            var shapes = createCallback;
            for(var shapeType in shapes){
                var name = shapes[shapeType];
                switch(typeof name){
                    case "number":
                        for(var i = 0; i < name; i++)this.addShape(this.createShape(shapeType));
                        break;
                    case "string":
                        this.addShape(this.createShape(shapeType, name));
                        break;
                    default:
                        var names = name;
                        for(var i = 0, cnt = names.length; i < cnt; i++)this.addShape(this.createShape(shapeType, names[i]));
                        break;
                }
            }
        } else if (Array.isArray(createCallback)) {
            var shapes = createCallback;
            for(var i = 0, cnt = shapes.length; i < cnt; i++){
                var shape = shapes[i];
                this.addShape(this.createShape(shape.type, shape.name));
            }
        } else if (typeof createCallback === "function") createCallback.call(this);
        this.setUpdateShapesCallback(GetValue(config, "update"));
    },
    setUpdateShapesCallback (callback) {
        if (callback === undefined) callback = ClearAll;
        this.dirty = this.dirty || this.updateCallback !== callback;
        this.updateCallback = callback;
        return this;
    },
    updateShapes () {
        this.updateCallback.call(this);
    }
};

},{"../shapes/geoms":"9zMQi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cSiE7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const TransformMatrix = Phaser.GameObjects.Components.TransformMatrix;
const TransformXY = Phaser.Math.TransformXY;
var WorldXYToGameObjectLocalXY = function(gameObject, worldX, worldY, camera, out) {
    if (camera === undefined) camera = gameObject.scene.cameras.main;
    if (out === undefined) out = {};
    else if (out === true) out = globOut;
    var csx = camera.scrollX;
    var csy = camera.scrollY;
    var px = worldX + csx * gameObject.scrollFactorX - csx;
    var py = worldY + csy * gameObject.scrollFactorY - csy;
    if (gameObject.parentContainer) {
        if (tempMatrix === undefined) {
            tempMatrix = new TransformMatrix();
            parentMatrix = new TransformMatrix();
        }
        gameObject.getWorldTransformMatrix(tempMatrix, parentMatrix);
        tempMatrix.applyInverse(px, py, out);
    } else TransformXY(px, py, gameObject.x, gameObject.y, gameObject.rotation, gameObject.scaleX, gameObject.scaleY, out);
    out.x += gameObject.displayOriginX;
    out.y += gameObject.displayOriginY;
    return out;
};
var tempMatrix, parentMatrix;
var globOut = {};
exports.default = WorldXYToGameObjectLocalXY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"910VV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customProgressJs = require("./CustomProgress.js");
var _customProgressJsDefault = parcelHelpers.interopDefault(_customProgressJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("customProgress", function(x, y, width, height, config) {
    var gameObject = new (0, _customProgressJsDefault.default)(this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.CustomProgress", (0, _customProgressJsDefault.default));
exports.default = (0, _customProgressJsDefault.default);

},{"./CustomProgress.js":"kqTWd","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqTWd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
exports.default = (0, _customprogressJsDefault.default);

},{"../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0x2y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customProgressJs = require("./gameobjects/shape/customprogress/CustomProgress.js");
var _customProgressJsDefault = parcelHelpers.interopDefault(_customProgressJs);
exports.default = (0, _customProgressJsDefault.default);

},{"./gameobjects/shape/customprogress/CustomProgress.js":"dp2hU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dp2hU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _customShapesJs = require("../customshapes/CustomShapes.js");
var _customShapesJsDefault = parcelHelpers.interopDefault(_customShapesJs);
var _progressBaseJs = require("../../../utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
class CustomProgress extends (0, _progressBaseJsDefault.default)((0, _customShapesJsDefault.default)) {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 2);
            height = GetValue(config, "height", 2);
        }
        if (config === undefined) config = {};
        if (!config.type) config.type = "rexCustomProgress";
        super(scene, x, y, width, height, config);
        this.bootProgressBase(config);
        this.setValue(GetValue(config, "value", 0));
    }
    get centerX() {
        return this.width / 2;
    }
    get centerY() {
        return this.height / 2;
    }
    get radius() {
        return Math.min(this.centerX, this.centerY);
    }
}
exports.default = CustomProgress;

},{"../customshapes/CustomShapes.js":"fHHvq","../../../utils/progressbase/ProgressBase.js":"dNXIc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYXly":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionImageJs = require("./TransitionImage.js");
var _transitionImageJsDefault = parcelHelpers.interopDefault(_transitionImageJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("transitionImage", function(x, y, texture, frame, config) {
    var gameObject = new (0, _transitionImageJsDefault.default)(this.scene, x, y, texture, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TransitionImage", (0, _transitionImageJsDefault.default));
exports.default = (0, _transitionImageJsDefault.default);

},{"./TransitionImage.js":"4m9gQ","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4m9gQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionimageJs = require("../../../plugins/transitionimage.js");
var _transitionimageJsDefault = parcelHelpers.interopDefault(_transitionimageJs);
exports.default = (0, _transitionimageJsDefault.default);

},{"../../../plugins/transitionimage.js":"f2c98","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2c98":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionImageJs = require("./gameobjects/container/transitionimage/TransitionImage.js");
var _transitionImageJsDefault = parcelHelpers.interopDefault(_transitionImageJs);
exports.default = (0, _transitionImageJsDefault.default);

},{"./gameobjects/container/transitionimage/TransitionImage.js":"j0Zym","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j0Zym":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerLiteJs = require("../containerlite/ContainerLite.js");
var _containerLiteJsDefault = parcelHelpers.interopDefault(_containerLiteJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _crossFadeTransitionJs = require("./methods/CrossFadeTransition.js");
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class TransitionImage extends (0, _containerLiteJsDefault.default) {
    constructor(scene, x, y, texture, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            texture = GetValue(config, "key", undefined);
            frame = GetValue(config, "frame", undefined);
        } else if (IsPlainObject(frame)) {
            config = frame;
            frame = undefined;
        }
        var backImage = GetValue(config, "back", undefined);
        var frontImage = GetValue(config, "front", undefined);
        if (!backImage) backImage = scene.add.image(x, y, texture, frame);
        if (!frontImage) frontImage = scene.add.image(x, y, texture, frame);
        var width = GetValue(config, "width", frontImage.width);
        var height = GetValue(config, "height", frontImage.height);
        super(scene, x, y, width, height);
        this.type = "rexTransitionImage";
        backImage.setVisible(false);
        this.addMultiple([
            backImage,
            frontImage
        ]);
        this.backImage = backImage;
        this.frontImage = frontImage;
        this.maskGameObject = undefined;
        this.cellImages = [];
        this.imagesPool = [];
        this.transitionModes = undefined;
        this.currentTransitionMode = undefined;
        // Transition parameters
        var onStart = GetValue(config, "onStart", undefined);
        var onProgress = GetValue(config, "onProgress", undefined);
        var onComplete = GetValue(config, "onComplete", undefined);
        var dir = GetValue(config, "dir", 0);
        if (onStart === undefined && onProgress === undefined && onComplete === undefined) {
            onStart = (0, _crossFadeTransitionJs.OnStart);
            onProgress = (0, _crossFadeTransitionJs.OnProgress);
            onComplete = (0, _crossFadeTransitionJs.OnComplete);
            dir = 0;
        }
        this.setTransitionStartCallback(onStart, GetValue(config, "onStartScope", undefined)).setTransitionProgressCallback(onProgress, GetValue(config, "onProgressScope", undefined)).setTransitionCompleteCallback(onComplete, GetValue(config, "onCompleteScope", undefined)).setTransitionDirection(dir).setDuration(GetValue(config, "duration", 1000)).setEaseFunction(GetValue(config, "ease", "Linear"));
        var maskGameObject = GetValue(config, "mask", undefined);
        if (maskGameObject) this.setMaskGameObject(maskGameObject);
        this.setMaskEnable(false);
        this.ignoreCompleteEvent = false;
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        if (this.childrenMask) {
            this.childrenMask.destroy();
            this.childrenMask = undefined;
        }
        this.backImage = undefined;
        this.frontImage = undefined;
        this.maskGameObject = undefined;
        this.cellImages.length = 0;
        this.imagesPool.length = 0;
        this.transitionModes = undefined;
        super.destroy(fromScene);
        this.onStartCallback = undefined;
        this.onStartCallbackScope = undefined;
        this.onProgressCallback = undefined;
        this.onProgressCallbackScope = undefined;
        this.onCompleteCallback = undefined;
        this.onCompleteCallbackScope = undefined;
        this.easeValueTask = undefined;
    }
    get currentImage() {
        return this.dir === 0 ? this.frontImage : this.backImage;
    }
    get nextImage() {
        return this.dir === 0 ? this.backImage : this.frontImage;
    }
    get texture() {
        return this.nextImage.texture;
    }
    get frame() {
        return this.nextImage.frame;
    }
    get flipX() {
        return this._flipX;
    }
    set flipX(value) {
        if (this._flipX === value) return;
        this._flipX = value;
        this.backImage.setFlipX(value);
        this.frontImage.setFlipX(value);
    }
    get flipY() {
        return this._flipY;
    }
    set flipY(value) {
        if (this._flipY === value) return;
        this._flipY = value;
        this.backImage.setFlipY(value);
        this.frontImage.setFlipY(value);
    }
    get t() {
        return this._t;
    }
    set t(value) {
        value = Clamp(value, 0, 1);
        if (this._t === value) return;
        this._t = value;
        var currentImage = this.currentImage;
        var nextImage = this.nextImage;
        // Start
        if (value === 0) {
            this.setChildVisible(this.frontImage, true).setChildVisible(this.backImage, true);
            RunCallback(this.onStartCallback, this.onStartCallbackScope, this, currentImage, nextImage, value);
        }
        // Progress
        RunCallback(this.onProgressCallback, this.onProgressCallbackScope, this, currentImage, nextImage, value);
        // Complete
        if (value === 1) {
            RunCallback(this.onCompleteCallback, this.onCompleteCallbackScope, this, currentImage, nextImage, value);
            var key = nextImage.texture.key, frame = nextImage.frame.name;
            this.frontImage.setTexture(key, frame);
            this.backImage.setTexture(key, frame);
            this.setChildVisible(this.frontImage, true).setChildVisible(this.backImage, false).setMaskEnable(false).freeCellImages();
        }
        if (value === 1 && !this.ignoreCompleteEvent) this.emit("complete");
    }
    setT(value) {
        this.t = value;
        return this;
    }
    get isRunning() {
        return this.easeValueTask ? this.easeValueTask.isRunning : false;
    }
    setOrigin(originX, originY) {
        super.setOrigin(originX, originY);
        this.backImage.setOrigin(originX, originY);
        this.frontImage.setOrigin(originX, originY);
        if (this.maskGameObject) this.maskGameObject.setOrigin(originX, originY);
        return this;
    }
    setTexture(texture, frame) {
        // Without transition
        this.frontImage.setTexture(texture, frame);
        this.backImage.setTexture(texture, frame).setVisible(false);
        return this;
    }
}
var RunCallback = function(callback, scope, parent, currentImage, nextImage, t) {
    if (!callback) return;
    if (scope) callback.call(scope, parent, currentImage, nextImage, t);
    else callback(parent, currentImage, nextImage, t);
};
// mixin
Object.assign(TransitionImage.prototype, (0, _methodsJsDefault.default));
exports.default = TransitionImage;

},{"../containerlite/ContainerLite.js":"kyrI6","./methods/Methods.js":"ajEgE","./methods/CrossFadeTransition.js":"7t6ED","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajEgE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setTransitionCallbackMethodsJs = require("./SetTransitionCallbackMethods.js");
var _setTransitionCallbackMethodsJsDefault = parcelHelpers.interopDefault(_setTransitionCallbackMethodsJs);
var _transitionMethodsJs = require("./TransitionMethods.js");
var _transitionMethodsJsDefault = parcelHelpers.interopDefault(_transitionMethodsJs);
var _maskMethodsJs = require("./MaskMethods.js");
var _maskMethodsJsDefault = parcelHelpers.interopDefault(_maskMethodsJs);
var _gridCutMethodsJs = require("./GridCutMethods.js");
var _gridCutMethodsJsDefault = parcelHelpers.interopDefault(_gridCutMethodsJs);
var _flipMethodsJs = require("../../utils/FlipMethods.js");
var _flipMethodsJsDefault = parcelHelpers.interopDefault(_flipMethodsJs);
var methods = {};
Object.assign(methods, (0, _setTransitionCallbackMethodsJsDefault.default), (0, _transitionMethodsJsDefault.default), (0, _maskMethodsJsDefault.default), (0, _gridCutMethodsJsDefault.default), (0, _flipMethodsJsDefault.default));
exports.default = methods;

},{"./SetTransitionCallbackMethods.js":"3GaZV","./TransitionMethods.js":"936tG","./MaskMethods.js":"8rGp6","./GridCutMethods.js":"eh00b","../../utils/FlipMethods.js":"9xbCX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GaZV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setTransitionStartCallback (callback, scope) {
        this.onStartCallback = callback;
        this.onStartCallbackScope = scope;
        return this;
    },
    setTransitionProgressCallback (callback, scope) {
        this.onProgressCallback = callback;
        this.onProgressCallbackScope = scope;
        return this;
    },
    setTransitionCompleteCallback (callback, scope) {
        this.onCompleteCallback = callback;
        this.onCompleteCallbackScope = scope;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"936tG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskJs = require("../../../../utils/ease/EaseValueTask.js");
var _easeValueTaskJsDefault = parcelHelpers.interopDefault(_easeValueTaskJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const GetRandomItem = Phaser.Utils.Array.GetRandom;
var DirMode = {
    out: 0,
    in: 1
};
var GetValueFromConfigs = function(key, defaultValue, ...configs) {
    for(var i = 0, cnt = configs.length; i < cnt; i++){
        var config = configs[i];
        if (config && config.hasOwnProperty(key)) return config[key];
    }
    return defaultValue;
};
exports.default = {
    setTransitionDirection (dir) {
        if (typeof dir === "string") dir = DirMode[dir];
        this.dir = dir;
        return this;
    },
    setDuration (duration) {
        this.duration = duration;
        return this;
    },
    setEaseFunction (ease) {
        this.easeFunction = ease;
        return this;
    },
    setNextTexture (texture, frame) {
        this.nextImage.setTexture(texture, frame);
        return this;
    },
    transit (texture, frame, mode) {
        if (this.isRunning) {
            this.ignoreCompleteEvent = true;
            this.stop();
            this.ignoreCompleteEvent = false;
        }
        if (mode !== undefined) texture = {
            key: texture,
            frame: frame,
            mode: mode
        };
        this.currentTransitionMode = undefined;
        if (IsPlainObject(texture)) {
            var config = texture;
            texture = GetValue(config, "key", undefined);
            frame = GetValue(config, "frame", undefined);
            mode = GetValue(config, "mode");
            if (Array.isArray(mode)) mode = GetRandomItem(mode);
            var modeConfig;
            if (this.transitionModes && this.transitionModes.hasOwnProperty(mode)) {
                modeConfig = this.transitionModes[mode];
                this.currentTransitionMode = mode;
            }
            this.setDuration(GetValueFromConfigs("duration", this.duration, config, modeConfig)).setEaseFunction(GetValueFromConfigs("ease", this.easeFunction, config, modeConfig)).setTransitionDirection(GetValueFromConfigs("dir", this.dir, config, modeConfig));
            var maskGameObject = GetValueFromConfigs("mask", undefined, config, modeConfig);
            if (maskGameObject) this.setMaskGameObject(maskGameObject);
            this.setMaskEnable(maskGameObject === true);
            var onStart = GetValueFromConfigs("onStart", undefined, config, modeConfig);
            var onProgress = GetValueFromConfigs("onProgress", undefined, config, modeConfig);
            var onComplete = GetValueFromConfigs("onComplete", undefined, config, modeConfig);
            if (onStart !== undefined || onProgress !== undefined || onComplete !== undefined) this.setTransitionStartCallback(onStart, GetValueFromConfigs("onStartScope", undefined, config, modeConfig)).setTransitionProgressCallback(onProgress, GetValueFromConfigs("onProgressScope", undefined, config, modeConfig)).setTransitionCompleteCallback(onComplete, GetValueFromConfigs("onCompleteScope", undefined, config, modeConfig));
        }
        this.setNextTexture(texture, frame);
        this.start();
        return this;
    },
    addTransitionMode (name, config) {
        if (this.transitionModes === undefined) this.transitionModes = {};
        if (IsPlainObject(name)) {
            config = name;
            name = config.name;
            delete config.name;
        }
        this.transitionModes[name] = config;
        return this;
    },
    start () {
        if (this.easeValueTask === undefined) this.easeValueTask = new (0, _easeValueTaskJsDefault.default)(this, {
            eventEmitter: null
        });
        this.easeValueTask.restart({
            key: "t",
            from: 0,
            to: 1,
            duration: this.duration,
            ease: this.easeFunction
        });
        return this;
    },
    pause () {
        if (this.easeValueTask) this.easeValueTask.pause();
        return this;
    },
    resume () {
        if (this.easeValueTask) this.easeValueTask.resume();
        return this;
    },
    stop () {
        if (this.easeValueTask) this.easeValueTask.stop();
        this.setT(1);
        return this;
    }
};

},{"../../../../utils/ease/EaseValueTask.js":"aL3ys","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8rGp6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultMaskGraphicsJs = require("../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js");
var _defaultMaskGraphicsJsDefault = parcelHelpers.interopDefault(_defaultMaskGraphicsJs);
exports.default = {
    setMaskGameObject (gameObject) {
        if (!gameObject) {
            this.removeMaskGameObject();
            return this;
        }
        if (this.maskGameObject) {
            if (gameObject === true && this.maskGameObject instanceof (0, _defaultMaskGraphicsJsDefault.default)) return this;
            if (this.maskGameObject === gameObject) return this;
            // Remove previous Mask Game Object
            this.removeMaskGameObject();
        }
        // Add new Mask Game Object
        if (gameObject === true) gameObject = new (0, _defaultMaskGraphicsJsDefault.default)(this);
        this.maskGameObject = gameObject;
        this.maskGameObject.resize(this.width, this.height).setOrigin(this.originX, this.originY).setPosition(0, 0).setScale(1).setVisible(false);
        this.addLocal(this.maskGameObject);
        this.childrenMask = this.maskGameObject.createGeometryMask();
        return this;
    },
    removeMaskGameObject (destroyMaskGameObject) {
        if (destroyMaskGameObject === undefined) destroyMaskGameObject = true;
        this.backImage.clearMask();
        this.frontImage.clearMask();
        this.childrenMask = undefined;
        this.remove(this.maskGameObject, destroyMaskGameObject);
        this.maskGameObject = undefined;
        return this;
    },
    setImageMaskEnable (gameObject, enable, invertAlpha) {
        if (enable === undefined) enable = true;
        if (invertAlpha === undefined) invertAlpha = false;
        if (enable) {
            // Use DefaultMaskGraphics if not given    
            if (!this.childrenMask) this.setMaskGameObject(true);
            gameObject.setMask(this.childrenMask);
            if (invertAlpha) this.childrenMask.setInvertAlpha();
        } else gameObject.clearMask();
        return this;
    },
    setCurrentImageMaskEnable (enable, invertAlpha) {
        this.setImageMaskEnable(this.currentImage, enable, invertAlpha);
        return this;
    },
    setNextImageMaskEnable (enable, invertAlpha) {
        this.setImageMaskEnable(this.nextImage, enable, invertAlpha);
        return this;
    },
    setCellImagesMaskEnable (enable, invertAlpha) {
        var cellImages = this.getCellImages();
        for(var i = 0, cnt = cellImages.length; i < cnt; i++)this.setImageMaskEnable(cellImages[i], enable, invertAlpha);
        return this;
    },
    setMaskEnable (enable, invertAlpha) {
        this.setImageMaskEnable(this.backImage, enable, invertAlpha);
        this.setImageMaskEnable(this.frontImage, enable, invertAlpha);
        this.setCellImagesMaskEnable(enable, invertAlpha);
        return this;
    }
};

},{"../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js":"fnaTq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnaTq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _drawShapeJs = require("./DrawShape.js");
var _drawShapeJsDefault = parcelHelpers.interopDefault(_drawShapeJs);
const Graphics = Phaser.GameObjects.Graphics;
class DefaultMaskGraphics extends Graphics {
    constructor(parent, shape, padding){
        if (shape === undefined) shape = 0;
        if (typeof shape === "string") shape = SHAPEMODE[shape];
        if (padding === undefined) padding = 0;
        super(parent.scene);
        this.parent = parent;
        this.shape = shape;
        this.padding = padding;
        this.setPosition().resize().setVisible(false);
    // Don't add it to display list
    }
    destroy() {
        this.parent = undefined;
        super.destroy();
        return this;
    }
    setPosition(x, y) {
        var parent = this.parent;
        if (x === undefined) x = parent.x;
        if (y === undefined) y = parent.y;
        super.setPosition(x, y);
        return this;
    }
    resize(width, height, padding) {
        var parent = this.parent;
        if (width === undefined) width = parent.width;
        if (height === undefined) height = parent.height;
        if (padding === undefined) padding = this.padding;
        if (this.width === width && this.height === height && this.paddingSave === padding) return this;
        this.width = width;
        this.height = height;
        this.originX = parent.originX;
        this.originY = parent.originY;
        this.paddingSave = padding;
        (0, _drawShapeJsDefault.default).call(this, width, height, padding, parent.originX, parent.originY);
        return this;
    }
    setOrigin(originX, originY) {
        if (originY === undefined) originY = originX;
        var parent = this.parent;
        if (originX === undefined) originX = parent.originX;
        if (originY === undefined) originY = parent.originY;
        if (this.originX === originX && this.originY === originY) return this;
        this.originX = originX;
        this.originY = originY;
        (0, _drawShapeJsDefault.default).call(this, this.width, this.height, this.paddingSave, originX, originY);
        return this;
    }
}
const SHAPEMODE = {
    rectangle: 0,
    circle: 1
};
exports.default = DefaultMaskGraphics;

},{"./DrawShape.js":"1zB7F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zB7F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DrawShape = function(width, height, padding, originX, originY) {
    this.clear().fillStyle(0xffffff);
    switch(this.shape){
        case 1:
            var radius = Math.min(width, height) / 2;
            this.fillCircle(-width * (originX - 0.5), -height * (originY - 0.5), radius + padding);
            break;
        default:
            this.fillRect(-(width * originX) - padding, -(height * originY) - padding, width + 2 * padding, height + 2 * padding);
            break;
    }
};
exports.default = DrawShape;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eh00b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridCutImageJs = require("../../../../actions/GridCutImage.js");
var _gridCutImageJsDefault = parcelHelpers.interopDefault(_gridCutImageJs);
exports.default = {
    gridCutImage (gameObject, columns, rows, config) {
        if (config === undefined) config = {};
        config.objectPool = this.imagesPool;
        var cellImages = (0, _gridCutImageJsDefault.default)(gameObject, columns, rows, config), cellImage;
        for(var i = 0, cnt = cellImages.length; i < cnt; i++){
            cellImage = cellImages[i];
            cellImage.setVisible(true);
            this.add(cellImage);
        }
        this.cellImages = cellImages;
        this.setChildLocalVisible(gameObject, false); // Set cut target to invisible
        return cellImages;
    },
    gridCutCurrentImage (columns, rows, config) {
        return this.gridCutImage(this.currentImage, columns, rows, config);
    },
    gridCutNextImage (columns, rows, config) {
        return this.gridCutImage(this.nextImage, columns, rows, config);
    },
    getCellImages () {
        return this.cellImages;
    },
    freeCellImages () {
        if (this.cellImages.length === 0) return this;
        var texture = this.cellImages[0].texture;
        var cellImages = this.cellImages, cellImage, frameName;
        for(var i = 0, cnt = cellImages.length; i < cnt; i++){
            cellImage = cellImages[i];
            // Reset property of cell image
            this.setChildLocalAlpha(cellImage, 1).setChildLocalScale(cellImage, 1).setChildLocalVisible(cellImage, false);
            cellImage.clearMask();
            // Remove frame object
            frameName = cellImage.frame.name;
            cellImage.setTexture();
            texture.remove(frameName);
        }
        this.imagesPool.push(...cellImages);
        cellImages.length = 0;
        return this;
    }
};

},{"../../../../actions/GridCutImage.js":"cekqa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cekqa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridCutJs = require("../utils/texture/gridcut/GridCut.js");
var _gridCutJsDefault = parcelHelpers.interopDefault(_gridCutJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const DefaultImageClass = Phaser.GameObjects.Image;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const RotateAround = Phaser.Math.RotateAround;
var GridCutImage = function(gameObject, columns, rows, config) {
    if (IsPlainObject(columns)) {
        config = columns;
        columns = GetValue(config, "columns", 1);
        rows = GetValue(config, "rows", 1);
    }
    var createImageCallback = GetValue(config, "onCreateImage");
    if (!createImageCallback) {
        var ImageClass = GetValue(config, "ImageClass", DefaultImageClass);
        createImageCallback = function(scene, key, frame) {
            return new ImageClass(scene, 0, 0, key, frame);
        };
    }
    var originX = GetValue(config, "originX", 0.5);
    var originY = GetValue(config, "originY", 0.5);
    var addToScene = GetValue(config, "add", true);
    var align = GetValue(config, "align", addToScene);
    var imageObjectPool = GetValue(config, "objectPool", undefined);
    var scene = gameObject.scene;
    var texture = gameObject.texture;
    var frame = gameObject.frame;
    var result = (0, _gridCutJsDefault.default)(scene, texture, frame, columns, rows);
    var getFrameNameCallback = result.getFrameNameCallback;
    var scaleX = gameObject.scaleX, scaleY = gameObject.scaleY;
    var rotation = gameObject.rotation;
    var topLeft = gameObject.getTopLeft(), startX = topLeft.x, startY = topLeft.y;
    var cellGameObjects = [];
    var cellWidth = result.cellWidth * scaleX, cellHeight = result.cellHeight * scaleY;
    for(var y = 0; y < rows; y++)for(var x = 0; x < columns; x++){
        var cellGameObject;
        var frameName = getFrameNameCallback(x, y);
        if (imageObjectPool && imageObjectPool.length > 0) cellGameObject = imageObjectPool.pop().setTexture(texture, frameName);
        else cellGameObject = createImageCallback(scene, texture, frameName);
        if (addToScene) scene.add.existing(cellGameObject);
        var cellTLX = startX + cellWidth * x;
        var cellTLY = startY + cellHeight * y;
        var cellX = cellTLX + originX * cellWidth;
        var cellY = cellTLY + originY * cellHeight;
        if (align) {
            cellGameObject.setOrigin(originX, originY).setPosition(cellX, cellY).setScale(scaleX, scaleY).setRotation(rotation);
            RotateAround(cellGameObject, startX, startY, rotation);
        }
        cellGameObjects.push(cellGameObject);
    }
    return cellGameObjects;
};
exports.default = GridCutImage;

},{"../utils/texture/gridcut/GridCut.js":"cxwMd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cxwMd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getFrameNameCallback = require("./GetFrameNameCallback");
var _getFrameNameCallbackDefault = parcelHelpers.interopDefault(_getFrameNameCallback);
var GridCut = function(scene, key, frame, columns, rows, getFrameNameCallback) {
    if (frame == null) frame = "__BASE";
    if (!getFrameNameCallback) getFrameNameCallback = (0, _getFrameNameCallbackDefault.default)(frame, getFrameNameCallback);
    var texture = scene.sys.textures.get(key);
    var baseFrame = typeof frame === "object" ? frame : texture.get(frame);
    var baseWidth = baseFrame.width, baseHeight = baseFrame.height;
    var cellX, cellY, cellName;
    var cellWidth = baseWidth / columns, cellHeight = baseHeight / rows;
    var offsetX = 0, offsetY = 0;
    for(var y = 0; y < rows; y++){
        offsetX = 0;
        for(var x = 0; x < columns; x++){
            cellName = getFrameNameCallback(x, y);
            cellX = offsetX + baseFrame.cutX;
            cellY = offsetY + baseFrame.cutY;
            texture.add(cellName, 0, cellX, cellY, cellWidth, cellHeight);
            offsetX += cellWidth;
        }
        offsetY += cellHeight;
    }
    return {
        getFrameNameCallback: getFrameNameCallback,
        cellWidth: cellWidth,
        cellHeight: cellHeight,
        columns: columns,
        rows: rows
    };
};
exports.default = GridCut;

},{"./GetFrameNameCallback":"bjuup","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjuup":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetFrameNameCallback = function(baseFrameName, delimiter) {
    if (delimiter === undefined) delimiter = ",";
    var callback;
    if (baseFrameName === "__BASE") callback = function(colIndex, rowIndex) {
        return `${colIndex}${delimiter}${rowIndex}`;
    };
    else callback = function(colIndex, rowIndex) {
        return `${baseFrameName}_${colIndex}${delimiter}${rowIndex}`;
    };
    return callback;
};
exports.default = GetFrameNameCallback;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xbCX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setFlipX (value) {
        this.flipX = value;
        return this;
    },
    setFlipY (value) {
        this.flipY = value;
        return this;
    },
    toggleFlipX () {
        this.flipX = !this.flipX;
        return this;
    },
    toggleFlipY () {
        this.flipY = !this.flipY;
        return this;
    },
    setFlip (x, y) {
        this.flipX = x;
        this.flipY = y;
        return this;
    },
    resetFlip () {
        this.flipX = false;
        this.flipY = false;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7t6ED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OnStart", ()=>OnStart);
parcelHelpers.export(exports, "OnProgress", ()=>OnProgress);
parcelHelpers.export(exports, "OnComplete", ()=>OnComplete);
var OnStart = function(parent, currentImage, nextImage, t) {};
var OnProgress = function(parent, currentImage, nextImage, t) {
    parent.setChildLocalAlpha(currentImage, 1 - t).setChildLocalAlpha(nextImage, t);
};
var OnComplete = function(parent, currentImage, nextImage, t) {
    parent.setChildLocalAlpha(currentImage, 1);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2oUi4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionImagePackJs = require("./TransitionImagePack.js");
var _transitionImagePackJsDefault = parcelHelpers.interopDefault(_transitionImagePackJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("transitionImagePack", function(x, y, texture, frame, config) {
    var gameObject = new (0, _transitionImagePackJsDefault.default)(this.scene, x, y, texture, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TransitionImagePack", (0, _transitionImagePackJsDefault.default));
exports.default = (0, _transitionImagePackJsDefault.default);

},{"./TransitionImagePack.js":"hdOiU","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdOiU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionImagePackJs = require("../../transitionimagepack/TransitionImagePack.js");
var _transitionImagePackJsDefault = parcelHelpers.interopDefault(_transitionImagePackJs);
exports.default = (0, _transitionImagePackJsDefault.default);

},{"../../transitionimagepack/TransitionImagePack.js":"jnNgN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnNgN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transitionimageJs = require("../../plugins/transitionimage.js");
var _transitionimageJsDefault = parcelHelpers.interopDefault(_transitionimageJs);
var _modesJs = require("./transitionmodes/Modes.js");
var _modesJsDefault = parcelHelpers.interopDefault(_modesJs);
class TransitionImagePack extends (0, _transitionimageJsDefault.default) {
    constructor(scene, x, y, texture, frame, config){
        super(scene, x, y, texture, frame, config);
        for(var i = 0, cnt = (0, _modesJsDefault.default).length; i < cnt; i++)(0, _modesJsDefault.default)[i](this);
    }
}
exports.default = TransitionImagePack;

},{"../../plugins/transitionimage.js":"f2c98","./transitionmodes/Modes.js":"18m6f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18m6f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addSlideAwayModesJs = require("./AddSlideAwayModes.js");
var _addSlideAwayModesJsDefault = parcelHelpers.interopDefault(_addSlideAwayModesJs);
var _addSlideModesJs = require("./AddSlideModes.js");
var _addSlideModesJsDefault = parcelHelpers.interopDefault(_addSlideModesJs);
var _addPushModesJs = require("./AddPushModes.js");
var _addPushModesJsDefault = parcelHelpers.interopDefault(_addPushModesJs);
var _addZoomModesJs = require("./AddZoomModes.js");
var _addZoomModesJsDefault = parcelHelpers.interopDefault(_addZoomModesJs);
var _addFadeModesJs = require("./AddFadeModes.js");
var _addFadeModesJsDefault = parcelHelpers.interopDefault(_addFadeModesJs);
var _addWipeModesJs = require("./AddWipeModes.js");
var _addWipeModesJsDefault = parcelHelpers.interopDefault(_addWipeModesJs);
var _addIrisModesJs = require("./AddIrisModes.js");
var _addIrisModesJsDefault = parcelHelpers.interopDefault(_addIrisModesJs);
var _addPieModesJs = require("./AddPieModes.js");
var _addPieModesJsDefault = parcelHelpers.interopDefault(_addPieModesJs);
var _addBlindsModesJs = require("./AddBlindsModes.js");
var _addBlindsModesJsDefault = parcelHelpers.interopDefault(_addBlindsModesJs);
var _addSquaresModesJs = require("./AddSquaresModes.js");
var _addSquaresModesJsDefault = parcelHelpers.interopDefault(_addSquaresModesJs);
var _addCurtainModeJs = require("./AddCurtainMode.js");
var _addCurtainModeJsDefault = parcelHelpers.interopDefault(_addCurtainModeJs);
var _addPixellateModeJs = require("./AddPixellateMode.js");
var _addPixellateModeJsDefault = parcelHelpers.interopDefault(_addPixellateModeJs);
const Modes = [
    (0, _addSlideAwayModesJsDefault.default),
    (0, _addSlideModesJsDefault.default),
    (0, _addPushModesJsDefault.default),
    (0, _addZoomModesJsDefault.default),
    (0, _addFadeModesJsDefault.default),
    (0, _addIrisModesJsDefault.default),
    (0, _addPieModesJsDefault.default),
    (0, _addWipeModesJsDefault.default),
    (0, _addBlindsModesJsDefault.default),
    (0, _addSquaresModesJsDefault.default),
    (0, _addCurtainModeJsDefault.default),
    (0, _addPixellateModeJsDefault.default)
];
exports.default = Modes;

},{"./AddSlideAwayModes.js":"iHDfA","./AddSlideModes.js":"lMoOu","./AddPushModes.js":"2xD5l","./AddZoomModes.js":"dUJbH","./AddFadeModes.js":"lPilt","./AddWipeModes.js":"9wYb0","./AddIrisModes.js":"Ppmft","./AddPieModes.js":"9X0KF","./AddBlindsModes.js":"2lywb","./AddSquaresModes.js":"hfgqA","./AddCurtainMode.js":"1wmng","./AddPixellateMode.js":"5otc2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHDfA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var AddSlideAwayModes = function(image) {
    image.addTransitionMode((0, _constJs.SlideAwayRight), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var x = currentImage.width * t;
            parent.setChildLocalPosition(currentImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideAwayLeft), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var x = currentImage.width * -t;
            parent.setChildLocalPosition(currentImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideAwayDown), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var y = currentImage.height * t;
            parent.setChildLocalPosition(currentImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideAwayUp), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var y = currentImage.height * -t;
            parent.setChildLocalPosition(currentImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
        }
    });
};
exports.default = AddSlideAwayModes;

},{"./Const.js":"7i6tq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7i6tq":[function(require,module,exports) {
// Slide modes
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SlideLeft", ()=>SlideLeft);
parcelHelpers.export(exports, "SlideRight", ()=>SlideRight);
parcelHelpers.export(exports, "SlideUp", ()=>SlideUp);
parcelHelpers.export(exports, "SlideDown", ()=>SlideDown);
parcelHelpers.export(exports, "SlideAwayLeft", ()=>SlideAwayLeft);
parcelHelpers.export(exports, "SlideAwayRight", ()=>SlideAwayRight);
parcelHelpers.export(exports, "SlideAwayUp", ()=>SlideAwayUp);
parcelHelpers.export(exports, "SlideAwayDown", ()=>SlideAwayDown);
parcelHelpers.export(exports, "PushLeft", ()=>PushLeft);
parcelHelpers.export(exports, "PushRight", ()=>PushRight);
parcelHelpers.export(exports, "PushUp", ()=>PushUp);
parcelHelpers.export(exports, "PushDown", ()=>PushDown);
parcelHelpers.export(exports, "ZoomOut", ()=>ZoomOut);
parcelHelpers.export(exports, "ZoomIn", ()=>ZoomIn);
parcelHelpers.export(exports, "ZoomInOut", ()=>ZoomInOut);
parcelHelpers.export(exports, "Fade", ()=>Fade);
parcelHelpers.export(exports, "CrossFade", ()=>CrossFade);
parcelHelpers.export(exports, "WipeLeft", ()=>WipeLeft);
parcelHelpers.export(exports, "WipeRight", ()=>WipeRight);
parcelHelpers.export(exports, "WipeUp", ()=>WipeUp);
parcelHelpers.export(exports, "WipeDown", ()=>WipeDown);
parcelHelpers.export(exports, "IrisOut", ()=>IrisOut);
parcelHelpers.export(exports, "IrisIn", ()=>IrisIn);
parcelHelpers.export(exports, "PieOut", ()=>PieOut);
parcelHelpers.export(exports, "PieIn", ()=>PieIn);
parcelHelpers.export(exports, "Blinds", ()=>Blinds);
parcelHelpers.export(exports, "Squares", ()=>Squares);
parcelHelpers.export(exports, "Curtain", ()=>Curtain);
parcelHelpers.export(exports, "Pixellate", ()=>Pixellate);
const SlideLeft = "slideLeft";
const SlideRight = "slideRight";
const SlideUp = "slideUp";
const SlideDown = "slideDown";
const SlideAwayLeft = "slideAwayLeft";
const SlideAwayRight = "slideAwayRight";
const SlideAwayUp = "slideAwayUp";
const SlideAwayDown = "slideAwayDown";
const PushLeft = "pushLeft";
const PushRight = "pushRight";
const PushUp = "pushUp";
const PushDown = "pushDown";
const ZoomOut = "zoomOut";
const ZoomIn = "zoomIn";
const ZoomInOut = "zoomInOut";
const Fade = "fade";
const CrossFade = "crossFade";
const WipeLeft = "wipeLeft";
const WipeRight = "wipeRight";
const WipeUp = "wipeUp";
const WipeDown = "wipeDown";
const IrisOut = "irisOut";
const IrisIn = "irisIn";
const PieOut = "pieOut";
const PieIn = "pieIn";
const Blinds = "blinds";
const Squares = "squares";
const Curtain = "curtain";
const Pixellate = "pixellate";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMoOu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var AddSlideModes = function(image) {
    image.addTransitionMode((0, _constJs.SlideRight), {
        ease: "Linear",
        dir: "in",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var x = nextImage.width * (t - 1);
            parent.setChildLocalPosition(nextImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideLeft), {
        ease: "Linear",
        dir: "in",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var x = nextImage.width * (1 - t);
            parent.setChildLocalPosition(nextImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideDown), {
        ease: "Linear",
        dir: "in",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var y = nextImage.height * (t - 1);
            parent.setChildLocalPosition(nextImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.SlideUp), {
        ease: "Linear",
        dir: "in",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var y = nextImage.height * (1 - t);
            parent.setChildLocalPosition(nextImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    });
};
exports.default = AddSlideModes;

},{"./Const.js":"7i6tq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2xD5l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var AddSliderModes = function(image) {
    image.addTransitionMode((0, _constJs.PushRight), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            // SlideAwayRight
            var x = currentImage.width * t;
            parent.setChildLocalPosition(currentImage, x, 0);
            // SlideLeft
            var x = nextImage.width * (t - 1);
            parent.setChildLocalPosition(nextImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.PushLeft), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            // SlideAwayLeft
            var x = currentImage.width * -t;
            parent.setChildLocalPosition(currentImage, x, 0);
            // SlideRight
            var x = nextImage.width * (1 - t);
            parent.setChildLocalPosition(nextImage, x, 0);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.PushDown), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            // SlideAwayDown
            var y = currentImage.height * t;
            parent.setChildLocalPosition(currentImage, 0, y);
            // SlideUp
            var y = nextImage.height * (t - 1);
            parent.setChildLocalPosition(nextImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    }).addTransitionMode((0, _constJs.PushUp), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            // SlideAwayUp
            var y = currentImage.height * -t;
            parent.setChildLocalPosition(currentImage, 0, y);
            // SlideDown
            var y = nextImage.height * (1 - t);
            parent.setChildLocalPosition(nextImage, 0, y);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalPosition(currentImage, 0, 0);
            parent.setChildLocalPosition(nextImage, 0, 0);
        }
    });
};
exports.default = AddSliderModes;

},{"./Const.js":"7i6tq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dUJbH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var AddZoomModes = function(image) {
    image.addTransitionMode((0, _constJs.ZoomOut), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var scale = 1 - t;
            parent.setChildScale(currentImage, scale, scale);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildScale(currentImage, 1, 1);
        }
    }).addTransitionMode((0, _constJs.ZoomIn), {
        ease: "Linear",
        dir: "in",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var scale = t;
            parent.setChildScale(nextImage, scale, scale);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildScale(nextImage, 1, 1);
        }
    }).addTransitionMode((0, _constJs.ZoomInOut), {
        ease: "Linear",
        dir: "out",
        mask: true,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setChildVisible(nextImage, false);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            var scale;
            if (t < 0.5) {
                scale = 1 - t * 2;
                parent.setChildScale(currentImage, scale, scale);
            } else {
                if (currentImage.visible) parent.setChildVisible(currentImage, false);
                if (!nextImage.visible) parent.setChildVisible(nextImage, true);
                scale = (t - 0.5) * 2;
                parent.setChildScale(nextImage, scale, scale);
            }
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildScale(currentImage, 1, 1);
            parent.setChildVisible(currentImage, true);
            parent.setChildScale(nextImage, 1, 1);
            parent.setChildVisible(nextImage, true);
        }
    });
};
exports.default = AddZoomModes;

},{"./Const.js":"7i6tq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPilt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _yoyoJs = require("./Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
var AddFadeModes = function(image) {
    image.addTransitionMode((0, _constJs.Fade), {
        ease: "Linear",
        dir: "out",
        mask: false,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            var tintGray;
            if (t < 0.5) {
                if (nextImage.visible) parent.setChildVisible(nextImage, false);
                t = (0, _yoyoJsDefault.default)(t);
                tintGray = Math.floor(255 * (1 - t));
                currentImage.tint = (tintGray << 16) + (tintGray << 8) + tintGray;
            } else {
                if (currentImage.visible) parent.setChildVisible(currentImage, false);
                if (!nextImage.visible) parent.setChildVisible(nextImage, true);
                t = (0, _yoyoJsDefault.default)(t);
                tintGray = Math.floor(255 * (1 - t));
                nextImage.tint = (tintGray << 16) + (tintGray << 8) + tintGray;
            }
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            currentImage.tint = 0xffffff;
            parent.setChildVisible(currentImage, true);
            nextImage.tint = 0xffffff;
        }
    }).addTransitionMode((0, _constJs.CrossFade), {
        ease: "Linear",
        dir: "out",
        mask: false,
        onStart: function(parent, currentImage, nextImage, t) {},
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalAlpha(currentImage, 1 - t);
            parent.setChildLocalAlpha(nextImage, t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.setChildLocalAlpha(currentImage, 1);
        }
    });
};
exports.default = AddFadeModes;

},{"./Const.js":"7i6tq","./Yoyo.js":"83Af6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83Af6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _yoyoJs = require("../../../plugins/utils/math/Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
exports.default = (0, _yoyoJsDefault.default);

},{"../../../plugins/utils/math/Yoyo.js":"g1jWd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9wYb0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: [
            {
                name: "rect",
                type: "rectangle"
            }
        ],
        update: function() {
            var rect = this.getShape("rect").fillStyle(0xffffff);
            var t = 1 - this.value;
            switch(this.wipeMode){
                case "right":
                    rect.setSize(this.width * t, this.height).setTopLeftPosition(this.width - rect.width, 0);
                    break;
                case "left":
                    rect.setSize(this.width * t, this.height).setTopLeftPosition(0, 0);
                    break;
                case "down":
                    rect.setSize(this.width, this.height * t).setTopLeftPosition(0, this.height - rect.height);
                    break;
                case "up":
                    rect.setSize(this.width, this.height * t).setTopLeftPosition(0, 0);
                    break;
            }
        }
    });
    return maskGameObject;
};
var AddWipeModes = function(image) {
    var maskGameObject = CreateMask(image.scene);
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.WipeRight), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
            parent.maskGameObject.wipeMode = "right";
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    }).addTransitionMode((0, _constJs.WipeLeft), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
            parent.maskGameObject.wipeMode = "left";
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    }).addTransitionMode((0, _constJs.WipeDown), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
            parent.maskGameObject.wipeMode = "down";
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    }).addTransitionMode((0, _constJs.WipeUp), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
            parent.maskGameObject.wipeMode = "up";
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    });
};
exports.default = AddWipeModes;

},{"./Const.js":"7i6tq","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Ppmft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: [
            {
                name: "rect",
                type: "rectangle"
            }
        ],
        update: function() {
            this.getShape("rect").fillStyle(0xffffff).setSize(this.width * this.value, this.height * this.value).setCenterPosition(this.centerX, this.centerY);
        }
    });
    return maskGameObject;
};
var AddIrisModes = function(image) {
    var maskGameObject = CreateMask(image.scene);
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.IrisOut), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true, true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    }).addTransitionMode((0, _constJs.IrisIn), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(1 - t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    });
};
exports.default = AddIrisModes;

},{"./Const.js":"7i6tq","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9X0KF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: [
            {
                name: "pie",
                type: "arc"
            }
        ],
        update: function() {
            var radius = Math.max(this.width, this.height) * 2;
            var deltaAngle = 90 * this.value;
            this.getShape("pie").fillStyle(0xffffff).setCenterPosition(this.centerX, 0).setRadius(radius).setAngle(90 - deltaAngle, 90 + deltaAngle).setPie();
        }
    });
    return maskGameObject;
};
var AddPieModes = function(image) {
    var maskGameObject = CreateMask(image.scene);
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.PieOut), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true, true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    }).addTransitionMode((0, _constJs.PieIn), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(1 - t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    });
};
exports.default = AddPieModes;

},{"./Const.js":"7i6tq","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2lywb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene, columns) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: {
            rectangle: columns
        },
        update: function() {
            var shapes = this.getShapes();
            var shapeWidth = this.width / columns;
            for(var i = 0; i < columns; i++)shapes[i].fillStyle(0xffffff).setSize(shapeWidth * this.value, this.height).setTopLeftPosition(shapeWidth * i, 0);
        }
    });
    return maskGameObject;
};
var AddBlindsModes = function(image) {
    var maskGameObject = CreateMask(image.scene, 10);
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.Blinds), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true, true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    });
};
exports.default = AddBlindsModes;

},{"./Const.js":"7i6tq","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfgqA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene, columns, rows) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: {
            rectangle: columns * rows
        },
        update: function() {
            var shapes = this.getShapes();
            var shapeWidth = this.width / columns, shapeHeight = this.height / rows;
            for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++)shapes[c * rows + r].fillStyle(0xffffff).setSize(shapeWidth * this.value, shapeHeight * this.value).setCenterPosition(shapeWidth * (c + 0.5), shapeHeight * (r + 0.5));
        }
    });
    return maskGameObject;
};
var AddBlindsModes = function(image) {
    var maskGameObject = CreateMask(image.scene, Math.ceil(image.width / 40), Math.ceil(image.height / 40));
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.Squares), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true, true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            parent.maskGameObject.setValue(t);
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
        }
    });
};
exports.default = AddBlindsModes;

},{"./Const.js":"7i6tq","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wmng":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _yoyoJs = require("./Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
var _customprogressJs = require("../../../plugins/customprogress.js");
var _customprogressJsDefault = parcelHelpers.interopDefault(_customprogressJs);
var CreateMask = function(scene, columns) {
    var maskGameObject = new (0, _customprogressJsDefault.default)(scene, {
        type: "Graphics",
        create: {
            lines: columns
        },
        update: function() {
            var shapes = this.getShapes();
            var shapeWidth = this.width / columns;
            var radius = shapeWidth / 2;
            for(var i = 0; i < columns; i++){
                var leftX = shapeWidth * i;
                var bottomY = this.height * this.value;
                var centerX = leftX + radius;
                shapes[i].fillStyle(0xffffff).start(leftX, 0).horizontalLineTo(bottomY).arc(centerX, bottomY, radius, 180, 0, true).horizontalLineTo(-bottomY).lineTo(leftX, 0).close();
            }
        }
    });
    return maskGameObject;
};
var AddCurtainMode = function(image) {
    var maskGameObject = CreateMask(image.scene, 10);
    image.once("destroy", function() {
        maskGameObject.destroy();
    }).addTransitionMode((0, _constJs.Curtain), {
        ease: "Linear",
        dir: "out",
        mask: maskGameObject,
        onStart: function(parent, currentImage, nextImage, t) {
            parent.setCurrentImageMaskEnable(true, true);
            parent.setNextImageMaskEnable(true, true);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            if (t < 0.5) {
                if (nextImage.visible) parent.setChildVisible(nextImage, false);
                t = (0, _yoyoJsDefault.default)(t);
                parent.maskGameObject.setValue(t);
            } else {
                if (currentImage.visible) parent.setChildVisible(currentImage, false);
                if (!nextImage.visible) parent.setChildVisible(nextImage, true);
                t = (0, _yoyoJsDefault.default)(t);
                parent.maskGameObject.setValue(t);
            }
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            parent.removeMaskGameObject(false);
            parent.setChildVisible(currentImage, true);
        }
    });
};
exports.default = AddCurtainMode;

},{"./Const.js":"7i6tq","./Yoyo.js":"83Af6","../../../plugins/customprogress.js":"h0x2y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5otc2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constJs = require("./Const.js");
var _yoyoJs = require("./Yoyo.js");
var _yoyoJsDefault = parcelHelpers.interopDefault(_yoyoJs);
var AddPixellateMode = function(image) {
    image.addTransitionMode((0, _constJs.Pixellate), {
        ease: "Linear",
        dir: "out",
        mask: false,
        onStart: function(parent, currentImage, nextImage, t) {
            currentImage.effect = currentImage.preFX.addPixelate(0);
            nextImage.effect = nextImage.preFX.addPixelate(0);
        },
        onProgress: function(parent, currentImage, nextImage, t) {
            if (t < 0.5) {
                t = (0, _yoyoJsDefault.default)(t);
                var maxAmount = Math.min(currentImage.width, currentImage.height) / 5;
                currentImage.effect.amount = Math.ceil(maxAmount * t);
            } else {
                if (currentImage.visible) parent.setChildVisible(currentImage, false);
                t = (0, _yoyoJsDefault.default)(t);
                var maxAmount = Math.min(nextImage.width, nextImage.height) / 5;
                nextImage.effect.amount = Math.ceil(maxAmount * t);
            }
        },
        onComplete: function(parent, currentImage, nextImage, t) {
            currentImage.preFX.remove(currentImage.effect);
            delete currentImage.effect;
            parent.setChildVisible(currentImage, true);
            nextImage.preFX.remove(nextImage.effect);
            delete nextImage.effect;
        }
    });
};
exports.default = AddPixellateMode;

},{"./Const.js":"7i6tq","./Yoyo.js":"83Af6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3MAf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageBoxJs = require("./ImageBox.js");
var _imageBoxJsDefault = parcelHelpers.interopDefault(_imageBoxJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("imageBox", function(x, y, texture, frame, config) {
    var gameObject = new (0, _imageBoxJsDefault.default)(this.scene, x, y, texture, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ImageBox", (0, _imageBoxJsDefault.default));
exports.default = (0, _imageBoxJsDefault.default);

},{"./ImageBox.js":"cc275","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cc275":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageboxJs = require("../../../plugins/imagebox.js");
var _imageboxJsDefault = parcelHelpers.interopDefault(_imageboxJs);
exports.default = (0, _imageboxJsDefault.default);

},{"../../../plugins/imagebox.js":"llSE5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llSE5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageBoxJs = require("./gameobjects/container/imagebox/ImageBox.js");
var _imageBoxJsDefault = parcelHelpers.interopDefault(_imageBoxJs);
exports.default = (0, _imageBoxJsDefault.default);

},{"./gameobjects/container/imagebox/ImageBox.js":"eVXYG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eVXYG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerLiteJs = require("../containerlite/ContainerLite.js");
var _containerLiteJsDefault = parcelHelpers.interopDefault(_containerLiteJs);
var _fitToJs = require("../../../utils/size/FitTo.js");
var _fitToJsDefault = parcelHelpers.interopDefault(_fitToJs);
var _flipMethodsJs = require("../utils/FlipMethods.js");
var _flipMethodsJsDefault = parcelHelpers.interopDefault(_flipMethodsJs);
var _hasTextureJs = require("../../../utils/texture/HasTexture.js");
var _hasTextureJsDefault = parcelHelpers.interopDefault(_hasTextureJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class ImageBox extends (0, _containerLiteJsDefault.default) {
    constructor(scene, x, y, texture, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            texture = GetValue(config, "key", undefined);
            frame = GetValue(config, "frame", undefined);
        } else if (IsPlainObject(frame)) {
            config = frame;
            frame = undefined;
        }
        var image = GetValue(config, "image");
        if (!image) {
            image = scene.add.image(x, y, texture, frame);
            if (texture === undefined) image.setVisible(false);
        } else image.setPosition(x, y).setOrigin(0.5);
        super(scene, x, y, 1, 1);
        this.type = "rexImageBox";
        this.add(image);
        this.image = image;
        var width = GetValue(config, "width", image.width);
        var height = GetValue(config, "height", image.height);
        this.resize(width, height);
    }
    get texture() {
        return this.image.texture;
    }
    get frame() {
        return this.image.frame;
    }
    get flipX() {
        return this._flipX;
    }
    set flipX(value) {
        if (this._flipX === value) return;
        this._flipX = value;
        this.image.setFlipX(value);
    }
    get flipY() {
        return this._flipY;
    }
    set flipY(value) {
        if (this._flipY === value) return;
        this._flipY = value;
        this.image.setFlipY(value);
    }
    scaleImage() {
        var image = this.image;
        var result = (0, _fitToJsDefault.default)(image, {
            width: this.width,
            height: this.height
        }, true);
        image.setDisplaySize(result.width, result.height);
        this.resetChildScaleState(image);
        return this;
    }
    resize(width, height) {
        super.resize(width, height);
        this.scaleImage();
        return this;
    }
    setTexture(texture, frame) {
        var image = this.image;
        image.setTexture(texture, frame);
        if (texture !== null) {
            this.setChildVisible(image, true);
            this.scaleImage();
        } else this.setChildVisible(image, false);
        return this;
    }
}
Object.assign(ImageBox.prototype, (0, _flipMethodsJsDefault.default));
exports.default = ImageBox;

},{"../containerlite/ContainerLite.js":"kyrI6","../../../utils/size/FitTo.js":"dO76i","../utils/FlipMethods.js":"9xbCX","../../../utils/texture/HasTexture.js":"kIxC5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dO76i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FitTo = function(child, parent, out) {
    if (out === undefined) out = {};
    else if (out === true) out = globalSize;
    if (child.width <= parent.width && child.height <= parent.height) {
        out.width = child.width;
        out.height = child.height;
        return out;
    }
    var childRatio = child.width / child.height;
    out.width = Math.min(child.width, parent.width);
    out.height = Math.min(child.height, parent.height);
    var ratio = out.width / out.height;
    if (ratio < childRatio) out.height = out.width / childRatio;
    else if (ratio > childRatio) out.width = out.height * childRatio;
    return out;
};
var globalSize = {};
exports.default = FitTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIxC5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameJs = require("../system/GetGame.js");
var _getGameJsDefault = parcelHelpers.interopDefault(_getGameJs);
var HasTexture = function(game, key, frame) {
    game = (0, _getGameJsDefault.default)(game);
    var cache = game.textures;
    var hasTexture = cache.exists(key);
    if (frame === undefined) return hasTexture;
    return cache.get(key).has(frame);
};
exports.default = HasTexture;

},{"../system/GetGame.js":"2z43O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1Tnj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fullWindowRectangleJs = require("./FullWindowRectangle.js");
var _fullWindowRectangleJsDefault = parcelHelpers.interopDefault(_fullWindowRectangleJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fullWindowRectangle", function(fillColor, fillAlpha) {
    var gameObject = new (0, _fullWindowRectangleJsDefault.default)(this.scene, fillColor, fillAlpha);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FullWindowRectangle", (0, _fullWindowRectangleJsDefault.default));
exports.default = (0, _fullWindowRectangleJsDefault.default);

},{"./FullWindowRectangle.js":"fUajK","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUajK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fullwindowrectangleJs = require("../../../plugins/fullwindowrectangle.js");
var _fullwindowrectangleJsDefault = parcelHelpers.interopDefault(_fullwindowrectangleJs);
exports.default = (0, _fullwindowrectangleJsDefault.default);

},{"../../../plugins/fullwindowrectangle.js":"4tNm9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4tNm9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fullWindowRectangleJs = require("./gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js");
var _fullWindowRectangleJsDefault = parcelHelpers.interopDefault(_fullWindowRectangleJs);
exports.default = (0, _fullWindowRectangleJsDefault.default);

},{"./gameobjects/shape/fullwindowrectangle/FullWindowRectangle.js":"72RzD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ZxxK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coverJs = require("./Cover.js");
var _coverJsDefault = parcelHelpers.interopDefault(_coverJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("cover", function(config) {
    var gameObject = new (0, _coverJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Cover", (0, _coverJsDefault.default));
exports.default = (0, _coverJsDefault.default);

},{"./Cover.js":"9UpKs","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UpKs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _coverJs = require("../../../plugins/gameobjects/shape/cover/Cover.js");
var _coverJsDefault = parcelHelpers.interopDefault(_coverJs);
exports.default = (0, _coverJsDefault.default);

},{"../../../plugins/gameobjects/shape/cover/Cover.js":"can6F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sap6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTextJs = require("./InputText.js");
var _inputTextJsDefault = parcelHelpers.interopDefault(_inputTextJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("inputText", function(config) {
    var gameObject = new (0, _inputTextJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.InputText", (0, _inputTextJsDefault.default));
exports.default = (0, _inputTextJsDefault.default);

},{"./InputText.js":"l0N7k","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0N7k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputtextJs = require("../../../plugins/inputtext.js");
var _inputtextJsDefault = parcelHelpers.interopDefault(_inputtextJs);
exports.default = (0, _inputtextJsDefault.default);

},{"../../../plugins/inputtext.js":"lo1LE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lo1LE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTextJs = require("./gameobjects/dom/inputtext/InputText.js");
var _inputTextJsDefault = parcelHelpers.interopDefault(_inputTextJs);
exports.default = (0, _inputTextJsDefault.default);

},{"./gameobjects/dom/inputtext/InputText.js":"gLRVR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gLRVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeJs = require("../utils/Resize.js");
var _resizeJsDefault = parcelHelpers.interopDefault(_resizeJs);
var _inputTextPropertiesJs = require("./InputTextProperties.js");
var _setPropertiesJs = require("../utils/SetProperties.js");
var _setPropertiesJsDefault = parcelHelpers.interopDefault(_setPropertiesJs);
var _routeEventsJs = require("../utils/RouteEvents.js");
var _routeEventsJsDefault = parcelHelpers.interopDefault(_routeEventsJs);
var _stopPropagationTouchEventsJs = require("../utils/StopPropagationTouchEvents.js");
var _stopPropagationTouchEventsJsDefault = parcelHelpers.interopDefault(_stopPropagationTouchEventsJs);
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class InputText extends DOMElement {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        }
        if (config === undefined) config = {};
        var element;
        var textType = GetValue(config, "type", "text");
        if (textType === "textarea") {
            element = document.createElement("textarea");
            element.style.resize = "none";
        } else {
            element = document.createElement("input");
            element.type = textType;
        }
        (0, _setPropertiesJsDefault.default)((0, _inputTextPropertiesJs.ElementProperties), config, element);
        var style = GetValue(config, "style", undefined);
        style = (0, _setPropertiesJsDefault.default)((0, _inputTextPropertiesJs.StyleProperties), config, style);
        // Apply other style properties
        var elementStyle = element.style;
        for(var key in config){
            if (key in (0, _inputTextPropertiesJs.ElementProperties) || key in (0, _inputTextPropertiesJs.StyleProperties)) continue;
            else if (key in elementStyle) style[key] = config[key];
        }
        style["box-sizing"] = "border-box";
        super(scene, x, y, element, style);
        this.type = "rexInputText";
        this.resize(width, height);
        // Apply events
        (0, _routeEventsJsDefault.default)(this, element, (0, _inputTextPropertiesJs.ElementEvents));
        // Don't propagate touch/mouse events to parent(game canvas)
        (0, _stopPropagationTouchEventsJsDefault.default)(element);
        if (GetValue(config, "selectAll", false)) this.selectAll();
        this._isFocused = false;
        this.on("focus", function() {
            this._isFocused = true;
        }, this).on("blur", function() {
            this._isFocused = false;
        }, this);
    }
    get text() {
        return this.node.value;
    }
    set text(value) {
        this.node.value = value;
    }
    setText(value) {
        this.text = value;
        return this;
    }
    get maxLength() {
        return this.node.maxLength;
    }
    set maxLength(value) {
        this.node.maxLength = value;
    }
    setMaxLength(value) {
        this.maxLength = value;
        return this;
    }
    get minLength() {
        return this.node.minLength;
    }
    set minLength(value) {
        this.node.minLength = value;
    }
    setMinLength(value) {
        this.minLength = value;
        return this;
    }
    get placeholder() {
        return this.node.placeholder;
    }
    set placeholder(value) {
        this.node.placeholder = value;
    }
    setPlaceholder(value) {
        this.placeholder = value;
        return this;
    }
    selectText(selectionStart, selectionEnd) {
        if (selectionStart === undefined) this.node.select();
        else this.node.setSelectionRange(selectionStart, selectionEnd);
        return this;
    }
    selectAll() {
        this.selectText();
        return this;
    }
    get selectionStart() {
        return this.node.selectionStart;
    }
    get selectionEnd() {
        return this.node.selectionEnd;
    }
    get selectedText() {
        var node = this.node;
        return node.value.substring(node.selectionStart, node.selectionEnd);
    }
    get cursorPosition() {
        return this.node.selectionStart;
    }
    set cursorPosition(value) {
        this.node.setSelectionRange(value, value);
    }
    setCursorPosition(value) {
        if (value === undefined) value = this.text.length;
        else if (value < 0) value = this.text.length + value;
        this.cursorPosition = value;
        return this;
    }
    get tooltip() {
        return this.node.title;
    }
    set tooltip(value) {
        this.node.title = value;
    }
    setTooltip(value) {
        this.tooltip = value;
        return this;
    }
    setTextChangedCallback(callback) {
        this.onTextChanged = callback;
        return this;
    }
    get readOnly() {
        return this.node.readOnly;
    }
    set readOnly(value) {
        this.node.readOnly = value;
    }
    setReadOnly(value) {
        if (value === undefined) value = true;
        this.readOnly = value;
        return this;
    }
    get spellCheck() {
        return this.node.spellcheck;
    }
    set spellCheck(value) {
        this.node.spellcheck = value;
    }
    setSpellCheck(value) {
        this.spellCheck = value;
        return this;
    }
    get fontColor() {
        return this.node.style.color;
    }
    set fontColor(value) {
        this.node.style.color = value;
    }
    setFontColor(value) {
        this.fontColor = value;
        return this;
    }
    setStyle(key, value) {
        this.node.style[key] = value;
        return this;
    }
    getStyle(key) {
        return this.node.style[key];
    }
    scrollToBottom() {
        this.node.scrollTop = this.node.scrollHeight;
        return this;
    }
    setEnabled(enabled) {
        if (enabled === undefined) enabled = true;
        this.node.disabled = !enabled;
        return this;
    }
    setBlur() {
        this.node.blur();
        return this;
    }
    setFocus() {
        this.node.focus();
        return this;
    }
    get isFocused() {
        return this._isFocused;
    }
}
var methods = {
    resize: (0, _resizeJsDefault.default)
};
Object.assign(InputText.prototype, methods);
exports.default = InputText;

},{"../utils/Resize.js":"dSJHB","./InputTextProperties.js":"kkSSJ","../utils/SetProperties.js":"9EtCg","../utils/RouteEvents.js":"hvqjV","../utils/StopPropagationTouchEvents.js":"e8n0h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSJHB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Resize = function(width, height) {
    if (this.scene.sys.scale.autoRound) {
        width = Math.floor(width);
        height = Math.floor(height);
    }
    if (this.width === width && this.height === height) return this;
    var style = this.node.style;
    style.width = `${width}px`;
    style.height = `${height}px`;
    this.updateSize();
    return this;
};
exports.default = Resize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kkSSJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ElementProperties", ()=>ElementProperties);
parcelHelpers.export(exports, "StyleProperties", ()=>StyleProperties);
parcelHelpers.export(exports, "ElementEvents", ()=>ElementEvents);
const ElementProperties = {
    id: [
        "id",
        undefined
    ],
    text: [
        "value",
        undefined
    ],
    maxLength: [
        "maxLength",
        undefined
    ],
    minLength: [
        "minLength",
        undefined
    ],
    placeholder: [
        "placeholder",
        undefined
    ],
    tooltip: [
        "title",
        undefined
    ],
    readOnly: [
        "readOnly",
        false
    ],
    spellCheck: [
        "spellcheck",
        false
    ],
    autoComplete: [
        "autocomplete",
        "off"
    ]
};
const StyleProperties = {
    align: [
        "textAlign",
        undefined
    ],
    paddingLeft: [
        "padding-left",
        undefined
    ],
    paddingRight: [
        "padding-right",
        undefined
    ],
    paddingTop: [
        "padding-top",
        undefined
    ],
    paddingBottom: [
        "padding-bottom",
        undefined
    ],
    fontFamily: [
        "fontFamily",
        undefined
    ],
    fontSize: [
        "font-size",
        undefined
    ],
    color: [
        "color",
        "#ffffff"
    ],
    backgroundColor: [
        "backgroundColor",
        "transparent"
    ],
    border: [
        "border",
        0
    ],
    borderColor: [
        "borderColor",
        "transparent"
    ],
    outline: [
        "outline",
        "none"
    ],
    direction: [
        "direction",
        undefined
    ]
};
const ElementEvents = {
    input: "textchange",
    click: "click",
    dblclick: "dblclick",
    mousedown: "pointerdown",
    mousemove: "pointermove",
    mouseup: "pointerup",
    touchstart: "pointerdown",
    touchmove: "pointermove",
    touchend: "pointerup",
    keydown: "keydown",
    keyup: "keyup",
    keypress: "keypress",
    compositionstart: "compositionStart",
    compositionend: "compositionEnd",
    compositionupdate: "compositionUpdate",
    focus: "focus",
    blur: "blur",
    select: "select"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvqjV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var RouteEvents = function(gameObject, element, elementEvents, config) {
    var preventDefault = GetValue(config, "preventDefault", false);
    var preTest = GetValue(config, "preTest");
    for(let elementEventName in elementEvents)element.addEventListener(elementEventName, function(e) {
        if (!preTest || preTest(gameObject, elementEventName)) gameObject.emit(elementEvents[elementEventName], gameObject, e);
        if (preventDefault) e.preventDefault();
    });
};
exports.default = RouteEvents;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fcq8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileChooserJs = require("./FileChooser.js");
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fileChooser", function(config) {
    var gameObject = new (0, _fileChooserJs.FileChooser)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FileChooser", (0, _fileChooserJs.FileChooser));
exports.default = (0, _fileChooserJs.FileChooser);

},{"./FileChooser.js":"cgKZ9","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cgKZ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OpenFileChooser", ()=>(0, _filechooserJs.OpenFileChooser));
parcelHelpers.export(exports, "FileChooser", ()=>(0, _filechooserJs.FileChooser));
var _filechooserJs = require("../../../plugins/filechooser.js");

},{"../../../plugins/filechooser.js":"kpYS7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpYS7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OpenFileChooser", ()=>(0, _openJsDefault.default));
parcelHelpers.export(exports, "FileChooser", ()=>(0, _fileChooserJsDefault.default));
var _openJs = require("./behaviors/filechooser/Open.js");
var _openJsDefault = parcelHelpers.interopDefault(_openJs);
var _fileChooserJs = require("./gameobjects/dom/filechooser/FileChooser.js");
var _fileChooserJsDefault = parcelHelpers.interopDefault(_fileChooserJs);

},{"./behaviors/filechooser/Open.js":"6VtY5","./gameobjects/dom/filechooser/FileChooser.js":"tR1tS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6VtY5":[function(require,module,exports) {
// Note: Not working in iOS9+
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFileInputJs = require("./CreateFileInput.js");
var _createFileInputJsDefault = parcelHelpers.interopDefault(_createFileInputJs);
var _clickPromiseJs = require("../../gameobjects/dom/filechooser/ClickPromise.js");
var _clickPromiseJsDefault = parcelHelpers.interopDefault(_clickPromiseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var Open = function(game, config) {
    // game: game, scene, or game object
    var closeDelay = GetValue(config, "closeDelay", 200);
    var fileInput = (0, _createFileInputJsDefault.default)(config);
    fileInput.click();
    return (0, _clickPromiseJsDefault.default)({
        game,
        fileInput,
        closeDelay
    }).then(function(result) {
        fileInput.remove();
        return Promise.resolve(result);
    });
};
exports.default = Open;

},{"./CreateFileInput.js":"a8sbA","../../gameobjects/dom/filechooser/ClickPromise.js":"3Urbl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8sbA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateFileInput = function(config) {
    var fileInput = document.createElement("input");
    fileInput.type = "file";
    var accept = GetValue(config, "accept", "");
    var multiple = GetValue(config, "multiple", false);
    fileInput.setAttribute("accept", accept);
    if (multiple) fileInput.setAttribute("multiple", "");
    else fileInput.removeAttribute("multiple");
    return fileInput;
};
exports.default = CreateFileInput;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Urbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameJs = require("../../../utils/system/GetGame.js");
var _getGameJsDefault = parcelHelpers.interopDefault(_getGameJs);
var _waitEventJs = require("../../../utils/promise/WaitEvent.js");
var _delayJs = require("../../../utils/promise/Delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var ClickPromise = function({ game, fileInput, closeDelay }) {
    return (0, _waitEventJs.WaitEvent)((0, _getGameJsDefault.default)(game).events, "focus").then(function() {
        return (0, _delayJsDefault.default)(closeDelay);
    }).then(function() {
        var result = {
            files: fileInput.files
        };
        return Promise.resolve(result);
    });
};
exports.default = ClickPromise;

},{"../../../utils/system/GetGame.js":"2z43O","../../../utils/promise/WaitEvent.js":"6ljEN","../../../utils/promise/Delay.js":"ctnEK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctnEK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Delay = function(time, result) {
    if (time === undefined) time = 0;
    return new Promise(function(resolve, reject) {
        setTimeout(function() {
            resolve(result);
        }, time);
    });
};
exports.default = Delay;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"tR1tS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeJs = require("../utils/Resize.js");
var _resizeJsDefault = parcelHelpers.interopDefault(_resizeJs);
var _syncToJs = require("../utils/SyncTo.js");
var _syncToJsDefault = parcelHelpers.interopDefault(_syncToJs);
var _loadFileMethodsJs = require("../utils/LoadFileMethods.js");
var _loadFileMethodsJsDefault = parcelHelpers.interopDefault(_loadFileMethodsJs);
var _clickPromiseJs = require("./ClickPromise.js");
var _clickPromiseJsDefault = parcelHelpers.interopDefault(_clickPromiseJs);
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FileChooser extends DOMElement {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        }
        // Create a hidden file input
        var inputElement = document.createElement("input");
        inputElement.type = "file";
        var inputStyle = inputElement.style;
        inputStyle.display = "none";
        // Create a label parent
        var labelElement = document.createElement("label");
        labelElement.appendChild(inputElement);
        var style = GetValue(config, "style", undefined);
        super(scene, x, y, labelElement, style);
        this.type = "rexFileChooser";
        this.resetFromJSON(config);
        this.resize(width, height);
        // Register events
        var self = this;
        inputElement.onchange = function() {
            self.emit("change", self);
        };
        this.setCloseDelay(GetValue(config, "closeDelay", 200));
        inputElement.onclick = function() {
            (0, _clickPromiseJsDefault.default)({
                game: scene,
                fileInput: inputElement,
                closeDelay: self.closeDelay
            }).then(function() {
                self.emit("select", self);
            });
        };
    }
    resetFromJSON(config) {
        this.setAccept(GetValue(config, "accept", ""));
        this.setMultiple(GetValue(config, "multiple", false));
        return this;
    }
    setAccept(accept) {
        if (accept === undefined) accept = "";
        this.fileInput.setAttribute("accept", accept);
        return this;
    }
    setMultiple(enabled) {
        if (enabled === undefined) enabled = true;
        if (enabled) this.fileInput.setAttribute("multiple", "");
        else this.fileInput.removeAttribute("multiple");
        return this;
    }
    setCloseDelay(delay) {
        if (delay === undefined) delay = 200;
        this.closeDelay = delay;
        return this;
    }
    get fileInput() {
        return this.node.children[0];
    }
    open() {
        this.fileInput.click();
        return this;
    }
    get files() {
        return this.fileInput.files;
    }
}
var methods = {
    resize: (0, _resizeJsDefault.default),
    syncTo: (0, _syncToJsDefault.default)
};
Object.assign(FileChooser.prototype, methods, (0, _loadFileMethodsJsDefault.default));
exports.default = FileChooser;

},{"../utils/Resize.js":"dSJHB","../utils/SyncTo.js":"a1rOB","../utils/LoadFileMethods.js":"fhPlE","./ClickPromise.js":"3Urbl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a1rOB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SyncTo = function(gameObject) {
    this.setOrigin(gameObject.originX, gameObject.originY);
    this.setPosition(gameObject.x, gameObject.y);
    this.resize(gameObject.displayWidth, gameObject.displayHeight);
    return this;
};
exports.default = SyncTo;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fhPlE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileObjectToCache = require("../../../utils/loader/FileObjectToCache");
var _fileObjectToCacheDefault = parcelHelpers.interopDefault(_fileObjectToCache);
var LoadFile = function(file, loaderType, key, cacheType, onComplete) {
    var scene = this.scene;
    (0, _fileObjectToCacheDefault.default)(scene, file, loaderType, key, cacheType, onComplete);
    return this;
};
var LoadFilePromise = function(file, loaderType, key, cacheType) {
    var scene = this.scene;
    return new Promise(function(resolve, reject) {
        var onComplete = function(data) {
            resolve(data);
        };
        (0, _fileObjectToCacheDefault.default)(scene, file, loaderType, key, cacheType, onComplete);
    });
};
exports.default = {
    loadFile: LoadFile,
    loadFilePromise: LoadFilePromise
};

},{"../../../utils/loader/FileObjectToCache":"gl64O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gl64O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getCacheJs = require("../system/GetCache.js");
var _getCacheJsDefault = parcelHelpers.interopDefault(_getCacheJs);
var _isFunctionJs = require("../object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var FileObjectToCache = function(scene, file, loaderType, key, cacheType, onComplete) {
    // Remove data from cache
    if (cacheType === null || cacheType === false) ;
    else if ((0, _isFunctionJsDefault.default)(cacheType)) cacheType();
    else {
        var cache = (0, _getCacheJsDefault.default)(scene, loaderType, cacheType);
        if (cache.exists(key)) cache.remove(key);
    }
    // Add filecomplete event
    var loader = scene.load;
    if (onComplete) loader.once(`filecomplete-${loaderType}-${key}`, function(key, type, data) {
        onComplete(data);
    });
    // Load file from url
    if ((0, _isFunctionJsDefault.default)(file)) file();
    else {
        var url = window.URL.createObjectURL(file);
        loader[loaderType](key, url);
    }
    loader.start();
};
exports.default = FileObjectToCache;

},{"../system/GetCache.js":"jWpQQ","../object/IsFunction.js":"5hi03","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jWpQQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameJs = require("./GetGame.js");
var _getGameJsDefault = parcelHelpers.interopDefault(_getGameJs);
var GetCache = function(game, loaderType, cacheType) {
    if (cacheType === undefined) switch(loaderType){
        case "image":
        case "svg":
            cacheType = "textures";
            break;
        case "animation":
            cacheType = "json";
            break;
        case "tilemapTiledJSON":
        case "tilemapCSV":
            cacheType = "tilemap";
            break;
        case "glsl":
            cacheType = "shader";
            break;
        default:
            cacheType = loaderType;
            break;
    }
    game = (0, _getGameJsDefault.default)(game);
    var cache;
    if (cacheType === "textures") cache = game.textures;
    else cache = game.cache[cacheType];
    return cache;
};
exports.default = GetCache;

},{"./GetGame.js":"2z43O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66ZxL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileDropZoneJs = require("./FileDropZone.js");
var _fileDropZoneJsDefault = parcelHelpers.interopDefault(_fileDropZoneJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fileDropZone", function(config) {
    var gameObject = new (0, _fileDropZoneJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FileDropZone", (0, _fileDropZoneJsDefault.default));
exports.default = (0, _fileDropZoneJsDefault.default);

},{"./FileDropZone.js":"6Ft6X","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Ft6X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _filedropzoneJs = require("../../../plugins/filedropzone.js");
var _filedropzoneJsDefault = parcelHelpers.interopDefault(_filedropzoneJs);
exports.default = (0, _filedropzoneJsDefault.default);

},{"../../../plugins/filedropzone.js":"gcrqw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gcrqw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileDropZoneJs = require("./gameobjects/dom/filedropzone/FileDropZone.js");
var _fileDropZoneJsDefault = parcelHelpers.interopDefault(_fileDropZoneJs);
exports.default = (0, _fileDropZoneJsDefault.default);

},{"./gameobjects/dom/filedropzone/FileDropZone.js":"fNaj9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNaj9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _fileDropZonePropertiesJs = require("./FileDropZoneProperties.js");
var _routeEventsJs = require("../utils/RouteEvents.js");
var _routeEventsJsDefault = parcelHelpers.interopDefault(_routeEventsJs);
const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FileDropZone extends DOMElement {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, "width", 0);
            height = GetValue(config, "height", 0);
        }
        if (config === undefined) config = {};
        var element = document.createElement("div");
        var style = GetValue(config, "style", undefined);
        super(scene, x, y, element, style);
        this.type = "rexFileDropZone";
        this.resize(width, height);
        this._files = [];
        this.setDropEnable(GetValue(config, "dropEnable", true));
        var filters = GetValue(config, "filters");
        if (filters) this.addFilters(filters);
        // Apply events
        (0, _routeEventsJsDefault.default)(this, element, (0, _fileDropZonePropertiesJs.DragDropEvents), {
            preventDefault: true,
            preTest (gameObject) {
                return gameObject.dropEnable;
            }
        });
        this.on("drop", function(gameObject, e) {
            this._files = e.dataTransfer.files;
            var files = this._files;
            if (files && this.filters) for(var filterType in this.filters){
                var filterCallback = this.filters[filterType];
                var filteredFiles = [];
                for(var i = 0, cnt = files.length; i < cnt; i++){
                    var file = files[i];
                    if (filterCallback(file, files)) filteredFiles.push(file);
                }
                if (filteredFiles.length > 0) this.emit(`drop.${filterType}`, filteredFiles);
            }
        }, this);
    }
    get files() {
        return this._files;
    }
}
Object.assign(FileDropZone.prototype, (0, _methodsJsDefault.default));
exports.default = FileDropZone;

},{"./methods/Methods.js":"2aleV","./FileDropZoneProperties.js":"U3SWL","../utils/RouteEvents.js":"hvqjV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2aleV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeJs = require("../../utils/Resize.js");
var _resizeJsDefault = parcelHelpers.interopDefault(_resizeJs);
var _syncToJs = require("../../utils/SyncTo.js");
var _syncToJsDefault = parcelHelpers.interopDefault(_syncToJs);
var _loadFileMethodsJs = require("../../utils/LoadFileMethods.js");
var _loadFileMethodsJsDefault = parcelHelpers.interopDefault(_loadFileMethodsJs);
var _dropEnableMethodsJs = require("./DropEnableMethods.js");
var _dropEnableMethodsJsDefault = parcelHelpers.interopDefault(_dropEnableMethodsJs);
var _filterMethodsJs = require("./FilterMethods.js");
var _filterMethodsJsDefault = parcelHelpers.interopDefault(_filterMethodsJs);
var Methods = {
    resize: (0, _resizeJsDefault.default),
    syncTo: (0, _syncToJsDefault.default)
};
Object.assign(Methods, (0, _dropEnableMethodsJsDefault.default), (0, _filterMethodsJsDefault.default), (0, _loadFileMethodsJsDefault.default));
exports.default = Methods;

},{"../../utils/Resize.js":"dSJHB","../../utils/SyncTo.js":"a1rOB","../../utils/LoadFileMethods.js":"fhPlE","./DropEnableMethods.js":"atlNA","./FilterMethods.js":"6NCr0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"atlNA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setDropEnable (enable) {
        if (enable === undefined) enable = true;
        this.dropEnable = enable;
        return this;
    },
    toggleDropEnable () {
        this.dropEnable = !this.dropEnable;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6NCr0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    addFilter (name, callback) {
        if (!this.filters) this.filters = {};
        this.filters[name] = callback;
        return this;
    },
    addFilters (filters) {
        if (!this.filters) this.filters = {};
        for(var name in filters)this.filters[name] = filters[name];
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"U3SWL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DragDropEvents", ()=>DragDropEvents);
const DragDropEvents = {
    dragenter: "dragenter",
    dragleave: "dragleave",
    dragover: "dragover",
    drop: "drop"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cutMJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartJs = require("./Chart.js");
var _chartJsDefault = parcelHelpers.interopDefault(_chartJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("chart", function(x, y, width, height, config) {
    var gameObject = new (0, _chartJsDefault.default)(this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Chart", (0, _chartJsDefault.default));
exports.default = (0, _chartJsDefault.default);

},{"./Chart.js":"alxkL","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"alxkL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../canvas/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _setChartJs = require("./SetChart.js");
var _setChartJsDefault = parcelHelpers.interopDefault(_setChartJs);
var _getChartDatasetJs = require("./GetChartDataset.js");
var _getChartDatasetJsDefault = parcelHelpers.interopDefault(_getChartDatasetJs);
var _getChartDataJs = require("./GetChartData.js");
var _getChartDataJsDefault = parcelHelpers.interopDefault(_getChartDataJs);
var _setChartDataJs = require("./SetChartData.js");
var _setChartDataJsDefault = parcelHelpers.interopDefault(_setChartDataJs);
var _updateChartJs = require("./UpdateChart.js");
var _updateChartJsDefault = parcelHelpers.interopDefault(_updateChartJs);
// This plugin does not contain chart.js
// Load chart.js in preload stage -
// scene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/Chart.min.js');
class Chart extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, width, height, config){
        super(scene, x, y, width, height);
        this.type = "rexChart";
        this.chart = undefined;
        if (config !== undefined) this.setChart(config);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) return;
        if (this.chart) {
            this.chart.destroy();
            this.chart = undefined;
        }
        super.destroy(fromScene);
    }
    resize(width, height) {
        if (width === this.width && height === this.height) return this;
        super.resize(width, height);
        if (this.chart) {
            var chart = this.chart;
            chart.height = this.canvas.height;
            chart.width = this.canvas.width;
            chart.aspectRatio = chart.height ? chart.width / chart.height : null;
            chart.update();
        }
        return this;
    }
}
var methods = {
    setChart: (0, _setChartJsDefault.default),
    getChartDataset: (0, _getChartDatasetJsDefault.default),
    getChartData: (0, _getChartDataJsDefault.default),
    setChartData: (0, _setChartDataJsDefault.default),
    updateChart: (0, _updateChartJsDefault.default)
};
Object.assign(Chart.prototype, methods);
exports.default = Chart;

},{"../canvas/Canvas.js":"h0Okn","./SetChart.js":"ag1Hy","./GetChartDataset.js":"iISXj","./GetChartData.js":"645yO","./SetChartData.js":"hfSZD","./UpdateChart.js":"bNq3o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ag1Hy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetChart = function(config) {
    if (!window.Chart) {
        var msg = `Can not find chartjs! Load chartjs in preload stage.
scene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/Chart.min.js');`;
        console.error(msg);
        return this;
    }
    if (this.chart) this.chart.destroy();
    this.chart = new Chart(this.context, FillConfig(this, config));
    return this;
};
var FillConfig = function(canvas, config) {
    // Get options
    if (config === undefined) config = {};
    if (config.options === undefined) config.options = {};
    var options = config.options;
    // Fill options
    options.responsive = false;
    options.maintainAspectRatio = false;
    if (!options.hasOwnProperty("devicePixelRatio")) options.devicePixelRatio = 1;
    // Get animation config
    var noAnimation = false;
    if (options.animation === undefined) options.animation = {};
    else if (options.animation === false) {
        noAnimation = true;
        options.animation = {};
    }
    var animationConfig = options.animation;
    // Fill animation config
    if (noAnimation) animationConfig.duration = 0;
    var onProgress = animationConfig.onProgress;
    animationConfig.onProgress = function(animation) {
        if (onProgress) onProgress(animation);
        canvas.needRedraw();
    };
    var onComplete = animationConfig.onComplete;
    animationConfig.onComplete = function(animation) {
        if (onComplete) onComplete(animation);
        canvas.needRedraw();
    };
    return config;
};
exports.default = SetChart;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iISXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChartDataset = function(datasetIndex) {
    if (this.chart === undefined) return undefined;
    if (typeof datasetIndex === "string") {
        var datasets = this.chart.data.datasets, dataset;
        for(var i = 0, cnt = datasets.length; i < cnt; i++){
            dataset = datasets[i];
            if (dataset.label === datasetIndex) return dataset;
        }
    } else return this.chart.data.datasets[datasetIndex];
    return undefined;
};
exports.default = GetChartDataset;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"645yO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChartData = function(datasetIndex, dataIndex) {
    var dataset = this.getChartDataset(datasetIndex);
    if (dataset === undefined) return undefined;
    if (typeof dataIndex === "string") {
        var labels = this.chart.data.labels;
        dataIndex = labels.indexOf(dataIndex);
        if (dataIndex === -1) return undefined;
    }
    return dataset.data[dataIndex];
};
exports.default = GetChartData;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hfSZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetChartData = function(datasetIndex, dataIndex, value) {
    if (this.chart === undefined) return this;
    var dataset = this.getChartDataset(datasetIndex);
    if (typeof dataIndex === "string") {
        var labels = this.chart.data.labels;
        dataIndex = labels.indexOf(dataIndex);
        if (dataIndex === -1) return this;
    }
    dataset.data[dataIndex] = value;
    return this;
};
exports.default = SetChartData;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bNq3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var UpdateChart = function() {
    if (this.chart === undefined) return this;
    this.chart.update();
    return this;
};
exports.default = UpdateChart;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ieff5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("./Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("container", function(x, y, width, height, children) {
    var gameObject = new (0, _containerJsDefault.default)(this.scene, x, y, width, height, children);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Container", (0, _containerJsDefault.default));
exports.default = (0, _containerJsDefault.default);

},{"./Container.js":"4qgeZ","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3C33e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("./Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("sizer", function(x, y, minWidth, minHeight, orientation, config) {
    var gameObject = new (0, _sizerJsDefault.default)(this.scene, x, y, minWidth, minHeight, orientation, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Sizer", (0, _sizerJsDefault.default));
exports.default = (0, _sizerJsDefault.default);

},{"./Sizer.js":"ayu5S","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ayu5S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSizerJs = require("../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getChildrenProportionJs = require("./GetChildrenProportion.js");
var _getChildrenProportionJsDefault = parcelHelpers.interopDefault(_getChildrenProportionJs);
var _getOrientationModeJs = require("../utils/GetOrientationMode.js");
var _getOrientationModeJsDefault = parcelHelpers.interopDefault(_getOrientationModeJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Sizer extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, orientation, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
            orientation = GetValue(config, "orientation", 0);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
            orientation = GetValue(config, "orientation", 0);
        } else if (IsPlainObject(orientation)) {
            config = orientation;
            orientation = GetValue(config, "orientation", 0);
        }
        if (orientation === undefined) orientation = 0;
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexSizer";
        this.sizerChildren = [];
        this.setOrientation(orientation);
        this.setItemSpacing(GetValue(config, "space.item", 0));
        this.setStartChildIndex(GetValue(config, "startChildIndex", 0));
        this.setRTL(GetValue(config, "rtl", false));
        this.addChildrenMap("items", this.sizerChildren);
    }
    setOrientation(orientation) {
        this.orientation = (0, _getOrientationModeJsDefault.default)(orientation);
        return this;
    }
    setItemSpacing(space) {
        this.space.item = space;
        return this;
    }
    setStartChildIndex(index) {
        this.startChildIndex = index;
        return this;
    }
    setRTL(enable) {
        if (enable === undefined) enable = true;
        this.rtl = enable;
        return this;
    }
    get childrenProportion() {
        if (this._childrenProportion === undefined) this._childrenProportion = (0, _getChildrenProportionJsDefault.default).call(this);
        return this._childrenProportion;
    }
}
Object.assign(Sizer.prototype, (0, _methodsJsDefault.default));
exports.default = Sizer;

},{"../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"l7aQI","./GetChildrenProportion.js":"4edrk","../utils/GetOrientationMode.js":"hyCKa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7aQI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getExpandedChildWidthJs = require("./GetExpandedChildWidth.js");
var _getExpandedChildWidthJsDefault = parcelHelpers.interopDefault(_getExpandedChildWidthJs);
var _getExpandedChildHeightJs = require("./GetExpandedChildHeight.js");
var _getExpandedChildHeightJsDefault = parcelHelpers.interopDefault(_getExpandedChildHeightJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _preLayoutJs = require("./PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _postResolveSizeJs = require("./PostResolveSize.js");
var _postResolveSizeJsDefault = parcelHelpers.interopDefault(_postResolveSizeJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _resolveWidthJs = require("./ResolveWidth.js");
var _resolveWidthJsDefault = parcelHelpers.interopDefault(_resolveWidthJs);
var _resolveHeightJs = require("./ResolveHeight.js");
var _resolveHeightJsDefault = parcelHelpers.interopDefault(_resolveHeightJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _alignMethodsJs = require("./AlignMethods.js");
var _alignMethodsJsDefault = parcelHelpers.interopDefault(_alignMethodsJs);
var _proportionMethodsJs = require("./ProportionMethods.js");
var _proportionMethodsJsDefault = parcelHelpers.interopDefault(_proportionMethodsJs);
var _expandMethodsJs = require("./ExpandMethods.js");
var _expandMethodsJsDefault = parcelHelpers.interopDefault(_expandMethodsJs);
var methods = {
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    getExpandedChildWidth: (0, _getExpandedChildWidthJsDefault.default),
    getExpandedChildHeight: (0, _getExpandedChildHeightJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    preLayout: (0, _preLayoutJsDefault.default),
    postResolveSize: (0, _postResolveSizeJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default),
    resolveWidth: (0, _resolveWidthJsDefault.default),
    resolveHeight: (0, _resolveHeightJsDefault.default)
};
Object.assign(methods, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default), (0, _alignMethodsJsDefault.default), (0, _proportionMethodsJsDefault.default), (0, _expandMethodsJsDefault.default));
exports.default = methods;

},{"./GetChildrenWidth.js":"7GjdQ","./GetChildrenHeight.js":"iYs1W","./GetExpandedChildWidth.js":"bgBeo","./GetExpandedChildHeight.js":"bjPNL","./GetChildrenSizers.js":"3FZ91","./PreLayout.js":"dISIZ","./PostResolveSize.js":"1p9Ci","./LayoutChildren.js":"2ViDY","./ResolveWidth.js":"1ycCY","./ResolveHeight.js":"5As1k","./AddChildMethods.js":"5H2VT","./RemoveChildMethods.js":"aWjJb","./AlignMethods.js":"87euc","./ProportionMethods.js":"eKkA9","./ExpandMethods.js":"3r92N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GjdQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenWidth = function(minimumMode) {
    if (this.rexSizer.hidden) return 0;
    if (minimumMode === undefined) minimumMode = true;
    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childWidth;
    if (this.orientation === 0) {
        // Get summation of minimum width
        var itemSpace = this.space.item;
        var isFirstChild = true;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            child = children[i];
            if (child.rexSizer.hidden) continue;
            if (child.rexSizer.proportion === 0 || minimumMode) childWidth = this.getChildWidth(child);
            else childWidth = 0;
            padding = child.rexSizer.padding;
            childWidth += padding.left + padding.right;
            if (isFirstChild) isFirstChild = false;
            else childWidth += itemSpace;
            result += childWidth;
        }
    } else // Get maximun width
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (!child.hasOwnProperty("rexSizer")) continue;
        if (child.rexSizer.hidden) continue;
        padding = child.rexSizer.padding;
        childWidth = this.getChildWidth(child) + padding.left + padding.right;
        result = Math.max(childWidth, result);
    }
    return result + this.space.left + this.space.right;
};
exports.default = GetChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iYs1W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenHeight = function(minimumMode) {
    if (this.rexSizer.hidden) return 0;
    if (minimumMode === undefined) minimumMode = true;
    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childHeight;
    if (this.orientation === 0) // Get maximun height
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.rexSizer.hidden) continue;
        padding = child.rexSizer.padding;
        childHeight = this.getChildHeight(child) + padding.top + padding.bottom;
        result = Math.max(childHeight, result);
    }
    else {
        // Get summation of minimum height
        var itemSpace = this.space.item;
        var isFirstChild = true;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            child = children[i];
            if (!child.hasOwnProperty("rexSizer")) continue;
            if (child.rexSizer.hidden) continue;
            if (child.rexSizer.proportion === 0 || minimumMode) childHeight = this.getChildHeight(child);
            else childHeight = 0;
            padding = child.rexSizer.padding;
            childHeight += padding.top + padding.bottom;
            if (isFirstChild) isFirstChild = false;
            else childHeight += itemSpace;
            result += childHeight;
        }
    }
    return result + this.space.top + this.space.bottom;
};
exports.default = GetChildrenHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgBeo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildWidth = function(child, parentWidth) {
    if (parentWidth === undefined) parentWidth = this.width;
    var childWidth;
    var childConfig = child.rexSizer;
    var padding = childConfig.padding;
    if (this.orientation === 0) {
        if (childConfig.proportion > 0 && this.proportionLength > 0) childWidth = childConfig.proportion * this.proportionLength;
    } else if (childConfig.expand) {
        var innerWidth = parentWidth - this.space.left - this.space.right;
        childWidth = innerWidth - padding.left - padding.right;
    }
    return childWidth;
};
exports.default = GetExpandedChildWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjPNL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildHeight = function(child, parentHeight) {
    if (parentHeight === undefined) parentHeight = this.height;
    var childHeight;
    var childConfig = child.rexSizer;
    var padding = childConfig.padding;
    if (this.orientation === 0) {
        if (childConfig.expand) {
            var innerHeight = parentHeight - this.space.top - this.space.bottom;
            childHeight = innerHeight - padding.top - padding.bottom;
        }
    } else if (childConfig.proportion > 0 && this.proportionLength > 0) childHeight = childConfig.proportion * this.proportionLength;
    return childHeight;
};
exports.default = GetExpandedChildHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3FZ91":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    var children = this.sizerChildren, child;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.isRexSizer) out.push(child);
    }
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dISIZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preLayoutJs = require("../basesizer/PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var PreLayout = function() {
    // Resize child to 1x1 for ratio-fit 
    this.hasRatioFitChild = false;
    var children = this.sizerChildren;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.rexSizer.hidden) continue;
        if (!child.rexSizer.fitRatio) continue;
        (0, _resizeGameObjectJsDefault.default)(child, 1, 1);
        this.hasRatioFitChild = true;
    }
    this._childrenProportion = undefined;
    this.proportionLength = undefined;
    (0, _preLayoutJsDefault.default).call(this);
    return this;
};
exports.default = PreLayout;

},{"../basesizer/PreLayout.js":"1Q5WG","../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1p9Ci":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var PostResolveSize = function(width, height) {
    if (this.hasRatioFitChild) {
        // Resize child for ratio-fit 
        var innerHeight, innerWidth;
        if (this.orientation === 0) innerHeight = height - this.getInnerPadding("top") - this.getInnerPadding("bottom");
        else innerWidth = width - this.getInnerPadding("left") - this.getInnerPadding("right");
        var children = this.sizerChildren, childWidth, childHeight;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            var child = children[i];
            if (child.rexSizer.hidden) continue;
            var fitRatio = child.rexSizer.fitRatio;
            if (!fitRatio) continue;
            if (this.orientation === 0) {
                childHeight = innerHeight - this.getChildOuterPadding(child, "top") - this.getChildOuterPadding(child, "bottom");
                childWidth = childHeight * fitRatio;
            } else {
                childWidth = innerHeight - this.getChildOuterPadding(child, "top") - this.getChildOuterPadding(child, "bottom");
                childHeight = childWidth / fitRatio;
            }
            (0, _resizeGameObjectJsDefault.default)(child, childWidth, childHeight);
            if (child.isRexSizer) child.setMinSize(childWidth, childHeight);
        }
        this.proportionLength = undefined;
        this._childrenWidth = undefined;
        this.resolveWidth(width, true);
    }
};
exports.default = PostResolveSize;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ViDY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _preLayoutChildJs = require("../basesizer/utils/PreLayoutChild.js");
var _preLayoutChildJsDefault = parcelHelpers.interopDefault(_preLayoutChildJs);
var _layoutChildJs = require("../basesizer/utils/LayoutChild.js");
var _layoutChildJsDefault = parcelHelpers.interopDefault(_layoutChildJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var _checkSizeJs = require("../basesizer/utils/CheckSize.js");
var _checkSizeJsDefault = parcelHelpers.interopDefault(_checkSizeJs);
const Wrap = Phaser.Math.Wrap;
var LayoutChildren = function() {
    var children = this.sizerChildren;
    var child, childConfig, padding;
    var startX = this.innerLeft, startY = this.innerTop;
    var innerWidth = this.innerWidth;
    var innerHeight = this.innerHeight;
    var itemX = startX, itemY = startY;
    var x, y, width, height; // Align zone
    var childWidth, childHeight;
    var childIndex, startChildIndex = this.startChildIndex;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        if (startChildIndex === 0) childIndex = i;
        else childIndex = Wrap(i + startChildIndex, 0, cnt);
        if (this.rtl) childIndex = cnt - childIndex - 1;
        child = children[childIndex];
        if (child.rexSizer.hidden) continue;
        childConfig = child.rexSizer;
        padding = childConfig.padding;
        (0, _preLayoutChildJsDefault.default).call(this, child);
        // Set size
        if (child.isRexSpace) {
            childWidth = 0;
            childHeight = 0;
        } else {
            childWidth = this.getExpandedChildWidth(child);
            childHeight = this.getExpandedChildHeight(child);
        }
        if (child.isRexSizer) {
            child.runLayout(this, childWidth, childHeight);
            (0, _checkSizeJsDefault.default)(child, this);
        } else (0, _resizeGameObjectJsDefault.default)(child, childWidth, childHeight);
        if (childWidth === undefined) childWidth = (0, _getDisplaySizeJs.GetDisplayWidth)(child);
        if (childHeight === undefined) childHeight = (0, _getDisplaySizeJs.GetDisplayHeight)(child);
        // Set position
        if (this.orientation === 0) {
            x = itemX + padding.left;
            if (childConfig.proportion === 0 || this.proportionLength === 0) width = childWidth;
            else width = childConfig.proportion * this.proportionLength;
            y = itemY + padding.top;
            height = innerHeight - padding.top - padding.bottom;
        } else {
            x = itemX + padding.left;
            width = innerWidth - padding.left - padding.right;
            y = itemY + padding.top;
            if (childConfig.proportion === 0 || this.proportionLength === 0) height = childHeight;
            else height = childConfig.proportion * this.proportionLength;
        }
        (0, _layoutChildJsDefault.default).call(this, child, x, y, width, height, childConfig.align);
        if (this.orientation === 0) itemX += width + padding.left + padding.right + this.space.item;
        else itemY += height + padding.top + padding.bottom + this.space.item;
    }
};
exports.default = LayoutChildren;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","../basesizer/utils/PreLayoutChild.js":"67npU","../basesizer/utils/LayoutChild.js":"gUIXa","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","../basesizer/utils/CheckSize.js":"czd4p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ycCY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveWidthJs = require("../basesizer/ResolveWidth.js");
var _resolveWidthJsDefault = parcelHelpers.interopDefault(_resolveWidthJs);
var ResolveWidth = function(width) {
    var width = (0, _resolveWidthJsDefault.default).call(this, width);
    // Calculate proportionLength
    if (this.proportionLength === undefined && this.orientation === 0) {
        var remainder = width - this.childrenWidth;
        if (remainder > 0) {
            remainder = width - this.getChildrenWidth(false);
            this.proportionLength = remainder / this.childrenProportion;
        } else {
            this.proportionLength = 0;
            remainder;
        }
    }
    return width;
};
exports.default = ResolveWidth;

},{"../basesizer/ResolveWidth.js":"kxpW2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5As1k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveHeightJs = require("../basesizer/ResolveHeight.js");
var _resolveHeightJsDefault = parcelHelpers.interopDefault(_resolveHeightJs);
var ResolveHeight = function(height) {
    var height = (0, _resolveHeightJsDefault.default).call(this, height);
    // Get proportionLength
    if (this.proportionLength === undefined && this.orientation === 1) {
        var remainder = height - this.childrenHeight;
        if (remainder > 0) {
            remainder = height - this.getChildrenHeight(false);
            this.proportionLength = remainder / this.childrenProportion;
        } else {
            this.proportionLength = 0;
            remainder;
        }
    }
    return height;
};
exports.default = ResolveHeight;

},{"../basesizer/ResolveHeight.js":"gy3cB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5H2VT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildJs = require("../basesizer/utils/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _getBoundsConfigJs = require("../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
var _spaceJs = require("../space/Space.js");
var _spaceJsDefault = parcelHelpers.interopDefault(_spaceJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var _getNearestChildIndexJs = require("./GetNearestChildIndex.js");
var _getNearestChildIndexJsDefault = parcelHelpers.interopDefault(_getNearestChildIndexJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
const PROPORTIONMODE = {
    min: 0,
    full: -1
};
var Add = function(gameObject, proportion, align, paddingConfig, expand, childKey, index, minWidth, minHeight, fitRatio) {
    (0, _addChildJsDefault.default).call(this, gameObject);
    var isRexSpace = gameObject.isRexSpace;
    var proportionType = typeof proportion;
    if (proportion === null) return this;
    else if (proportionType === "number") ;
    else if (proportionType === "string") proportion = PROPORTIONMODE[proportion];
    else if (IsPlainObject(proportion)) {
        var config = proportion;
        proportion = GetValue(config, "proportion", undefined);
        align = GetValue(config, "align", ALIGN_CENTER);
        paddingConfig = GetValue(config, "padding", 0);
        expand = GetValue(config, "expand", false);
        childKey = GetValue(config, "key", undefined);
        index = GetValue(config, "index", undefined);
        if (!gameObject.isRexSizer) {
            minWidth = GetValue(config, "minWidth", undefined);
            minHeight = GetValue(config, "minHeight", undefined);
        }
        fitRatio = GetValue(config, "fitRatio", 0); // width/height
    }
    if (typeof align === "string") align = (0, _alignConstJsDefault.default)[align];
    if (proportion === undefined) proportion = isRexSpace ? 1 : 0;
    if (align === undefined) align = ALIGN_CENTER;
    if (paddingConfig === undefined) paddingConfig = 0;
    if (expand === undefined) expand = false;
    if (minWidth === undefined) {
        if (isRexSpace) minWidth = 0;
        else if (!gameObject.isRexSizer) minWidth = gameObject._minWidth;
    }
    if (minHeight === undefined) {
        if (isRexSpace) minHeight = 0;
        else if (!gameObject.isRexSizer) minHeight = gameObject._minHeight;
    }
    if (fitRatio === undefined) fitRatio = 0;
    var config = this.getSizerConfig(gameObject);
    config.proportion = proportion;
    config.align = align;
    config.padding = (0, _getBoundsConfigJsDefault.default)(paddingConfig);
    config.expand = expand;
    config.fitRatio = proportion === 0 ? fitRatio : 0;
    if (index === undefined || index >= this.sizerChildren.length) this.sizerChildren.push(gameObject);
    else this.sizerChildren.splice(index, 0, gameObject);
    if (!gameObject.isRexSizer) {
        if (proportion > 0) {
            if (this.orientation === 0) // minWidth is still undefined, uses current display width
            gameObject.minWidth = minWidth === undefined ? (0, _getDisplaySizeJs.GetDisplayWidth)(gameObject) : minWidth;
            else // minHeight is still undefined, uses current display height
            gameObject.minHeight = minHeight === undefined ? (0, _getDisplaySizeJs.GetDisplayHeight)(gameObject) : minHeight;
        }
        if (expand) {
            if (this.orientation === 0) // Might have minHeight value, or still undefined
            gameObject.minHeight = minHeight;
            else // Might have minWidth value, or still undefined
            gameObject.minWidth = minWidth;
        }
    }
    if (childKey !== undefined) this.addChildrenMap(childKey, gameObject);
    return this;
};
exports.default = {
    add: Add,
    addSpace (proportion) {
        this.insertSpace(undefined, proportion);
        return this;
    },
    insertSpace (index, proportion) {
        if (proportion === undefined) proportion = 1;
        Add.call(this, new (0, _spaceJsDefault.default)(this.scene), {
            proportion: proportion,
            minWidth: 0,
            minHeight: 0,
            index: index
        });
        // No problem if sizer.add is override
        return this;
    },
    insert (index, gameObject, proportion, align, paddingConfig, expand, childKey, minSize) {
        if (IsPlainObject(proportion)) proportion.index = index;
        Add.call(this, gameObject, proportion, align, paddingConfig, expand, childKey, index, minSize);
        // No problem if sizer.add is override
        return this;
    },
    insertAtPosition (x, y, gameObject, proportion, align, paddingConfig, expand, childKey, minSize) {
        var index = (0, _getNearestChildIndexJsDefault.default).call(this, x, y);
        if (index === -1) index = undefined;
        this.insert(index, gameObject, proportion, align, paddingConfig, expand, childKey, minSize);
        return this;
    }
};

},{"../basesizer/utils/AddChild.js":"7fpET","../utils/GetBoundsConfig.js":"arnT9","../utils/AlignConst.js":"8t4Uc","../space/Space.js":"32lgn","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","./GetNearestChildIndex.js":"keulb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32lgn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Zone = Phaser.GameObjects.Zone;
class Space extends Zone {
    constructor(scene){
        super(scene, 0, 0, 1, 1);
        // Don't add Zone into scene
        this.isRexSpace = true;
    }
}
exports.default = Space;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"keulb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetNearestChildIndex = function(x, y) {
    var children = this.sizerChildren;
    if (children.length === 0) return -1;
    var nearestIndex = -1, minDistance = Infinity;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        var distance;
        if (this.orientation === 0) distance = Math.abs(child.left - x);
        else distance = Math.abs(child.top - y);
        if (minDistance > distance) {
            minDistance = distance;
            nearestIndex = i;
        }
    }
    // Check right bound of last child
    var child = children[children.length - 1];
    var distance;
    if (this.orientation === 0) distance = Math.abs(child.right - x);
    else distance = Math.abs(child.bottom - y);
    if (minDistance > distance) {
        minDistance = distance;
        nearestIndex = i + 1;
    }
    return nearestIndex;
};
exports.default = GetNearestChildIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWjJb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeChildJs = require("../basesizer/utils/RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _clearChildrenJs = require("../basesizer/utils/ClearChildren.js");
var _clearChildrenJsDefault = parcelHelpers.interopDefault(_clearChildrenJs);
const RemoveItem = Phaser.Utils.Array.Remove;
exports.default = {
    remove (gameObject, destroyChild) {
        if (this.getParentSizer(gameObject) !== this) return this;
        RemoveItem(this.sizerChildren, gameObject);
        (0, _removeChildJsDefault.default).call(this, gameObject, destroyChild);
        return this;
    },
    removeAll (destroyChild) {
        for(var i = this.sizerChildren.length - 1; i >= 0; i--)this.remove(this.sizerChildren[i], destroyChild);
        return this;
    },
    clear (destroyChild) {
        this.sizerChildren.length = 0;
        (0, _clearChildrenJsDefault.default).call(this, destroyChild);
        return this;
    }
};

},{"../basesizer/utils/RemoveChild.js":"95KmV","../basesizer/utils/ClearChildren.js":"cD93u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87euc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
exports.default = {
    getChildAlign (gameObject) {
        return this.getSizerConfig(gameObject).align;
    },
    setChildAlign (gameObject, align) {
        if (typeof align === "string") align = (0, _alignConstJsDefault.default)[align];
        this.getSizerConfig(gameObject).align = align;
        return this;
    }
};

},{"../utils/AlignConst.js":"8t4Uc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKkA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getChildProportion (gameObject) {
        return this.getSizerConfig(gameObject).proportion;
    },
    setChildProportion (gameObject, proportion) {
        this.getSizerConfig(gameObject).proportion = proportion;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3r92N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getChildExpand (gameObject) {
        return this.getSizerConfig(gameObject).expand;
    },
    setChildExpand (gameObject, expand) {
        this.getSizerConfig(gameObject).expand = expand;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4edrk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenProportion = function() {
    var result = 0;
    var children = this.sizerChildren;
    var child, proportion;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.rexSizer.hidden) continue;
        proportion = child.rexSizer.proportion;
        if (proportion > 0) result += proportion;
    }
    return result;
};
exports.default = GetChildrenProportion;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyCKa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OrientationMode = {
    x: 0,
    h: 0,
    horizontal: 0,
    "left-to-right": 0,
    y: 1,
    v: 1,
    vertical: 1,
    "top-to-bottom": 1
};
var GetOrientationMode = function(orientation) {
    if (typeof orientation === "string") orientation = OrientationMode[orientation];
    return orientation;
};
exports.default = GetOrientationMode;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeGQ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridSizerJs = require("./GridSizer.js");
var _gridSizerJsDefault = parcelHelpers.interopDefault(_gridSizerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("gridSizer", function(x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion, config) {
    var gameObject = new (0, _gridSizerJsDefault.default)(this.scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.GridSizer", (0, _gridSizerJsDefault.default));
exports.default = (0, _gridSizerJsDefault.default);

},{"./GridSizer.js":"b382f","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b382f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSizerJs = require("../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getTotalColumnProportionsJs = require("./GetTotalColumnProportions.js");
var _getTotalColumnProportionsJsDefault = parcelHelpers.interopDefault(_getTotalColumnProportionsJs);
var _getTotalRowProportionsJs = require("./GetTotalRowProportions.js");
var _getTotalRowProportionsJsDefault = parcelHelpers.interopDefault(_getTotalRowProportionsJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class GridSizer extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportions, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
            columnCount = GetValue(config, "column", config.col || 0);
            rowCount = GetValue(config, "row", 0);
            columnProportions = GetValue(config, "columnProportions", 0);
            rowProportions = GetValue(config, "rowProportions", 0);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
            columnCount = GetValue(config, "column", config.col || 0);
            rowCount = GetValue(config, "row", 0);
            columnProportions = GetValue(config, "columnProportions", 0);
            rowProportions = GetValue(config, "rowProportions", 0);
        } else if (IsPlainObject(columnCount)) {
            config = columnCount;
            columnCount = GetValue(config, "column", config.col || 0);
            rowCount = GetValue(config, "row", 0);
            columnProportions = GetValue(config, "columnProportions", 0);
            rowProportions = GetValue(config, "rowProportions", 0);
        } else if (IsPlainObject(columnProportions)) {
            config = columnProportions;
            columnProportions = GetValue(config, "columnProportions", 0);
            rowProportions = GetValue(config, "rowProportions", 0);
        }
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexGridSizer";
        this.resetGrid(columnCount, rowCount, columnProportions, rowProportions, GetValue(config, "space", undefined));
        this.setIndentLeft(GetValue(config, "space.indentLeftOdd", 0), GetValue(config, "space.indentLeftEven", 0));
        this.setIndentTop(GetValue(config, "space.indentTopOdd", 0), GetValue(config, "space.indentTopEven", 0));
        this.addChildrenMap("items", this.sizerChildren);
        var createCellContainerCallback = GetValue(config, "createCellContainerCallback");
        if (createCellContainerCallback) {
            for(var y = 0, ycnt = this.rowCount; y < ycnt; y++)for(var x = 0, xcnt = this.columnCount; x < xcnt; x++){
                var addConfig = {
                    column: x,
                    row: y
                };
                var child = createCellContainerCallback(scene, x, y, addConfig);
                if (child) this.add(child, addConfig);
            }
        }
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        // More free resources
        this.columnProportions = undefined;
        this.rowProportions = undefined;
        this.columnWidth = undefined;
        this.rowHeight = undefined;
    }
    setIndentLeft(odd, even) {
        this.space.indentLeftOdd = odd;
        this.space.indentLeftEven = even;
        return this;
    }
    setIndentTop(odd, even) {
        this.space.indentTopOdd = odd;
        this.space.indentTopEven = even;
        return this;
    }
    setColumnProportion(columnIndex, proportion) {
        if (columnIndex >= this.columnProportions.length) return this;
        this.columnProportions[columnIndex] = proportion;
        return this;
    }
    setRowProportion(rowIndex, proportion) {
        if (rowIndex >= this.rowProportions.length) return this;
        this.rowProportions[rowIndex] = proportion;
        return this;
    }
    get totalColumnProportions() {
        if (this._totalColumnProportions === undefined) this._totalColumnProportions = (0, _getTotalColumnProportionsJsDefault.default).call(this);
        return this._totalColumnProportions;
    }
    get totalRowProportions() {
        if (this._totalRowProportions === undefined) this._totalRowProportions = (0, _getTotalRowProportionsJsDefault.default).call(this);
        return this._totalRowProportions;
    }
    getChildAt(columnIndex, rowIndex) {
        return this.sizerChildren[rowIndex * this.columnCount + columnIndex];
    }
    childToGridIndex(child, out) {
        if (!child) return null;
        var index = this.sizerChildren.indexOf(child);
        if (index === -1) return null;
        if (out === undefined) out = {};
        out.x = index % this.columnCount;
        out.y = Math.floor(index / this.columnCount);
        return out;
    }
    getColumnWidth(columnIndex) {
        var colProportion = this.columnProportions[columnIndex];
        var colWidth = colProportion === 0 ? this.columnWidth[columnIndex] : colProportion * this.proportionWidthLength;
        return colWidth;
    }
    getRowHeight(rowIndex) {
        var rowProportion = this.rowProportions[rowIndex];
        var rowHeight = rowProportion === 0 ? this.rowHeight[rowIndex] : rowProportion * this.proportionHeightLength;
        return rowHeight;
    }
}
Object.assign(GridSizer.prototype, (0, _methodsJsDefault.default));
exports.default = GridSizer;

},{"../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"aSNMr","./GetTotalColumnProportions.js":"9hV4t","./GetTotalRowProportions.js":"hGG5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aSNMr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getExpandedChildWidthJs = require("./GetExpandedChildWidth.js");
var _getExpandedChildWidthJsDefault = parcelHelpers.interopDefault(_getExpandedChildWidthJs);
var _getExpandedChildHeightJs = require("./GetExpandedChildHeight.js");
var _getExpandedChildHeightJsDefault = parcelHelpers.interopDefault(_getExpandedChildHeightJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _preLayoutJs = require("./PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _resolveWidthJs = require("./ResolveWidth.js");
var _resolveWidthJsDefault = parcelHelpers.interopDefault(_resolveWidthJs);
var _resolveHeightJs = require("./ResolveHeight.js");
var _resolveHeightJsDefault = parcelHelpers.interopDefault(_resolveHeightJs);
var _resolveChildrenWidthJs = require("./ResolveChildrenWidth.js");
var _resolveChildrenWidthJsDefault = parcelHelpers.interopDefault(_resolveChildrenWidthJs);
var _runWidthWrapJs = require("./RunWidthWrap.js");
var _runWidthWrapJsDefault = parcelHelpers.interopDefault(_runWidthWrapJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _resetGridJs = require("./ResetGrid.js");
var _resetGridJsDefault = parcelHelpers.interopDefault(_resetGridJs);
var _insertEmptyRowJs = require("./InsertEmptyRow.js");
var _insertEmptyColumnJs = require("./InsertEmptyColumn.js");
var methods = {
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    getExpandedChildWidth: (0, _getExpandedChildWidthJsDefault.default),
    getExpandedChildHeight: (0, _getExpandedChildHeightJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    preLayout: (0, _preLayoutJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default),
    resolveWidth: (0, _resolveWidthJsDefault.default),
    resolveHeight: (0, _resolveHeightJsDefault.default),
    resolveChildrenWidth: (0, _resolveChildrenWidthJsDefault.default),
    runWidthWrap: (0, _runWidthWrapJsDefault.default),
    resetGrid: (0, _resetGridJsDefault.default),
    inseryEmptyRow: (0, _insertEmptyRowJs.InseryEmptyRow),
    addEmptyRow: (0, _insertEmptyRowJs.AddEmptyRow),
    insertEmptyColumn: (0, _insertEmptyColumnJs.InsertEmptyColumn),
    addEmptyColumn: (0, _insertEmptyColumnJs.AddEmptyColumn)
};
Object.assign(methods, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default));
exports.default = methods;

},{"./GetChildrenWidth.js":"vw2cz","./GetChildrenHeight.js":"aR8SY","./GetExpandedChildWidth.js":"8jTdc","./GetExpandedChildHeight.js":"enP4Z","./GetChildrenSizers.js":"cs1ef","./PreLayout.js":"aCWNV","./LayoutChildren.js":"aWUHd","./ResolveWidth.js":"dKwhl","./ResolveHeight.js":"d0Ec1","./ResolveChildrenWidth.js":"iPlUw","./RunWidthWrap.js":"ge1mf","./AddChildMethods.js":"jMMWq","./RemoveChildMethods.js":"joE4a","./ResetGrid.js":"9dhQz","./InsertEmptyRow.js":"beU3U","./InsertEmptyColumn.js":"flM1T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vw2cz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sumJs = require("../../../plugins/utils/math/Sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var GetChildrenWidth = function(minimumMode) {
    if (this.rexSizer.hidden) return 0;
    if (minimumMode === undefined) minimumMode = true;
    var result = 0, columnWidth;
    var children = this.sizerChildren;
    var child, padding, childWidth, proportion;
    for(var i = 0; i < this.columnCount; i++){
        proportion = this.columnProportions[i];
        columnWidth = 0;
        if (proportion === 0 || minimumMode) {
            for(var j = 0; j < this.rowCount; j++){
                child = children[j * this.columnCount + i];
                if (!child) continue;
                if (child.rexSizer.hidden) continue;
                padding = child.rexSizer.padding;
                childWidth = this.getChildWidth(child) + padding.left + padding.right;
                columnWidth = Math.max(columnWidth, childWidth);
            }
            result += columnWidth;
        }
        // else,(proportion > 0) : columnWidth is 0
        this.columnWidth[i] = columnWidth;
    }
    var space = this.space;
    var indentLeft = Math.max(space.indentLeftOdd, space.indentLeftEven);
    return result + (0, _sumJsDefault.default)(space.left, indentLeft, ...space.column, space.right);
};
exports.default = GetChildrenWidth;

},{"../../../plugins/utils/math/Sum.js":"8Kvok","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Kvok":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Sum = function() {
    return Array.prototype.reduce.call(arguments, Add, 0);
};
var Add = function(a, b) {
    return a + b;
};
exports.default = Sum;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aR8SY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var _sumJs = require("../../../plugins/utils/math/Sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var GetChildrenHeight = function(minimumMode) {
    if (this.rexSizer.hidden) return 0;
    if (minimumMode === undefined) minimumMode = true;
    var result = 0, rowHeight;
    var children = this.sizerChildren;
    var child, padding, childHeight, proportion;
    for(var i = 0; i < this.rowCount; i++){
        proportion = this.rowProportions[i];
        rowHeight = 0;
        if (proportion === 0 || minimumMode) {
            for(var j = 0; j < this.columnCount; j++){
                child = children[i * this.columnCount + j];
                if (!child) continue;
                if (child.rexSizer.hidden) continue;
                childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty("minHeight") ? child.minHeight : (0, _getDisplaySizeJs.GetDisplayHeight)(child);
                padding = child.rexSizer.padding;
                childHeight += padding.top + padding.bottom;
                rowHeight = Math.max(rowHeight, childHeight);
            }
            result += rowHeight;
        }
        // else,(proportion > 0) : rowHeight is 0
        this.rowHeight[i] = rowHeight;
    }
    var space = this.space;
    var indentTop = Math.max(space.indentTopOdd, space.indentTopEven);
    return result + (0, _sumJsDefault.default)(space.top, indentTop, ...space.row, space.bottom);
};
exports.default = GetChildrenHeight;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","../../../plugins/utils/math/Sum.js":"8Kvok","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8jTdc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildWidth = function(child, colWidth) {
    var childWidth;
    var childConfig = child.rexSizer;
    if (childConfig.expand) {
        var padding = childConfig.padding;
        childWidth = colWidth - padding.left - padding.right;
    }
    return childWidth;
};
exports.default = GetExpandedChildWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enP4Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetExpandedChildHeight = function(child, rowHeight) {
    var childHeight;
    var childConfig = child.rexSizer;
    if (childConfig.expand) {
        var padding = childConfig.padding;
        childHeight = rowHeight - padding.top - padding.bottom;
    }
    return childHeight;
};
exports.default = GetExpandedChildHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cs1ef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    var children = this.sizerChildren, child;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child && child.isRexSizer) out.push(child);
    }
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCWNV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preLayoutJs = require("../basesizer/PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var PreLayout = function() {
    this._totalColumnProportions = undefined;
    this._totalRowProportions = undefined;
    this.proportionWidthLength = undefined;
    this.proportionHeightLength = undefined;
    (0, _preLayoutJsDefault.default).call(this);
    return this;
};
exports.default = PreLayout;

},{"../basesizer/PreLayout.js":"1Q5WG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWUHd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _preLayoutChildJs = require("../basesizer/utils/PreLayoutChild.js");
var _preLayoutChildJsDefault = parcelHelpers.interopDefault(_preLayoutChildJs);
var _layoutChildJs = require("../basesizer/utils/LayoutChild.js");
var _layoutChildJsDefault = parcelHelpers.interopDefault(_layoutChildJs);
var _checkSizeJs = require("../basesizer/utils/CheckSize.js");
var _checkSizeJsDefault = parcelHelpers.interopDefault(_checkSizeJs);
var LayoutChildren = function() {
    var child, childConfig, padding;
    var startX = this.innerLeft, startY = this.innerTop;
    var itemX, itemY = startY;
    var x, y, width, height; // Align zone
    var childWidth, childHeight;
    // Layout grid children
    var columnSpace = this.space.column, rowSpace = this.space.row, indentLeftOdd = this.space.indentLeftOdd, indentLeftEven = this.space.indentLeftEven, indentTopOdd = this.space.indentTopOdd, indentTopEven = this.space.indentTopEven;
    var colWidth, rowHeight;
    var indentLeft, indentTop;
    for(var rowIndex = 0; rowIndex < this.rowCount; rowIndex++){
        rowHeight = this.getRowHeight(rowIndex);
        indentLeft = rowIndex % 2 ? indentLeftEven : indentLeftOdd;
        itemX = startX + indentLeft;
        for(var columnIndex = 0; columnIndex < this.columnCount; columnIndex++){
            colWidth = this.getColumnWidth(columnIndex);
            child = this.getChildAt(columnIndex, rowIndex);
            if (!child || child.rexSizer.hidden) {
                itemX += colWidth + columnSpace[columnIndex];
                continue;
            }
            (0, _preLayoutChildJsDefault.default).call(this, child);
            childWidth = this.getExpandedChildWidth(child, colWidth);
            childHeight = this.getExpandedChildHeight(child, rowHeight);
            if (child.isRexSizer) {
                child.runLayout(this, childWidth, childHeight);
                (0, _checkSizeJsDefault.default)(child, this);
            } else (0, _resizeGameObjectJsDefault.default)(child, childWidth, childHeight);
            childConfig = child.rexSizer;
            padding = childConfig.padding;
            x = itemX + padding.left;
            width = colWidth - padding.left - padding.right;
            indentTop = columnIndex % 2 ? indentTopEven : indentTopOdd;
            y = itemY + indentTop + padding.top;
            height = rowHeight - padding.top - padding.bottom;
            (0, _layoutChildJsDefault.default).call(this, child, x, y, width, height, childConfig.align);
            itemX += colWidth + columnSpace[columnIndex];
        }
        itemY += rowHeight + rowSpace[rowIndex];
    }
};
exports.default = LayoutChildren;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","../basesizer/utils/PreLayoutChild.js":"67npU","../basesizer/utils/LayoutChild.js":"gUIXa","../basesizer/utils/CheckSize.js":"czd4p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dKwhl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveWidthJs = require("../basesizer/ResolveWidth.js");
var _resolveWidthJsDefault = parcelHelpers.interopDefault(_resolveWidthJs);
var ResolveWidth = function(width) {
    var width = (0, _resolveWidthJsDefault.default).call(this, width);
    // Get proportionLength
    if (this.proportionWidthLength === undefined) {
        var totalColumnProportions = this.totalColumnProportions;
        if (totalColumnProportions > 0) {
            var remainder = width - this.getChildrenWidth(false);
            if (remainder >= 0) this.proportionWidthLength = remainder / totalColumnProportions;
        } else this.proportionWidthLength = 0;
    }
    return width;
};
exports.default = ResolveWidth;

},{"../basesizer/ResolveWidth.js":"kxpW2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0Ec1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveHeightJs = require("../basesizer/ResolveHeight.js");
var _resolveHeightJsDefault = parcelHelpers.interopDefault(_resolveHeightJs);
var ResolveHeight = function(height) {
    var height = (0, _resolveHeightJsDefault.default).call(this, height);
    // Get proportionLength    
    if (this.proportionHeightLength === undefined) {
        var totalRowProportions = this.totalRowProportions;
        if (totalRowProportions > 0) {
            var remainder = height - this.getChildrenHeight(false);
            if (remainder >= 0) this.proportionHeightLength = remainder / totalRowProportions;
        } else this.proportionHeightLength = 0;
    }
    return height;
};
exports.default = ResolveHeight;

},{"../basesizer/ResolveHeight.js":"gy3cB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPlUw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResolveChildrenWidth = function(parentWidth) {
    // Resolve width of sizer children
    var child, childWidth;
    var colWidth;
    for(var i in this.sizerChildren){
        child = this.sizerChildren[i];
        if (child && child.isRexSizer && !child.ignoreLayout) {
            colWidth = this.getColumnWidth(parseInt(i) % this.columnCount);
            childWidth = this.getExpandedChildWidth(child, colWidth);
            childWidth = child.resolveWidth(childWidth);
            child.resolveChildrenWidth(childWidth);
        }
    }
};
exports.default = ResolveChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ge1mf":[function(require,module,exports) {
// Default method
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RunWidthWrap = function(width) {
    var child, childWidth;
    var colWidth;
    for(var i in this.sizerChildren){
        child = this.sizerChildren[i];
        if (!child || child.isRexSizer && child.ignoreLayout || !child.runWidthWrap) continue;
        colWidth = this.getColumnWidth(parseInt(i) % this.columnCount);
        childWidth = this.getExpandedChildWidth(child, colWidth);
        if (child.isRexSizer) childWidth = child.resolveWidth(childWidth);
        child.runWidthWrap(childWidth);
    }
    return this;
};
exports.default = RunWidthWrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMMWq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildJs = require("../basesizer/utils/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _getBoundsConfigJs = require("../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var GetEmptyCellIndex = function(columnIndex, rowIndex, cells, columnCount, rowCount) {
    if (typeof columnIndex === "number" || typeof rowIndex === "number") {
        if (columnIndex === undefined) {
            var idx;
            for(var i = 0; i < columnCount; i++){
                idx = rowIndex * columnCount + i;
                if (!cells[idx]) return idx;
            }
        } else if (rowIndex === undefined) {
            var idx;
            for(var i = 0; i < rowCount; i++){
                idx = i * columnCount + columnIndex;
                if (!cells[idx]) return idx;
            }
        } else {
            var idx = rowIndex * columnCount + columnIndex;
            if (!cells[idx]) return idx;
        }
    } else if (rowIndex === true) {
        var idx;
        for(var i = 0; i < columnCount; i++)for(var j = 0; j < rowCount; j++){
            idx = j * columnCount + i;
            if (!cells[idx]) return idx;
        }
    } else for(var i = 0, cnt = cells.length; i < cnt; i++){
        if (!cells[i]) return i;
    }
    return null;
};
var Add = function(gameObject, columnIndex, rowIndex, align, paddingConfig, expand, childKey) {
    (0, _addChildJsDefault.default).call(this, gameObject);
    if (IsPlainObject(columnIndex)) {
        var config = columnIndex;
        columnIndex = GetValue(config, "column", undefined);
        rowIndex = GetValue(config, "row", undefined);
        align = GetValue(config, "align", ALIGN_CENTER);
        paddingConfig = GetValue(config, "padding", 0);
        expand = GetValue(config, "expand", false);
        childKey = GetValue(config, "key", undefined);
    }
    // Get insert index
    var itemIndex = GetEmptyCellIndex(columnIndex, rowIndex, this.sizerChildren, this.columnCount, this.rowCount);
    if (itemIndex === null) {
        // Specific index mode
        if (typeof columnIndex === "number" && typeof rowIndex === "number") return this;
        if (rowIndex === true || typeof rowIndex === "number") this.addEmptyColumn();
        else this.addEmptyRow();
        // Get insert index again
        itemIndex = GetEmptyCellIndex(columnIndex, rowIndex, this.sizerChildren, this.columnCount, this.rowCount);
    }
    if (typeof align === "string") align = (0, _alignConstJsDefault.default)[align];
    if (align === undefined) align = ALIGN_CENTER;
    if (paddingConfig === undefined) paddingConfig = 0;
    if (expand === undefined) expand = true;
    var config = this.getSizerConfig(gameObject);
    config.align = align;
    config.padding = (0, _getBoundsConfigJsDefault.default)(paddingConfig);
    config.expand = expand;
    this.sizerChildren[itemIndex] = gameObject;
    if (childKey !== undefined) this.addChildrenMap(childKey, gameObject);
    return this;
};
exports.default = {
    add: Add
};

},{"../basesizer/utils/AddChild.js":"7fpET","../utils/GetBoundsConfig.js":"arnT9","../utils/AlignConst.js":"8t4Uc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joE4a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeChildJs = require("../basesizer/utils/RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _clearChildrenJs = require("../basesizer/utils/ClearChildren.js");
var _clearChildrenJsDefault = parcelHelpers.interopDefault(_clearChildrenJs);
var _fillJs = require("../../../plugins/utils/array/Fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
exports.default = {
    remove (gameObject, destroyChild) {
        if (this.getParentSizer(gameObject) !== this) return this;
        var idx = this.sizerChildren.indexOf(gameObject);
        if (idx !== -1) this.sizerChildren[idx] = null;
        (0, _removeChildJsDefault.default).call(this, gameObject, destroyChild);
        return this;
    },
    removeAt (columnIndex, rowIndex, destroyChild) {
        var child = this.getChildAt(columnIndex, rowIndex);
        if (child) this.remove(child, destroyChild);
        return this;
    },
    removeAll (destroyChild) {
        for(var i = this.sizerChildren.length - 1; i >= 0; i--){
            var child = this.sizerChildren[i];
            if (!child) continue;
            this.remove(child, destroyChild);
        }
        return this;
    },
    clear (destroyChild) {
        (0, _fillJsDefault.default)(this.sizerChildren, null);
        (0, _clearChildrenJsDefault.default).call(this, destroyChild);
        return this;
    }
};

},{"../basesizer/utils/RemoveChild.js":"95KmV","../basesizer/utils/ClearChildren.js":"cD93u","../../../plugins/utils/array/Fill.js":"eDaqk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eDaqk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Fill = function(arr, value, startIdx, endIdx) {
    if (startIdx === undefined) startIdx = 0;
    if (endIdx === undefined) endIdx = arr.length - 1;
    for(var i = startIdx; i <= endIdx; i++)arr[i] = value;
    return arr;
};
exports.default = Fill;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9dhQz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fillJs = require("../../../plugins/utils/array/Fill.js");
var _fillJsDefault = parcelHelpers.interopDefault(_fillJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var ResetGrid = function(columnCount, rowCount, columnProportions, rowProportions, space) {
    if (columnProportions === undefined) columnProportions = 0;
    if (rowProportions === undefined) rowProportions = 0;
    this.columnCount = columnCount;
    this.rowCount = rowCount;
    this.gridCount = columnCount * rowCount;
    // children
    if (this.sizerChildren === undefined) this.sizerChildren = [];
    else this.removeAll();
    this.sizerChildren.length = columnCount * rowCount;
    (0, _fillJsDefault.default)(this.sizerChildren, null);
    // proportions
    this.columnProportions = [];
    this.columnProportions.length = columnCount;
    if (typeof columnProportions === "number") (0, _fillJsDefault.default)(this.columnProportions, columnProportions);
    else for(var i = 0; i < columnCount; i++)this.columnProportions[i] = columnProportions[i] || 0;
    this.rowProportions = [];
    this.rowProportions.length = rowCount;
    if (typeof rowProportions === "number") (0, _fillJsDefault.default)(this.rowProportions, rowProportions);
    else for(var i = 0; i < rowCount; i++)this.rowProportions[i] = rowProportions[i] || 0;
    // width & height
    this.columnWidth = [];
    this.columnWidth.length = columnCount;
    this.rowHeight = [];
    this.rowHeight.length = rowCount;
    // space
    this.space.column = [];
    this.space.column.length = columnCount - 1;
    var columnSpace = GetValue(space, "column", 0);
    if (typeof columnSpace === "number") (0, _fillJsDefault.default)(this.space.column, columnSpace);
    else for(var i = 0, cnt = this.space.column.length; i < cnt; i++)this.space.column[i] = columnSpace[i] || 0;
    this.space.row = [];
    this.space.row.length = rowCount - 1;
    var rowSpace = GetValue(space, "row", 0);
    if (typeof rowSpace === "number") (0, _fillJsDefault.default)(this.space.row, rowSpace);
    else for(var i = 0, cnt = this.space.row.length; i < cnt; i++)this.space.row[i] = rowSpace[i] || 0;
    return this;
};
exports.default = ResetGrid;

},{"../../../plugins/utils/array/Fill.js":"eDaqk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"beU3U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InseryEmptyRow", ()=>InseryEmptyRow);
parcelHelpers.export(exports, "AddEmptyRow", ()=>AddEmptyRow);
var InseryEmptyRow = function(rowIndex, proportion, space) {
    if (proportion === undefined) proportion = this.rowProportions[0] || 0;
    if (space === undefined) space = this.space.row[0] || 0;
    this.rowCount += 1;
    this.gridCount += this.columnCount;
    var args = [
        rowIndex * this.columnCount,
        0
    ];
    for(var i = 0; i < this.columnCount; i++)args.push(null);
    this.sizerChildren.splice.apply(this.sizerChildren, args);
    this.rowProportions.push(proportion);
    this.rowHeight.length += 1; // this.rowHeight will be recalculated when layout()    
    this.space.row.splice(rowIndex, 0, space);
    return this;
};
var AddEmptyRow = function(proportion, space) {
    InseryEmptyRow.call(this, this.rowCount, proportion, space);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"flM1T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InsertEmptyColumn", ()=>InsertEmptyColumn);
parcelHelpers.export(exports, "AddEmptyColumn", ()=>AddEmptyColumn);
var InsertEmptyColumn = function(colIndex, proportion, space) {
    if (proportion === undefined) proportion = this.columnProportions[0] || 0;
    if (space === undefined) space = this.space.column[0] || 0;
    this.columnCount += 1;
    this.gridCount += this.rowCount;
    for(var i = this.rowCount - 1; i >= 0; i--){
        var insertIndex = i * this.columnCount + colIndex;
        this.sizerChildren.splice(insertIndex, 0, null);
    }
    this.columnProportions.push(proportion);
    this.columnWidth.length += 1; // this.columnWidth will be recalculated when layout()    
    this.space.column.splice(colIndex, 0, space);
    return this;
};
var AddEmptyColumn = function(proportion, space) {
    InsertEmptyColumn.call(this, this.columnCount, proportion, space);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hV4t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetTotalColumnProportions = function() {
    var result = 0, proportion;
    for(var i = 0; i < this.columnCount; i++){
        proportion = this.columnProportions[i];
        if (proportion > 0) result += proportion;
    }
    return result;
};
exports.default = GetTotalColumnProportions;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGG5A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetTotalRowProportions = function() {
    var result = 0, proportion;
    for(var i = 0; i < this.rowCount; i++){
        proportion = this.rowProportions[i];
        if (proportion > 0) result += proportion;
    }
    return result;
};
exports.default = GetTotalRowProportions;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dg8gT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fixWidthSizerJs = require("./FixWidthSizer.js");
var _fixWidthSizerJsDefault = parcelHelpers.interopDefault(_fixWidthSizerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fixWidthSizer", function(x, y, minWidth, minHeight, config) {
    var gameObject = new (0, _fixWidthSizerJsDefault.default)(this.scene, x, y, minWidth, minHeight, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FixWidthSizer", (0, _fixWidthSizerJsDefault.default));
exports.default = (0, _fixWidthSizerJsDefault.default);

},{"./FixWidthSizer.js":"fiEyN","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiEyN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSizerJs = require("../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getOrientationModeJs = require("../utils/GetOrientationMode.js");
var _getOrientationModeJsDefault = parcelHelpers.interopDefault(_getOrientationModeJs);
var _getMaxChildWidthJs = require("./GetMaxChildWidth.js");
var _getMaxChildWidthJsDefault = parcelHelpers.interopDefault(_getMaxChildWidthJs);
var _getMaxChildHeightJs = require("./GetMaxChildHeight.js");
var _getMaxChildHeightJsDefault = parcelHelpers.interopDefault(_getMaxChildHeightJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class FixWidthSizer extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexFixWidthSizer";
        this.sizerChildren = [];
        this.setOrientation(GetValue(config, "orientation", 0));
        this.setItemSpacing(GetValue(config, "space.item", 0));
        this.setLineSpacing(GetValue(config, "space.line", 0));
        this.setIntentLeft(GetValue(config, "space.indentLeftOdd", 0), GetValue(config, "space.indentLeftEven", 0));
        this.setIntentTop(GetValue(config, "space.indentTopOdd", 0), GetValue(config, "space.indentTopEven", 0));
        this.setAlign(GetValue(config, "align", 0));
        this.setJustifyPercentage(GetValue(config, "justifyPercentage", 0.25));
        this.setRTL(GetValue(config, "rtl", false));
        this.addChildrenMap("items", this.sizerChildren);
    }
    setOrientation(orientation) {
        this.orientation = (0, _getOrientationModeJsDefault.default)(orientation);
        return this;
    }
    setItemSpacing(space) {
        this.space.item = space;
        return this;
    }
    setLineSpacing(space) {
        this.space.line = space;
        return this;
    }
    setIntentLeft(odd, even) {
        this.space.indentLeftOdd = odd;
        this.space.indentLeftEven = even;
        return this;
    }
    setIntentTop(odd, even) {
        this.space.indentTopOdd = odd;
        this.space.indentTopEven = even;
        return this;
    }
    setAlign(align) {
        if (typeof align === "string") align = ALIGN[align];
        this.align = align;
        return this;
    }
    setJustifyPercentage(value) {
        this.justifyPercentage = value;
        return this;
    }
    setRTL(enabled) {
        if (enabled === undefined) enabled = true;
        this.rtl = enabled;
        return this;
    }
    get maxChildWidth() {
        if (this._maxChildWidth === undefined) this._maxChildWidth = (0, _getMaxChildWidthJsDefault.default).call(this);
        return this._maxChildWidth;
    }
    get maxChildHeight() {
        if (this._maxChildHeight === undefined) this._maxChildHeight = (0, _getMaxChildHeightJsDefault.default).call(this);
        return this._maxChildHeight;
    }
}
const ALIGN = {
    left: 0,
    top: 0,
    right: 1,
    bottom: 1,
    center: 2,
    justify: 3,
    "justify-left": 3,
    "justify-top": 3,
    "justify-right": 4,
    "justify-bottom": 4,
    "justify-center": 5
};
Object.assign(FixWidthSizer.prototype, (0, _methodsJsDefault.default));
exports.default = FixWidthSizer;

},{"../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"bZjsz","../utils/GetOrientationMode.js":"hyCKa","./GetMaxChildWidth.js":"ffVsj","./GetMaxChildHeight.js":"bhN2h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZjsz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _preLayoutJs = require("./PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _runWidthWrapJs = require("./RunWidthWrap.js");
var _runWidthWrapJsDefault = parcelHelpers.interopDefault(_runWidthWrapJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var methods = {
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    preLayout: (0, _preLayoutJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default),
    runWidthWrap: (0, _runWidthWrapJsDefault.default)
};
Object.assign(methods, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default));
exports.default = methods;

},{"./GetChildrenWidth.js":"cmKtK","./GetChildrenHeight.js":"cD908","./GetChildrenSizers.js":"gVVjd","./PreLayout.js":"fsPaW","./LayoutChildren.js":"5rwKO","./RunWidthWrap.js":"4o7Go","./AddChildMethods.js":"bFOOQ","./RemoveChildMethods.js":"dKST3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmKtK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenWidth = function() {
    if (this.rexSizer.hidden) return 0;
    // Before RunChildrenWrap
    return this.maxChildWidth + this.space.left + this.space.right;
};
exports.default = GetChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cD908":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenHeight = function() {
    if (this.rexSizer.hidden) return 0;
    // After RunChildrenWrap
    return this.widthWrapResult.height + this.space.top + this.space.bottom;
};
exports.default = GetChildrenHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVVjd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    var children = this.sizerChildren, child;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child === "\n") continue;
        if (child.isRexSizer) out.push(child);
    }
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fsPaW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preLayoutJs = require("../basesizer/PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var PreLayout = function() {
    this._maxChildWidth = undefined;
    this._maxChildHeight = undefined;
    (0, _preLayoutJsDefault.default).call(this);
    return this;
};
exports.default = PreLayout;

},{"../basesizer/PreLayout.js":"1Q5WG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5rwKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preLayoutChildJs = require("../basesizer/utils/PreLayoutChild.js");
var _preLayoutChildJsDefault = parcelHelpers.interopDefault(_preLayoutChildJs);
var _layoutChildJs = require("../basesizer/utils/LayoutChild.js");
var _layoutChildJsDefault = parcelHelpers.interopDefault(_layoutChildJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var LayoutChildren = function() {
    var innerLineWidth = this.innerWidth;
    var justifyPercentage = this.justifyPercentage;
    var itemSpace = this.space.item, lineSpace = this.space.line, indentLeftOdd = this.space.indentLeftOdd, indentLeftEven = this.space.indentLeftEven, indentTopOdd = this.space.indentTopOdd, indentTopEven = this.space.indentTopEven;
    var child, childConfig, padding, justifySpace = 0, indentLeft, indentTop;
    var startX = this.innerLeft, startY = this.innerTop;
    var x, y, width, height; // Align zone
    var lines = this.widthWrapResult.lines;
    var line, lineChlidren, remainderLineWidth;
    var itemX, itemY = startY;
    for(var i = 0, icnt = lines.length; i < icnt; i++){
        // Layout this line
        line = lines[i];
        lineChlidren = line.children;
        if (this.rtl) lineChlidren.reverse();
        indentLeft = i % 2 ? indentLeftEven : indentLeftOdd;
        itemX = startX + indentLeft;
        remainderLineWidth = innerLineWidth - line.width;
        switch(this.align){
            case 0:
                break;
            case 1:
                itemX += remainderLineWidth;
                break;
            case 2:
                itemX += remainderLineWidth / 2;
                break;
            case 3:
                justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
                break;
            case 4:
                justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
                if (justifySpace === 0) // Align right
                itemX += remainderLineWidth;
                break;
            case 5:
                justifySpace = GetJustifySpace(innerLineWidth, remainderLineWidth, justifyPercentage, lineChlidren.length);
                if (justifySpace === 0) // Align center
                itemX += remainderLineWidth / 2;
                break;
        }
        var isFirstChild = true;
        for(var j = 0, jcnt = lineChlidren.length; j < jcnt; j++){
            child = lineChlidren[j];
            if (child.rexSizer.hidden) continue;
            childConfig = child.rexSizer;
            padding = childConfig.padding;
            (0, _preLayoutChildJsDefault.default).call(this, child);
            x = itemX + padding.left;
            if (isFirstChild) isFirstChild = false;
            else x += itemSpace;
            indentTop = j % 2 ? indentTopEven : indentTopOdd;
            y = itemY + indentTop + padding.top;
            width = (0, _getDisplaySizeJs.GetDisplayWidth)(child);
            height = (0, _getDisplaySizeJs.GetDisplayHeight)(child);
            itemX = x + width + padding.right + justifySpace;
            (0, _layoutChildJsDefault.default).call(this, child, x, y, width, height, childConfig.align);
        }
        itemY += line.height + lineSpace;
    }
};
var GetJustifySpace = function(total, remainder, justifyPercentage, childCount) {
    return remainder / total <= justifyPercentage ? remainder / (childCount - 1) : 0;
};
exports.default = LayoutChildren;

},{"../basesizer/utils/PreLayoutChild.js":"67npU","../basesizer/utils/LayoutChild.js":"gUIXa","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4o7Go":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runWidthWrapJs = require("../basesizer/RunWidthWrap.js");
var _runWidthWrapJsDefault = parcelHelpers.interopDefault(_runWidthWrapJs);
var _runChildrenWrapJs = require("./RunChildrenWrap.js");
var _runChildrenWrapJsDefault = parcelHelpers.interopDefault(_runChildrenWrapJs);
var RunWidthWrap = function(width) {
    var innerWidth = width - this.space.left - this.space.right;
    this.widthWrapResult = (0, _runChildrenWrapJsDefault.default).call(this, innerWidth, this.widthWrapResult);
    (0, _runWidthWrapJsDefault.default).call(this, width);
};
exports.default = RunWidthWrap;

},{"../basesizer/RunWidthWrap.js":"bTYQn","./RunChildrenWrap.js":"frtpS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"frtpS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var RunChildrenWrap = function(lineWidth, out) {
    if (out === undefined) out = {
        lines: [],
        width: 0,
        height: 0
    };
    else {
        out.lines.length = 0;
        out.width = 0;
        out.height = 0;
    }
    var children = this.sizerChildren;
    var itemSpace = this.space.item, lineSpace = this.space.line, indentLeftOdd = this.space.indentLeftOdd, indentLeftEven = this.space.indentLeftEven, indentTopOdd = this.space.indentTopOdd, indentTopEven = this.space.indentTopEven;
    var child, childWidth, childHeight, remainder = 0, indentLeft;
    var lines = out.lines, lastLine = undefined, newLine;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child === "\n") {
            child = undefined;
            childWidth = 0;
            newLine = true;
        } else {
            if (child.rexSizer.hidden) continue;
            if (child.isRexSizer) child.layout(); // Use original size
            childWidth = GetChildWidth(child);
            newLine = remainder < childWidth || lastLine === undefined;
        }
        // New line
        if (newLine) {
            if (lastLine) {
                lastLine.width = lineWidth - (remainder + itemSpace);
                out.width = Math.max(out.width, lastLine.width);
                out.height += lastLine.height + lineSpace;
            }
            lastLine = {
                children: [],
                // width: 0,
                height: 0
            };
            lines.push(lastLine);
            var indentLeft = lines.length % 2 ? indentLeftOdd : indentLeftEven;
            remainder = lineWidth - indentLeft;
        }
        remainder -= childWidth + itemSpace;
        if (child) {
            lastLine.children.push(child);
            childHeight = GeChildHeight(child);
            lastLine.height = Math.max(lastLine.height, childHeight);
        }
    }
    if (lastLine) {
        lastLine.width = lineWidth - (remainder + itemSpace);
        out.width = Math.max(out.width, lastLine.width);
        out.height += lastLine.height;
    }
    out.height += Math.max(indentTopOdd, indentTopEven);
    return out;
};
var GetChildWidth = function(child) {
    var padding = child.rexSizer.padding;
    return (0, _getDisplaySizeJs.GetDisplayWidth)(child) + padding.left + padding.right;
};
var GeChildHeight = function(child) {
    var padding = child.rexSizer.padding;
    return (0, _getDisplaySizeJs.GetDisplayHeight)(child) + padding.top + padding.bottom;
};
exports.default = RunChildrenWrap;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFOOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildJs = require("../basesizer/utils/AddChild.js");
var _addChildJsDefault = parcelHelpers.interopDefault(_addChildJs);
var _getBoundsConfigJs = require("../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var _getNearestChildIndexJs = require("./GetNearestChildIndex.js");
var _getNearestChildIndexJsDefault = parcelHelpers.interopDefault(_getNearestChildIndexJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;
var Add = function(gameObject, paddingConfig, childKey, index) {
    if (gameObject === "\n") {
        this.addNewLine();
        return this;
    }
    (0, _addChildJsDefault.default).call(this, gameObject);
    if (IsPlainObject(paddingConfig)) {
        var config = paddingConfig;
        paddingConfig = GetValue(config, "padding", 0);
        childKey = GetValue(config, "key", undefined);
        index = GetValue(config, "index", undefined);
    }
    if (paddingConfig === undefined) paddingConfig = 0;
    var config = this.getSizerConfig(gameObject);
    config.align = ALIGN_CENTER;
    config.padding = (0, _getBoundsConfigJsDefault.default)(paddingConfig);
    if (index === undefined || index >= this.sizerChildren.length) this.sizerChildren.push(gameObject);
    else this.sizerChildren.splice(index, 0, gameObject);
    if (childKey !== undefined) this.addChildrenMap(childKey, gameObject);
    return this;
};
exports.default = {
    add (gameObject, paddingConfig, childKey) {
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i], paddingConfig);
        } else Add.call(this, gameObject, paddingConfig, childKey);
        return this;
    },
    addNewLine () {
        this.sizerChildren.push("\n");
        return this;
    },
    insert (index, gameObject, paddingConfig, childKey) {
        Add.call(this, gameObject, paddingConfig, childKey, index);
        return this;
    },
    insertAtPosition (x, y, gameObject, paddingConfig, childKey) {
        var index = (0, _getNearestChildIndexJsDefault.default).call(this, x, y);
        if (index === -1) index = undefined;
        this.insert(index, gameObject, paddingConfig, childKey);
        return this;
    }
};

},{"../basesizer/utils/AddChild.js":"7fpET","../utils/GetBoundsConfig.js":"arnT9","../../../plugins/utils/object/IsArray.js":"2k7ne","./GetNearestChildIndex.js":"bTJ7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTJ7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const DistanceBetween = Phaser.Math.Distance.Between;
var GetNearestChildIndex = function(x, y) {
    var children = this.sizerChildren;
    if (children.length === 0) return -1;
    var nearestIndex = -1, minDistance = Infinity;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        // position is not at this line
        if (Math.abs(child.centerY - y) > child.height / 2) continue;
        // Check left bound
        var distance = DistanceBetween(child.left, child.centerY, x, y);
        if (minDistance > distance) {
            minDistance = distance;
            nearestIndex = i;
        }
        // Is last child of this line
        var nextChild = children[i + 1];
        if (nextChild && nextChild.y === child.y) continue;
        var distance = DistanceBetween(child.right, child.centerY, x, y);
        if (minDistance > distance) {
            minDistance = distance;
            nearestIndex = i + 1;
        }
    }
    return nearestIndex;
};
exports.default = GetNearestChildIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dKST3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _removeChildJs = require("../basesizer/utils/RemoveChild.js");
var _removeChildJsDefault = parcelHelpers.interopDefault(_removeChildJs);
var _clearChildrenJs = require("../basesizer/utils/ClearChildren.js");
var _clearChildrenJsDefault = parcelHelpers.interopDefault(_clearChildrenJs);
const RemoveItem = Phaser.Utils.Array.Remove;
exports.default = {
    remove (gameObject, destroyChild) {
        if (this.getParentSizer(gameObject) !== this) return this;
        RemoveItem(this.sizerChildren, gameObject);
        (0, _removeChildJsDefault.default).call(this, gameObject, destroyChild);
        return this;
    },
    removeAll (destroyChild) {
        for(var i = this.sizerChildren.length - 1; i >= 0; i--)this.remove(this.sizerChildren[i], destroyChild);
        return this;
    },
    clear (destroyChild) {
        this.sizerChildren.length = 0;
        (0, _clearChildrenJsDefault.default).call(this, destroyChild);
        return this;
    }
};

},{"../basesizer/utils/RemoveChild.js":"95KmV","../basesizer/utils/ClearChildren.js":"cD93u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffVsj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetMaxChildWidth = function(children) {
    if (children === undefined) children = this.sizerChildren;
    var result = 0;
    var child, childWidth;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child === "\n") continue;
        childWidth = this.getChildWidth(child);
        result = Math.max(childWidth, result);
    }
    return result;
};
exports.default = GetMaxChildWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bhN2h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
var GetMaxChildHeight = function(children) {
    if (children === undefined) children = this.sizerChildren;
    var result = 0;
    var child, childHeight;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child === "\n") continue;
        childHeight = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty("minHeight") ? child.minHeight : (0, _getDisplaySizeJs.GetDisplayHeight)(child);
        result = Math.max(childHeight, result);
    }
    return result;
};
exports.default = GetMaxChildHeight;

},{"../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aydNB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("./OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("overlapSizer", function(x, y, minWidth, minHeight, config) {
    var gameObject = new (0, _overlapSizerJsDefault.default)(this.scene, x, y, minWidth, minHeight, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.OverlapSizer", (0, _overlapSizerJsDefault.default));
exports.default = (0, _overlapSizerJsDefault.default);

},{"./OverlapSizer.js":"gx7j1","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fP17b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _spaceJs = require("./Space.js");
var _spaceJsDefault = parcelHelpers.interopDefault(_spaceJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("space", function() {
    var gameObject = new (0, _spaceJsDefault.default)(this.scene);
    // Don't add Zone into scene
    // this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Space", (0, _spaceJsDefault.default));
exports.default = (0, _spaceJsDefault.default);

},{"./Space.js":"32lgn","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmy1D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("./Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("label", function(config) {
    var gameObject = new (0, _labelJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Label", (0, _labelJsDefault.default));
exports.default = (0, _labelJsDefault.default);

},{"./Label.js":"bHkqt","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bHkqt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _addChildMaskJs = require("../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Label extends (0, _baseJsDefault.default) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexLabel";
        // Add elements
        var background = GetValue(config, "background", undefined);
        var icon = GetValue(config, "icon", undefined);
        var iconMask = GetValue(config, "iconMask", undefined);
        var text = GetValue(config, "text", undefined);
        var action = GetValue(config, "action", undefined);
        var actionMask = GetValue(config, "actionMask", undefined);
        // Align
        var align = GetValue(config, "align", undefined); // undefined/left/top: no space
        if (background) this.addBackground(background);
        // Add space
        if (align === "right" || align === "bottom" || align === "center") this.addSpace();
        if (icon) {
            var padding;
            if (this.orientation === 0) {
                if (text || action) padding = {
                    right: GetValue(config, "space.icon", 0),
                    top: GetValue(config, "space.iconTop", 0),
                    bottom: GetValue(config, "space.iconBottom", 0)
                };
            } else if (text || action) padding = {
                bottom: GetValue(config, "space.icon", 0),
                left: GetValue(config, "space.iconLeft", 0),
                right: GetValue(config, "space.iconRight", 0)
            };
            var fitRatio = GetValue(config, "squareFitIcon", false) ? 1 : 0;
            this.add(icon, {
                proportion: 0,
                padding: padding,
                fitRatio: fitRatio
            });
            if (iconMask) iconMask = (0, _addChildMaskJsDefault.default).call(this, icon, icon, 1); // Circle mask
            if (!fitRatio) {
                var iconSize = GetValue(config, "iconSize", undefined);
                this.setIconSize(GetValue(config, "iconWidth", iconSize), GetValue(config, "iconHeight", iconSize));
            }
        }
        if (text) {
            var textSpace = GetValue(config, "space.text", 0);
            var expandTextWidth = GetValue(config, "expandTextWidth", false);
            var expandTextHeight = GetValue(config, "expandTextHeight", false);
            var proportion, padding, expand;
            if (this.orientation === 0) {
                proportion = expandTextWidth ? 1 : 0;
                if (action) padding = {
                    right: textSpace
                };
                expand = expandTextHeight;
            } else {
                proportion = expandTextHeight ? 1 : 0;
                if (action) padding = {
                    bottom: textSpace
                };
                expand = expandTextWidth;
            }
            this.add(text, {
                proportion: proportion,
                expand: expand,
                padding: padding
            });
        }
        if (action) {
            var padding;
            if (this.orientation === 0) padding = {
                top: GetValue(config, "space.actionTop", 0),
                bottom: GetValue(config, "space.actionBottom", 0)
            };
            else padding = {
                left: GetValue(config, "space.actionLeft", 0),
                right: GetValue(config, "space.actionRight", 0)
            };
            var fitRatio = GetValue(config, "squareFitAction", false) ? 1 : 0;
            this.add(action, {
                proportion: 0,
                padding: padding,
                fitRatio: fitRatio
            });
            if (actionMask) actionMask = (0, _addChildMaskJsDefault.default).call(this, action, action, 1); // Circle mask
            if (!fitRatio) {
                var actionSize = GetValue(config, "actionSize");
                this.setActionSize(GetValue(config, "actionWidth", actionSize), GetValue(config, "actionHeight", actionSize));
            }
        }
        // Add space
        if (align === "center") this.addSpace();
        this.addChildrenMap("background", background);
        this.addChildrenMap("icon", icon);
        this.addChildrenMap("iconMask", iconMask);
        this.addChildrenMap("text", text);
        this.addChildrenMap("action", action);
        this.addChildrenMap("actionMask", actionMask);
    }
}
exports.default = Label;

},{"./Base.js":"asGhH","../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"asGhH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _setDisplaySizeJs = require("../../../plugins/utils/size/SetDisplaySize.js");
var _setDisplaySizeJsDefault = parcelHelpers.interopDefault(_setDisplaySizeJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
class LabelBase extends (0, _sizerJsDefault.default) {
    /*
    Elements in childrenMap: 
    
    - background
    - icon, iconMask
    - text, 
    - action, actionMask
    */ // Access text game object
    get text() {
        var textObject = this.childrenMap.text;
        if (!textObject) return "";
        return textObject.text;
    }
    set text(value) {
        var textObject = this.childrenMap.text;
        if (!textObject) return;
        textObject.setText(value);
    }
    setText(value) {
        this.text = value;
        return this;
    }
    // Access icon game object
    setIconTexture(key, frame) {
        var imageObject = this.childrenMap.icon;
        if (!imageObject) return this;
        imageObject.setTexture(key, frame);
        if (this.iconWidth !== undefined) {
            (0, _setDisplaySizeJsDefault.default)(imageObject, this.iconWidth, this.iconHeight);
            this.resetChildScaleState(imageObject);
        }
        return this;
    }
    setTexture(key, frame) {
        this.setIconTexture(key, frame);
        return this;
    }
    setIconSize(width, height) {
        if (height === undefined) height = width;
        this.iconWidth = width;
        this.iconHeight = height;
        return this;
    }
    get texture() {
        var imageObject = this.childrenMap.icon;
        if (!imageObject) return undefined;
        return imageObject.texture;
    }
    get frame() {
        var imageObject = this.childrenMap.icon;
        if (!imageObject) return undefined;
        return imageObject.frame;
    }
    setActionTexture(key, frame) {
        var imageObject = this.childrenMap.action;
        if (imageObject === undefined) return this;
        imageObject.setTexture(key, frame);
        if (this.actionWidth !== undefined) {
            (0, _setDisplaySizeJsDefault.default)(imageObject, this.actionWidth, this.actionHeight);
            this.resetChildScaleState(imageObject);
        }
        return this;
    }
    get actionTexture() {
        var imageObject = this.childrenMap.action;
        if (!imageObject) return undefined;
        return imageObject.texture;
    }
    get actionFrame() {
        var imageObject = this.childrenMap.action;
        if (!imageObject) return undefined;
        return imageObject.frame;
    }
    setActionSize(width, height) {
        if (height === undefined) height = width;
        this.actionWidth = width;
        this.actionHeight = height;
        return this;
    }
    preLayout() {
        var icon = this.childrenMap.icon;
        if (icon && this.iconWidth !== undefined) (0, _setDisplaySizeJsDefault.default)(icon, this.iconWidth, this.iconHeight);
        var action = this.childrenMap.action;
        if (action && this.actionWidth !== undefined) (0, _setDisplaySizeJsDefault.default)(action, this.actionWidth, this.actionHeight);
        super.preLayout();
    }
    runLayout(parent, newWidth, newHeight) {
        if (this.ignoreLayout) return this;
        super.runLayout(parent, newWidth, newHeight);
        // Pin icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) {
            iconMask.setPosition();
            this.resetChildPositionState(iconMask);
        }
        // Pin action-mask to action game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) {
            actionMask.setPosition();
            this.resetChildPositionState(actionMask);
        }
        return this;
    }
    resize(width, height) {
        super.resize(width, height);
        // Resize icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) iconMask.resize();
        // Resize action-mask to icon game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) actionMask.resize();
        return this;
    }
}
Object.assign(LabelBase.prototype, (0, _methodsJsDefault.default));
exports.default = LabelBase;

},{"../sizer/Sizer.js":"ayu5S","../../../plugins/utils/size/SetDisplaySize.js":"XfqwP","./methods/Methods.js":"iJBm5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"XfqwP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetDisplaySize = function(gameObject, width, height) {
    if (!gameObject) return;
    var unknownWidth = width == null;
    var unknownHeight = height == null;
    if (unknownWidth && unknownHeight) return gameObject;
    if (!unknownWidth) gameObject.displayWidth = width;
    if (!unknownHeight) gameObject.displayHeight = height;
    if (unknownWidth) gameObject.scaleX = gameObject.scaleY;
    if (unknownHeight) gameObject.scaleY = gameObject.scaleX;
    return gameObject;
};
exports.default = SetDisplaySize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJBm5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appendTextJs = require("../../../../plugins/utils/text/AppendText.js");
var _appendTextJsDefault = parcelHelpers.interopDefault(_appendTextJs);
var _resetDisplayContentJs = require("./ResetDisplayContent.js");
var _resetDisplayContentJsDefault = parcelHelpers.interopDefault(_resetDisplayContentJs);
var methods = {
    appendText: (0, _appendTextJsDefault.default),
    resetDisplayContent: (0, _resetDisplayContentJsDefault.default)
};
exports.default = methods;

},{"../../../../plugins/utils/text/AppendText.js":"24uHz","./ResetDisplayContent.js":"j6je8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6je8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResetDisplayContent = function(config) {
    if (config === undefined) config = {};
    else if (typeof config === "string") config = {
        text: config
    };
    var text = config.text || "";
    this.setText(text);
    var iconGameObjct = this.childrenMap.icon;
    if (iconGameObjct) {
        if (!config.icon) this.hide(iconGameObjct);
        else this.show(iconGameObjct);
        var iconSize = config.iconSize;
        if (iconSize) {
            this.setChildDisplaySize(iconGameObjct, iconSize, iconSize);
            if (this.iconWidth !== undefined) this.setIconSize(iconSize);
        }
        this.setIconTexture(config.icon, config.iconFrame);
    }
    var actionGameObjct = this.childrenMap.action;
    if (actionGameObjct) {
        if (!config.action) this.hide(actionGameObjct);
        else this.show(actionGameObjct);
        var actionSize = config.actionSize;
        if (actionSize) {
            this.setChildDisplaySize(actionGameObjct, actionSize, actionSize);
            if (this.actionWidth !== undefined) this.setActionSize(actionSize);
        }
        this.setActionTexture(config.action, config.actionFrame);
    }
    return this;
};
exports.default = ResetDisplayContent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWrSF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _defaultMaskGraphicsJs = require("../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js");
var _defaultMaskGraphicsJsDefault = parcelHelpers.interopDefault(_defaultMaskGraphicsJs);
var AddChildMask = function(maskTarget, sizeTarget, shape, padding) {
    var maskGameObject = new (0, _defaultMaskGraphicsJsDefault.default)(sizeTarget, shape, padding); // A Graphics game object
    if (maskTarget && !maskTarget.isRexSizer) {
        var mask = maskGameObject.createGeometryMask();
        maskTarget.setMask(mask);
        this.once("destroy", function() {
            maskTarget.setMask();
            mask.destroy();
        });
    }
    this.pin(maskGameObject);
    return maskGameObject;
};
exports.default = AddChildMask;

},{"../../../../utils/mask/defaultmaskgraphics/DefaultMaskGraphics.js":"fnaTq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltuqA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _simpleLabelJs = require("./SimpleLabel.js");
var _simpleLabelJsDefault = parcelHelpers.interopDefault(_simpleLabelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("simpleLabel", function(config, creators) {
    var gameObject = new (0, _simpleLabelJsDefault.default)(this.scene, config, creators);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.SimpleLabel", (0, _simpleLabelJsDefault.default));
exports.default = (0, _simpleLabelJsDefault.default);

},{"./SimpleLabel.js":"jR2zM","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jR2zM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("../label/Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _buildLabelConfigJs = require("../utils/build/BuildLabelConfig.js");
var _buildLabelConfigJsDefault = parcelHelpers.interopDefault(_buildLabelConfigJs);
class SimpleLabel extends (0, _labelJsDefault.default) {
    constructor(scene, config, creators){
        config = (0, _buildLabelConfigJsDefault.default)(scene, config, creators);
        super(scene, config);
        this.type = "rexSimpleLabel";
    }
    setActiveState(enable) {
        var background = this.childrenMap.background;
        if (background && background.setActiveState) background.setActiveState(enable);
        return this;
    }
    setHoverState(enable) {
        var background = this.childrenMap.background;
        if (background && background.setHoverState) background.setHoverState(enable);
        return this;
    }
    setDisableState(enable) {
        var background = this.childrenMap.background;
        if (background && background.setDisableState) background.setDisableState(enable);
        return this;
    }
}
exports.default = SimpleLabel;

},{"../label/Label.js":"bHkqt","../utils/build/BuildLabelConfig.js":"fHIED","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHIED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepCloneJs = require("../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var _setValueJs = require("../../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
var _createBackgroundJs = require("./CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _createTextJs = require("./CreateText.js");
var _createTextJsDefault = parcelHelpers.interopDefault(_createTextJs);
var _wrapExpandTextJs = require("../wrapexpandtext/WrapExpandText.js");
var _wrapExpandTextJsDefault = parcelHelpers.interopDefault(_wrapExpandTextJs);
var _createImageJs = require("./CreateImage.js");
var _createImageJsDefault = parcelHelpers.interopDefault(_createImageJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var BuildLabelConfig = function(scene, config, creators) {
    config = config ? (0, _deepCloneJsDefault.default)(config) : {};
    var createBackground = GetValue(creators, "background", (0, _createBackgroundJsDefault.default));
    var createText = GetValue(creators, "text", (0, _createTextJsDefault.default));
    var createIcon = GetValue(creators, "icon", (0, _createImageJsDefault.default));
    var createAction = GetValue(creators, "action", (0, _createImageJsDefault.default));
    if (createBackground) config.background = createBackground(scene, config.background);
    else delete config.background;
    if (createText) {
        var wrapText = GetValue(config, "wrapText", false);
        if (wrapText) {
            if (wrapText === true) wrapText = "word";
            (0, _setValueJsDefault.default)(config, "text.wrap.mode", wrapText);
            config.expandTextWidth = true;
        }
        config.text = createText(scene, config.text);
        if (wrapText) config.text = (0, _wrapExpandTextJsDefault.default)(config.text);
    } else delete config.text;
    if (createIcon && config.icon !== null) config.icon = createIcon(scene, config.icon);
    else delete config.icon;
    if (createAction && config.action !== null) config.action = createAction(scene, config.action);
    else delete config.action;
    return config;
};
exports.default = BuildLabelConfig;

},{"../../../../plugins/utils/object/DeepClone.js":"7G9ja","../../../../plugins/utils/object/SetValue.js":"eUEYa","./CreateBackground.js":"aOfVE","./CreateText.js":"89iKQ","../wrapexpandtext/WrapExpandText.js":"7xNUi","./CreateImage.js":"fdzAG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aOfVE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _statesRoundRectangleJs = require("../../statesroundrectangle/StatesRoundRectangle.js");
var _statesRoundRectangleJsDefault = parcelHelpers.interopDefault(_statesRoundRectangleJs);
var _ninePatchJs = require("../../ninepatch/NinePatch.js");
var _ninePatchJsDefault = parcelHelpers.interopDefault(_ninePatchJs);
const PhaserImage = Phaser.GameObjects.Image;
const PhaserNineSlice = Phaser.GameObjects.NineSlice;
var CreateBackground = function(scene, config) {
    var gameObjectType;
    if (config) {
        if (config.hasOwnProperty("type")) gameObjectType = config.type;
        else {
            if (config.hasOwnProperty("leftWidth")) gameObjectType = "nineSlice";
            else if (config.hasOwnProperty("key")) gameObjectType = "image";
        }
    }
    var gameObject;
    switch(gameObjectType){
        case "image":
            gameObject = new PhaserImage(scene, 0, 0, config.key, config.frame);
            break;
        case "nineSlice":
            if (PhaserNineSlice && !config.hasOwnProperty("stretchMode")) gameObject = new PhaserNineSlice(scene, 0, 0, config.key, config.frame, 0, 0, config.leftWidth, config.rightWidth, config.topHeight, config.bottomHeight);
            else gameObject = new (0, _ninePatchJsDefault.default)(scene, config);
            break;
        default:
            gameObject = new (0, _statesRoundRectangleJsDefault.default)(scene, config);
            break;
    }
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateBackground;

},{"../../statesroundrectangle/StatesRoundRectangle.js":"7Wg8c","../../ninepatch/NinePatch.js":"aOTKM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"89iKQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bbcodeTextJs = require("../../bbcodetext/BBCodeText.js");
var _bbcodeTextJsDefault = parcelHelpers.interopDefault(_bbcodeTextJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const PhaserText = Phaser.GameObjects.Text;
const PhaserBitmapText = Phaser.GameObjects.BitmapText;
var CreateText = function(scene, config) {
    var type = GetValue(config, "$type");
    if (type === undefined) {
        if (!!GetValue(config, "key")) type = "bitmaptext";
    }
    var gameObject;
    switch(type){
        case "bitmaptext":
            var key = GetValue(config, "key");
            var size = GetValue(config, "size");
            if (size === undefined) size = GetValue(config, "fontSize");
            gameObject = new PhaserBitmapText(scene, 0, 0, key, "", size);
            var color = GetValue(config, "color");
            if (color !== undefined) gameObject.setTint(color);
            break;
        case "text":
            gameObject = new PhaserText(scene, 0, 0, "", config);
            break;
        default:
            gameObject = new (0, _bbcodeTextJsDefault.default)(scene, 0, 0, "", config);
            break;
    }
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateText;

},{"../../bbcodetext/BBCodeText.js":"kgOqo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xNUi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dynamicTextJs = require("../../dynamictext/DynamicText.js");
var _dynamicTextJsDefault = parcelHelpers.interopDefault(_dynamicTextJs);
var _isBitmapTextGameObjectJs = require("../../../../plugins/utils/bitmaptext/IsBitmapTextGameObject.js");
var _isBitmapTextGameObjectJsDefault = parcelHelpers.interopDefault(_isBitmapTextGameObjectJs);
var _textRunWidthWrapJs = require("./TextRunWidthWrap.js");
var _textRunWidthWrapJsDefault = parcelHelpers.interopDefault(_textRunWidthWrapJs);
var _dynamicTextRunWidthWrapJs = require("./DynamicTextRunWidthWrap.js");
var _dynamicTextRunWidthWrapJsDefault = parcelHelpers.interopDefault(_dynamicTextRunWidthWrapJs);
var _bitmapTextRunWidthWrapJs = require("./BitmapTextRunWidthWrap.js");
var _bitmapTextRunWidthWrapJsDefault = parcelHelpers.interopDefault(_bitmapTextRunWidthWrapJs);
var IsDynamicTextGameObject = function(gameObject) {
    return gameObject instanceof (0, _dynamicTextJsDefault.default);
};
var WrapExpandText = function(textObject, minWidth) {
    if (minWidth === undefined) minWidth = 0;
    textObject._minWidth = minWidth;
    textObject.runWidthWrap = IsDynamicTextGameObject(textObject) ? (0, _dynamicTextRunWidthWrapJsDefault.default)(textObject) : (0, _isBitmapTextGameObjectJsDefault.default)(textObject) ? (0, _bitmapTextRunWidthWrapJsDefault.default)(textObject) : (0, _textRunWidthWrapJsDefault.default)(textObject);
    return textObject;
};
exports.default = WrapExpandText;

},{"../../dynamictext/DynamicText.js":"59zC3","../../../../plugins/utils/bitmaptext/IsBitmapTextGameObject.js":"2rRxv","./TextRunWidthWrap.js":"6sjwI","./DynamicTextRunWidthWrap.js":"j1Wti","./BitmapTextRunWidthWrap.js":"aMYJA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2rRxv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const BitmapTextKlass = Phaser.GameObjects.BitmapText;
var IsBitmapTextGameObject = function(gameObject) {
    return gameObject instanceof BitmapTextKlass;
};
exports.default = IsBitmapTextGameObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6sjwI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isTextGameObjectJs = require("../../../../plugins/utils/text/IsTextGameObject.js");
var _isTextGameObjectJsDefault = parcelHelpers.interopDefault(_isTextGameObjectJs);
var TextRunWidthWrap = function(textObject) {
    var RunWidthWrap = function(width) {
        var padding = textObject.padding;
        var wrapWidth = width - padding.left - padding.right;
        var style = textObject.style;
        if ((0, _isTextGameObjectJsDefault.default)(textObject)) {
            style.wordWrapWidth = wrapWidth;
            style.maxLines = 0;
        } else {
            if (style.wrapMode === 0) style.wrapMode = 1;
            style.wrapWidth = wrapWidth;
            style.maxLines = 0;
        }
        style.fixedWidth = width;
        style.fixedHeight = 0;
        textObject.updateText(); // Redraw text
        textObject.minHeight = textObject.height;
        return textObject;
    };
    return RunWidthWrap;
};
exports.default = TextRunWidthWrap;

},{"../../../../plugins/utils/text/IsTextGameObject.js":"7s4wi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7s4wi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const TextKlass = Phaser.GameObjects.Text;
var IsTextGameObject = function(gameObject) {
    return gameObject instanceof TextKlass;
};
exports.default = IsTextGameObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j1Wti":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var DynamicTextRunWidthWrap = function(textObject) {
    var RunWidthWrap = function(width) {
        textObject.setFixedSize(width, 0).runWordWrap();
        textObject.minHeight = textObject.height;
        return textObject;
    };
    return RunWidthWrap;
};
exports.default = DynamicTextRunWidthWrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMYJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var BitmapTextRunWidthWrap = function(textObject) {
    var RunWidthWrap = function(width) {
        textObject.setMaxWidth(width);
        textObject.minHeight = textObject.height;
        return textObject;
    };
    return RunWidthWrap;
};
exports.default = BitmapTextRunWidthWrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdzAG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const PhaserImage = Phaser.GameObjects.Image;
var CreateImage = function(scene, config) {
    var gameObject = new PhaserImage(scene, 0, 0, "");
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateImage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hv1Df":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _titleLabelJs = require("./TitleLabel.js");
var _titleLabelJsDefault = parcelHelpers.interopDefault(_titleLabelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("titleLabel", function(config) {
    var gameObject = new (0, _titleLabelJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TitleLabel", (0, _titleLabelJsDefault.default));
exports.default = (0, _titleLabelJsDefault.default);

},{"./TitleLabel.js":"f6me8","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6me8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("../label/Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _layoutMode0Js = require("./methods/LayoutMode0.js");
var _layoutMode0JsDefault = parcelHelpers.interopDefault(_layoutMode0Js);
var _layoutMode1Js = require("./methods/LayoutMode1.js");
var _layoutMode1JsDefault = parcelHelpers.interopDefault(_layoutMode1Js);
const GetValue = Phaser.Utils.Objects.GetValue;
const LayoutCallbacks = [
    (0, _layoutMode0JsDefault.default),
    (0, _layoutMode1JsDefault.default)
];
class TitleLabel extends (0, _baseJsDefault.default) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexTitleLabel";
        // Add Background
        var background = GetValue(config, "background", undefined);
        if (background) this.addBackground(background);
        var layoutMode = GetValue(config, "layoutMode", 0);
        var layoutCallback = LayoutCallbacks[layoutMode] || LayoutCallbacks[0];
        layoutCallback.call(this, config);
        this.addChildrenMap("background", config.background);
    }
    // Access title game object
    get title() {
        var textObject = this.childrenMap.title;
        if (!textObject) return "";
        return textObject.title;
    }
    set title(value) {
        var textObject = this.childrenMap.title;
        if (!textObject) return;
        textObject.setText(value);
    }
    setTitle(value) {
        this.title = value;
        return this;
    }
    resetDisplayContent(config) {
        if (config === undefined) config = {};
        else if (typeof config === "string") config = {
            text: config
        };
        super.resetDisplayContent(config);
        var textObject = this.childrenMap.title;
        if (textObject) {
            if (config.title === undefined) ;
            else if (config.title) {
                this.show(textObject);
                this.setTitle(config.title);
            } else this.hide(textObject);
        }
        return this;
    }
}
exports.default = TitleLabel;

},{"../label/Base.js":"asGhH","./methods/LayoutMode0.js":"5i8Nc","./methods/LayoutMode1.js":"8zuU1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5i8Nc":[function(require,module,exports) {
/*
Elements:

Icon  Title      ActionIcon
Icon  Separator  ActionIcon
Icon  Text       ActionIcon

*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _addChildMaskJs = require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var LayoutMode0 = function(config) {
    var scene = this.scene;
    var orientation = GetValue(config, "orientation", 0);
    this.setOrientation(orientation);
    // Add elements
    var icon = GetValue(config, "icon", undefined);
    var iconMask = GetValue(config, "iconMask", undefined);
    var innerBackground = GetValue(config, "innerBackground", undefined);
    var title = GetValue(config, "title", undefined);
    var separator = GetValue(config, "separator", undefined);
    var text = GetValue(config, "text", undefined);
    var action = GetValue(config, "action", undefined);
    var actionMask = GetValue(config, "actionMask", undefined);
    if (icon) {
        var padding;
        if (this.orientation === 0) padding = {
            right: GetValue(config, "space.icon", 0),
            top: GetValue(config, "space.iconTop", 0),
            bottom: GetValue(config, "space.iconBottom", 0)
        };
        else padding = {
            bottom: GetValue(config, "space.icon", 0),
            left: GetValue(config, "space.iconLeft", 0),
            right: GetValue(config, "space.iconRight", 0)
        };
        var fitRatio = GetValue(config, "squareFitIcon", false) ? 1 : 0;
        this.add(icon, {
            proportion: 0,
            padding: padding,
            fitRatio: fitRatio
        });
        if (iconMask) iconMask = (0, _addChildMaskJsDefault.default).call(this, icon, icon, 1); // Circle mask
        if (!fitRatio) {
            var iconSize = GetValue(config, "iconSize", undefined);
            this.setIconSize(GetValue(config, "iconWidth", iconSize), GetValue(config, "iconHeight", iconSize));
        }
    }
    // InnerSizer : title, separator, text
    var innerSizer = new (0, _sizerJsDefault.default)(scene, {
        orientation: 1
    });
    if (innerBackground) innerSizer.addBackground(innerBackground);
    var separatorSpace = GetValue(config, "space.separator", 0);
    if (title) {
        var align = GetValue(config, "align.title", "left");
        var padding = {
            bottom: !separator && text ? separatorSpace : 0,
            left: GetValue(config, "space.titleLeft", 0),
            right: GetValue(config, "space.titleRight", 0)
        };
        innerSizer.add(title, {
            proportion: 0,
            align: align,
            padding: padding
        });
    }
    if (separator) {
        var padding = {
            top: title ? separatorSpace : 0,
            bottom: text ? separatorSpace : 0,
            left: GetValue(config, "space.separatorLeft", 0),
            right: GetValue(config, "space.separatorRight", 0)
        };
        innerSizer.add(separator, {
            expand: true,
            padding: padding
        });
    }
    if (text) {
        var align = GetValue(config, "align.text", "left");
        var padding = {
            left: GetValue(config, "space.textLeft", 0),
            right: GetValue(config, "space.textRight", 0)
        };
        innerSizer.add(text, {
            proportion: 0,
            align: align,
            padding: padding
        });
    }
    var padding = undefined;
    if (action) padding = {
        right: GetValue(config, "space.text", 0)
    };
    this.add(innerSizer, {
        proportion: 1,
        padding: padding
    });
    // InnerSizer : title, separator, text
    if (action) {
        var padding;
        if (this.orientation === 0) padding = {
            top: GetValue(config, "space.actionTop", 0),
            bottom: GetValue(config, "space.actionBottom", 0)
        };
        else padding = {
            left: GetValue(config, "space.actionLeft", 0),
            right: GetValue(config, "space.actionRight", 0)
        };
        var fitRatio = GetValue(config, "squareFitAction", false) ? 1 : 0;
        this.add(action, {
            proportion: 0,
            padding: padding,
            fitRatio: fitRatio
        });
        if (actionMask) actionMask = (0, _addChildMaskJsDefault.default).call(this, action, action, 1); // Circle mask
        if (!fitRatio) {
            var actionSize = GetValue(config, "actionSize");
            this.setActionSize(GetValue(config, "actionWidth", actionSize), GetValue(config, "actionHeight", actionSize));
        }
    }
    this.addChildrenMap("icon", icon);
    this.addChildrenMap("iconMask", iconMask);
    this.addChildrenMap("innerSizer", innerSizer);
    this.addChildrenMap("innerBackground", innerBackground);
    this.addChildrenMap("title", title);
    this.addChildrenMap("separator", separator);
    this.addChildrenMap("text", text);
    this.addChildrenMap("action", action);
    this.addChildrenMap("actionMask", actionMask);
};
exports.default = LayoutMode0;

},{"../../sizer/Sizer.js":"ayu5S","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zuU1":[function(require,module,exports) {
/*
Elements:

Title      Title       Title
Separator  Separator   Separator
Icon       Text        ActionIcon 

*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _addChildMaskJs = require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var LayoutMode1 = function(config) {
    this.setOrientation(1);
    this.setRTL(false);
    var scene = this.scene;
    // Add elements
    var title = GetValue(config, "title", undefined);
    var separator = GetValue(config, "separator", undefined);
    var innerBackground = GetValue(config, "innerBackground", undefined);
    var icon = GetValue(config, "icon", undefined);
    var iconMask = GetValue(config, "iconMask", undefined);
    var text = GetValue(config, "text", undefined);
    var action = GetValue(config, "action", undefined);
    var actionMask = GetValue(config, "actionMask", undefined);
    if (title) {
        var align = GetValue(config, "align.title", "left");
        var padding = {
            bottom: GetValue(config, "space.title", 0),
            left: GetValue(config, "space.titleLeft", 0),
            right: GetValue(config, "space.titleRight", 0)
        };
        this.add(title, {
            proportion: 0,
            align: align,
            padding: padding
        });
    }
    if (separator) {
        var separatorSpace = GetValue(config, "space.separator", 0);
        var padding = {
            top: title ? separatorSpace : 0,
            bottom: text ? separatorSpace : 0,
            left: GetValue(config, "space.separatorLeft", 0),
            right: GetValue(config, "space.separatorRight", 0)
        };
        this.add(separator, {
            proportion: 0,
            expand: true,
            padding: padding
        });
    }
    var orientation = GetValue(config, "orientation", 0);
    var innerSizer = new (0, _sizerJsDefault.default)(scene, {
        orientation: orientation,
        rtl: GetValue(config, "rtl", false),
        space: {
            left: GetValue(config, "space.innerLeft", 0),
            right: GetValue(config, "space.innerRight", 0),
            top: GetValue(config, "space.innerTop", 0),
            bottom: GetValue(config, "space.innerBottom", 0)
        }
    });
    if (innerBackground) innerSizer.addBackground(innerBackground);
    this.add(innerSizer, {
        proportion: 1,
        expand: true
    });
    if (icon) {
        var padding = undefined;
        if (innerSizer.orientation === 0) padding = {
            right: GetValue(config, "space.icon", 0),
            top: GetValue(config, "space.iconTop", 0),
            bottom: GetValue(config, "space.iconBottom", 0)
        };
        else padding = {
            bottom: GetValue(config, "space.icon", 0),
            left: GetValue(config, "space.iconLeft", 0),
            right: GetValue(config, "space.iconRight", 0)
        };
        var fitRatio = GetValue(config, "squareFitIcon", false) ? 1 : 0;
        innerSizer.add(icon, {
            proportion: 0,
            padding: padding,
            fitRatio: fitRatio
        });
        if (iconMask) iconMask = (0, _addChildMaskJsDefault.default).call(this, icon, icon, 1); // Circle mask
        if (!fitRatio) {
            var iconSize = GetValue(config, "iconSize", undefined);
            this.setIconSize(GetValue(config, "iconWidth", iconSize), GetValue(config, "iconHeight", iconSize));
        }
    }
    if (text) {
        var align = GetValue(config, "align.text", "left");
        var textSpace = GetValue(config, "space.text", 0);
        var expandTextWidth = GetValue(config, "expandTextWidth", false);
        var expandTextHeight = GetValue(config, "expandTextHeight", false);
        var proportion, padding, expand;
        if (innerSizer.orientation === 0) {
            proportion = expandTextWidth ? 1 : 0;
            if (action) padding = {
                right: textSpace
            };
            expand = expandTextHeight;
        } else {
            proportion = expandTextHeight ? 1 : 0;
            if (action) padding = {
                bottom: textSpace
            };
            expand = expandTextWidth;
        }
        innerSizer.add(text, {
            proportion: proportion,
            expand: expand,
            align: align,
            padding: padding
        });
    }
    if (action) {
        var padding;
        if (innerSizer.orientation === 0) padding = {
            top: GetValue(config, "space.actionTop", 0),
            bottom: GetValue(config, "space.actionBottom", 0)
        };
        else padding = {
            left: GetValue(config, "space.actionLeft", 0),
            right: GetValue(config, "space.actionRight", 0)
        };
        var fitRatio = GetValue(config, "squareFitAction", false) ? 1 : 0;
        innerSizer.add(action, {
            proportion: 0,
            padding: padding,
            fitRatio: fitRatio
        });
        if (actionMask) actionMask = (0, _addChildMaskJsDefault.default).call(this, action, action, 1); // Circle mask
        if (!fitRatio) {
            var actionSize = GetValue(config, "actionSize");
            this.setActionSize(GetValue(config, "actionWidth", actionSize), GetValue(config, "actionHeight", actionSize));
        }
    }
    this.addChildrenMap("title", title);
    this.addChildrenMap("separator", separator);
    this.addChildrenMap("innerSizer", innerSizer);
    this.addChildrenMap("innerBackground", innerBackground);
    this.addChildrenMap("icon", icon);
    this.addChildrenMap("iconMask", iconMask);
    this.addChildrenMap("text", text);
    this.addChildrenMap("action", action);
    this.addChildrenMap("actionMask", actionMask);
};
exports.default = LayoutMode1;

},{"../../sizer/Sizer.js":"ayu5S","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fabIX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nameValueLabelJs = require("./NameValueLabel.js");
var _nameValueLabelJsDefault = parcelHelpers.interopDefault(_nameValueLabelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("nameValueLabel", function(config) {
    var gameObject = new (0, _nameValueLabelJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.NameValueLabel", (0, _nameValueLabelJsDefault.default));
exports.default = (0, _nameValueLabelJsDefault.default);

},{"./NameValueLabel.js":"9WfIj","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9WfIj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _buildJs = require("./methods/Build.js");
var _buildJsDefault = parcelHelpers.interopDefault(_buildJs);
var _setValueMethodsJs = require("./methods/SetValueMethods.js");
var _setValueMethodsJsDefault = parcelHelpers.interopDefault(_setValueMethodsJs);
class NameValueLabel extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexNameValueLabel";
        (0, _buildJsDefault.default).call(this, scene, config);
    }
    // Access nameText game object
    get nameText() {
        var textObject = this.childrenMap.name;
        if (textObject === undefined) return "";
        return textObject.text;
    }
    set nameText(value) {
        var textObject = this.childrenMap.name;
        if (textObject === undefined) return;
        textObject.setText(value);
    }
    setNameText(value) {
        this.nameText = value;
        return this;
    }
    // Access valueText game object
    get valueText() {
        var textObject = this.childrenMap.value;
        if (textObject === undefined) return "";
        return textObject.text;
    }
    set valueText(value) {
        var textObject = this.childrenMap.value;
        if (textObject === undefined) return;
        textObject.setText(value);
    }
    setValueText(value) {
        this.valueText = value;
        return this;
    }
    // Accrss bar game object
    get barValue() {
        var bar = this.childrenMap.bar;
        if (bar === undefined) return;
        return bar.value;
    }
    set barValue(value) {
        var bar = this.childrenMap.bar;
        if (bar === undefined) return;
        bar.setValue(value);
    }
    setBarValue(value, min, max) {
        var bar = this.childrenMap.bar;
        if (bar === undefined) return this;
        bar.setValue(value, min, max);
        return this;
    }
    easeBarValueTo(value, min, max) {
        var bar = this.childrenMap.bar;
        if (bar === undefined) return this;
        bar.easeValueTo(value, min, max);
        return this;
    }
    // Access icon game object
    setTexture(key, frame) {
        var imageObject = this.childrenMap.icon;
        if (imageObject === undefined) return;
        imageObject.setTexture(key, frame);
        return this;
    }
    get texture() {
        var imageObject = this.childrenMap.icon;
        if (imageObject === undefined) return undefined;
        return imageObject.texture;
    }
    get frame() {
        var imageObject = this.childrenMap.icon;
        if (imageObject === undefined) return undefined;
        return imageObject.frame;
    }
    runLayout(parent, newWidth, newHeight) {
        if (this.ignoreLayout) return this;
        super.runLayout(parent, newWidth, newHeight);
        // Pin icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) {
            iconMask.setPosition();
            this.resetChildPositionState(iconMask);
        }
        // Pin action-mask to action game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) {
            actionMask.setPosition();
            this.resetChildPositionState(actionMask);
        }
        return this;
    }
    resize(width, height) {
        super.resize(width, height);
        // Resize icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) iconMask.resize();
        // Resize action-mask to icon game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) actionMask.resize();
        return this;
    }
}
Object.assign(NameValueLabel.prototype, (0, _setValueMethodsJsDefault.default));
exports.default = NameValueLabel;

},{"../sizer/Sizer.js":"ayu5S","./methods/Build.js":"bO9bQ","./methods/SetValueMethods.js":"aLKSZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bO9bQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _lineProgressCanvasJs = require("../../lineprogresscanvas/LineProgressCanvas.js");
var _lineProgressCanvasJsDefault = parcelHelpers.interopDefault(_lineProgressCanvasJs);
var _addChildMaskJs = require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var Build = function(scene, config) {
    // Add elements
    var background = GetValue(config, "background", undefined);
    var icon = GetValue(config, "icon", undefined);
    var iconMask = GetValue(config, "iconMask", undefined);
    var nameText = GetValue(config, "nameText", undefined);
    var valueText = GetValue(config, "valueText", undefined);
    var bar = GetValue(config, "bar", undefined);
    var action = GetValue(config, "action", undefined);
    var actionMask = GetValue(config, "actionMask", undefined);
    if (IsPlainObject(bar)) {
        bar = new (0, _lineProgressCanvasJsDefault.default)(scene, bar);
        scene.add.existing(bar);
        // Move bar game object below nameText and valueText
        if (nameText) scene.children.moveBelow(bar, nameText);
        if (valueText) scene.children.moveBelow(bar, valueText);
    }
    var hasTextSizer = nameText || valueText || bar;
    if (background) this.addBackground(background);
    if (icon) {
        var padding = undefined;
        if (this.orientation === 0) {
            if (hasTextSizer || action) padding = {
                right: GetValue(config, "space.icon", 0),
                top: GetValue(config, "space.iconTop", 0),
                bottom: GetValue(config, "space.iconBottom", 0)
            };
        } else if (hasTextSizer || action) padding = {
            bottom: GetValue(config, "space.icon", 0),
            left: GetValue(config, "space.iconLeft", 0),
            right: GetValue(config, "space.iconRight", 0)
        };
        this.add(icon, {
            proportion: 0,
            padding: padding
        });
        if (iconMask) iconMask = (0, _addChildMaskJsDefault.default).call(this, icon, icon, 1); // Circle mask
    }
    if (hasTextSizer) {
        var textSizer = new (0, _sizerJsDefault.default)(scene, {
            orientation: 1
        });
        var nameValueSizer;
        if (nameText || valueText) {
            nameValueSizer = new (0, _sizerJsDefault.default)(scene, {
                orientation: 0
            });
            if (nameText) {
                // A space character to reserve text height
                if (nameText.text === "") nameText.setText(" ");
                nameText.setOrigin(0, nameText.originY);
                var padding = {
                    left: GetValue(config, "space.name", 0)
                };
                nameValueSizer.add(nameText, {
                    padding: padding
                });
            }
            if (valueText) {
                // A space character to reserve text height
                if (valueText.text === "") valueText.setText(" ");
                valueText.setOrigin(1, valueText.originY);
                nameValueSizer.addSpace();
                var padding = {
                    right: GetValue(config, "space.value", 0)
                };
                nameValueSizer.add(valueText, {
                    padding: padding
                });
                this.setValueTextFormatCallback(GetValue(config, "valueTextFormatCallback", DefaultValueTextFormatCallback), GetValue(config, "valueTextFormatCallbackScope", undefined));
            }
            textSizer.add(nameValueSizer, {
                expand: true
            });
        }
        if (bar) {
            var padding = {
                top: nameValueSizer ? GetValue(config, "space.bar", 0) : 0,
                bottom: GetValue(config, "space.barBottom", 0),
                left: GetValue(config, "space.barLeft", 0),
                right: GetValue(config, "space.barRight", 0)
            };
            textSizer.add(bar, {
                expand: true,
                padding: padding
            });
        }
        var padding = undefined;
        if (action) padding = {
            right: GetValue(config, "space.text", 0)
        };
        var textAlign = GetValue(config, "align.text", "bottom");
        this.add(textSizer, {
            proportion: 1,
            align: textAlign,
            padding: padding
        });
    }
    if (action) {
        var padding;
        if (this.orientation === 0) padding = {
            top: GetValue(config, "space.actionTop", 0),
            bottom: GetValue(config, "space.actionBottom", 0)
        };
        else padding = {
            left: GetValue(config, "space.actionLeft", 0),
            right: GetValue(config, "space.actionRight", 0)
        };
        this.add(action, {
            proportion: 0,
            padding: padding
        });
        if (actionMask) actionMask = (0, _addChildMaskJsDefault.default).call(this, action, action, 1); // Circle mask
    }
    this.addChildrenMap("background", background);
    this.addChildrenMap("icon", icon);
    this.addChildrenMap("iconMask", iconMask);
    this.addChildrenMap("name", nameText);
    this.addChildrenMap("value", valueText);
    this.addChildrenMap("bar", bar);
    this.addChildrenMap("action", action);
    this.addChildrenMap("actionMask", actionMask);
};
var DefaultValueTextFormatCallback = function(value, min, max) {
    return value.toString();
};
exports.default = Build;

},{"../../sizer/Sizer.js":"ayu5S","../../lineprogresscanvas/LineProgressCanvas.js":"aXsrA","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aLKSZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Clamp = Phaser.Math.Clamp;
exports.default = {
    setValueTextFormatCallback (callback, scope) {
        this.valueTextFormatCallback = callback;
        this.valueTextFormatCallbackScope = scope;
        return this;
    },
    getFormatValueText (value, min, max) {
        if (value === undefined) value = this.value;
        if (min === undefined) min = this.minValue;
        if (max === undefined) max = this.maxValue;
        var text;
        if (this.valueTextFormatCallbackScope) text = this.valueTextFormatCallback(value, min, max);
        else text = this.valueTextFormatCallback.call(this.valueTextFormatCallbackScope, value, min, max);
        return text;
    },
    updateValueText (value, min, max) {
        var textObject = this.childrenMap.value;
        if (textObject && this.valueTextFormatCallback) {
            textObject.setText(this.getFormatValueText(value, min, max));
            if (textObject.layout) textObject.layout();
        }
        return this;
    },
    setValue (value, min, max) {
        value = Clamp(value, min, max);
        this.value = value;
        this.minValue = min;
        this.maxValue = max;
        this.updateValueText(value, min, max);
        this.setBarValue(value, min, max);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mY1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonsJs = require("./Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("buttons", function(config) {
    var gameObject = new (0, _buttonsJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Buttons", (0, _buttonsJsDefault.default));
exports.default = (0, _buttonsJsDefault.default);

},{"./Buttons.js":"9NfMe","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NfMe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _buttonGroupJs = require("../utils/buttongroup/ButtonGroup.js");
var _buttonGroupJsDefault = parcelHelpers.interopDefault(_buttonGroupJs);
var _buttonMethodsJs = require("../utils/buttongroup/ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
var _buttonStateMethodsJs = require("../utils/buttongroup/ButtonStateMethods.js");
var _buttonStateMethodsJsDefault = parcelHelpers.interopDefault(_buttonStateMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Buttons extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var buttonSpace = config.space;
        if (typeof buttonSpace === "number") config.space = {
            item: buttonSpace
        };
        // Create
        super(scene, config);
        this.type = "rexButtons";
        this.buttonGroup = new (0, _buttonGroupJsDefault.default)({
            parent: this,
            eventEmitter: GetValue(config, "eventEmitter", this),
            groupName: GetValue(config, "groupName", undefined),
            clickConfig: GetValue(config, "click", undefined)
        }).setButtonsType(config);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var buttons = GetValue(config, "buttons", undefined);
        // Buttons properties
        this.buttonsExpand = GetValue(config, "expand", false);
        this.buttonsAlign = GetValue(config, "align", undefined); // undefined/left/top: no space                
        if (background) this.addBackground(background);
        if (buttons) this.addButtons(buttons);
        this.addChildrenMap("background", background);
        this.addChildrenMap("buttons", this.buttonGroup.buttons);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.buttonGroup.destroy();
        this.buttonGroup = undefined;
    }
    get buttons() {
        return this.buttonGroup.buttons;
    }
    get groupName() {
        return this.buttonGroup.groupName;
    }
    set groupName(value) {
        this.buttonGroup.groupName = value;
    }
    get eventEmitter() {
        return this.buttonGroup.eventEmitter;
    }
}
Object.assign(Buttons.prototype, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default), (0, _buttonMethodsJsDefault.default), (0, _buttonStateMethodsJsDefault.default));
exports.default = Buttons;

},{"../sizer/Sizer.js":"ayu5S","./AddChildMethods.js":"d5L2D","./RemoveChildMethods.js":"ixZZZ","../utils/buttongroup/ButtonGroup.js":"ekJgM","../utils/buttongroup/ButtonMethods.js":"cYtmS","../utils/buttongroup/ButtonStateMethods.js":"6HTnP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5L2D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const SizerAdd = (0, _sizerJsDefault.default).prototype.add;
const SizerAddSpace = (0, _sizerJsDefault.default).prototype.addSpace;
var Add = function(gameObject) {
    var isNormalGameObject = !gameObject.isRexSpace;
    var proportion = !isNormalGameObject || this.buttonsExpand ? 1 : 0;
    if (this.sizerChildren.length === 0) {
        if (isNormalGameObject) {
            // Add space at head
            var hasHeadSpace = !this.buttonsExpand && (this.buttonsAlign === "right" || this.buttonsAlign === "center" || this.buttonsAlign === "bottom");
            if (hasHeadSpace) SizerAddSpace.call(this);
            SizerAdd.call(this, gameObject, {
                proportion: proportion,
                expand: true
            });
            // Add space at tail
            var hasTailSpace = !this.buttonsExpand && this.buttonsAlign === "center";
            if (hasTailSpace) SizerAddSpace.call(this);
            this.hasTailSpace = hasTailSpace;
        } else {
            SizerAdd.call(this, gameObject, {
                proportion: proportion,
                expand: true
            });
            this.hasTailSpace = false;
        }
    } else if (this.hasTailSpace) {
        var lastIndex = this.sizerChildren.length - 1;
        SizerAdd.call(this, gameObject, {
            index: lastIndex,
            proportion: proportion,
            expand: true
        });
    } else SizerAdd.call(this, gameObject, {
        proportion: proportion,
        expand: true
    });
    // Space or other game object as button
    if (isNormalGameObject) this.buttonGroup.add(gameObject);
    return this;
};
exports.default = {
    addButton (gameObject) {
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i]);
        } else Add.call(this, gameObject);
        return this;
    },
    addButtons (gameObjects) {
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i]);
        return this;
    }
};

},{"../sizer/Sizer.js":"ayu5S","../../../plugins/utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ixZZZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const SizerRmove = (0, _sizerJsDefault.default).prototype.remove;
const SizerClear = (0, _sizerJsDefault.default).prototype.clear;
var Remove = function(gameObject, destroyChild) {
    if (this.getParentSizer(gameObject) !== this) return this;
    this.buttonGroup.remove(gameObject);
    SizerRmove.call(this, gameObject, destroyChild);
    return this;
};
exports.default = {
    remove (gameObject, destroyChild) {
        // Remove gameObject no matter it is a button or not
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Remove.call(this, gameObjects[i], destroyChild);
        } else Remove.call(this, gameObject, destroyChild);
        return this;
    },
    clear (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        buttons.length = 0;
        SizerClear.call(this, destroyChild);
        return this;
    },
    removeButton (gameObject, destroyChild) {
        var gameObject = this.getButton(gameObject);
        // Don't remove this gameObject, it is not a button
        if (!gameObject) return this;
        this.remove(gameObject, destroyChild);
        return this;
    },
    clearButtons (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        for(var i = buttons.length - 1; i >= 0; i--)Remove.call(this, buttons[i], destroyChild);
        return this;
    }
};

},{"../sizer/Sizer.js":"ayu5S","../../../plugins/utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ekJgM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addMethodsJs = require("./AddMethods.js");
var _addMethodsJsDefault = parcelHelpers.interopDefault(_addMethodsJs);
var _removeMethodsJs = require("./RemoveMethods.js");
var _removeMethodsJsDefault = parcelHelpers.interopDefault(_removeMethodsJs);
var _fireEventJs = require("./FireEvent.js");
var _fireEventJsDefault = parcelHelpers.interopDefault(_fireEventJs);
var _buttonsTypeMethodsJs = require("./ButtonsTypeMethods.js");
var _buttonsTypeMethodsJsDefault = parcelHelpers.interopDefault(_buttonsTypeMethodsJs);
var _buttonMethodsJs = require("./ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
class ButtonGroup {
    constructor(config){
        this.parent = config.parent;
        this.eventEmitter = config.eventEmitter;
        this.groupName = config.groupName;
        this.clickConfig = config.clickConfig;
        this.buttonsType = undefined;
        this.buttons = [];
    }
    destroy() {
        this.parent = undefined;
        this.eventEmitter = undefined;
        this.clickConfig = undefined;
        this.buttons = undefined; // GameObjects will be destroyed outside
    }
}
var methods = {
    fireEvent: (0, _fireEventJsDefault.default)
};
Object.assign(ButtonGroup.prototype, (0, _addMethodsJsDefault.default), (0, _removeMethodsJsDefault.default), (0, _buttonsTypeMethodsJsDefault.default), (0, _buttonMethodsJsDefault.default), methods);
exports.default = ButtonGroup;

},{"./AddMethods.js":"1dWYR","./RemoveMethods.js":"1kuJJ","./FireEvent.js":"3e3kx","./ButtonsTypeMethods.js":"kbX5Z","./ButtonMethods.js":"cYtmS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dWYR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickJs = require("../../click/Click.js");
var _clickJsDefault = parcelHelpers.interopDefault(_clickJs);
var _injectSelectedPropertyJs = require("./InjectSelectedProperty.js");
var _injectSelectedPropertyJsDefault = parcelHelpers.interopDefault(_injectSelectedPropertyJs);
exports.default = {
    add (gameObject) {
        this.buttons.push(gameObject);
        //Default: Fire 'click' event when touch released after pressed.
        if (!gameObject._click) {
            gameObject._click = new (0, _clickJsDefault.default)(gameObject, this.clickConfig);
            gameObject._click.on("click", function(buttonBehavior, gameObject, pointer, event) {
                this.fireEvent("button.click", gameObject, pointer, event);
            }, this).on("enable", function(buttonBehavior, gameObject) {
                this.fireEvent("button.enable", gameObject);
            }, this).on("disable", function(buttonBehavior, gameObject) {
                this.fireEvent("button.disable", gameObject);
            }, this);
            gameObject.on("pointerover", function(pointer, localX, localY, event) {
                this.fireEvent("button.over", gameObject, pointer, event);
            }, this).on("pointerout", function(pointer, event) {
                this.fireEvent("button.out", gameObject, pointer, event);
            }, this);
        }
        if (this.buttonsType) {
            if (gameObject.name === undefined) console.error(`${this.parent.constructor.name}: Option button miss value`);
            (0, _injectSelectedPropertyJsDefault.default).call(this, gameObject);
        }
        return this;
    },
    addMultiple (gameObjects) {
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)this.add(gameObjects[i]);
        return this;
    }
};

},{"../../click/Click.js":"1KCLI","./InjectSelectedProperty.js":"gOLlw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOLlw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _onButtonStateChangeJs = require("./OnButtonStateChange.js");
var _onButtonStateChangeJsDefault = parcelHelpers.interopDefault(_onButtonStateChangeJs);
var InjectSelectedProperty = function(gameObject) {
    var self = this;
    gameObject._selected = undefined;
    Object.defineProperty(gameObject, "selected", {
        get: function() {
            return gameObject._selected;
        },
        set: function(newValue) {
            if (gameObject._selected === newValue) return;
            var previousValue = gameObject._selected;
            gameObject._selected = newValue;
            (0, _onButtonStateChangeJsDefault.default).call(self, gameObject, newValue, previousValue);
        },
        enumerable: true,
        configurable: true
    });
    gameObject.selected = false;
};
exports.default = InjectSelectedProperty;

},{"./OnButtonStateChange.js":"36vL6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"36vL6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnButtonStateChange = function(button, value, previousValue) {
    if (!button) return;
    var callback = this.setValueCallback;
    var scope = this.setValueCallbackScope;
    if (callback) {
        if (scope) callback.call(scope, button, value, previousValue);
        else callback(button, value, previousValue);
    }
    this.fireEvent("button.statechange", button, value, previousValue);
};
exports.default = OnButtonStateChange;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kuJJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RemoveItem = Phaser.Utils.Array.Remove;
exports.default = {
    remove (gameObject) {
        if (this.buttonsType) delete gameObject.selected;
        RemoveItem(this.buttons, gameObject);
        return this;
    },
    clear () {
        if (this.buttonsType) {
            var buttons = this.buttons;
            for(var i = 0, cnt = buttons.length; i < cnt; i++)delete buttons[i].selected;
        }
        this.buttons.length = 0;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3e3kx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FireEvent = function(eventName, button, ...args) {
    var index;
    if (typeof button === "number") {
        index = button;
        button = this.buttons[index];
        if (!button) return;
    } else {
        index = this.buttons.indexOf(button);
        if (index === -1) return;
    }
    // Buttons is a child. Fire internal events.
    if (this.eventEmitter !== this.parent) this.parent.emit(eventName, button, index, ...args);
    if (this.groupName !== undefined) this.eventEmitter.emit(eventName, button, this.groupName, index, ...args);
    else this.eventEmitter.emit(eventName, button, index, ...args);
};
exports.default = FireEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbX5Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
exports.default = {
    setButtonsType (config) {
        if (config === undefined) config = {};
        var buttonsType = GetValue(config, "buttonsType", config.type);
        this.buttonsType = buttonsType;
        if (!this.buttonsType) return this;
        // Assign this.setValueCallback, this.setValueCallbackScope
        var setValueCallback, setValueCallbackScope;
        setValueCallback = GetValue(config, "setValueCallback", undefined);
        setValueCallbackScope = GetValue(config, "setValueCallbackScope", undefined);
        if (setValueCallback === undefined) {
            setValueCallback = GetValue(config, "setButtonStateCallback", undefined);
            setValueCallbackScope = GetValue(config, "setButtonStateCallbackScope", undefined);
        }
        this.setValueCallback = setValueCallback;
        this.setValueCallbackScope = setValueCallbackScope;
        switch(buttonsType){
            case "radio":
                this.setRadioType();
                break;
            case "checkboxes":
                this.setCheckboxesType();
                break;
        }
        return this;
    },
    setRadioType () {
        var parent = this.parent, buttons = this.buttons;
        parent._value = undefined;
        var selectedIndex = undefined;
        Object.defineProperty(parent, "value", {
            get: function() {
                return parent._value;
            },
            set: function(newValue) {
                if (parent._value === newValue) return;
                parent._value = newValue;
                for(var i = 0, cnt = buttons.length; i < cnt; i++){
                    var button = buttons[i];
                    if (button.rexSizer.hidden) continue;
                    if (selectedIndex === undefined) {
                        if (button.name === newValue) button.selected = true;
                        else button.selected = false;
                    } else if (selectedIndex === i) button.selected = true;
                    else button.selected = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        parent.on("button.click", function(button) {
            selectedIndex = this.buttons.indexOf(button);
            parent.value = button.name;
            selectedIndex = undefined;
        }, this);
        return this;
    },
    setCheckboxesType () {
        var parent = this.parent;
        parent.on("button.click", function(button) {
            button.selected = !button.selected;
        });
        return this;
    },
    // Common
    clearAllButtonsState () {
        var buttons = this.buttons;
        for(var i = 0, cnt = buttons.length; i < cnt; i++){
            var button = buttons[i];
            button.selected = false;
        }
        return this;
    },
    getAllButtonsState () {
        var states = {};
        var buttons = this.buttons;
        for(var i = 0, cnt = buttons.length; i < cnt; i++){
            var button = buttons[i];
            if (button.rexSizer.hidden) continue;
            states[button.name] = button.selected;
        }
        return states;
    },
    // For radio
    setSelectedButtonName (name) {
        this.parent.value = name;
        return this;
    },
    getSelectedButtonName () {
        return this.parent.value;
    },
    // For checkboxes
    setButtonState (name, state) {
        if (state === undefined) state = true;
        var buttons = this.buttons;
        for(var i = 0, cnt = buttons.length; i < cnt; i++){
            var button = buttons[i];
            if (button.rexSizer.hidden) continue;
            if (button.name === name) {
                button.selected = state;
                break;
            }
        }
        return this;
    },
    getButtonState (name) {
        var buttons = this.buttons;
        for(var i = 0, cnt = buttons.length; i < cnt; i++){
            var button = buttons[i];
            if (button.rexSizer.hidden) continue;
            if (button.name === name) return button.selected;
        }
        return undefined;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cYtmS":[function(require,module,exports) {
// Include in ButtonGroup class and Buttons/GridButtons/FixedWidthButtons class
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameObjectByNameJs = require("../GetGameObjectByName.js");
var _getGameObjectByNameJsDefault = parcelHelpers.interopDefault(_getGameObjectByNameJs);
var _hideJs = require("../Hide.js");
exports.default = {
    getButton (index) {
        // buttonGroup and button-sizer have *buttons* member both
        var buttons = this.buttons, button;
        var indexType = typeof index;
        switch(indexType){
            case "number":
                button = buttons[index];
                break;
            case "string":
                button = (0, _getGameObjectByNameJsDefault.default)(buttons, index);
                break;
            default:
                button = index;
                if (buttons.indexOf(button) === -1) button = undefined;
                break;
        }
        return button;
    },
    setButtonEnable (index, enabled) {
        // buttonGroup and button-sizer have *buttons* member both
        var buttons = this.buttons;
        if (index === undefined || typeof index === "boolean") {
            enabled = index;
            for(var i = 0, cnt = buttons.length; i < cnt; i++)buttons[i]._click.setEnable(enabled);
        } else this.getButton(index)._click.setEnable(enabled);
        return this;
    },
    toggleButtonEnable (index) {
        // buttonGroup and button-sizer have *buttons* member both
        var buttons = this.buttons;
        if (index === undefined || typeof index === "boolean") for(var i = 0, cnt = buttons.length; i < cnt; i++)buttons[i]._click.toggleEnable();
        else this.getButton(index)._click.toggleEnable();
        return this;
    },
    getButtonEnable (index) {
        if (index === undefined) index = 0;
        return this.getButton(index)._click.enable;
    },
    emitButtonClick (index) {
        // index or button game object
        // this: buttonGroup or button-sizer
        var buttonGroup = this.buttonGroup ? this.buttonGroup : this;
        buttonGroup.fireEvent("button.click", index);
        return this;
    },
    showButton (index) {
        (0, _hideJs.Show)(this.getButton(index));
        return this;
    },
    hideButton (index) {
        (0, _hideJs.Hide)(this.getButton(index));
        return this;
    },
    isButtonShown (index) {
        (0, _hideJs.IsShown)(this.getButton(index));
        return this;
    },
    forEachButtton (callback, scope) {
        // buttonGroup and button-sizer have *buttons* member both
        var buttons = this.buttons;
        for(var i = 0, cnt = buttons.length; i < cnt; i++)if (scope) callback.call(scope, buttons[i], i, buttons);
        else callback(buttons[i], i, buttons);
        return this;
    }
};

},{"../GetGameObjectByName.js":"47mL5","../Hide.js":"jy7YF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47mL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getGameObjectByNameJs = require("../../../plugins/utils/system/GetGameObjectByName.js");
var _getGameObjectByNameJsDefault = parcelHelpers.interopDefault(_getGameObjectByNameJs);
exports.default = (0, _getGameObjectByNameJsDefault.default);

},{"../../../plugins/utils/system/GetGameObjectByName.js":"gQ4Uy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQ4Uy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isArrayJs = require("../object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var GetGameObjectByName = function(children, name) {
    if (!children) return null;
    else if ((0, _isArrayJsDefault.default)(children)) {
        var child;
        for(var i = 0, cnt = children.length; i < cnt; i++){
            child = TestName(children[i], name);
            if (child) return child;
        }
    } else {
        var child;
        for(var key in children){
            child = TestName(children[key], name);
            if (child) return child;
        }
    }
};
var TestName = function(gameObject, name) {
    if (!gameObject) return null;
    else if (gameObject.hasOwnProperty("name")) return gameObject.name === name ? gameObject : null;
    else return GetElementByName(gameObject, name);
};
exports.default = GetGameObjectByName;

},{"../object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HTnP":[function(require,module,exports) {
// Include in Buttons/GridButtons/FixedWidthButtons class
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Common
    clearAllButtonsState () {
        this.buttonGroup.clearAllButtonsState();
        return this;
    },
    getAllButtonsState () {
        return this.buttonGroup.getAllButtonsState();
    },
    // For radio
    setSelectedButtonName (name) {
        this.buttonGroup.setSelectedButtonName(name);
        return this;
    },
    getSelectedButtonName () {
        return this.buttonGroup.getSelectedButtonName();
    },
    // For checkboxes
    setButtonState (name, state) {
        this.buttonGroup.setButtonState(name, state);
        return this;
    },
    getButtonState (name) {
        return this.buttonGroup.getButtonState(name);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5PyiM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridButtonsJs = require("./GridButtons.js");
var _gridButtonsJsDefault = parcelHelpers.interopDefault(_gridButtonsJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("gridButtons", function(config) {
    var gameObject = new (0, _gridButtonsJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.GridButtons", (0, _gridButtonsJsDefault.default));
exports.default = (0, _gridButtonsJsDefault.default);

},{"./GridButtons.js":"idSMH","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"idSMH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridSizerJs = require("../gridsizer/GridSizer.js");
var _gridSizerJsDefault = parcelHelpers.interopDefault(_gridSizerJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _buttonGroupJs = require("../utils/buttongroup/ButtonGroup.js");
var _buttonGroupJsDefault = parcelHelpers.interopDefault(_buttonGroupJs);
var _buttonMethodsJs = require("../utils/buttongroup/ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
var _buttonStateMethodsJs = require("../utils/buttongroup/ButtonStateMethods.js");
var _buttonStateMethodsJsDefault = parcelHelpers.interopDefault(_buttonStateMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class GridButtons extends (0, _gridSizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var rowCount = GetValue(config, "row", 0);
        var columnCount = GetValue(config, "column", config.col || 0);
        var createCellContainerCallback = GetValue(config, "createCellContainerCallback");
        var buttons = GetValue(config, "buttons", undefined);
        var buttonsExpand = GetValue(config, "expand", true);
        var buttonProportion = buttonsExpand ? 1 : 0;
        if (createCellContainerCallback) config.createCellContainerCallback = undefined;
        if (buttons !== undefined) {
            rowCount = Math.max(rowCount, buttons.length);
            for(var i = 0, cnt = buttons.length; i < cnt; i++)columnCount = Math.max(columnCount, buttons[i].length);
        }
        config.row = rowCount;
        config.column = columnCount;
        config.columnProportions = buttonProportion;
        config.rowProportions = buttonProportion;
        // Create
        super(scene, config);
        this.type = "rexGridButtons";
        this.buttonGroup = new (0, _buttonGroupJsDefault.default)({
            parent: this,
            eventEmitter: GetValue(config, "eventEmitter", this),
            groupName: GetValue(config, "groupName", undefined),
            clickConfig: GetValue(config, "click", undefined)
        }).setButtonsType(config);
        // Add elements
        var background = GetValue(config, "background", undefined);
        // Buttons properties
        this.buttonsExpand = buttonsExpand;
        var space = GetValue(config, "space", undefined);
        if (typeof space === "number") space = {
            itemX: space,
            itemY: space
        };
        if (background) this.addBackground(background);
        if (buttons) {
            var rowButtons, button;
            for(var r = 0, rcnt = buttons.length; r < rcnt; r++){
                rowButtons = buttons[r];
                for(var c = 0, ccnt = rowButtons.length; c < ccnt; c++){
                    button = rowButtons[c];
                    if (button) this.addButton(button, c, r);
                }
            }
        } else if (createCellContainerCallback) {
            for(var y = 0; y < rowCount; y++)for(var x = 0; x < columnCount; x++){
                var button = createCellContainerCallback(scene, x, y);
                if (button) this.addButton(button, x, y);
            }
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("buttons", this.buttonGroup.buttons);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.buttonGroup.destroy();
        this.buttonGroup = undefined;
    }
    get buttons() {
        return this.buttonGroup.buttons;
    }
    get groupName() {
        return this.buttonGroup.groupName;
    }
    set groupName(value) {
        this.buttonGroup.groupName = value;
    }
    get eventEmitter() {
        return this.buttonGroup.eventEmitter;
    }
}
Object.assign(GridButtons.prototype, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default), (0, _buttonMethodsJsDefault.default), (0, _buttonStateMethodsJsDefault.default));
exports.default = GridButtons;

},{"../gridsizer/GridSizer.js":"b382f","./AddChildMethods.js":"5Rua4","./RemoveChildMethods.js":"dJtfx","../utils/buttongroup/ButtonGroup.js":"ekJgM","../utils/buttongroup/ButtonMethods.js":"cYtmS","../utils/buttongroup/ButtonStateMethods.js":"6HTnP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Rua4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridSizerJs = require("../gridsizer/GridSizer.js");
var _gridSizerJsDefault = parcelHelpers.interopDefault(_gridSizerJs);
const SizerAdd = (0, _gridSizerJsDefault.default).prototype.add;
exports.default = {
    addButton (gameObject, columnIndex, rowIndex) {
        SizerAdd.call(this, gameObject, columnIndex, rowIndex, undefined, 0, this.buttonsExpand);
        this.buttonGroup.add(gameObject);
        return this;
    },
    addButtons (gameObjects, rowThenColumn) {
        for(var i = 0, cnt = gameObjects; i < cnt; i++)this.addButton(gameObjects[i], undefined, rowThenColumn);
        return this;
    }
};

},{"../gridsizer/GridSizer.js":"b382f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dJtfx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridSizerJs = require("../gridsizer/GridSizer.js");
var _gridSizerJsDefault = parcelHelpers.interopDefault(_gridSizerJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const SizerRmove = (0, _gridSizerJsDefault.default).prototype.remove;
const SizerClear = (0, _gridSizerJsDefault.default).prototype.clear;
var Remove = function(gameObject, destroyChild) {
    var gameObject = this.getButton(gameObject);
    if (!gameObject) return this;
    this.buttonGroup.remove(gameObject);
    SizerRmove.call(this, gameObject, destroyChild);
    return this;
};
exports.default = {
    remove (gameObject, destroyChild) {
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Remove.call(this, gameObjects[i], destroyChild);
        } else Remove.call(this, gameObject, destroyChild);
        return this;
    },
    clear (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        buttons.length = 0;
        SizerClear.call(this, destroyChild);
        return this;
    },
    removeButton (gameObject, destroyChild) {
        this.remove(gameObject, destroyChild);
        return this;
    },
    clearButtons (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        for(var i = buttons.length - 1; i >= 0; i--)Remove.call(this, buttons[i], destroyChild);
        return this;
    }
};

},{"../gridsizer/GridSizer.js":"b382f","../../../plugins/utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6j2bp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fixWidthButtonsJs = require("./FixWidthButtons.js");
var _fixWidthButtonsJsDefault = parcelHelpers.interopDefault(_fixWidthButtonsJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fixWidthButtons", function(config) {
    var gameObject = new (0, _fixWidthButtonsJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FixWidthButtons", (0, _fixWidthButtonsJsDefault.default));
exports.default = (0, _fixWidthButtonsJsDefault.default);

},{"./FixWidthButtons.js":"f4zsx","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4zsx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fixWidthSizerJs = require("../fixwidthsizer/FixWidthSizer.js");
var _fixWidthSizerJsDefault = parcelHelpers.interopDefault(_fixWidthSizerJs);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _removeChildMethodsJs = require("./RemoveChildMethods.js");
var _removeChildMethodsJsDefault = parcelHelpers.interopDefault(_removeChildMethodsJs);
var _buttonGroupJs = require("../utils/buttongroup/ButtonGroup.js");
var _buttonGroupJsDefault = parcelHelpers.interopDefault(_buttonGroupJs);
var _buttonMethodsJs = require("../utils/buttongroup/ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
var _buttonStateMethodsJs = require("../utils/buttongroup/ButtonStateMethods.js");
var _buttonStateMethodsJsDefault = parcelHelpers.interopDefault(_buttonStateMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Buttons extends (0, _fixWidthSizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var buttonSpace = config.space;
        if (typeof buttonSpace === "number") config.space = {
            item: buttonSpace,
            line: buttonSpace
        };
        // Create
        super(scene, config);
        this.type = "rexFixWidthButtons";
        this.buttonGroup = new (0, _buttonGroupJsDefault.default)({
            parent: this,
            eventEmitter: GetValue(config, "eventEmitter", this),
            groupName: GetValue(config, "groupName", undefined),
            clickConfig: GetValue(config, "click", undefined)
        }).setButtonsType(config);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var buttons = GetValue(config, "buttons", undefined);
        // Buttons properties
        this.buttonsAlign = GetValue(config, "align", undefined);
        if (background) this.addBackground(background);
        if (buttons) this.addButtons(buttons);
        this.addChildrenMap("background", background);
        this.addChildrenMap("buttons", this.buttonGroup.buttons);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.buttonGroup.destroy();
        this.buttonGroup = undefined;
    }
    get buttons() {
        return this.buttonGroup.buttons;
    }
    get groupName() {
        return this.buttonGroup.groupName;
    }
    set groupName(value) {
        this.buttonGroup.groupName = value;
    }
    get eventEmitter() {
        return this.buttonGroup.eventEmitter;
    }
}
Object.assign(Buttons.prototype, (0, _addChildMethodsJsDefault.default), (0, _removeChildMethodsJsDefault.default), (0, _buttonMethodsJsDefault.default), (0, _buttonStateMethodsJsDefault.default));
exports.default = Buttons;

},{"../fixwidthsizer/FixWidthSizer.js":"fiEyN","./AddChildMethods.js":"dku4v","./RemoveChildMethods.js":"359UX","../utils/buttongroup/ButtonGroup.js":"ekJgM","../utils/buttongroup/ButtonMethods.js":"cYtmS","../utils/buttongroup/ButtonStateMethods.js":"6HTnP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dku4v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fixWidthSizerJs = require("../fixwidthsizer/FixWidthSizer.js");
var _fixWidthSizerJsDefault = parcelHelpers.interopDefault(_fixWidthSizerJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const SizerAdd = (0, _fixWidthSizerJsDefault.default).prototype.add;
var Add = function(gameObject) {
    SizerAdd.call(this, gameObject);
    this.buttonGroup.add(gameObject);
    return this;
};
exports.default = {
    addButton (gameObject) {
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i]);
        } else Add.call(this, gameObject);
        return this;
    },
    addButtons (gameObjects) {
        if ((0, _isArrayJsDefault.default)(gameObjects[0])) {
            // 2d array
            var lines = gameObjects, line;
            for(var lineIdx = 0, lastLineIdx = lines.length - 1; lineIdx <= lastLineIdx; lineIdx++){
                line = lines[lineIdx];
                for(var i = 0, cnt = line.length; i < cnt; i++)Add.call(this, line[i]);
                if (lineIdx > lastLineIdx) SizerAdd.addNewLine(this);
            }
        } else // 1d array
        for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Add.call(this, gameObjects[i]);
        return this;
    }
};

},{"../fixwidthsizer/FixWidthSizer.js":"fiEyN","../../../plugins/utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"359UX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fixWidthSizerJs = require("../fixwidthsizer/FixWidthSizer.js");
var _fixWidthSizerJsDefault = parcelHelpers.interopDefault(_fixWidthSizerJs);
var _isArrayJs = require("../../../plugins/utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const SizerRmove = (0, _fixWidthSizerJsDefault.default).prototype.remove;
const SizerClear = (0, _fixWidthSizerJsDefault.default).prototype.clear;
var Remove = function(gameObject, destroyChild) {
    var gameObject = this.getButton(gameObject);
    if (!gameObject) return this;
    this.buttonGroup.remove(gameObject);
    SizerRmove.call(this, gameObject, destroyChild);
    return this;
};
exports.default = {
    remove (gameObject, destroyChild) {
        if ((0, _isArrayJsDefault.default)(gameObject)) {
            var gameObjects = gameObject;
            for(var i = 0, cnt = gameObjects.length; i < cnt; i++)Remove.call(this, gameObjects[i], destroyChild);
        } else Remove.call(this, gameObject, destroyChild);
        return this;
    },
    clear (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        buttons.length = 0;
        SizerClear.call(this, destroyChild);
        return this;
    },
    removeButton (gameObject, destroyChild) {
        this.remove(gameObject, destroyChild);
        return this;
    },
    clearButtons (destroyChild) {
        var buttons = this.buttonGroup.buttons;
        for(var i = buttons.length - 1; i >= 0; i--)Remove.call(this, buttons[i], destroyChild);
        return this;
    }
};

},{"../fixwidthsizer/FixWidthSizer.js":"fiEyN","../../../plugins/utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Hx5D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fileSelectorButtonJs = require("./FileSelectorButton.js");
var _fileSelectorButtonJsDefault = parcelHelpers.interopDefault(_fileSelectorButtonJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("fileSelectorButton", function(config) {
    var gameObject = new (0, _fileSelectorButtonJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.FileSelectorButton", (0, _fileSelectorButtonJsDefault.default));
exports.default = (0, _fileSelectorButtonJsDefault.default);

},{"./FileSelectorButton.js":"hrXIK","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hrXIK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("../label/Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _fileChooserJs = require("../filechooser/FileChooser.js");
var _fileChooserMethodsJs = require("./FileChooserMethods.js");
var _fileChooserMethodsJsDefault = parcelHelpers.interopDefault(_fileChooserMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class FileSelectorButton extends (0, _labelJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexFileSelectorButton";
        var fileChooser = new (0, _fileChooserJs.FileChooser)(scene);
        scene.add.existing(fileChooser);
        this.addBackground(fileChooser);
        this.addChildrenMap("fileChooser", fileChooser);
        this.setAccept(GetValue(config, "accept", ""));
        this.setMultiple(GetValue(config, "multiple", false));
        fileChooser.on("change", function(gameObject) {
            var files = gameObject.files;
            if (files.length === 0) return;
            files = Array.from(files);
            this.emit("select", files, this);
        }, this);
    }
    get files() {
        return this.childrenMap.fileChooser.files;
    }
}
Object.assign(FileSelectorButton.prototype, (0, _fileChooserMethodsJsDefault.default));
exports.default = FileSelectorButton;

},{"../label/Label.js":"bHkqt","../filechooser/FileChooser.js":"cgKZ9","./FileChooserMethods.js":"dDM0y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDM0y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setAccept (accept) {
        this.childrenMap.fileChooser.setAccept(accept);
        return this;
    },
    setMultiple (enabled) {
        this.childrenMap.fileChooser.setMultiple(enabled);
        return this;
    },
    loadFile (file, loaderType, key, cacheType, onComplete) {
        this.childrenMap.fileChooser.loadFile(file, loaderType, key, cacheType, onComplete);
        return this;
    },
    loadFilePromise (file, loaderType, key, cacheType) {
        return this.childrenMap.fileChooser.loadFilePromise(file, loaderType, key, cacheType);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cP1Mg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dialogJs = require("./Dialog.js");
var _dialogJsDefault = parcelHelpers.interopDefault(_dialogJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("dialog", function(config) {
    var gameObject = new (0, _dialogJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Dialog", (0, _dialogJsDefault.default));
exports.default = (0, _dialogJsDefault.default);

},{"./Dialog.js":"aFdNX","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFdNX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _buttonsJs = require("../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _fixWidthButtonsJs = require("../fixwidthbuttons/FixWidthButtons.js");
var _fixWidthButtonsJsDefault = parcelHelpers.interopDefault(_fixWidthButtonsJs);
var _gridButtonsJs = require("../gridbuttons/GridButtons.js");
var _gridButtonsJsDefault = parcelHelpers.interopDefault(_gridButtonsJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Dialog extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create sizer        
        config.orientation = 1; // Top to bottom
        super(scene, config);
        this.type = "rexDialog";
        this.eventEmitter = GetValue(config, "eventEmitter", this);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var title = GetValue(config, "title", undefined);
        var toolbar = GetValue(config, "toolbar", undefined);
        var toolbarBackground = GetValue(config, "toolbarBackground", undefined);
        var leftToolbar = GetValue(config, "leftToolbar", undefined);
        var leftToolbarBackground = GetValue(config, "leftToolbarBackground", undefined);
        var content = GetValue(config, "content", undefined);
        var description = GetValue(config, "description", undefined);
        var choicesSizer;
        var choices = GetValue(config, "choices", undefined);
        var choicesBackground = GetValue(config, "choicesBackground", undefined);
        var actionsSizer;
        var actions = GetValue(config, "actions", undefined);
        var actionsBackground = GetValue(config, "actionsBackground", undefined);
        var clickConfig = GetValue(config, "click", undefined);
        if (background) this.addBackground(background);
        var toolbarSizer;
        if (toolbar) toolbarSizer = new (0, _buttonsJsDefault.default)(scene, {
            groupName: "toolbar",
            background: toolbarBackground,
            buttons: toolbar,
            orientation: 0,
            space: {
                item: GetValue(config, "space.toolbarItem", 0)
            },
            click: clickConfig,
            eventEmitter: this.eventEmitter
        });
        var leftToolbarSizer;
        if (leftToolbar) leftToolbarSizer = new (0, _buttonsJsDefault.default)(scene, {
            groupName: "leftToolbar",
            background: leftToolbarBackground,
            buttons: leftToolbar,
            orientation: 0,
            space: {
                item: GetValue(config, "space.leftToolbarItem", 0)
            },
            click: clickConfig,
            eventEmitter: this.eventEmitter
        });
        // title or toolbar or leftToolbar
        if (title || toolbar || leftToolbar) {
            var titleExpandWidth = !!title && GetValue(config, "expand.title", true);
            var titleAlign = GetValue(config, "align.title", "center");
            var useOverlapSizer = // Has title, title is not exapnd-width, title align to center
            title && !titleExpandWidth && titleAlign === "center" || // No title
            !title && (toolbar || leftToolbar);
            var useSizer = !useOverlapSizer;
            var titleSizer;
            if (useSizer) titleSizer = new (0, _sizerJsDefault.default)(scene, {
                orientation: 0
            });
            else titleSizer = new (0, _overlapSizerJsDefault.default)(scene);
            var titleChildExpand = useSizer ? true : {
                height: true
            };
            // Add leftToolbar
            if (leftToolbarSizer) titleSizer.add(leftToolbarSizer, {
                align: "left",
                expand: titleChildExpand
            });
            // Add title
            if (title) {
                // Add space if not expand, align to right
                if (useSizer && !titleExpandWidth && titleAlign === "right") titleSizer.addSpace();
                var padding = {
                    left: GetValue(config, "space.titleLeft", 0),
                    right: GetValue(config, "space.titleRight", 0)
                };
                var proportion = titleExpandWidth ? 1 : 0;
                titleSizer.add(title, {
                    align: titleAlign,
                    proportion: proportion,
                    expand: titleChildExpand,
                    padding: padding
                });
                // Add space if not expand, align to left
                if (useSizer && !titleExpandWidth && titleAlign === "left") titleSizer.addSpace();
            }
            // Add toolbar
            if (toolbarSizer) {
                // Add space if not title
                if (useSizer && !title) titleSizer.addSpace();
                titleSizer.add(toolbarSizer, {
                    align: "right",
                    expand: titleChildExpand
                });
            }
            // Add sizer to dialog
            var titleSpace = GetValue(config, "space.title", 0);
            var padding;
            if (content || description || choices || actions) padding = {
                bottom: titleSpace
            };
            var proportion = GetValue(config, "proportion.title", 0);
            this.add(titleSizer, {
                padding: padding,
                proportion: proportion,
                expand: true
            });
        }
        if (content) {
            var align = GetValue(config, "align.content", "center");
            var contentSpace = GetValue(config, "space.content", 0);
            var padding = {
                left: GetValue(config, "space.contentLeft", 0),
                right: GetValue(config, "space.contentRight", 0),
                bottom: description || choices || actions ? contentSpace : 0
            };
            var proportion = GetValue(config, "proportion.content", 0);
            var expand = GetValue(config, "expand.content", true);
            this.add(content, {
                align: align,
                padding: padding,
                proportion: proportion,
                expand: expand
            });
        }
        if (description) {
            var align = GetValue(config, "align.description", "center");
            var descriptionSpace = GetValue(config, "space.description", 0);
            var padding = {
                left: GetValue(config, "space.descriptionLeft", 0),
                right: GetValue(config, "space.descriptionRight", 0),
                bottom: choices || actions ? descriptionSpace : 0
            };
            var proportion = GetValue(config, "proportion.description", 0);
            var expand = GetValue(config, "expand.description", true);
            this.add(description, {
                align: align,
                padding: padding,
                proportion: proportion,
                expand: expand
            });
        }
        if (choices) {
            var choicesType = GetValue(config, "choicesType", "").split("-");
            var ButtonsClass = Contains(choicesType, "wrap") ? (0, _fixWidthButtonsJsDefault.default) : Contains(choicesType, "grid") ? (0, _gridButtonsJsDefault.default) : (0, _buttonsJsDefault.default);
            var buttonsType = Contains(choicesType, "radio") ? "radio" : Contains(choicesType, "checkboxes") ? "checkboxes" : undefined;
            var space = {
                left: GetValue(config, "space.choicesBackgroundLeft", 0),
                right: GetValue(config, "space.choicesBackgroundRight", 0),
                top: GetValue(config, "space.choicesBackgroundTop", 0),
                bottom: GetValue(config, "space.choicesBackgroundBottom", 0)
            };
            var itemSpace = GetValue(config, "space.choice", 0);
            if (ButtonsClass === (0, _buttonsJsDefault.default)) space.item = itemSpace;
            else if (ButtonsClass === (0, _fixWidthButtonsJsDefault.default)) {
                space.item = itemSpace;
                space.line = GetValue(config, "space.choiceLine", itemSpace);
            } else {
                space.column = GetValue(config, "space.choiceColumn", itemSpace);
                space.row = GetValue(config, "space.choiceRow", itemSpace);
            }
            var choicesConfig = {
                width: GetValue(config, "choicesWidth", undefined),
                height: GetValue(config, "choicesHeight", undefined),
                groupName: "choices",
                buttonsType: buttonsType,
                background: choicesBackground,
                buttons: choices,
                space: space,
                click: clickConfig,
                eventEmitter: this.eventEmitter,
                setValueCallback: GetValue(config, "choicesSetValueCallback", undefined),
                setValueCallbackScope: GetValue(config, "choicesSetValueCallbackScope", undefined)
            };
            if (ButtonsClass === (0, _buttonsJsDefault.default)) choicesConfig.orientation = Contains(choicesType, "x") ? 0 : 1;
            choicesSizer = new ButtonsClass(scene, choicesConfig);
            var choicesSpace = GetValue(config, "space.choices", 0);
            var padding = {
                left: GetValue(config, "space.choicesLeft", 0),
                right: GetValue(config, "space.choicesRight", 0),
                bottom: actions ? choicesSpace : 0
            };
            var align = GetValue(config, "align.choices", "center");
            var proportion = GetValue(config, "proportion.choices", 0);
            var expand = GetValue(config, "expand.choices", true);
            this.add(choicesSizer, {
                align: align,
                padding: padding,
                proportion: proportion,
                expand: expand
            });
            this.buttonsType = buttonsType;
        }
        if (actions) {
            actionsSizer = new (0, _buttonsJsDefault.default)(scene, {
                groupName: "actions",
                background: actionsBackground,
                buttons: actions,
                orientation: 0,
                space: {
                    item: GetValue(config, "space.action", 0)
                },
                expand: GetValue(config, "expand.actions", false),
                align: GetValue(config, "align.actions", "center"),
                click: clickConfig,
                eventEmitter: this.eventEmitter
            });
            var padding = {
                left: GetValue(config, "space.actionsLeft", 0),
                right: GetValue(config, "space.actionsRight", 0)
            };
            var proportion = GetValue(config, "proportion.action", 0);
            this.add(actionsSizer, {
                align: "center",
                padding: padding,
                proportion: proportion,
                expand: true
            });
        }
        EmitButtonEvent(this, "click");
        EmitButtonEvent(this, "over");
        EmitButtonEvent(this, "out");
        EmitButtonEvent(this, "enable");
        EmitButtonEvent(this, "disable");
        this.addChildrenMap("background", background);
        this.addChildrenMap("title", title);
        this.addChildrenMap("toolbar", toolbar);
        this.addChildrenMap("leftToolbar", leftToolbar);
        this.addChildrenMap("content", content);
        this.addChildrenMap("description", description);
        this.addChildrenMap("choices", choicesSizer ? choicesSizer.buttons : undefined);
        this.addChildrenMap("actions", actionsSizer ? actionsSizer.buttons : undefined);
        this.addChildrenMap("choicesSizer", choicesSizer);
        this.addChildrenMap("actionsSizer", actionsSizer);
        this.addChildrenMap("toolbarSizer", toolbarSizer);
        this.addChildrenMap("leftToolbarSizer", leftToolbarSizer);
    }
}
var Contains = function(arr, item) {
    return arr.indexOf(item) !== -1;
};
var ButtonsGroupEventNameMap = {
    actions: "action",
    choices: "choice",
    toolbar: "toolbar",
    leftToolbar: "leftToolbar"
};
var EmitButtonEvent = function(dialog, postEventName) {
    dialog.on(`button.${postEventName}`, function(button, groupName, index, pointer, event) {
        if (!ButtonsGroupEventNameMap.hasOwnProperty(groupName)) return;
        dialog.emit(`${ButtonsGroupEventNameMap[groupName]}.${postEventName}`, button, index, pointer, event);
    });
};
Object.assign(Dialog.prototype, (0, _methodsJsDefault.default));
exports.default = Dialog;

},{"../sizer/Sizer.js":"ayu5S","../overlapsizer/OverlapSizer.js":"gx7j1","../buttons/Buttons.js":"9NfMe","../fixwidthbuttons/FixWidthButtons.js":"f4zsx","../gridbuttons/GridButtons.js":"idSMH","./methods/Methods.js":"gMvvK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMvvK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonMethodsJs = require("./ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
var _modalMethodsJs = require("./ModalMethods.js");
var _modalMethodsJsDefault = parcelHelpers.interopDefault(_modalMethodsJs);
var Methods = {};
Object.assign(Methods, (0, _buttonMethodsJsDefault.default), (0, _modalMethodsJsDefault.default));
exports.default = Methods;

},{"./ButtonMethods.js":"fjyzI","./ModalMethods.js":"joOAU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fjyzI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getChoice (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) return choicesSizer.getButton(index);
        else return undefined;
    },
    getAction (index) {
        return this.childrenMap.actionsSizer.getButton(index);
    },
    getToolbar (index) {
        return this.childrenMap.toolbarSizer.getButton(index);
    },
    getLeftToolbar (index) {
        return this.childrenMap.leftToolbarSizer.getButton(index);
    },
    setChoiceEnable (index, enabled) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.setButtonEnable(index, enabled);
        return this;
    },
    setActionEnable (index, enabled) {
        this.childrenMap.actionsSizer.setButtonEnable(index, enabled);
        return this;
    },
    setToolbarEnable (index, enabled) {
        this.childrenMap.toolbarSizer.setButtonEnable(index, enabled);
        return this;
    },
    setLeftToolbarEnable (index, enabled) {
        this.childrenMap.leftToolbarSizer.setButtonEnable(index, enabled);
        return this;
    },
    toggleChoiceEnable (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.toggleButtonEnable(index);
        return this;
    },
    toggleActionEnable (index) {
        this.childrenMap.actionsSizer.toggleButtonEnable(index);
        return this;
    },
    toggleToolbarEnable (index) {
        this.childrenMap.toolbarSizer.toggleButtonEnable(index);
        return this;
    },
    toggleLeftToolbarEnable (index) {
        this.childrenMap.leftToolbarSizer.toggleButtonEnable(index);
        return this;
    },
    getChoiceEnable (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) return choicesSizer.getButtonEnable(index);
        else return false;
    },
    getActionEnable (index) {
        return this.childrenMap.actionsSizer.getButtonEnable(index);
    },
    getToolbarEnable (index) {
        return this.childrenMap.toolbarSizer.getButtonEnable(index);
    },
    getLeftToolbarEnable (index) {
        return this.childrenMap.leftToolbarSizer.getButtonEnable(index);
    },
    emitChoiceClick (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.emitButtonClick(index);
        return this;
    },
    emitActionClick (index) {
        this.childrenMap.actionsSizer.emitButtonClick(index);
        return this;
    },
    emitToolbarClick (index) {
        this.childrenMap.toolbarSizer.emitButtonClick(index);
        return this;
    },
    emitLeftToolbarClick (index) {
        this.childrenMap.leftToolbarSizer.emitButtonClick(index);
        return this;
    },
    showChoice (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.showButton(index);
        return this;
    },
    showAction (index) {
        this.childrenMap.actionsSizer.showButton(index);
        return this;
    },
    showToolbar (index) {
        this.childrenMap.toolbarSizer.showButton(index);
        return this;
    },
    showLeftToolbar (index) {
        this.childrenMap.leftToolbarSizer.showButton(index);
        return this;
    },
    hideChoice (index) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.hideButton(index);
        return this;
    },
    hideAction (index) {
        this.childrenMap.actionsSizer.hideButton(index);
        return this;
    },
    hideToolbar (index) {
        this.childrenMap.toolbarSizer.hideButton(index);
        return this;
    },
    hideLeftToolbar (index) {
        this.childrenMap.leftToolbarSizer.hideButton(index);
        return this;
    },
    addChoice (gameObject) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.addButton(gameObject);
        return this;
    },
    addAction (gameObject) {
        this.childrenMap.actionsSizer.addButton(gameObject);
        return this;
    },
    addToolbar (gameObject) {
        this.childrenMap.toolbarSizer.addButton(gameObject);
        return this;
    },
    addLeftToolbar (gameObject) {
        this.childrenMap.leftToolbarSizer.addButton(gameObject);
        return this;
    },
    removeChoice (index, destroyChild) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.removeButton(index, destroyChild);
        return this;
    },
    removeAction (index, destroyChild) {
        this.childrenMap.actionsSizer.removeButton(index, destroyChild);
        return this;
    },
    removeToolbar (index, destroyChild) {
        this.childrenMap.toolbarSizer.removeButton(index, destroyChild);
        return this;
    },
    removeLeftToolbar (index, destroyChild) {
        this.childrenMap.leftToolbarSizer.removeButton(index, destroyChild);
        return this;
    },
    clearChoices (destroyChild) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.clearButtons(destroyChild);
        return this;
    },
    clearActions (destroyChild) {
        this.childrenMap.actionsSizer.clearButtons(destroyChild);
        return this;
    },
    clearToolbar (destroyChild) {
        this.childrenMap.toolbarSizer.clearButtons(destroyChild);
        return this;
    },
    clearLeftToolbar (destroyChild) {
        this.childrenMap.leftToolbarSizer.clearButtons(destroyChild);
        return this;
    },
    forEachChoice (callback, scope) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachAction (callback, scope) {
        this.childrenMap.actionsSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachToolbar (callback, scope) {
        this.childrenMap.toolbarSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachLeftToolbar (callback, scope) {
        this.childrenMap.leftToolbarSizer.forEachButtton(callback, scope);
        return this;
    },
    setAllButtonsEnable (enabled) {
        if (enabled === undefined) enabled = true;
        if (this.childrenMap.toolbarSizer) this.setToolbarEnable(enabled);
        if (this.childrenMap.leftToolbarSizer) this.setLeftToolbarEnable(enabled);
        if (this.childrenMap.actionsSizer) this.setActionEnable(enabled);
        if (this.childrenMap.choicesSizer) this.setChoiceEnable(enabled);
        return this;
    },
    // Checkboxes
    getChoicesButtonStates () {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) return choicesSizer.getAllButtonsState();
        else return {};
    },
    getChoicesButtonState (name) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (name === undefined) {
            if (choicesSizer) return choicesSizer.getAllButtonsState();
            else return {};
        } else {
            if (choicesSizer) return choicesSizer.getButtonState(name);
            else return false;
        }
    },
    setChoicesButtonState (name, state) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.setButtonState(name, state);
        return this;
    },
    clearChoicesButtonStates () {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.clearAllButtonsState();
        return this;
    },
    // Radio buttons
    getChoicesSelectedButtonName () {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) return choicesSizer.getSelectedButtonName();
        else return "";
    },
    setChoicesSelectedButtonName (name) {
        var choicesSizer = this.childrenMap.choicesSizer;
        if (choicesSizer) choicesSizer.setSelectedButtonName(name);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joOAU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _modalMethodsJs = require("../../basesizer/ModalMethods.js");
var _modalMethodsJsDefault = parcelHelpers.interopDefault(_modalMethodsJs);
exports.default = {
    onCreateModalBehavior (self) {
        self.on("button.click", function(button, groupName, index, pointer, event) {
            if (groupName !== "actions") return;
            var closeEventData = {
                index: index,
                text: button.text,
                button: button,
                dialog: self
            };
            switch(self.buttonsType){
                case "radio":
                    closeEventData.value = self.getChoicesSelectedButtonName();
                    break;
                case "checkboxes":
                    closeEventData.value = self.getChoicesButtonStates();
                    break;
                default:
                    closeEventData.value = undefined;
            }
            self.modalClose(closeEventData);
        });
    },
    modal (config, onClose) {
        if (config && config.defaultBehavior === false) this.onCreateModalBehavior = false;
        else delete this.onCreateModalBehavior;
        (0, _modalMethodsJsDefault.default).modal.call(this, config, onClose);
        return this;
    }
};

},{"../../basesizer/ModalMethods.js":"kM77h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2bfrS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _confirmDialogJs = require("./ConfirmDialog.js");
var _confirmDialogJsDefault = parcelHelpers.interopDefault(_confirmDialogJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("confirmDialog", function(config, creators) {
    var gameObject = new (0, _confirmDialogJsDefault.default)(this.scene, config, creators);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ConfirmDialog", (0, _confirmDialogJsDefault.default));
exports.default = (0, _confirmDialogJsDefault.default);

},{"./ConfirmDialog.js":"enWz5","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enWz5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dialogJs = require("../dialog/Dialog.js");
var _dialogJsDefault = parcelHelpers.interopDefault(_dialogJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _registerEventsJs = require("./methods/RegisterEvents.js");
var _registerEventsJsDefault = parcelHelpers.interopDefault(_registerEventsJs);
var _deepCloneJs = require("../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var _createBackgroundJs = require("../utils/build/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _createLabelJs = require("../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _createContentJs = require("./methods/CreateContent.js");
var _createContentJsDefault = parcelHelpers.interopDefault(_createContentJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
var _hasValueJs = require("../../../plugins/utils/object/HasValue.js");
var _hasValueJsDefault = parcelHelpers.interopDefault(_hasValueJs);
var _textAreaJs = require("../textarea/TextArea.js");
var _textAreaJsDefault = parcelHelpers.interopDefault(_textAreaJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ConfirmDialog extends (0, _dialogJsDefault.default) {
    constructor(scene, config, creators){
        config = config ? (0, _deepCloneJsDefault.default)(config) : {};
        if (creators === undefined) creators = {};
        var createBackground = GetValue(creators, "background", (0, _createBackgroundJsDefault.default));
        if (createBackground) config.background = createBackground(scene, config.background);
        else delete config.background;
        config.title = (0, _createLabelJsDefault.default)(scene, config.title, creators.title);
        config.content = (0, _createContentJsDefault.default)(scene, config.content, creators.content);
        if (config.content instanceof (0, _textAreaJsDefault.default)) {
            if ((0, _hasValueJsDefault.default)(config, "height") && !(0, _hasValueJsDefault.default)(config, "proportion.content")) (0, _setValueJsDefault.default)(config, "proportion.content", 1);
        }
        var defaultButtonConfig = config.button;
        var buttonAConfig = config.buttonA || defaultButtonConfig;
        var buttonBConfig = config.buttonB || defaultButtonConfig;
        var buttonMode = config.buttonMode;
        if (buttonMode === undefined) buttonMode = !!buttonAConfig && !!buttonBConfig ? 2 : !!buttonAConfig ? 1 : 0;
        var defaultButtonCreator = creators.button;
        var buttonACreators = creators.buttonA || defaultButtonCreator;
        var buttonBCreators = creators.buttonB || defaultButtonCreator;
        switch(buttonMode){
            case 2:
                config.actions = [
                    (0, _createLabelJsDefault.default)(scene, buttonAConfig, buttonACreators),
                    (0, _createLabelJsDefault.default)(scene, buttonBConfig, buttonBCreators)
                ];
                break;
            case 1:
                config.actions = [
                    (0, _createLabelJsDefault.default)(scene, buttonAConfig, buttonACreators)
                ];
                break;
            case 0:
                break;
            default:
                config.actions = [];
                break;
        }
        var defaultChoiceConfig = config.choice;
        if (defaultChoiceConfig) config.choices = [];
        super(scene, config);
        this.type = "rexConfirmDialog";
        this.buttonMode = buttonMode;
        this.defaultActionConfig = defaultButtonConfig;
        this.defaultActionButtonCreator = defaultButtonCreator;
        this.defaultChoiceConfig = defaultChoiceConfig;
        this.defaultChoiceCreator = creators.choice;
        var buttons = this.childrenMap.actions;
        this.addChildrenMap("buttonA", buttons ? buttons[0] : null);
        this.addChildrenMap("buttonB", buttons ? buttons[1] : null);
        // Interactive
        (0, _registerEventsJsDefault.default).call(this);
    }
}
Object.assign(ConfirmDialog.prototype, (0, _methodsJsDefault.default));
exports.default = ConfirmDialog;

},{"../dialog/Dialog.js":"aFdNX","./methods/Methods.js":"dpEdS","./methods/RegisterEvents.js":"1UjLa","../../../plugins/utils/object/DeepClone.js":"7G9ja","../utils/build/CreateBackground.js":"aOfVE","../utils/build/CreateLabel.js":"kvGzR","./methods/CreateContent.js":"bafZD","../../../plugins/utils/object/SetValue.js":"eUEYa","../../../plugins/utils/object/HasValue.js":"5PX6B","../textarea/TextArea.js":"hHstl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpEdS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resetDisplayContentJs = require("./ResetDisplayContent.js");
var _resetDisplayContentJsDefault = parcelHelpers.interopDefault(_resetDisplayContentJs);
var _modalJs = require("./Modal.js");
var _modalJsDefault = parcelHelpers.interopDefault(_modalJs);
var Methods = {
    resetDisplayContent: (0, _resetDisplayContentJsDefault.default),
    modal: (0, _modalJsDefault.default)
};
exports.default = Methods;

},{"./ResetDisplayContent.js":"33jdK","./Modal.js":"aHqD6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33jdK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createLabelJs = require("../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var ResetDisplayContent = function(config) {
    if (config === undefined) config = {};
    ResetTitle.call(this, config);
    ResetContent.call(this, config);
    ResetActions.call(this, config);
    ResetChoices.call(this, config);
    return this;
};
var ResetTitle = function(config) {
    var title = this.childrenMap.title;
    title.resetDisplayContent(config.title);
};
var ResetContent = function(config) {
    var content = this.childrenMap.content;
    if (content.resetDisplayContent) // Label
    content.resetDisplayContent(config.content);
    else {
        // TextArea
        var text = config.content || "";
        content.setText(text);
    }
};
var ResetActions = function(config) {
    var actionButtons = this.childrenMap.actions;
    if (!actionButtons) return;
    var buttonContentArray = config.buttons;
    if (!buttonContentArray) {
        var buttonA = actionButtons[0];
        if (buttonA) buttonA.resetDisplayContent(config.buttonA);
        var buttonB = actionButtons[1];
        if (buttonB) buttonB.resetDisplayContent(config.buttonB);
    } else {
        var scene = this.scene;
        var defaultActionConfig = this.defaultActionConfig;
        var defaultActionButtonCreator = this.defaultActionButtonCreator;
        for(var i = 0, cnt = buttonContentArray.length; i < cnt; i++){
            var buttonContent = buttonContentArray[i];
            var button = actionButtons[i];
            if (!button) {
                button = (0, _createLabelJsDefault.default)(scene, defaultActionConfig, defaultActionButtonCreator);
                this.addAction(button);
            }
            button.show().resetDisplayContent(buttonContent);
        }
        this.buttonMode = buttonContentArray.length;
        for(var i = buttonContentArray.length, cnt = actionButtons.length; i < cnt; i++)actionButtons[i].hide();
    }
};
var ResetChoices = function(config) {
    var choices = this.childrenMap.choices;
    if (!choices) return;
    var buttonContentArray = config.choices;
    if (!buttonContentArray) buttonContentArray = [];
    var scene = this.scene;
    var defaultChoiceConfig = this.defaultChoiceConfig;
    var defaultActionButtonCreator = this.defaultActionButtonCreator;
    for(var i = 0, cnt = buttonContentArray.length; i < cnt; i++){
        var buttonContent = buttonContentArray[i];
        if (typeof buttonContent === "string") buttonContent = {
            text: buttonContent
        };
        var button = choices[i];
        if (!button) {
            button = (0, _createLabelJsDefault.default)(scene, defaultChoiceConfig, defaultActionButtonCreator);
            this.addChoice(button);
        }
        button.show().resetDisplayContent(buttonContent);
        var optionValue;
        if (buttonContent.hasOwnProperty("value")) optionValue = buttonContent.value;
        else optionValue = buttonContent.text;
        button.setName(optionValue);
    }
    for(var i = buttonContentArray.length, cnt = choices.length; i < cnt; i++)choices[i].hide();
};
exports.default = ResetDisplayContent;

},{"../../utils/build/CreateLabel.js":"kvGzR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kvGzR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _simpleLabelJs = require("../../simplelabel/SimpleLabel.js");
var _simpleLabelJsDefault = parcelHelpers.interopDefault(_simpleLabelJs);
var CreateLabel = function(scene, config, creators) {
    var gameObject = new (0, _simpleLabelJsDefault.default)(scene, config, creators);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateLabel;

},{"../../simplelabel/SimpleLabel.js":"jR2zM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHqD6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require("../../../../plugins/utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _modalMethodsJs = require("../../basesizer/ModalMethods.js");
var _modalMethodsJsDefault = parcelHelpers.interopDefault(_modalMethodsJs);
var Modal = function(config, onClose) {
    if ((0, _isFunctionJsDefault.default)(config)) {
        onClose = config;
        config = undefined;
    }
    if (config === undefined) config = {};
    var zeroButtonMode = this.buttonMode === 0;
    if (!config.hasOwnProperty("anyTouchClose")) config.anyTouchClose = zeroButtonMode;
    if (!config.hasOwnProperty("manualClose")) config.manualClose = !zeroButtonMode;
    (0, _modalMethodsJsDefault.default).modal.call(this, config, onClose);
    return this;
};
exports.default = Modal;

},{"../../../../plugins/utils/object/IsFunction.js":"5hi03","../../basesizer/ModalMethods.js":"kM77h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UjLa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var OnPointerOverCallback = function(button) {
    if (button.setHoverState) button.setHoverState(true);
};
var OnPointerOutCallback = function(button) {
    if (button.setHoverState) button.setHoverState(false);
};
var OnChoiceButtonStateChange = function(button, groupName, index, value) {
    if (button.setActiveState) button.setActiveState(value);
};
var OnButtonEnable = function(button) {
    if (button.setDisableState) button.setDisableState(false);
};
var OnButtonDisable = function(button) {
    if (button.setDisableState) button.setDisableState(true);
};
var RegisterEvents = function() {
    this.on("button.over", OnPointerOverCallback).on("button.out", OnPointerOutCallback).on("button.enable", OnButtonEnable).on("button.disable", OnButtonDisable).on("button.statechange", OnChoiceButtonStateChange);
};
exports.default = RegisterEvents;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bafZD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createLabelJs = require("../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _createTextAreaJs = require("../../utils/build/CreateTextArea.js");
var _createTextAreaJsDefault = parcelHelpers.interopDefault(_createTextAreaJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateContent = function(scene, config, creators) {
    var type = GetValue(config, "$type");
    if (type === undefined) {
        if (config && (config.hasOwnProperty("slider") || config.hasOwnProperty("scroller"))) type = "textarea";
    }
    var gameObject;
    switch(type){
        case "textarea":
            gameObject = new (0, _createTextAreaJsDefault.default)(scene, config, creators);
            break;
        default:
            gameObject = new (0, _createLabelJsDefault.default)(scene, config, creators);
            break;
    }
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateContent;

},{"../../utils/build/CreateLabel.js":"kvGzR","../../utils/build/CreateTextArea.js":"lY2UI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lY2UI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepCloneJs = require("../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var _createBackgroundJs = require("./CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _createTextJs = require("./CreateText.js");
var _createTextJsDefault = parcelHelpers.interopDefault(_createTextJs);
var _textAreaJs = require("../../textarea/TextArea.js");
var _textAreaJsDefault = parcelHelpers.interopDefault(_textAreaJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateTextArea = function(scene, config, creators) {
    config = config ? (0, _deepCloneJsDefault.default)(config) : {};
    var createBackground = GetValue(creators, "background", (0, _createBackgroundJsDefault.default));
    var createText = GetValue(creators, "text", (0, _createTextJsDefault.default));
    var createTrack = GetValue(creators, "track", (0, _createBackgroundJsDefault.default));
    var createThumb = GetValue(creators, "thumb", (0, _createBackgroundJsDefault.default));
    if (createBackground) config.background = createBackground(scene, config.background);
    else delete config.background;
    if (createText) config.text = createText(scene, config.text);
    else delete config.text;
    var sliderConfig = config.slider;
    if (sliderConfig !== false) {
        if (sliderConfig === undefined) sliderConfig = {};
        if (createTrack) sliderConfig.track = createTrack(scene, sliderConfig.track);
        else delete sliderConfig.track;
        if (createThumb) sliderConfig.thumb = createThumb(scene, sliderConfig.thumb);
        else delete sliderConfig.thumb;
        config.slider = sliderConfig;
    }
    // No header
    // No footer
    var gameObject = new (0, _textAreaJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateTextArea;

},{"../../../../plugins/utils/object/DeepClone.js":"7G9ja","./CreateBackground.js":"aOfVE","./CreateText.js":"89iKQ","../../textarea/TextArea.js":"hHstl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHstl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollableJs = require("../utils/scrollable/Scrollable.js");
var _scrollableJsDefault = parcelHelpers.interopDefault(_scrollableJs);
var _textBlockJs = require("./textblock/TextBlock.js");
var _textBlockJsDefault = parcelHelpers.interopDefault(_textBlockJs);
var _injectPropertiesJs = require("./InjectProperties.js");
var _injectPropertiesJsDefault = parcelHelpers.interopDefault(_injectPropertiesJs);
var _setTextMethodsJs = require("./SetTextMethods.js");
var _setTextMethodsJsDefault = parcelHelpers.interopDefault(_setTextMethodsJs);
var _scrollMethodsJs = require("./ScrollMethods.js");
var _scrollMethodsJsDefault = parcelHelpers.interopDefault(_scrollMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TextArea extends (0, _scrollableJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create text-block
        var textObject = GetValue(config, "text", undefined);
        var textWidth = GetValue(config, "textWidth", undefined);
        var textHeight = GetValue(config, "textHeight", undefined);
        var textCrop = GetValue(config, "textCrop", !!textObject.setCrop);
        var textMask = GetValue(config, "textMask", !textCrop);
        var content = GetValue(config, "content", "");
        var textBlock = new (0, _textBlockJsDefault.default)(scene, {
            width: textWidth,
            height: textHeight,
            text: textObject,
            textMask: textMask,
            textCrop: textCrop && !textMask,
            content: content,
            clamplTextOY: GetValue(config, "clamplChildOY", false),
            alwaysScrollable: GetValue(config, "alwaysScrollable", false)
        });
        scene.add.existing(textBlock); // Important: Add to display list for touch detecting
        var proportion = textWidth === undefined ? 1 : 0;
        var expand = textHeight === undefined;
        // Inject properties for scrollable interface
        (0, _injectPropertiesJsDefault.default)(textBlock);
        // Fill config of scrollable
        config.scrollMode = 0; // Vertical
        config.type = "rexTextArea";
        config.child = {
            gameObject: textBlock,
            proportion: proportion,
            expand: expand
        };
        var spaceConfig = GetValue(config, "space", undefined);
        if (spaceConfig) spaceConfig.child = spaceConfig.text;
        super(scene, config);
        this.addChildrenMap("text", textObject);
    }
    get text() {
        return this.childrenMap.child.text;
    }
    get lineHeight() {
        var textBlock = this.childrenMap.child;
        return textBlock.textLineHeight + textBlock.textLineSpacing;
    }
    get lineIndex() {
        return Math.floor(-this.childOY / this.lineHeight);
    }
    get linesCount() {
        return this.childrenMap.child.linesCount;
    }
    get contentHeight() {
        return this.childrenMap.child.textHeight;
    }
}
Object.assign(TextArea.prototype, (0, _setTextMethodsJsDefault.default), (0, _scrollMethodsJsDefault.default));
exports.default = TextArea;

},{"../utils/scrollable/Scrollable.js":"aMQwE","./textblock/TextBlock.js":"24pih","./InjectProperties.js":"d0KMz","./SetTextMethods.js":"3630B","./ScrollMethods.js":"6rw7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMQwE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _getScrollModeJs = require("../GetScrollMode.js");
var _getScrollModeJsDefault = parcelHelpers.interopDefault(_getScrollModeJs);
var _createScrollableSizerJs = require("./CreateScrollableSizer.js");
var _createScrollableSizerJsDefault = parcelHelpers.interopDefault(_createScrollableSizerJs);
var _resizeControllerJs = require("./ResizeController.js");
var _resizeControllerJsDefault = parcelHelpers.interopDefault(_resizeControllerJs);
var _updateControllerJs = require("./UpdateController.js");
var _updateControllerJsDefault = parcelHelpers.interopDefault(_updateControllerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Scrollable extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var scrollMode = (0, _getScrollModeJsDefault.default)(config); // Left-to-right, or top-to-bottom
        // Create sizer
        config.orientation = scrollMode === 0 ? 1 : 0;
        super(scene, config);
        this.type = GetValue(config, "type", "rexScrollable");
        // Add elements
        var background = GetValue(config, "background", undefined);
        var scrollableSizer = (0, _createScrollableSizerJsDefault.default)(this, config);
        var header = GetValue(config, "header", undefined);
        var footer = GetValue(config, "footer", undefined);
        // Background
        if (background) this.addBackground(background);
        if (header) {
            var align = GetValue(config, "align.header", "center");
            var headerSpace = GetValue(config, "space.header", 0);
            var padding;
            if (scrollMode === 0) padding = {
                bottom: headerSpace
            };
            else padding = {
                right: headerSpace
            };
            var expand = GetValue(config, "expand.header", true);
            this.add(header, {
                proportion: 0,
                align: align,
                padding: padding,
                expand: expand
            });
        }
        if (scrollableSizer) this.add(scrollableSizer, {
            proportion: 1,
            align: "center",
            padding: 0,
            expand: true
        });
        if (footer) {
            var align = GetValue(config, "align.footer", "center");
            var footerSpace = GetValue(config, "space.footer", 0);
            var padding;
            if (scrollMode === 0) padding = {
                top: footerSpace
            };
            else padding = {
                left: footerSpace
            };
            var expand = GetValue(config, "expand.footer", true);
            this.add(footer, {
                proportion: 0,
                align: align,
                padding: padding,
                expand: expand
            });
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("header", header);
        this.addChildrenMap("footer", footer);
        this.runLayoutFlag = false;
    /* Necessary properties of child object
        - child.t (RW), 
        - child.childOY (RW)
        - child.topChildOY (R)
        - child.bottomChildOY (R)
        - child.childVisibleHeight (R)
        - child.childHeight (R)
        */ }
    runLayout(parent, newWidth, newHeight) {
        // Skip hidden or !dirty sizer
        if (this.ignoreLayout) return this;
        super.runLayout(parent, newWidth, newHeight);
        this.resizeController();
        // Set `t` to 0 at first runLayout()
        if (!this.runLayoutFlag) {
            this.runLayoutFlag = true;
            this.setT(0);
        }
        return this;
    }
    set t(t) {
        // Get inner childT
        var childMargin = this.childMargin;
        if (childMargin.top !== 0 || childMargin.bottom !== 0) {
            var child = this.childrenMap.child;
            var innerHeight = child.topChildOY - child.bottomChildOY;
            var outerHeight = innerHeight + childMargin.top + childMargin.bottom;
            var innerChildOY = outerHeight * t - childMargin.top;
            t = innerChildOY / innerHeight;
        }
        this.childrenMap.child.t = t;
        this.updateController();
    }
    get t() {
        var t = this.childrenMap.child.t;
        // Get outer childT
        var childMargin = this.childMargin;
        if (childMargin.top !== 0 || childMargin.bottom !== 0) {
            var child = this.childrenMap.child;
            var innerHeight = child.topChildOY - child.bottomChildOY;
            var outerHeight = innerHeight + childMargin.top + childMargin.bottom;
            var outerChildOY = innerHeight * t + childMargin.top;
            t = outerChildOY / outerHeight;
        }
        return t;
    }
    set childOY(value) {
        this.childrenMap.child.childOY = value;
        this.updateController();
    }
    get childOY() {
        return this.childrenMap.child.childOY;
    }
    get topChildOY() {
        return this.childrenMap.child.topChildOY + this.childMargin.top;
    }
    get bottomChildOY() {
        return this.childrenMap.child.bottomChildOY - this.childMargin.bottom;
    }
    get childVisibleHeight() {
        return this.childrenMap.child.childVisibleHeight;
    }
    get childHeight() {
        return this.childrenMap.child.childHeight;
    }
    get isOverflow() {
        var child = this.childrenMap.child;
        return child.topChildOY !== child.bottomChildOY;
    }
    get scrollMode() {
        return this.orientation === 0 ? 1 : 0;
    }
    setChildOY(value, clamp) {
        if (clamp === undefined) clamp = false;
        if (clamp) value = Clamp(value, this.bottomChildOY, this.topChildOY);
        this.childOY = value;
        return this;
    }
    addChildOY(inc, clamp) {
        this.setChildOY(this.childOY + inc, clamp);
        return this;
    }
    setT(value, clamp) {
        if (clamp === undefined) clamp = false;
        if (clamp) value = Clamp(value, 0, 1);
        this.t = value;
        return this;
    }
    addT(inc, clamp) {
        this.setT(this.t + inc, clamp);
        return this;
    }
    scrollToTop() {
        this.t = 0;
        return this;
    }
    scrollToBottom() {
        this.t = 1;
        // t will be 0 if panel/table does not exceed visible area
        if (this.t === 0) return this;
        // Panel/Table height might be expanded while cells are visible        
        do this.t = 1;
        while (this.t !== 1);
        return this;
    }
    get sliderEnable() {
        var slider = this.childrenMap.slider;
        if (!slider) return false;
        return slider.enable;
    }
    set sliderEnable(value) {
        var slider = this.childrenMap.slider;
        if (!slider) return;
        slider.setEnable(value);
    }
    setSliderEnable(enabled) {
        if (enabled === undefined) enabled = true;
        this.sliderEnable = enabled;
        return this;
    }
    get scrollerEnable() {
        var scroller = this.childrenMap.scroller;
        if (!scroller) return false;
        return scroller.enable;
    }
    set scrollerEnable(value) {
        var scroller = this.childrenMap.scroller;
        if (!scroller) return;
        scroller.setEnable(value);
    }
    setScrollerEnable(enabled) {
        if (enabled === undefined) enabled = true;
        this.scrollerEnable = enabled;
        return this;
    }
    get mouseWheelScrollerEnable() {
        var mouseWheelScroller = this.childrenMap.mouseWheelScroller;
        if (!mouseWheelScroller) return false;
        return mouseWheelScroller.enable;
    }
    set mouseWheelScrollerEnable(value) {
        var mouseWheelScroller = this.childrenMap.mouseWheelScrollerEnable;
        if (!mouseWheelScroller) return;
        mouseWheelScroller.setEnable(value);
    }
    setMouseWheelScrollerEnable(enabled) {
        if (enabled === undefined) enabled = true;
        this.mouseWheelScrollerEnable = enabled;
        return this;
    }
    setDropZoneEnable(enable) {
        if (enable === undefined) enable = true;
        var child = this.childrenMap.child;
        child.setInteractive();
        child.input.dropZone = enable;
        return this;
    }
}
var Methods = {
    resizeController: (0, _resizeControllerJsDefault.default),
    updateController: (0, _updateControllerJsDefault.default)
};
// mixin
Object.assign(Scrollable.prototype, Methods);
exports.default = Scrollable;

},{"../../sizer/Sizer.js":"ayu5S","../GetScrollMode.js":"jRQgz","./CreateScrollableSizer.js":"llUd0","./ResizeController.js":"cc1dz","./UpdateController.js":"irBnJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRQgz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollModeConstJs = require("./ScrollModeConst.js");
var _scrollModeConstJsDefault = parcelHelpers.interopDefault(_scrollModeConstJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var GetScrollMode = function(config, key) {
    var scrollMode = GetValue(config, "scrollMode", 0); // Vertical
    if (typeof scrollMode === "string") scrollMode = (0, _scrollModeConstJsDefault.default)[scrollMode];
    return scrollMode;
};
exports.default = GetScrollMode;

},{"./ScrollModeConst.js":"llsRq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llsRq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    v: 0,
    vertical: 0,
    y: 0,
    h: 1,
    horizontal: 1,
    x: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"llUd0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _getScrollModeJs = require("../GetScrollMode.js");
var _getScrollModeJsDefault = parcelHelpers.interopDefault(_getScrollModeJs);
var _sliderJs = require("./Slider.js");
var _sliderJsDefault = parcelHelpers.interopDefault(_sliderJs);
var _scrollerJs = require("../../../../plugins/scroller.js");
var _scrollerJsDefault = parcelHelpers.interopDefault(_scrollerJs);
var _mouseWheelScrollerJs = require("../../../../plugins/input/mousewheelscroller/MouseWheelScroller.js");
var _mouseWheelScrollerJsDefault = parcelHelpers.interopDefault(_mouseWheelScrollerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateScrollableSizer = function(parent, config) {
    var scene = parent.scene;
    var scrollMode = (0, _getScrollModeJsDefault.default)(config);
    var scrollableSizer = new (0, _sizerJsDefault.default)(scene, {
        orientation: scrollMode
    });
    // A child which not put into scene
    var child = GetValue(config, "child.gameObject", undefined), childPadding = 0;
    var sliderConfig = GetValue(config, "slider", undefined), slider, sliderPadding = 0;
    var sliderPosition = GetValue(sliderConfig, "position", 0);
    if (typeof sliderPosition === "string") sliderPosition = SLIDER_POSITION_MAP[sliderPosition];
    var isRightSlider = sliderPosition === 0; // Right/bottom slider
    var scrollerConfig = GetValue(config, "scroller", true), scroller;
    var mouseWheelScrollerConfig = GetValue(config, "mouseWheelScroller", false), mouseWheelScroller;
    // Child, slider, scroller, mouseWheelScroller
    if (child) {
        var childSpace = GetValue(config, "space.child", 0);
        parent.childMargin = {};
        if (typeof childSpace !== "number") {
            var paddingConfig = childSpace;
            if (scrollMode === 0) {
                childPadding = {
                    left: GetValue(paddingConfig, "left", 0),
                    right: GetValue(paddingConfig, "right", 0)
                };
                parent.childMargin.top = GetValue(paddingConfig, "top", 0);
                parent.childMargin.bottom = GetValue(paddingConfig, "bottom", 0);
            } else {
                childPadding = {
                    top: GetValue(paddingConfig, "top", 0),
                    bottom: GetValue(paddingConfig, "bottom", 0)
                };
                parent.childMargin.top = GetValue(paddingConfig, "left", 0);
                parent.childMargin.bottom = GetValue(paddingConfig, "right", 0);
            }
        } else {
            if (sliderConfig) {
                if (scrollMode === 0) childPadding = isRightSlider ? {
                    right: childSpace
                } : {
                    left: childSpace
                };
                else childPadding = isRightSlider ? {
                    bottom: childSpace
                } : {
                    top: childSpace
                };
            }
            parent.childMargin.top = 0;
            parent.childMargin.bottom = 0;
        }
        if (sliderConfig) {
            if (sliderConfig === true) sliderConfig = {};
            // Vertical slider(orientation=1) for left-right scrollableSizer(orientation=0)
            // Horizontal slider(orientation=0) for top-bottom scrollableSizer(orientation=1)
            sliderConfig.orientation = scrollableSizer.orientation === 0 ? 1 : 0;
            slider = new (0, _sliderJsDefault.default)(scene, sliderConfig);
            sliderPadding = GetValue(config, "space.slider", 0);
            parent.hideUnscrollableSlider = GetValue(sliderConfig, "hideUnscrollableSlider", false);
            parent.adaptThumbSizeMode = GetValue(sliderConfig, "adaptThumbSize", false);
            parent.minThumbSize = GetValue(sliderConfig, "minThumbSize", undefined);
        } else {
            parent.adaptThumbSizeMode = false;
            parent.minThumbSize = undefined;
        }
        if (scrollerConfig) {
            if (scrollerConfig === true) scrollerConfig = {};
            scrollerConfig.orientation = scrollMode;
            scroller = new (0, _scrollerJsDefault.default)(child, scrollerConfig);
        }
        if (mouseWheelScrollerConfig) mouseWheelScroller = new (0, _mouseWheelScrollerJsDefault.default)(child, mouseWheelScrollerConfig);
        // Add slider to parent sizer at left/top side
        if (slider && !isRightSlider) scrollableSizer.add(slider, {
            proportion: 0,
            align: "center",
            padding: sliderPadding,
            expand: true
        });
        // Add child to parent sizer
        var proportion = GetValue(config, "child.proportion", 1);
        var expand = GetValue(config, "child.expand", true);
        scrollableSizer.add(child, {
            proportion: proportion,
            align: "center",
            padding: childPadding,
            expand: expand
        });
        // Add slider to parent sizer at right/bottom side
        if (slider && isRightSlider) scrollableSizer.add(slider, {
            proportion: 0,
            align: "center",
            padding: sliderPadding,
            expand: true
        });
    }
    // Control
    if (slider) slider.on("valuechange", function(newValue) {
        parent.t = newValue;
        parent.emit("scroll", parent);
    });
    if (scroller) scroller.on("valuechange", function(newValue) {
        parent.childOY = newValue;
        parent.emit("scroll", parent);
    });
    if (mouseWheelScroller) mouseWheelScroller.on("scroll", function(incValue) {
        parent.addChildOY(-incValue, true);
    });
    parent.addChildrenMap("child", child);
    parent.addChildrenMap("slider", slider);
    parent.addChildrenMap("scroller", scroller);
    parent.addChildrenMap("mouseWheelScroller", mouseWheelScroller);
    return scrollableSizer;
};
var SLIDER_POSITION_MAP = {
    right: 0,
    left: 1,
    bottom: 0,
    top: 1
};
exports.default = CreateScrollableSizer;

},{"../../sizer/Sizer.js":"ayu5S","../GetScrollMode.js":"jRQgz","./Slider.js":"cho0g","../../../../plugins/scroller.js":"5T0YI","../../../../plugins/input/mousewheelscroller/MouseWheelScroller.js":"7z5iD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cho0g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollBarJs = require("../../scrollbar/ScrollBar.js");
var _scrollBarJsDefault = parcelHelpers.interopDefault(_scrollBarJs);
var _cloneJs = require("../../../../plugins/utils/object/Clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
class Slider extends (0, _scrollBarJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var sliderConfig = (0, _cloneJsDefault.default)(config);
        config = {
            slider: sliderConfig
        };
        // Move orientation parameter from sliderConfig to config
        config.orientation = sliderConfig.orientation;
        delete sliderConfig.orientation;
        // Move background parameter from sliderConfig to config
        config.background = sliderConfig.background;
        delete sliderConfig.background;
        // Move buttons parameter from sliderConfig to config
        config.buttons = sliderConfig.buttons;
        delete sliderConfig.buttons;
        super(scene, config);
        var slider = this.childrenMap.slider;
        this.addChildrenMap("track", slider.childrenMap.track);
        this.addChildrenMap("indicator", slider.childrenMap.indicator);
        this.addChildrenMap("thumb", slider.childrenMap.thumb);
    }
}
exports.default = Slider;

},{"../../scrollbar/ScrollBar.js":"2ipw1","../../../../plugins/utils/object/Clone.js":"iFVih","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ipw1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _sliderJs = require("../slider/Slider.js");
var _sliderJsDefault = parcelHelpers.interopDefault(_sliderJs);
var _inTouchingJs = require("../intouching/InTouching.js");
var _inTouchingJsDefault = parcelHelpers.interopDefault(_inTouchingJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ScrollBar extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexScrollBar";
        // Add elements
        var background = GetValue(config, "background", undefined);
        var buttonsConfig = GetValue(config, "buttons", undefined);
        var button0 = GetValue(buttonsConfig, "top", GetValue(buttonsConfig, "left", undefined));
        var button1 = GetValue(buttonsConfig, "bottom", GetValue(buttonsConfig, "right", undefined));
        var slider, sliderConfig = GetValue(config, "slider", undefined);
        if (background) this.addBackground(background);
        if (button0) {
            this.add(button0);
            var inTouching = new (0, _inTouchingJsDefault.default)(button0);
            inTouching.on("intouch", function() {
                if (!this.enable) return;
                var step = !slider.reverseAxis ? -this.scrollStep : this.scrollStep;
                this.value += step;
            }, this);
        }
        if (sliderConfig) {
            sliderConfig.orientation = this.orientation;
            sliderConfig.eventEmitter = this;
            sliderConfig.value = null;
            var proportion;
            if (this.orientation === 0) {
                var sliderWidth = GetValue(sliderConfig, "width", undefined);
                proportion = sliderWidth === undefined ? 1 : 0;
            } else {
                var sliderHeight = GetValue(sliderConfig, "height", undefined);
                proportion = sliderHeight === undefined ? 1 : 0;
            }
            slider = new (0, _sliderJsDefault.default)(scene, sliderConfig);
            scene.add.existing(slider);
            this.add(slider, {
                proportion: proportion
            });
        }
        if (button1) {
            this.add(button1);
            var inTouching = new (0, _inTouchingJsDefault.default)(button1);
            inTouching.on("intouch", function() {
                if (!this.enable) return;
                var step = !slider.reverseAxis ? this.scrollStep : -this.scrollStep;
                this.value += step;
            }, this);
        }
        var buttons = [
            button0,
            button1
        ];
        this.addChildrenMap("background", background);
        this.addChildrenMap("slider", slider);
        this.addChildrenMap("buttons", buttons);
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        this.setEnable(GetValue(config, "enable", undefined));
        this.setValue(GetValue(config, "value", 0));
        this.setScrollStep(GetValue(buttonsConfig, "step", 0.01));
    }
    setScrollStep(value) {
        this.scrollStep = value;
        return this;
    }
    get enable() {
        if (this.childrenMap.slider) return this.childrenMap.slider.enable;
        else return false;
    }
    set enable(value) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEnable(value);
    }
    setEnable(enable) {
        if (enable === undefined) enable = true;
        this.enable = enable;
        return this;
    }
    get value() {
        if (this.childrenMap.slider) return this.childrenMap.slider.value;
        else return 0;
    }
    set value(value) {
        if (!this.childrenMap.slider) return;
        this.childrenMap.slider.value = value;
    }
    setValue(value, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.setValue(value, min, max);
        return this;
    }
    addValue(inc, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.addValue(inc, min, max);
        return this;
    }
    getValue(min, max) {
        if (this.childrenMap.slider) return this.childrenMap.slider.getValue(min, max);
        else return 0;
    }
    easeValueTo(value, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.easeValueTo(value, min, max);
        return this;
    }
    stopEaseValue() {
        if (this.childrenMap.slider) this.childrenMap.slider.stopEaseValue();
        return this;
    }
    setEaseValueDuration(duration) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEaseValueDuration(duration);
        return this;
    }
    setEaseValueFunction(ease) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEaseValueFunction(ease);
        return this;
    }
}
exports.default = ScrollBar;

},{"../sizer/Sizer.js":"ayu5S","../slider/Slider.js":"f16Jy","../intouching/InTouching.js":"1HeWv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f16Jy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _createBackgroundJs = require("../utils/build/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _progressBaseJs = require("../../../plugins/utils/progressbase/ProgressBase.js");
var _progressBaseJsDefault = parcelHelpers.interopDefault(_progressBaseJs);
var _onDragThumbJs = require("./OnDragThumb.js");
var _onDragThumbJsDefault = parcelHelpers.interopDefault(_onDragThumbJs);
var _onTouchTrackJs = require("./OnTouchTrack.js");
var _onTouchTrackJsDefault = parcelHelpers.interopDefault(_onTouchTrackJs);
var _getStartPointJs = require("./GetStartPoint.js");
var _getStartPointJsDefault = parcelHelpers.interopDefault(_getStartPointJs);
var _getEndPointJs = require("./GetEndPoint.js");
var _getEndPointJsDefault = parcelHelpers.interopDefault(_getEndPointJs);
var _updateThumbJs = require("./UpdateThumb.js");
var _updateThumbJsDefault = parcelHelpers.interopDefault(_updateThumbJs);
var _updateIndicatorJs = require("./UpdateIndicator.js");
var _updateIndicatorJsDefault = parcelHelpers.interopDefault(_updateIndicatorJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
const SnapTo = Phaser.Math.Snap.To;
class Slider extends (0, _progressBaseJsDefault.default)((0, _sizerJsDefault.default)) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexSlider";
        this.bootProgressBase(config);
        this.reverseAxis = GetValue(config, "reverseAxis", false);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var track = GetValue(config, "track", undefined);
        var indicator = GetValue(config, "indicator", undefined);
        var thumb = GetValue(config, "thumb", undefined);
        if (background) {
            if (IsPlainObject(background)) background = (0, _createBackgroundJsDefault.default)(scene, background);
            this.addBackground(background);
        }
        if (track) {
            if (IsPlainObject(track)) track = (0, _createBackgroundJsDefault.default)(scene, track);
            this.add(track, {
                proportion: 1,
                expand: true,
                minWidth: this.orientation === 0 ? 0 : undefined,
                minHeight: this.orientation === 1 ? 0 : undefined
            });
        }
        if (indicator) {
            if (IsPlainObject(indicator)) indicator = (0, _createBackgroundJsDefault.default)(scene, indicator);
            this.pin(indicator); // Put into container but not layout it
        }
        if (thumb) {
            if (IsPlainObject(thumb)) thumb = (0, _createBackgroundJsDefault.default)(scene, thumb);
            this.pin(thumb); // Put into container but not layout it
        }
        // Input
        var inputMode = GetValue(config, "input", 0);
        if (typeof inputMode === "string") inputMode = INPUTMODE[inputMode];
        switch(inputMode){
            case 0:
                if (thumb) {
                    thumb.setInteractive();
                    this.scene.input.setDraggable(thumb);
                    thumb.on("drag", (0, _onDragThumbJsDefault.default), this).on("dragstart", function(pointer) {
                        this.eventEmitter.emit("inputstart", pointer);
                    }, this).on("dragend", function(pointer) {
                        this.eventEmitter.emit("inputend", pointer);
                    }, this);
                }
                break;
            case 1:
                this.on("pointerdown", (0, _onTouchTrackJsDefault.default), this).on("pointermove", (0, _onTouchTrackJsDefault.default), this).on("pointerdown", function(pointer) {
                    this.eventEmitter.emit("inputstart", pointer);
                }, this).on("pointerup", function(pointer) {
                    this.eventEmitter.emit("inputend", pointer);
                }, this).on("pointerover", function(pointer) {
                    if (pointer.isDown) this.eventEmitter.emit("inputstart", pointer);
                }, this).on("pointerout", function(pointer) {
                    if (pointer.isDown) this.eventEmitter.emit("inputend", pointer);
                }, this).setInteractive();
                break;
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("track", track);
        this.addChildrenMap("indicator", indicator);
        this.addChildrenMap("thumb", thumb);
        this.setEnable(GetValue(config, "enable", undefined));
        this.setGap(GetValue(config, "gap", undefined));
        this.setValue(GetValue(config, "value", 0), GetValue(config, "min", undefined), GetValue(config, "max", undefined));
    }
    setEnable(enable) {
        if (enable === undefined) enable = true;
        this.enable = enable;
        return this;
    }
    setGap(gap, min, max) {
        if (gap && min !== undefined) gap = gap / (max - min);
        this.gap = gap;
        return this;
    }
    // Override
    get value() {
        return this._value;
    }
    // Override
    set value(value) {
        if (this.gap !== undefined) value = SnapTo(value, this.gap);
        var oldValue = this._value;
        this._value = Clamp(value, 0, 1);
        if (oldValue !== this._value) {
            this.updateThumb(this._value);
            this.updateIndicator(this._value);
            this.eventEmitter.emit("valuechange", this._value, oldValue, this.eventEmitter);
        }
    }
    runLayout(parent, newWidth, newHeight) {
        // Skip hidden or !dirty sizer
        if (this.ignoreLayout) return this;
        super.runLayout(parent, newWidth, newHeight);
        this.updateThumb();
        this.updateIndicator();
        return this;
    }
}
const INPUTMODE = {
    pan: 0,
    drag: 0,
    click: 1,
    none: -1
};
var methods = {
    getStartPoint: (0, _getStartPointJsDefault.default),
    getEndPoint: (0, _getEndPointJsDefault.default),
    updateThumb: (0, _updateThumbJsDefault.default),
    updateIndicator: (0, _updateIndicatorJsDefault.default)
};
Object.assign(Slider.prototype, methods);
exports.default = Slider;

},{"../sizer/Sizer.js":"ayu5S","../utils/build/CreateBackground.js":"aOfVE","../../../plugins/utils/progressbase/ProgressBase.js":"dNXIc","./OnDragThumb.js":"jPZMX","./OnTouchTrack.js":"amVNC","./GetStartPoint.js":"c3zz9","./GetEndPoint.js":"i6tvj","./UpdateThumb.js":"hvi17","./UpdateIndicator.js":"eHx8g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jPZMX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _positionToPercentJs = require("./PositionToPercent.js");
var _positionToPercentJsDefault = parcelHelpers.interopDefault(_positionToPercentJs);
var OnDragThumb = function(pointer, dragX, dragY) {
    if (!this.enable) return;
    tmpPoint.x = dragX;
    tmpPoint.y = dragY;
    var startPoint, endPoint;
    if (!this.reverseAxis) {
        startPoint = this.getStartPoint();
        endPoint = this.getEndPoint();
    } else {
        startPoint = this.getEndPoint();
        endPoint = this.getStartPoint();
    }
    this.value = (0, _positionToPercentJsDefault.default)(startPoint, endPoint, tmpPoint);
};
var tmpPoint = {};
exports.default = OnDragThumb;

},{"./PositionToPercent.js":"5XHjA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XHjA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Percent = Phaser.Math.Percent;
var PositionToPercent = function(startPoint, endPoint, currentPoint) {
    var value;
    if (startPoint.y === endPoint.y) value = Percent(currentPoint.x, startPoint.x, endPoint.x);
    else if (startPoint.x === endPoint.x) value = Percent(currentPoint.y, startPoint.y, endPoint.y);
    return value;
};
exports.default = PositionToPercent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amVNC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _positionToPercentJs = require("./PositionToPercent.js");
var _positionToPercentJsDefault = parcelHelpers.interopDefault(_positionToPercentJs);
var OnTouchTrack = function(pointer, localX, localY) {
    if (!this.enable) return;
    if (!pointer.isDown) return;
    tmpPoint.x = pointer.worldX;
    tmpPoint.y = pointer.worldY;
    var startPoint, endPoint;
    if (!this.reverseAxis) {
        startPoint = this.getStartPoint();
        endPoint = this.getEndPoint();
    } else {
        startPoint = this.getEndPoint();
        endPoint = this.getStartPoint();
    }
    var value = (0, _positionToPercentJsDefault.default)(startPoint, endPoint, tmpPoint);
    this.stopEaseValue();
    if (this.easeValueDuration === 0 || Math.abs(this.value - value) < 0.1) this.value = value;
    else this.easeValueTo(value);
};
var tmpPoint = {};
exports.default = OnTouchTrack;

},{"./PositionToPercent.js":"5XHjA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3zz9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getThumbAlignPointJs = require("./GetThumbAlignPoint.js");
var _getThumbAlignPointJsDefault = parcelHelpers.interopDefault(_getThumbAlignPointJs);
const AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const AlignTop = Phaser.Display.Align.TOP_CENTER;
var GetStartPoint = function(out) {
    if (out === undefined) out = tmpPoint;
    if (this.childrenMap.thumb) {
        var align = this.orientation === 0 ? AlignLeft : AlignTop;
        (0, _getThumbAlignPointJsDefault.default).call(this, align, out);
    } else if (this.orientation === 0) {
        out.x = this.innerLeft + 1; // Add 1 pixel margin
        out.y = this.centerY;
    } else {
        out.x = this.centerX;
        out.y = this.innerTop + 1; // Add 1 pixel margin
    }
    return out;
};
var tmpPoint = {};
exports.default = GetStartPoint;

},{"./GetThumbAlignPoint.js":"jv3lB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jv3lB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignInJs = require("../../../plugins/utils/actions/AlignIn.js");
var _alignInJsDefault = parcelHelpers.interopDefault(_alignInJs);
var GetThumbAlignPoint = function(align, out) {
    if (out === undefined) out = tmpPoint;
    var thumb = this.childrenMap.thumb;
    var currentX = thumb.x;
    var currentY = thumb.y;
    (0, _alignInJsDefault.default)(thumb, this.innerLeft, this.innerTop, this.innerWidth, this.innerHeight, align);
    out.x = thumb.x;
    out.y = thumb.y;
    thumb.x = currentX;
    thumb.y = currentY;
    return out;
};
var tmpPoint = {};
exports.default = GetThumbAlignPoint;

},{"../../../plugins/utils/actions/AlignIn.js":"7glhd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6tvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getThumbAlignPointJs = require("./GetThumbAlignPoint.js");
var _getThumbAlignPointJsDefault = parcelHelpers.interopDefault(_getThumbAlignPointJs);
const AlignRight = Phaser.Display.Align.RIGHT_CENTER;
const AlignBottom = Phaser.Display.Align.BOTTOM_CENTER;
var GetEndoint = function(out) {
    if (out === undefined) out = tmpPoint;
    if (this.childrenMap.thumb) {
        var align = this.orientation === 0 ? AlignRight : AlignBottom;
        (0, _getThumbAlignPointJsDefault.default).call(this, align, out);
    } else if (this.orientation === 0) {
        out.x = this.innerRight - 1; // Add 1 pixel margin
        out.y = this.centerY;
    } else {
        out.x = this.centerX;
        out.y = this.innerBottom - 1; // Add 1 pixel margin
    }
    return out;
};
var tmpPoint = {};
exports.default = GetEndoint;

},{"./GetThumbAlignPoint.js":"jv3lB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvi17":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _percentToPositionJs = require("./PercentToPosition.js");
var _percentToPositionJsDefault = parcelHelpers.interopDefault(_percentToPositionJs);
var UpdateThumb = function(t) {
    var thumb = this.childrenMap.thumb;
    if (thumb === undefined) return this;
    if (t === undefined) t = this.value;
    var startPoint, endPoint;
    if (!this.reverseAxis) {
        startPoint = this.getStartPoint();
        endPoint = this.getEndPoint();
    } else {
        startPoint = this.getEndPoint();
        endPoint = this.getStartPoint();
    }
    (0, _percentToPositionJsDefault.default)(t, startPoint, endPoint, thumb);
    this.resetChildPositionState(thumb);
    return this;
};
exports.default = UpdateThumb;

},{"./PercentToPosition.js":"fLzRb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLzRb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Linear = Phaser.Math.Linear;
var PercentToPosition = function(t, startPoint, endPoint, out) {
    if (out === undefined) out = tmpOut;
    out.x = Linear(startPoint.x, endPoint.x, t);
    out.y = Linear(startPoint.y, endPoint.y, t);
    return out;
};
var tmpOut = {};
exports.default = PercentToPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHx8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _quickSetJs = require("../../../plugins/utils/align/align/in/QuickSet.js");
var _quickSetJsDefault = parcelHelpers.interopDefault(_quickSetJs);
var _getDisplaySizeJs = require("../../../plugins/utils/size/GetDisplaySize.js");
const AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const AlignTop = Phaser.Display.Align.TOP_CENTER;
const AlignRight = Phaser.Display.Align.RIGHT_CENTER;
const AlignBottom = Phaser.Display.Align.BOTTOM_CENTER;
var UpdateIndicator = function(t) {
    var indicator = this.childrenMap.indicator;
    if (indicator === undefined) return this;
    if (t === undefined) t = this.value;
    var reverseAxis = this.reverseAxis;
    var newWidth, newHeight;
    var thumb = this.childrenMap.thumb;
    if (thumb) {
        if (this.orientation === 0) {
            var thumbWidth = (0, _getDisplaySizeJs.GetDisplayWidth)(thumb);
            if (!reverseAxis) {
                var thumbLeft = thumb.x - thumbWidth * thumb.originX;
                var thumbRight = thumbLeft + thumbWidth;
                newWidth = thumbRight - this.left;
            } else {
                var thumbLeft = thumb.x - thumbWidth * thumb.originX;
                newWidth = this.right - thumbLeft;
            }
        } else {
            var thumbHeight = (0, _getDisplaySizeJs.GetDisplayHeight)(thumb);
            if (!reverseAxis) {
                var thumbTop = thumb.y - thumbHeight * thumb.originY;
                var thumbBottom = thumbTop + thumbHeight;
                newHeight = thumbBottom - this.top;
            } else {
                var thumbTop = thumb.y - thumbHeight * thumb.originY;
                newHeight = this.bottom - thumbTop;
            }
        }
    } else if (this.orientation === 0) newWidth = this.width * t;
    else newHeight = this.height * t;
    (0, _resizeGameObjectJsDefault.default)(indicator, newWidth, newHeight);
    var align;
    if (!reverseAxis) align = this.orientation === 0 ? AlignLeft : AlignTop;
    else align = this.orientation === 0 ? AlignRight : AlignBottom;
    (0, _quickSetJsDefault.default)(indicator, this, align);
    this.resetChildPositionState(indicator);
};
exports.default = UpdateIndicator;

},{"../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","../../../plugins/utils/align/align/in/QuickSet.js":"7yKm5","../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5T0YI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollerJs = require("./input/scroller/Scroller.js");
var _scrollerJsDefault = parcelHelpers.interopDefault(_scrollerJs);
exports.default = (0, _scrollerJsDefault.default);

},{"./input/scroller/Scroller.js":"awEz8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"awEz8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _stateJs = require("./State.js");
var _stateJsDefault = parcelHelpers.interopDefault(_stateJs);
var _dragspeedJs = require("../../dragspeed.js");
var _dragspeedJsDefault = parcelHelpers.interopDefault(_dragspeedJs);
var _slowDownJs = require("../../utils/movement/SlowDown.js");
var _slowDownJsDefault = parcelHelpers.interopDefault(_slowDownJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class Scroller extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        var enable = GetValue(config, "enable", true);
        this._state = new (0, _stateJsDefault.default)(this, {
            enable: enable,
            eventEmitter: false
        });
        var drapSpeedConfig = {
            inputConfig: GetValue(config, "inputConfig", undefined),
            enable: enable,
            pointerOutRelease: GetValue(config, "pointerOutRelease", true),
            eventEmitter: false
        };
        this.dragState = new (0, _dragspeedJsDefault.default)(gameObject, drapSpeedConfig);
        this._enable = undefined;
        this._value = undefined;
        this._slowDown = new (0, _slowDownJsDefault.default)();
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        callback = GetValue(config, "overmaxCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "overmaxCallbackScope", undefined);
            this.on("overmax", callback, scope);
        }
        callback = GetValue(config, "overminCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "overminCallbackScope", undefined);
            this.on("overmin", callback, scope);
        }
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.setOrientationMode(GetValue(o, "orientation", 0));
        this.setDragThreshold(GetValue(o, "threshold", 10));
        this.setSlidingDeceleration(GetValue(o, "slidingDeceleration", 5000));
        this.setBackDeceleration(GetValue(o, "backDeceleration", 2000));
        var dragRate = GetValue(o, "dragRate", 1);
        dragRate = dragRate * (GetValue(o, "dragReverse", false) ? -1 : 1);
        this.setDragRate(dragRate);
        var bounds = GetValue(o, "bounds", undefined);
        if (bounds) this.setBounds(bounds);
        else this.setBounds(GetValue(o, "max", 0), GetValue(o, "min", 0));
        this.setValue(GetValue(o, "value", this.maxValue || 0));
        this.setEnable(GetValue(o, "enable", true));
        return this;
    }
    boot() {
        this.scene.sys.events.on("preupdate", this._state.update, this._state);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.scene.sys.events.off("preupdate", this._state.update, this._state);
        this._state.destroy(fromScene);
        this.dragState.destroy(fromScene);
        this._state = undefined;
        this.dragState = undefined;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        this._enable = e;
        this._state.setEnable(e);
        this.dragState.setEnable(e);
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    setOrientationMode(m) {
        if (typeof m === "string") m = ORIENTATIONMODE[m];
        this.orientationMode = m;
        return this;
    }
    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
    setSlidingDeceleration(dec) {
        this.slidingDeceleration = dec;
        return this;
    }
    setBackDeceleration(dec) {
        this.backDeceleration = dec;
        return this;
    }
    setDragRate(ratio) {
        this.dragRate = ratio;
        return this;
    }
    setBounds(value0, value1) {
        if (Array.isArray(value0)) {
            var bounds = value0;
            value0 = bounds[0];
            value1 = bounds[1];
        }
        if (value0 < value1) {
            this.minValue = value0;
            this.maxValue = value1;
        } else {
            this.minValue = value1;
            this.maxValue = value0;
        }
        return this;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (value === this._value) return;
        var oldValue = this._value;
        var isOverMax = this.overMax(value);
        var isOverMin = this.overMin(value);
        if (isOverMax) this.emit("overmax", value, oldValue);
        if (isOverMin) this.emit("overmin", value, oldValue);
        if (!this.backEnable) {
            if (isOverMax) value = this.maxValue;
            if (isOverMin) value = this.minValue;
        }
        this._value = value;
        this.emit("valuechange", value, oldValue);
    }
    setValue(value, clamp) {
        if (clamp === undefined) clamp = false;
        if (clamp) value = Clamp(value, this.minValue, this.maxValue);
        this.value = value;
        return this;
    }
    addValue(inc, clamp) {
        this.setValue(this.value + inc, clamp);
        return this;
    }
    get state() {
        return this._state.state;
    }
    get isDragging() {
        return this.dragState.isInTouched;
    }
    get outOfMaxBound() {
        return this.overMax(this.value);
    }
    get outOfMinBound() {
        return this.overMin(this.value);
    }
    get outOfBounds() {
        return this.outOfMinBound || this.outOfMaxBound;
    }
    // internal
    overMax(value) {
        return this.maxValue != null && value > this.maxValue;
    }
    overMin(value) {
        return this.minValue != null && value < this.minValue;
    }
    get backEnable() {
        return typeof this.backDeceleration === "number";
    }
    get isPullBack() {
        return this._slowDown.isMoving;
    }
    get slidingEnable() {
        return typeof this.slidingDeceleration === "number";
    }
    get isSliding() {
        return this._slowDown.isMoving;
    }
    get dragDelta() {
        var delta;
        if (this.orientationMode === 0) delta = this.dragState.dy;
        else if (this.orientationMode === 1) delta = this.dragState.dx;
        else delta = 0;
        delta *= this.dragRate;
        return delta;
    }
    get dragSpeed() {
        var speed;
        if (this.orientationMode === 0) speed = this.dragState.speedY;
        else if (this.orientationMode === 1) speed = this.dragState.speedX;
        else speed = 0;
        speed *= this.dragRate;
        return speed;
    }
    // enter_DRAG
    onDragStart() {
        this.emit("dragstart");
    }
    // exit_DRAG
    onDragEnd() {
        this.emit("dragend");
    }
    // everyTick_DRAG
    dragging() {
        this.value += this.dragDelta;
    }
    // enter_SLIDE 
    onSliding() {
        var start = this.value;
        var speed = this.dragSpeed;
        if (speed === 0) {
            this._slowDown.stop();
            this._state.next();
            return;
        }
        var dec = this.slidingDeceleration;
        this._slowDown.init(start, speed > 0, Math.abs(speed), dec);
    }
    // everyTick_SLIDE
    sliding(time, delta) {
        delta *= 0.001;
        var newValue = this._slowDown.update(delta).value;
        if (this.overMax(newValue)) {
            this.value = this.maxValue;
            this._slowDown.stop();
        } else if (this.overMin(newValue)) {
            this.value = this.minValue;
            this._slowDown.stop();
        } else this.value = newValue;
    }
    // enter_BACK
    onPullBack() {
        var start = this.value;
        var end = this.outOfMinBound ? this.minValue : this.maxValue;
        var dist = Math.abs(end - start);
        var dec = this.backDeceleration;
        var speed = Math.sqrt(2 * dec * dist);
        this._slowDown.init(start, undefined, speed, dec, end);
    }
    // everyTick_BACK
    pullBack(time, delta) {
        delta *= 0.001;
        this.value = this._slowDown.update(delta).value;
        if (!this._slowDown.isMoving) this._state.next();
    }
    // exit_SLIDE, exit_BACK
    stop() {
        this._slowDown.stop();
    }
}
const ORIENTATIONMODE = {
    y: 0,
    v: 0,
    vertical: 0,
    x: 1,
    h: 1,
    horizontal: 1
};
exports.default = Scroller;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","./State.js":"hl3f4","../../dragspeed.js":"ggA4L","../../utils/movement/SlowDown.js":"lFS9l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hl3f4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fsmJs = require("../../fsm.js");
var _fsmJsDefault = parcelHelpers.interopDefault(_fsmJs);
class State extends (0, _fsmJsDefault.default) {
    constructor(parent, config){
        super(config);
        this.parent = parent;
        this.init();
    }
    init() {
        this.start("IDLE");
    }
    // IDLE -> DRAGBEGIN|DRAG
    next_IDLE() {
        var nextState, parent = this.parent, dragState = parent.dragState;
        if (dragState.isDown) nextState = parent.dragThreshold === 0 ? "DRAG" : "DRAGBEGIN";
        return nextState;
    }
    update_IDLE(time, delta) {
        this.next();
    }
    // IDLE
    // DRAGBEGIN -> DRAG|IDLE
    next_DRAGBEGIN() {
        var nextState, parent = this.parent, dragState = parent.dragState;
        if (dragState.isDown) nextState = dragState.pointer.getDistance() >= parent.dragThreshold ? "DRAG" : "DRAGBEGIN";
        else nextState = "IDLE";
        return nextState;
    }
    update_DRAGBEGIN(time, delta) {
        this.next();
    }
    // DRAGBEGIN
    // DRAG -> BACK|SLIDE|IDLE
    next_DRAG() {
        var nextState, parent = this.parent, dragState = parent.dragState;
        if (dragState.isUp) {
            if (parent.outOfBounds) nextState = "BACK";
            else if (parent.slidingEnable) nextState = "SLIDE";
            else nextState = "IDLE";
        }
        return nextState;
    }
    update_DRAG(time, delta) {
        var parent = this.parent, dragState = parent.dragState;
        if (dragState.justMoved) parent.dragging();
        this.next();
    }
    enter_DRAG() {
        this.parent.onDragStart();
    }
    exit_DRAG() {
        this.parent.onDragEnd();
    }
    // DRAG    
    // SLIDE -> DRAG|IDLE
    next_SLIDE() {
        var nextState, parent = this.parent, dragState = parent.dragState;
        if (dragState.isDown) nextState = "DRAG";
        else if (!parent.isSliding) nextState = "IDLE";
        return nextState;
    }
    enter_SLIDE() {
        this.parent.onSliding();
    }
    exit_SLIDE() {
        this.parent.stop();
    }
    update_SLIDE(time, delta) {
        this.parent.sliding(time, delta);
        this.next();
    }
    // SLIDE    
    // BACK -> DRAG|IDLE
    next_BACK() {
        var nextState, parent = this.parent, dragState = parent.dragState;
        if (dragState.isDown) nextState = "DRAG";
        else if (!parent.isPullBack) nextState = "IDLE";
        return nextState;
    }
    enter_BACK() {
        this.parent.onPullBack();
    }
    exit_BACK() {
        this.parent.stop();
    }
    update_BACK(time, delta) {
        this.parent.pullBack(time, delta);
        this.next();
    }
}
exports.default = State;

},{"../../fsm.js":"ftkbz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ggA4L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dragSpeedJs = require("./input/dragspeed/DragSpeed.js");
var _dragSpeedJsDefault = parcelHelpers.interopDefault(_dragSpeedJs);
exports.default = (0, _dragSpeedJsDefault.default);

},{"./input/dragspeed/DragSpeed.js":"1amNf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1amNf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _getTickDeltaJs = require("../../utils/system/GetTickDelta.js");
var _getTickDeltaJsDefault = parcelHelpers.interopDefault(_getTickDeltaJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
class DragSpeed extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this._enable = undefined;
        gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.pointer = undefined;
        this.isInTouched = false;
        this.holdStartTime = undefined;
        this.x = undefined;
        this.y = undefined;
        this.preX = undefined;
        this.preY = undefined;
        this.localX = undefined;
        this.localY = undefined;
        this.justMoved = false;
        this.setEnable(GetValue(o, "enable", true));
        this.holdThreshold = GetValue(o, "holdThreshold", 50); // ms
        this.pointerOutReleaseEnable = GetValue(o, "pointerOutRelease", true);
        return this;
    }
    boot() {
        // Drag start only when pointer down
        this.parent.on("pointerdown", this.onPointIn, this);
        // this.parent.on('pointerover', this.onPointIn, this);
        this.parent.on("pointerup", this.onPointOut, this);
        if (this.pointerOutReleaseEnable) this.parent.on("pointerout", this.onPointOut, this);
        this.parent.on("pointermove", this.onPointerMove, this);
        this.scene.sys.events.on("preupdate", this.preupdate, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // GameObject events will be removed when this gameObject destroyed 
        // this.parent.off('pointerdown', this.onPointIn, this);
        // this.parent.off('pointerup', this.onPointOut, this);
        // this.parent.off('pointerout', this.onPointOut, this);
        // this.parent.off('pointermove', this.onPointerMove, this);
        this.scene.sys.events.off("preupdate", this.preupdate, this);
        this.pointer = undefined;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) {
            this.isInTouched = false;
            this.pointer = undefined;
        }
        this._enable = e;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    setPointerOutReleaseEnable(enable) {
        if (enable === undefined) enable = true;
        this.pointerOutReleaseEnable = enable;
        return this;
    }
    get isDown() {
        return this.pointer && this.pointer.isDown;
    }
    get isUp() {
        return !this.isDown;
    }
    get dx() {
        return this.x - this.preX;
    }
    get dy() {
        return this.y - this.preY;
    }
    get dt() {
        var delta = (0, _getTickDeltaJsDefault.default)(this.scene);
        return delta;
    }
    get speed() {
        if (this.x === this.preX && this.y === this.preY) return 0;
        var d = DistanceBetween(this.preX, this.preY, this.x, this.y);
        var speed = d / (this.dt * 0.001);
        return speed;
    }
    get speedX() {
        return this.dx / (this.dt * 0.001);
    }
    get speedY() {
        return this.dy / (this.dt * 0.001);
    }
    // internal
    onPointIn(pointer, localX, localY) {
        if (!this.enable || !pointer.isDown || this.pointer !== undefined) return;
        this.pointer = pointer;
        this.localX = localX;
        this.localY = localY;
    }
    onPointOut(pointer) {
        if (!this.enable || this.pointer !== pointer) return;
        this.pointer = undefined;
    }
    onPointerMove(pointer, localX, localY) {
        if (!this.enable || !pointer.isDown || this.pointer !== pointer) return;
        this.localX = localX;
        this.localY = localY;
    }
    preupdate(time, delta) {
        if (!this.enable) return;
        var pointer = this.pointer;
        this.justMoved = false;
        if (pointer && !this.isInTouched) {
            // Touch start
            this.x = pointer.worldX;
            this.y = pointer.worldY;
            this.preX = pointer.worldX;
            this.preY = pointer.worldY;
            this.isInTouched = true;
            this.holdStartTime = undefined;
            this.emit("touchstart", pointer, this.localX, this.localY);
        } else if (pointer && this.isInTouched) {
            // In touch
            if (this.x === pointer.x && this.y === pointer.y) {
                // Hold
                if (this.holdStartTime === undefined) this.holdStartTime = time;
                else if (time - this.holdStartTime > this.holdThreshold) {
                    this.preX = this.x;
                    this.preY = this.y;
                }
            } else {
                // Move
                this.preX = this.x;
                this.preY = this.y;
                this.x = pointer.worldX;
                this.y = pointer.worldY;
                this.holdStartTime = undefined;
                this.justMoved = true;
                this.emit("touchmove", pointer, this.localX, this.localY);
            }
        } else if (!pointer && this.isInTouched) {
            // Touch end
            this.isInTouched = false;
            this.holdStartTime = undefined;
            this.emit("touchend", pointer);
        }
    }
}
exports.default = DragSpeed;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/system/GetTickDelta.js":"9SgbA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFS9l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _movementJs = require("./Movement.js");
var _movementJsDefault = parcelHelpers.interopDefault(_movementJs);
class SlowDown {
    constructor(){
        this.value;
        this.dir; // true:+, false:-
        this.movement = new (0, _movementJsDefault.default)();
    }
    init(start, dir, speed, dec, end) {
        this.value = start;
        this.end = end;
        if (end !== undefined) this.dir = start < end;
        else this.dir = dir;
        this.movement.setSpeed(speed).setAcceleration(-dec);
        return this;
    }
    stop() {
        this.movement.reset();
    }
    update(delta) {
        // delta in sec
        var d = this.movement.getDeltaValue(delta);
        if (!this.dir) d = -d;
        if (this.end === undefined) this.value += d;
        else if (d === 0) this.value = this.end;
        else {
            this.value += d;
            if (this.dir) {
                if (this.value > this.end) this.value = this.end;
            } else if (this.value < this.end) this.value = this.end;
        }
        return this;
    }
    get isMoving() {
        return this.movement.isMoving;
    }
}
exports.default = SlowDown;

},{"./Movement.js":"haCd1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"haCd1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
class Movement {
    constructor(config){
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        this.setValue(GetValue(o, "value", 0));
        this.setSpeed(GetValue(o, "speed", 0));
        this.setAcceleration(GetValue(o, "acceleration", 0));
        return this;
    }
    reset() {
        this.setValue(0);
        this.setSpeed(0);
        this.setAcceleration(0);
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    setSpeed(speed) {
        // speed == 0 : stop
        // speed  > 0 : move
        this.speed = speed;
        return this;
    }
    setAcceleration(acc) {
        // acc == 0 : constant speed
        // acc  > 0 : acceleration
        // acc  < 0 : deceleration
        this.acceleration = acc;
        return this;
    }
    updateSpeed(delta) {
        // delta in sec
        if (this.acceleration !== 0) {
            this.speed += this.acceleration * delta;
            if (this.speed < 0) this.speed = 0;
        }
        return this;
    }
    getDeltaValue(delta) {
        // delta in sec
        this.updateSpeed(delta);
        if (this.speed <= 0) return 0;
        return this.speed * delta;
    }
    update(delta) {
        // delta in sec
        this.updateSpeed(delta);
        if (this.speed > 0) this.value += this.getDeltaValue(delta);
        return this;
    }
    get isMoving() {
        return this.speed > 0;
    }
}
exports.default = Movement;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7z5iD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class MouseWheelScroller extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        if (this.parent !== this.scene) this.focusMode = GetValue(config, "focus", false);
        else this.focusMode = false;
        this.setSpeed(GetValue(config, "speed", 0.1));
        this.setEnable(GetValue(config, "enable", true));
        if (!this.focusMode) this.scene.input.on("wheel", this.onSceneScroll, this);
        else {
            var gameObject = this.parent;
            gameObject.setInteractive(GetValue(config, "inputConfig", undefined)).on("wheel", function(pointer, dx, dy, dz, event) {
                if (!this.enable) return;
                this.scroll(dy);
            }, this);
        }
    }
    destroy() {
        if (!this.focusMode) this.scene.input.off("wheel", this.onSceneScroll, this);
    }
    onSceneScroll(pointer, currentlyOver, dx, dy, dz, event) {
        if (!this.enable) return;
        this.scroll(dy);
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    setSpeed(speed) {
        this.speed = speed;
        return this;
    }
    scroll(dy) {
        dy *= this.speed;
        this.emit("scroll", dy, this.parent, this);
    }
}
exports.default = MouseWheelScroller;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cc1dz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var ResizeController = function() {
    var topChildOY = this.topChildOY;
    var bottomChildOY = this.bottomChildOY;
    var scroller = this.childrenMap.scroller;
    var slider = this.childrenMap.slider;
    if (scroller) scroller.setBounds(bottomChildOY, topChildOY);
    if (slider) slider.setEnable(bottomChildOY !== topChildOY);
    this.updateController();
    if (slider) {
        if (this.hideUnscrollableSlider) this.setChildVisible(slider, this.isOverflow);
        if (this.adaptThumbSizeMode) AdaptThumbSize.call(this);
    }
    return this;
};
var AdaptThumbSize = function() {
    // Change slider size according to visible ratio
    var ratio = Math.min(this.childVisibleHeight / this.childHeight, 1);
    var slider = this.childrenMap.slider;
    var track = slider.childrenMap.track;
    var thumb = slider.childrenMap.thumb;
    var minThumbSize = this.minThumbSize;
    if (this.scrollMode === 0) {
        var newHeight = track.displayHeight * ratio;
        if (minThumbSize !== undefined && newHeight < minThumbSize) newHeight = minThumbSize;
        (0, _resizeGameObjectJsDefault.default)(thumb, undefined, newHeight);
    } else {
        var newWidth = track.displayWidth * ratio;
        if (minThumbSize !== undefined && newWidth < minThumbSize) newWidth = minThumbSize;
        (0, _resizeGameObjectJsDefault.default)(thumb, newWidth, undefined);
    }
    LayoutSlider.call(this);
};
var LayoutSlider = function() {
    var slider = this.childrenMap.slider;
    // Save minSize
    var minWidthSave = slider.minWidth;
    var minHeightSave = slider.minHeight;
    // Set minSize to current size
    slider.minWidth = slider.width;
    slider.minHeight = slider.height;
    // Layout slider
    slider.layout();
    // Restore minSize
    slider.minWidth = minWidthSave;
    slider.minHeight = minHeightSave;
};
exports.default = ResizeController;

},{"../../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","../../sizer/Sizer.js":"ayu5S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"irBnJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var UpdateController = function() {
    var scroller = this.childrenMap.scroller;
    var slider = this.childrenMap.slider;
    if (scroller) scroller.setValue(this.childOY);
    if (slider) slider.setValue(this.t);
};
exports.default = UpdateController;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24pih":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("../../../../plugins/utils/text/GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var _addChildMaskJs = require("../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
var _baseSizerJs = require("../../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _getBoundsConfigJs = require("../../utils/GetBoundsConfig.js");
var _getBoundsConfigJsDefault = parcelHelpers.interopDefault(_getBoundsConfigJs);
var _linesCountToTextHeightJs = require("./LinesCountToTextHeight.js");
var _linesCountToTextHeightJsDefault = parcelHelpers.interopDefault(_linesCountToTextHeightJs);
var _textHeightToLinesCountJs = require("./TextHeightToLinesCount.js");
var _textHeightToLinesCountJsDefault = parcelHelpers.interopDefault(_textHeightToLinesCountJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;
class TextBlock extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexTextBlock";
        this.textObject = undefined;
        this.linesCount = 0;
        this.textMask = undefined;
        this.textObjectType = undefined;
        this._textLineHeight = undefined;
        this._textLineSpacing = undefined;
        this._visibleLinesCount = undefined;
        this._textHeight = undefined;
        this._textVisibleHeight = undefined;
        this._textObjectRealHeight = 0;
        this.lines = undefined;
        // Text object : array of string
        // Tag text object : pens-manager
        // Bitmap text object : array of string
        this.text = GetValue(config, "content", "");
        this._textOY = 0;
        this.execeedTopState = false;
        this.execeedBottomState = false;
        this.setClampMode(GetValue(config, "clamplTextOY", true));
        this.alwaysScrollable = GetValue(config, "alwaysScrollable", false);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var textObject = GetValue(config, "text", undefined);
        if (textObject === undefined) textObject = CreateDefaultTextObject(scene);
        this.textCropEnable = GetValue(config, "textCrop", !!textObject.setCrop);
        var textMaskEnable = GetValue(config, "textMask", !this.textCropEnable);
        if (background) this.addBackground(background);
        this.add(textObject);
        this.sizerChildren = [
            textObject
        ];
        var sizerConfig = this.getSizerConfig(textObject);
        sizerConfig.align = ALIGN_LEFTTOP;
        sizerConfig.padding = (0, _getBoundsConfigJsDefault.default)(0);
        sizerConfig.expand = true;
        this.textObject = textObject;
        this.textObjectType = (0, _getTextObjectTypeJsDefault.default)(textObject);
        // Add more variables
        sizerConfig.preOffsetY = 0;
        sizerConfig.offsetY = 0;
        // Create mask of text object
        if (textMaskEnable) this.textMask = (0, _addChildMaskJsDefault.default).call(this, this.textObject, this);
        this.addChildrenMap("background", background);
        this.addChildrenMap("text", textObject);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.textObject = undefined;
        this.textMask = undefined;
        if (this.lines) {
            switch(this.textObjectType){
                case 0, _getTextObjectTypeJs.TextType:
                    this.lines.length = 0;
                    break;
                case 0, _getTextObjectTypeJs.TagTextType:
                    this.lines.destroy();
                    break;
                case 0, _getTextObjectTypeJs.BitmapTextType:
                    this.lines.length = 0;
                    break;
            }
            this.lines = undefined;
        }
        super.destroy(fromScene);
    }
    setClampMode(mode) {
        if (mode === undefined) mode = true;
        this.clampTextOY = mode;
        return this;
    }
    get textLineHeight() {
        if (this._textLineHeight === undefined) {
            var lineHeight;
            switch(this.textObjectType){
                case 0, _getTextObjectTypeJs.TextType:
                case 0, _getTextObjectTypeJs.TagTextType:
                    var style = this.textObject.style;
                    lineHeight = style.metrics.fontSize + style.strokeThickness;
                    break;
                case 0, _getTextObjectTypeJs.BitmapTextType:
                    var scale = this.textObject.fontSize / this.textObject.fontData.size;
                    lineHeight = this.textObject.fontData.lineHeight * scale;
                    break;
            }
            this._textLineHeight = lineHeight;
        }
        return this._textLineHeight;
    }
    get textLineSpacing() {
        if (this._textLineSpacing === undefined) {
            var lineSpacing;
            switch(this.textObjectType){
                case 0, _getTextObjectTypeJs.TextType:
                case 0, _getTextObjectTypeJs.TagTextType:
                    lineSpacing = this.textObject.lineSpacing;
                    break;
                case 0, _getTextObjectTypeJs.BitmapTextType:
                    lineSpacing = 0;
                    break;
            }
            this._textLineSpacing = lineSpacing;
        }
        return this._textLineSpacing;
    }
    get visibleLinesCount() {
        if (this._visibleLinesCount === undefined) this._visibleLinesCount = Math.floor((0, _textHeightToLinesCountJsDefault.default).call(this, this._textObjectRealHeight));
        return this._visibleLinesCount;
    }
    get topTextOY() {
        return 0;
    }
    get bottomTextOY() {
        return -this.textVisibleHeight;
    }
    get textHeight() {
        if (this._textHeight === undefined) this._textHeight = (0, _linesCountToTextHeightJsDefault.default).call(this, this.linesCount);
        return this._textHeight;
    }
    get textObjectHeight() {
        return this._textObjectRealHeight - (this.textLineHeight + this.textLineSpacing); // Remove 1 text line
    }
    get textVisibleHeight() {
        if (this._textVisibleHeight === undefined) {
            var h = this.textHeight - this.textObjectHeight;
            if (!this.alwaysScrollable && h < 0) h = 0;
            this._textVisibleHeight = h;
        }
        return this._textVisibleHeight;
    }
    textOYExceedTop(oy) {
        if (oy === undefined) oy = this.textOY;
        return oy > this.topTextOY;
    }
    textOYExeceedBottom(oy) {
        if (oy === undefined) oy = this.textOY;
        return oy < this.bottomTextOY;
    }
    get textOY() {
        return this._textOY;
    }
    set textOY(oy) {
        var topTextOY = this.topTextOY;
        var bottomTextOY = this.bottomTextOY;
        var textOYExceedTop = this.textOYExceedTop(oy);
        var textOYExeceedBottom = this.textOYExeceedBottom(oy);
        if (this.clampTextOY) {
            if (this.visibleLinesCount > this.linesCount) oy = 0;
            else if (textOYExceedTop) oy = topTextOY;
            else if (textOYExeceedBottom) oy = bottomTextOY;
        }
        if (this._textOY !== oy) {
            this._textOY = oy;
            this.updateTextObject();
        }
        if (textOYExceedTop) {
            if (!this.execeedTopState) this.emit("execeedtop", this, oy, topTextOY);
        }
        this.execeedTopState = textOYExceedTop;
        if (textOYExeceedBottom) {
            if (!this.execeedBottomState) this.emit("execeedbottom", this, oy, bottomTextOY);
        }
        this.execeedBottomState = textOYExeceedBottom;
    }
    setTextOY(oy) {
        this.textOY = oy;
        return this;
    }
    set t(value) {
        this.textOY = -this.textVisibleHeight * value;
    }
    get t() {
        var textVisibleHeight = this.textVisibleHeight;
        if (textVisibleHeight === 0) return 0;
        return this.textOY / -textVisibleHeight;
    }
    setTextOYByPercentage(percentage) {
        this.t = percentage;
        return this;
    }
}
var CreateDefaultTextObject = function(scene) {
    return scene.add.text(0, 0, "");
};
Object.assign(TextBlock.prototype, (0, _methodsJsDefault.default));
exports.default = TextBlock;

},{"../../../../plugins/utils/text/GetTextObjectType.js":"6Cxvv","../../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","../../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"dEYkh","../../utils/GetBoundsConfig.js":"arnT9","./LinesCountToTextHeight.js":"63Ef7","./TextHeightToLinesCount.js":"1kPEC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Cxvv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextType", ()=>TextType);
parcelHelpers.export(exports, "TagTextType", ()=>TagTextType);
parcelHelpers.export(exports, "BitmapTextType", ()=>BitmapTextType);
var _isTextGameObjectJs = require("./IsTextGameObject.js");
var _isTextGameObjectJsDefault = parcelHelpers.interopDefault(_isTextGameObjectJs);
var _isBitmapTextGameObjectJs = require("../bitmaptext/IsBitmapTextGameObject.js");
var _isBitmapTextGameObjectJsDefault = parcelHelpers.interopDefault(_isBitmapTextGameObjectJs);
const TextType = 0;
const TagTextType = 1;
const BitmapTextType = 2;
var GetTextObjectType = function(textObject) {
    var textObjectType;
    if ((0, _isBitmapTextGameObjectJsDefault.default)(textObject)) textObjectType = BitmapTextType;
    else if ((0, _isTextGameObjectJsDefault.default)(textObject)) textObjectType = TextType;
    else textObjectType = TagTextType;
    return textObjectType;
};
exports.default = GetTextObjectType;

},{"./IsTextGameObject.js":"7s4wi","../bitmaptext/IsBitmapTextGameObject.js":"2rRxv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dEYkh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setTextJs = require("./SetText.js");
var _setTextJsDefault = parcelHelpers.interopDefault(_setTextJs);
var _updateTextObjectJs = require("./UpdateTextObject.js");
var _updateTextObjectJsDefault = parcelHelpers.interopDefault(_updateTextObjectJs);
var _preLayoutJs = require("./PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
exports.default = {
    setText: (0, _setTextJsDefault.default),
    updateTextObject: (0, _updateTextObjectJsDefault.default),
    preLayout: (0, _preLayoutJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default)
};

},{"./SetText.js":"f5qOg","./UpdateTextObject.js":"9cVED","./PreLayout.js":"1Ec1A","./LayoutChildren.js":"7gtNR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f5qOg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textToLinesJs = require("../../../../plugins/utils/text/TextToLines.js");
var _textToLinesJsDefault = parcelHelpers.interopDefault(_textToLinesJs);
var SetText = function(text) {
    if (text !== undefined) this.text = text;
    // Wrap content in lines
    this.lines = (0, _textToLinesJsDefault.default)(this.textObject, this.text, this.lines);
    // Get lines count
    this.linesCount = this.lines.length;
    // Re-calculate these values later
    this._textHeight = undefined;
    this._textVisibleHeight = undefined;
    this.updateTextObject();
    return this;
};
exports.default = SetText;

},{"../../../../plugins/utils/text/TextToLines.js":"gmdV0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gmdV0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("./GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var TextToLines = function(textObject, text, lines) {
    var textObjectType = (0, _getTextObjectTypeJsDefault.default)(textObject);
    switch(textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
            lines = textObject.getWrappedText(text); // Array of string
            break;
        case 0, _getTextObjectTypeJs.TagTextType:
            lines = textObject.getPenManager(text, lines); // Pens-manager
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            if (textObject.maxWidth > 0) lines = textObject.setText(text).getTextBounds().wrappedText.split("\n");
            else lines = text.split("\n");
            break;
    }
    return lines;
};
exports.default = TextToLines;

},{"./GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cVED":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textHeightToLinesCountJs = require("./TextHeightToLinesCount.js");
var _textHeightToLinesCountJsDefault = parcelHelpers.interopDefault(_textHeightToLinesCountJs);
var _linesCountToTextHeightJs = require("./LinesCountToTextHeight.js");
var _linesCountToTextHeightJsDefault = parcelHelpers.interopDefault(_linesCountToTextHeightJs);
var _getLinesJs = require("./GetLines.js");
var _getLinesJsDefault = parcelHelpers.interopDefault(_getLinesJs);
var _setNoWrapTextJs = require("../../../../plugins/utils/text/SetNoWrapText.js");
var _setNoWrapTextJsDefault = parcelHelpers.interopDefault(_setNoWrapTextJs);
var _resetTextObjectPositionJs = require("./ResetTextObjectPosition.js");
var _resetTextObjectPositionJsDefault = parcelHelpers.interopDefault(_resetTextObjectPositionJs);
var UpdateTextObject = function() {
    var startLineIndex = Math.max(Math.floor((0, _textHeightToLinesCountJsDefault.default).call(this, -this.textOY)), 0);
    var textOffset = (0, _linesCountToTextHeightJsDefault.default).call(this, startLineIndex) + this.textOY;
    // Grab visible lines
    var text = (0, _getLinesJsDefault.default).call(this, startLineIndex);
    // Display visible content
    (0, _setNoWrapTextJsDefault.default)(this.textObject, text);
    this.textObject.rexSizer.offsetY = textOffset;
    (0, _resetTextObjectPositionJsDefault.default).call(this);
    return this;
};
exports.default = UpdateTextObject;

},{"./TextHeightToLinesCount.js":"1kPEC","./LinesCountToTextHeight.js":"63Ef7","./GetLines.js":"hW9Im","../../../../plugins/utils/text/SetNoWrapText.js":"4ltsm","./ResetTextObjectPosition.js":"dyhfW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kPEC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var TextHeightToLinesCount = function(height) {
    // height = (lines * (lineHeight + lineSpacing)) - lineSpacing
    return (height - this.textLineSpacing) / (this.textLineHeight + this.textLineSpacing);
};
exports.default = TextHeightToLinesCount;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63Ef7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var LinesCountToTextHeight = function(linesCount) {
    // height = (linesCount * (lineHeight + lineSpacing)) - lineSpacing
    return linesCount * (this.textLineHeight + this.textLineSpacing) - this.textLineSpacing;
};
exports.default = LinesCountToTextHeight;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hW9Im":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("../../../../plugins/utils/text/GetTextObjectType.js");
var GetLines = function(startLineIdx) {
    var endLineIdx = startLineIdx + this.visibleLinesCount + 1;
    var text;
    switch(this.textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
            text = this.lines.slice(startLineIdx, endLineIdx).join("\n");
            break;
        case 0, _getTextObjectTypeJs.TagTextType:
            var startIdx = this.lines.getLineStartIndex(startLineIdx);
            var endIdx = this.lines.getLineEndIndex(endLineIdx - 1);
            text = this.lines.getSliceTagText(startIdx, endIdx, true);
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            text = this.lines.slice(startLineIdx, endLineIdx).join("\n");
            break;
    }
    return text;
};
exports.default = GetLines;

},{"../../../../plugins/utils/text/GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ltsm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("./GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var SetNoWrapText = function(textObject, text) {
    var textObjectType = (0, _getTextObjectTypeJsDefault.default)(textObject);
    switch(textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
            // Store wrap properties
            var style = textObject.style;
            var wordWrapWidth = style.wordWrapWidth;
            var wordWrapCallback = style.wordWrapCallback;
            // Disable wrap
            style.wordWrapWidth = 0;
            style.wordWrapCallback = undefined;
            // Set text
            textObject.setText(text);
            // Restore wrap
            style.wordWrapWidth = wordWrapWidth;
            style.wordWrapCallback = wordWrapCallback;
            break;
        case 0, _getTextObjectTypeJs.TagTextType:
            // Store wrap properties
            var style = textObject.style;
            var wrapMode = style.wrapMode;
            // Disable wrap
            style.wrapMode = 0;
            // Set text
            textObject.setText(text);
            // Restore wrap
            style.wrapMode = wrapMode;
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            // Store wrap properties
            var maxWidth = textObject._maxWidth;
            // Disable wrap
            textObject._maxWidth = 0;
            // Set text
            textObject.setText(text);
            // Restore wrap
            textObject._maxWidth = maxWidth;
            break;
    }
};
exports.default = SetNoWrapText;

},{"./GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dyhfW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResetTextObjectPosition = function() {
    var config = this.textObject.rexSizer;
    this.textObject.y += config.offsetY - config.preOffsetY;
    config.preOffsetY = config.offsetY;
    this.resetChildPositionState(this.textObject);
    if (this.textCropEnable) CropTextObject.call(this);
};
var CropTextObject = function() {
    // Don't have setCrop method, return
    if (!this.textObject.setCrop) return;
    var offsetY = this.textObject.rexSizer.offsetY;
    var cropY, cropHeight;
    if (offsetY <= 0) {
        cropY = -offsetY;
        cropHeight = this.height;
    } else {
        cropY = 0;
        cropHeight = this.height - offsetY;
    }
    this.textObject.setCrop(0, cropY, this.width, cropHeight);
};
exports.default = ResetTextObjectPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Ec1A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _preLayoutJs = require("../../basesizer/PreLayout.js");
var _preLayoutJsDefault = parcelHelpers.interopDefault(_preLayoutJs);
var PreLayout = function() {
    // Style of text
    this._textLineHeight = undefined;
    this._textLineSpacing = undefined;
    // Style of text, width of text
    this._visibleLinesCount = undefined;
    // Style of text, total lines of content
    this._textHeight = undefined;
    this._textVisibleHeight = undefined;
    (0, _preLayoutJsDefault.default).call(this);
    return this;
};
exports.default = PreLayout;

},{"../../basesizer/PreLayout.js":"1Q5WG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7gtNR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeTextJs = require("./ResizeText.js");
var _resizeTextJsDefault = parcelHelpers.interopDefault(_resizeTextJs);
var _resetTextObjectPositionJs = require("./ResetTextObjectPosition.js");
var _resetTextObjectPositionJsDefault = parcelHelpers.interopDefault(_resetTextObjectPositionJs);
var _alignInJs = require("../../../../plugins/utils/actions/AlignIn.js");
var _alignInJsDefault = parcelHelpers.interopDefault(_alignInJs);
var LayoutChildren = function() {
    var child, childConfig, padding;
    var startX = this.left, startY = this.top;
    var x, y, width, height; // Align zone
    // LayoutChildren text child
    // Skip invisible child
    child = this.textObject;
    if (!child.rexSizer.hidden) {
        childConfig = child.rexSizer;
        padding = childConfig.padding;
        x = startX + padding.left;
        y = startY + padding.top;
        width = this.width - padding.left - padding.right;
        height = this.height - padding.top - padding.bottom;
        (0, _resizeTextJsDefault.default).call(this, child, width, height);
        (0, _alignInJsDefault.default)(child, x, y, width, height, childConfig.align);
        childConfig.preOffsetY = 0; // Clear preOffsetY
        (0, _resetTextObjectPositionJsDefault.default).call(this);
        if (this.textMask) {
            this.textMask.setPosition().resize();
            this.resetChildPositionState(this.textMask);
        }
    }
};
exports.default = LayoutChildren;

},{"./ResizeText.js":"2ecZo","./ResetTextObjectPosition.js":"dyhfW","../../../../plugins/utils/actions/AlignIn.js":"7glhd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ecZo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("../../../../plugins/utils/text/GetTextObjectType.js");
var ResizeText = function(textObject, width, height) {
    height += this.textLineHeight + this.textLineSpacing; // Add 1 line
    if (this.textObjectWidth === width && this._textObjectRealHeight === height) return;
    this.textObjectWidth = width;
    this._textObjectRealHeight = height;
    switch(this.textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
        case 0, _getTextObjectTypeJs.TagTextType:
            textObject.setFixedSize(width, height);
            var style = textObject.style;
            var wrapWidth = Math.max(width, 0);
            if (this.textObjectType === (0, _getTextObjectTypeJs.TextType)) style.wordWrapWidth = wrapWidth;
            else {
                if (style.wrapMode === 0) style.wrapMode = 1;
                style.wrapWidth = wrapWidth;
            }
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            textObject.setMaxWidth(width);
            break;
    }
    // Render content again
    this.setText();
};
exports.default = ResizeText;

},{"../../../../plugins/utils/text/GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d0KMz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var InjectProperties = function(textBlock) {
    Object.defineProperty(textBlock, "childOY", {
        configurable: true,
        get: function() {
            return textBlock.textOY;
        },
        set: function(value) {
            textBlock.textOY = value;
        }
    });
    Object.defineProperty(textBlock, "topChildOY", {
        get: function() {
            return textBlock.topTextOY;
        }
    });
    Object.defineProperty(textBlock, "bottomChildOY", {
        get: function() {
            return textBlock.bottomTextOY;
        }
    });
    Object.defineProperty(textBlock, "childVisibleHeight", {
        get: function() {
            return textBlock.textObjectHeight;
        }
    });
    Object.defineProperty(textBlock, "childHeight", {
        get: function() {
            return textBlock.textHeight;
        }
    });
};
exports.default = InjectProperties;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3630B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setText (text) {
        var textBlock = this.childrenMap.child;
        textBlock.setText(text);
        this.resizeController();
        return this;
    },
    appendText (text) {
        this.setText(this.text + text);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6rw7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Clamp = Phaser.Math.Clamp;
exports.default = {
    scrollToLine (lineIndex) {
        this.setChildOY(-this.lineHeight * lineIndex);
        return this;
    },
    scrollToNextLine (lineCount) {
        if (lineCount === undefined) lineCount = 1;
        var lineIndex = this.lineIndex + lineCount;
        this.scrollToLine(lineIndex);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6PTpy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _holyGrailJs = require("./HolyGrail.js");
var _holyGrailJsDefault = parcelHelpers.interopDefault(_holyGrailJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("holyGrail", function(config) {
    var gameObject = new (0, _holyGrailJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.HolyGrail", (0, _holyGrailJsDefault.default));
exports.default = (0, _holyGrailJsDefault.default);

},{"./HolyGrail.js":"736zc","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"736zc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _buildJs = require("./methods/Build.js");
var _buildJsDefault = parcelHelpers.interopDefault(_buildJs);
class HolyGrail extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        config.orientation = 1; // top-to-bottom
        // Create sizer
        super(scene, config);
        this.type = "rexHolyGrail";
        this.build(config);
    }
}
var methods = {
    build: (0, _buildJsDefault.default)
};
Object.assign(HolyGrail.prototype, methods);
exports.default = HolyGrail;

},{"../sizer/Sizer.js":"ayu5S","./methods/Build.js":"jgJzE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jgJzE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _layoutMode0Js = require("./LayoutMode0.js");
var _layoutMode0JsDefault = parcelHelpers.interopDefault(_layoutMode0Js);
var _layoutMode1Js = require("./LayoutMode1.js");
var _layoutMode1JsDefault = parcelHelpers.interopDefault(_layoutMode1Js);
var _layoutMode2Js = require("./LayoutMode2.js");
var _layoutMode2JsDefault = parcelHelpers.interopDefault(_layoutMode2Js);
var _layoutMode3Js = require("./LayoutMode3.js");
var _layoutMode3JsDefault = parcelHelpers.interopDefault(_layoutMode3Js);
const GetValue = Phaser.Utils.Objects.GetValue;
const LayoutCallbacks = [
    (0, _layoutMode0JsDefault.default),
    (0, _layoutMode1JsDefault.default),
    (0, _layoutMode2JsDefault.default),
    (0, _layoutMode3JsDefault.default)
];
var Build = function(config) {
    this.clear(true);
    // Add Background
    var background = GetValue(config, "background", undefined);
    if (background) this.addBackground(background);
    var layoutMode = GetValue(config, "layoutMode", 0);
    if (typeof layoutMode === "string") layoutMode = LayoutModesMap[layoutMode.toUpperCase()];
    var layoutCallback = LayoutCallbacks[layoutMode] || LayoutCallbacks[0];
    layoutCallback.call(this, config);
    this.addChildrenMap("background", config.background);
    this.addChildrenMap("header", config.header);
    this.addChildrenMap("leftSide", config.leftSide);
    this.addChildrenMap("content", config.content);
    this.addChildrenMap("rightSide", config.rightSide);
    this.addChildrenMap("footer", config.footer);
};
const LayoutModesMap = {
    "FFF": 0,
    "LFF": 1,
    "FFR": 2,
    "LFR": 3
};
exports.default = Build;

},{"./LayoutMode0.js":"1D3j6","./LayoutMode1.js":"aMTRa","./LayoutMode2.js":"7whmy","./LayoutMode3.js":"hQvQ6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1D3j6":[function(require,module,exports) {
/*
Elements:
    ```
    HHH
    LCR
    FFF
    ```
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAddChildConfigJs = require("./GetAddChildConfig.js");
var _creatExpandContainerJs = require("./CreatExpandContainer.js");
var _creatExpandContainerJsDefault = parcelHelpers.interopDefault(_creatExpandContainerJs);
var LayoutMode0 = function(config) {
    var scene = this.scene;
    // Add Header
    var header = config.header;
    if (header) this.add(header, (0, _getAddChildConfigJs.GetAddHeaderConfig)(config));
    /*
    L C R
    */ var bodySizer = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    this.add(bodySizer, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add Left-side
    var leftSide = config.leftSide;
    if (leftSide) bodySizer.add(leftSide, (0, _getAddChildConfigJs.GetAddLeftSideConfig)(config));
    // Add content
    var content = config.content;
    if (content) bodySizer.add(content, (0, _getAddChildConfigJs.GetAddContentConfig)(config));
    // Add Right-side
    var rightSide = config.rightSide;
    if (rightSide) bodySizer.add(rightSide, (0, _getAddChildConfigJs.GetAddRightSideConfig)(config));
    // Add Footer
    var footer = config.footer;
    if (footer) this.add(footer, (0, _getAddChildConfigJs.GetAddFooterConfig)(config));
};
exports.default = LayoutMode0;

},{"./GetAddChildConfig.js":"5TzFd","./CreatExpandContainer.js":"aP1ly","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5TzFd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetAddHeaderConfig", ()=>GetAddHeaderConfig);
parcelHelpers.export(exports, "GetAddLeftSideConfig", ()=>GetAddLeftSideConfig);
parcelHelpers.export(exports, "GetAddContentConfig", ()=>GetAddContentConfig);
parcelHelpers.export(exports, "GetAddRightSideConfig", ()=>GetAddRightSideConfig);
parcelHelpers.export(exports, "GetAddFooterConfig", ()=>GetAddFooterConfig);
parcelHelpers.export(exports, "GetAddContainerConfig", ()=>GetAddContainerConfig);
const GetValue = Phaser.Utils.Objects.GetValue;
var GetAddChildConfig = function(config, key, defaultValues) {
    var proportion = GetValue(config, `proportion.${key}`, defaultValues.proportion);
    var align = GetValue(config, `align.${key}`, "center");
    var padding = GetValue(config, `space.${key}`, undefined);
    if (typeof padding === "number" && defaultValues.paddingKey) {
        var paddingNum = padding;
        padding = {};
        padding[defaultValues.paddingKey] = paddingNum;
    }
    var expand = GetValue(config, `expand.${key}`, true);
    return {
        proportion: proportion,
        align: align,
        padding: padding,
        expand: expand
    };
};
var GetAddHeaderConfig = function(config) {
    return GetAddChildConfig(config, "header", {
        proportion: 0,
        paddingKey: "bottom"
    });
};
var GetAddLeftSideConfig = function(config) {
    return GetAddChildConfig(config, "leftSide", {
        proportion: 0,
        paddingKey: "right"
    });
};
var GetAddContentConfig = function(config) {
    return GetAddChildConfig(config, "content", {
        proportion: 1
    });
};
var GetAddRightSideConfig = function(config) {
    return GetAddChildConfig(config, "rightSide", {
        proportion: 0,
        paddingKey: "left"
    });
};
var GetAddFooterConfig = function(config) {
    return GetAddChildConfig(config, "footer", {
        proportion: 0,
        paddingKey: "top"
    });
};
var GetAddContainerConfig = function(config) {
    return {
        proportion: 1,
        align: "center",
        padding: 0,
        expand: true
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aP1ly":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var CreatExpandContainer = function(scene, orientation) {
    var container = new (0, _sizerJsDefault.default)(scene, {
        orientation: orientation
    });
    scene.add.existing(container);
    return container;
};
exports.default = CreatExpandContainer;

},{"../../sizer/Sizer.js":"ayu5S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMTRa":[function(require,module,exports) {
/*
Elements:
    ```
    HHH
    LCR
    LFF
    ```
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAddChildConfigJs = require("./GetAddChildConfig.js");
var _creatExpandContainerJs = require("./CreatExpandContainer.js");
var _creatExpandContainerJsDefault = parcelHelpers.interopDefault(_creatExpandContainerJs);
var LayoutMode1 = function(config) {
    var scene = this.scene;
    // Add Header
    var header = config.header;
    if (header) this.add(header, (0, _getAddChildConfigJs.GetAddHeaderConfig)(config));
    /*
    L CR
    L FF
    */ var bodySizer0 = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    this.add(bodySizer0, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add Left-side
    var leftSide = config.leftSide;
    if (leftSide) bodySizer0.add(leftSide, (0, _getAddChildConfigJs.GetAddLeftSideConfig)(config));
    /*
    CR

    FF
    */ var bodySizer1 = (0, _creatExpandContainerJsDefault.default)(scene, 1);
    bodySizer0.add(bodySizer1, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    /*
    C R
    */ var bodySizer2 = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    bodySizer1.add(bodySizer2, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add content
    var content = config.content;
    if (content) bodySizer2.add(content, (0, _getAddChildConfigJs.GetAddContentConfig)(config));
    // Add Right-side
    var rightSide = config.rightSide;
    if (rightSide) bodySizer2.add(rightSide, (0, _getAddChildConfigJs.GetAddRightSideConfig)(config));
    // Add Footer
    var footer = config.footer;
    if (footer) bodySizer1.add(footer, (0, _getAddChildConfigJs.GetAddFooterConfig)(config));
};
exports.default = LayoutMode1;

},{"./GetAddChildConfig.js":"5TzFd","./CreatExpandContainer.js":"aP1ly","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7whmy":[function(require,module,exports) {
/*
Elements:
    ```
    HHH
    LCR
    FFR
    ```
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAddChildConfigJs = require("./GetAddChildConfig.js");
var _creatExpandContainerJs = require("./CreatExpandContainer.js");
var _creatExpandContainerJsDefault = parcelHelpers.interopDefault(_creatExpandContainerJs);
var LayoutMode2 = function(config) {
    var scene = this.scene;
    // Add Header
    var header = config.header;
    if (header) this.add(header, (0, _getAddChildConfigJs.GetAddHeaderConfig)(config));
    /*
    LC R
    FF R
    */ var bodySizer0 = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    this.add(bodySizer0, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    /*
    LC

    FF
    */ var bodySizer1 = (0, _creatExpandContainerJsDefault.default)(scene, 1);
    bodySizer0.add(bodySizer1, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    /*
    L C
    */ var bodySizer2 = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    bodySizer1.add(bodySizer2, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add Left-side
    var leftSide = config.leftSide;
    if (leftSide) bodySizer2.add(leftSide, (0, _getAddChildConfigJs.GetAddLeftSideConfig)(config));
    // Add content
    var content = config.content;
    if (content) bodySizer2.add(content, (0, _getAddChildConfigJs.GetAddContentConfig)(config));
    // Add Footer
    var footer = config.footer;
    if (footer) bodySizer1.add(footer, (0, _getAddChildConfigJs.GetAddFooterConfig)(config));
    // Add Right-side
    var rightSide = config.rightSide;
    if (rightSide) bodySizer0.add(rightSide, (0, _getAddChildConfigJs.GetAddRightSideConfig)(config));
};
exports.default = LayoutMode2;

},{"./GetAddChildConfig.js":"5TzFd","./CreatExpandContainer.js":"aP1ly","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQvQ6":[function(require,module,exports) {
/*
Elements:
    ```
    HHH
    LCR
    LFR
    ```
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getAddChildConfigJs = require("./GetAddChildConfig.js");
var _creatExpandContainerJs = require("./CreatExpandContainer.js");
var _creatExpandContainerJsDefault = parcelHelpers.interopDefault(_creatExpandContainerJs);
var LayoutMode0 = function(config) {
    var scene = this.scene;
    // Add Header
    var header = config.header;
    if (header) this.add(header, (0, _getAddChildConfigJs.GetAddHeaderConfig)(config));
    /*
    L C R
    L F R
    */ var bodySizer0 = (0, _creatExpandContainerJsDefault.default)(scene, 0);
    this.add(bodySizer0, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add Left-side
    var leftSide = config.leftSide;
    if (leftSide) bodySizer0.add(leftSide, (0, _getAddChildConfigJs.GetAddLeftSideConfig)(config));
    /*
    C

    F
    */ var bodySizer1 = (0, _creatExpandContainerJsDefault.default)(scene, 1);
    bodySizer0.add(bodySizer1, (0, _getAddChildConfigJs.GetAddContainerConfig)(config));
    // Add content
    var content = config.content;
    if (content) bodySizer1.add(content, (0, _getAddChildConfigJs.GetAddContentConfig)(config));
    // Add Footer
    var footer = config.footer;
    if (footer) bodySizer1.add(footer, (0, _getAddChildConfigJs.GetAddFooterConfig)(config));
    // Add Right-side
    var rightSide = config.rightSide;
    if (rightSide) bodySizer0.add(rightSide, (0, _getAddChildConfigJs.GetAddRightSideConfig)(config));
};
exports.default = LayoutMode0;

},{"./GetAddChildConfig.js":"5TzFd","./CreatExpandContainer.js":"aP1ly","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gpphG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tabsJs = require("./Tabs.js");
var _tabsJsDefault = parcelHelpers.interopDefault(_tabsJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("tabs", function(config) {
    var gameObject = new (0, _tabsJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Tabs", (0, _tabsJsDefault.default));
exports.default = (0, _tabsJsDefault.default);

},{"./Tabs.js":"1oNag","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oNag":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridSizerJs = require("../gridsizer/GridSizer.js");
var _gridSizerJsDefault = parcelHelpers.interopDefault(_gridSizerJs);
var _buttonsJs = require("../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _buttonMethodsJs = require("./ButtonMethods.js");
var _buttonMethodsJsDefault = parcelHelpers.interopDefault(_buttonMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Tabs extends (0, _gridSizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create sizer
        config.column = 3;
        config.row = 3;
        super(scene, config);
        this.type = "rexTabs";
        this.eventEmitter = GetValue(config, "eventEmitter", this);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var panel = GetValue(config, "panel", undefined);
        var leftButtons = GetValue(config, "leftButtons", undefined);
        var leftButtonsBackground = GetValue(config, "leftButtonsBackground", undefined);
        var leftButtonsSizer;
        var rightButtons = GetValue(config, "rightButtons", undefined);
        var rightButtonsBackground = GetValue(config, "rightButtonsBackground", undefined);
        var rightButtonsSizer;
        var topButtons = GetValue(config, "topButtons", undefined);
        var topButtonsBackground = GetValue(config, "topButtonsBackground", undefined);
        var topButtonsSizer;
        var bottomButtons = GetValue(config, "bottomButtons", undefined);
        var bottomButtonsBackground = GetValue(config, "bottomButtonsBackground", undefined);
        var bottomButtonsSizer;
        var clickConfig = GetValue(config, "click", undefined);
        if (background) this.addBackground(background);
        if (panel) this.add(panel, 1, 1, "center", 0, true);
        if (leftButtons) {
            var leftButtonsOffset = GetValue(config, "space.leftButtonsOffset", 0);
            var leftButtonSpace = GetValue(config, "space.leftButton", 0);
            leftButtonsSizer = new (0, _buttonsJsDefault.default)(scene, {
                groupName: "left",
                background: leftButtonsBackground,
                buttons: leftButtons,
                orientation: 1,
                space: {
                    item: leftButtonSpace
                },
                align: GetValue(config, "align.leftButtons", undefined),
                click: clickConfig,
                eventEmitter: this.eventEmitter
            });
            var padding = {
                top: leftButtonsOffset
            };
            this.add(leftButtonsSizer, 0, 1, "top", padding, false);
        }
        if (rightButtons) {
            var rightButtonsOffset = GetValue(config, "space.rightButtonsOffset", 0);
            var rightButtonSpace = GetValue(config, "space.rightButton", 0);
            rightButtonsSizer = new (0, _buttonsJsDefault.default)(scene, {
                groupName: "right",
                background: rightButtonsBackground,
                buttons: rightButtons,
                orientation: 1,
                space: {
                    item: rightButtonSpace
                },
                align: GetValue(config, "align.rightButtons", undefined),
                click: clickConfig,
                eventEmitter: this.eventEmitter
            });
            var padding = {
                top: rightButtonsOffset
            };
            this.add(rightButtonsSizer, 2, 1, "top", padding, false);
        }
        if (topButtons) {
            var toptButtonsOffset = GetValue(config, "space.topButtonsOffset", 0);
            var topButtonSpace = GetValue(config, "space.topButton", 0);
            topButtonsSizer = new (0, _buttonsJsDefault.default)(scene, {
                groupName: "top",
                background: topButtonsBackground,
                buttons: topButtons,
                orientation: 0,
                space: {
                    item: topButtonSpace
                },
                align: GetValue(config, "align.topButtons", undefined),
                click: clickConfig,
                eventEmitter: this.eventEmitter
            });
            var padding = {
                left: toptButtonsOffset
            };
            this.add(topButtonsSizer, 1, 0, "left", padding, false);
        }
        if (bottomButtons) {
            var bottomButtonsOffset = GetValue(config, "space.bottomButtonsOffset", 0);
            var bottomButtonSpace = GetValue(config, "space.bottomButton", 0);
            bottomButtonsSizer = new (0, _buttonsJsDefault.default)(scene, {
                groupName: "bottom",
                background: bottomButtonsBackground,
                buttons: bottomButtons,
                orientation: 0,
                space: {
                    item: bottomButtonSpace
                },
                align: GetValue(config, "align.bottomButtons", undefined),
                click: clickConfig,
                eventEmitter: this.eventEmitter
            });
            var padding = {
                left: bottomButtonsOffset
            };
            this.add(bottomButtonsSizer, 1, 2, "left", padding, false);
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("panel", panel);
        this.addChildrenMap("leftButtons", leftButtons);
        this.addChildrenMap("rightButtons", rightButtons);
        this.addChildrenMap("topButtons", topButtons);
        this.addChildrenMap("bottomButtons", bottomButtons);
        this.addChildrenMap("leftButtonsSizer", leftButtonsSizer);
        this.addChildrenMap("rightButtonsSizer", rightButtonsSizer);
        this.addChildrenMap("topButtonsSizer", topButtonsSizer);
        this.addChildrenMap("bottomButtonsSizer", bottomButtonsSizer);
    }
}
Object.assign(Tabs.prototype, (0, _buttonMethodsJsDefault.default));
exports.default = Tabs;

},{"../gridsizer/GridSizer.js":"b382f","../buttons/Buttons.js":"9NfMe","./ButtonMethods.js":"27Wg9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27Wg9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hideJs = require("../utils/Hide.js");
exports.default = {
    getButtonsSizer (groupName) {
        return this.childrenMap[`${groupName}ButtonsSizer`];
    },
    getButton (groupName, index) {
        var buttonsSizer = this.getButtonsSizer(groupName);
        return buttonsSizer ? buttonsSizer.getButton(index) : undefined;
    },
    setButtonEnable (groupName, index, enabled) {
        this.getButtonsSizer(groupName).setButtonEnable(index, enabled);
        return this;
    },
    setLeftButtonEnable (index, enabled) {
        this.childrenMap.leftButtonsSizer.setButtonEnable(index, enabled);
        return this;
    },
    setRightButtonEnable (index, enabled) {
        this.childrenMap.rightButtonsSizer.setButtonEnable(index, enabled);
        return this;
    },
    setTopButtonEnable (index, enabled) {
        this.childrenMap.topButtonsSizer.setButtonEnable(index, enabled);
        return this;
    },
    setBottomButtonEnable (index, enabled) {
        this.childrenMap.bottomButtonsSizer.setButtonEnable(index, enabled);
        return this;
    },
    toggleButtonEnable (groupName, index) {
        this.getButtonsSizer(groupName).toggleButtonEnable(index);
        return this;
    },
    toggleLeftButtonEnable (index) {
        this.childrenMap.leftButtonsSizer.toggleButtonEnable(index);
        return this;
    },
    toggleRightButtonEnable (index) {
        this.childrenMap.rightButtonsSizer.toggleButtonEnable(index);
        return this;
    },
    toggleTopButtonEnable (index) {
        this.childrenMap.topButtonsSizer.toggleButtonEnable(index);
        return this;
    },
    toggleBottomButtonEnable (index) {
        this.childrenMap.bottomButtonsSizer.toggleButtonEnable(index);
        return this;
    },
    getButtonEnable (groupName, index) {
        return this.getButtonsSizer(groupName).getButtonEnable(index);
    },
    getLeftButtonEnable (index) {
        return this.childrenMap.leftButtonsSizer.getButtonEnable(index);
    },
    getRightButtonEnable (index) {
        return this.childrenMap.rightButtonsSizer.getButtonEnable(index);
    },
    getTopButtonEnable (index) {
        return this.childrenMap.topButtonsSizer.getButtonEnable(index);
    },
    getBottomButtonEnable (index) {
        return this.childrenMap.bottomButtonsSizer.getButtonEnable(index);
    },
    emitButtonClick (groupName, index) {
        var buttonsSizer = this.getButtonsSizer(groupName);
        if (!buttonsSizer) return this;
        buttonsSizer.emitButtonClick(index);
        return this;
    },
    emitLeftButtonClick (index) {
        this.childrenMap.leftButtonsSizer.emitButtonClick(index);
        return this;
    },
    emitRightButtonClick (index) {
        this.childrenMap.rightButtonsSizer.emitButtonClick(index);
        return this;
    },
    emitTopButtonClick (index) {
        this.childrenMap.topButtonsSizer.emitButtonClick(index);
        return this;
    },
    emitBottomButtonClick (index) {
        this.childrenMap.bottomButtonsSizer.emitButtonClick(index);
        return this;
    },
    getLeftButton (index) {
        return this.childrenMap.leftButtonsSizer.getButton(index);
    },
    getRightButton (index) {
        return this.childrenMap.rightButtonsSizer.getButton(index);
    },
    getTopButton (index) {
        return this.childrenMap.topButtonsSizer.getButton(index);
    },
    getBottomButton (index) {
        return this.childrenMap.bottomButtonsSizer.getButton(index);
    },
    showButton (groupName, index) {
        (0, _hideJs.Show)(this.getButton(groupName, index));
        return this;
    },
    showLeftButton (index) {
        (0, _hideJs.Show)(this.getLeftButton(index));
        return this;
    },
    showRightButton (index) {
        (0, _hideJs.Show)(this.getRightButton(index));
        return this;
    },
    showTopButton (index) {
        (0, _hideJs.Show)(this.getTopButton(index));
        return this;
    },
    showBottomButton (index) {
        (0, _hideJs.Show)(this.getBottomButton(index));
        return this;
    },
    hideButton (groupName, index) {
        (0, _hideJs.Hide)(this.getButton(groupName, index));
        return this;
    },
    hideLeftButton (index) {
        (0, _hideJs.Hide)(this.getLeftButton(index));
        return this;
    },
    hideRightButton (index) {
        (0, _hideJs.Hide)(this.getRightButton(index));
        return this;
    },
    hideTopButton (index) {
        (0, _hideJs.Hide)(this.getTopButton(index));
        return this;
    },
    hideBottomButton (index) {
        (0, _hideJs.Hide)(this.getBottomButton(index));
        return this;
    },
    addButton (groupName, gameObject) {
        this.getButtonsSizer(groupName).addButton(gameObject);
        return this;
    },
    addLeftButton (gameObject) {
        this.addButton("left", gameObject);
        return this;
    },
    addRightButton (gameObject) {
        this.addButton("right", gameObject);
        return this;
    },
    addTopButton (gameObject) {
        this.addButton("top", gameObject);
        return this;
    },
    removeButton (groupName, index, destroyChild) {
        this.getButtonsSizer(groupName).removeButton(index, destroyChild);
        return this;
    },
    removeLeftButton (index, destroyChild) {
        this.removeButton("left", index, destroyChild);
        return this;
    },
    removeRightButton (index, destroyChild) {
        this.removeButton("right", index, destroyChild);
        return this;
    },
    removeTopButton (index, destroyChild) {
        this.removeButton("top", index, destroyChild);
        return this;
    },
    removeBottomButton (index, destroyChild) {
        this.removeButton("bottom", index, destroyChild);
        return this;
    },
    clearButtons (groupName, destroyChild) {
        this.getButtonsSizer(groupName).clearButtons(destroyChild);
        return this;
    },
    clearLeftButtons (destroyChild) {
        this.clearButtons("left", destroyChild);
        return this;
    },
    clearRightButtons (destroyChild) {
        this.clearButtons("right", destroyChild);
        return this;
    },
    clearTopButtons (destroyChild) {
        this.clearButtons("top", destroyChild);
        return this;
    },
    clearBottomButtonss (destroyChild) {
        this.clearButtons("bottom", destroyChild);
        return this;
    },
    forEachButton (groupName, callback, scope) {
        this.getButtonsSizer(groupName).forEachButtton(callback, scope);
        return this;
    },
    forEachLeftButton (callback, scope) {
        this.childrenMap.leftButtonsSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachRightButton (callback, scope) {
        this.childrenMap.rightButtonsSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachTopButton (callback, scope) {
        this.childrenMap.topButtonsSizer.forEachButtton(callback, scope);
        return this;
    },
    forEachBottomButton (callback, scope) {
        this.childrenMap.bottomButtonsSizer.forEachButtton(callback, scope);
        return this;
    }
};

},{"../utils/Hide.js":"jy7YF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jq4oS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sliderJs = require("./Slider.js");
var _sliderJsDefault = parcelHelpers.interopDefault(_sliderJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("slider", function(config) {
    var gameObject = new (0, _sliderJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Slider", (0, _sliderJsDefault.default));
exports.default = (0, _sliderJsDefault.default);

},{"./Slider.js":"f16Jy","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eVgf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridTableJs = require("./GridTable.js");
var _gridTableJsDefault = parcelHelpers.interopDefault(_gridTableJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("gridTable", function(config) {
    var gameObject = new (0, _gridTableJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.GridTable", (0, _gridTableJsDefault.default));
exports.default = (0, _gridTableJsDefault.default);

},{"./GridTable.js":"7ZXxf","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ZXxf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollableJs = require("../utils/scrollable/Scrollable.js");
var _scrollableJsDefault = parcelHelpers.interopDefault(_scrollableJs);
var _getScrollModeJs = require("../utils/GetScrollMode.js");
var _getScrollModeJsDefault = parcelHelpers.interopDefault(_getScrollModeJs);
var _gridtableJs = require("../../../plugins/gridtable.js");
var _gridtableJsDefault = parcelHelpers.interopDefault(_gridtableJs);
var _injectPropertiesJs = require("./InjectProperties.js");
var _injectPropertiesJsDefault = parcelHelpers.interopDefault(_injectPropertiesJs);
var _tableOnCellVisibleJs = require("./TableOnCellVisible.js");
var _tableOnCellVisibleJsDefault = parcelHelpers.interopDefault(_tableOnCellVisibleJs);
var _tableSetInteractiveJs = require("./input/TableSetInteractive.js");
var _tableSetInteractiveJsDefault = parcelHelpers.interopDefault(_tableSetInteractiveJs);
var _noopJs = require("../../../plugins/utils/object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _setItemsJs = require("./SetItems.js");
var _setItemsJsDefault = parcelHelpers.interopDefault(_setItemsJs);
var _scrollMethodsJs = require("./ScrollMethods.js");
var _scrollMethodsJsDefault = parcelHelpers.interopDefault(_scrollMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class GridTable extends (0, _scrollableJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create grid table core
        var scrollMode = (0, _getScrollModeJsDefault.default)(config);
        var tableConfig = GetValue(config, "table", undefined);
        if (tableConfig === undefined) tableConfig = {};
        tableConfig.scrollMode = scrollMode;
        tableConfig.clamplTableOXY = GetValue(config, "clamplChildOY", false);
        var tableWidth = GetValue(tableConfig, "width", undefined);
        var tableHeight = GetValue(tableConfig, "height", undefined);
        var table = new (0, _gridtableJsDefault.default)(scene, 0, 0, tableWidth, tableHeight, tableConfig);
        scene.add.existing(table); // Important: Add to display list for touch detecting
        var proportion, expand;
        if (scrollMode === 0) {
            proportion = tableWidth === undefined ? 1 : 0;
            expand = tableHeight === undefined;
        } else {
            proportion = tableHeight === undefined ? 1 : 0;
            expand = tableWidth === undefined;
        }
        // Inject properties for scrollable interface
        (0, _injectPropertiesJsDefault.default)(table);
        // Set minWidth/minHeight to 0 if tableWidth/tableHeight is undefined
        table._minWidth = tableWidth === undefined ? 0 : undefined;
        table._minHeight = tableHeight === undefined ? 0 : undefined;
        // Fill config of scrollable
        config.type = "rexGridTable";
        config.child = {
            gameObject: table,
            proportion: proportion,
            expand: expand
        };
        var spaceConfig = GetValue(config, "space", undefined);
        if (spaceConfig) spaceConfig.child = spaceConfig.table;
        super(scene, config);
        this.addChildrenMap("table", table);
        this.addChildrenMap("tableLayer", table.maskLayer);
        this.eventEmitter = GetValue(config, "eventEmitter", this);
        var callback = GetValue(config, "createCellContainerCallback", (0, _noopJsDefault.default));
        var scope = GetValue(config, "createCellContainerCallbackScope", undefined);
        this.setCreateCellContainerCallback(callback, scope);
        (0, _tableOnCellVisibleJsDefault.default).call(this, table);
        this.resizeControllerFlag = false;
        var eventName = scrollMode === 0 ? "cellheightchange" : "cellwidthchange";
        table.on(eventName, function() {
            this.resizeControllerFlag = true;
        }, this);
        if (GetValue(tableConfig, "interactive", true)) (0, _tableSetInteractiveJsDefault.default).call(this, table, tableConfig);
        this.setItems(GetValue(config, "items", []));
        scene.game.events.on("poststep", this.onPostStep, this);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.scene.game.events.off("poststep", this.onPostStep, this);
        super.destroy(fromScene);
    }
    setCreateCellContainerCallback(callback, scope) {
        this.createCellContainerCallback = callback;
        this.createCellContainerCallbackScope = scope;
        return this;
    }
    refresh() {
        this.setItems(this.items);
        return this;
    }
    getCell(cellIdx) {
        var table = this.childrenMap.child;
        return table.getCell(cellIdx);
    }
    getCellContainer(cellIdx) {
        var table = this.childrenMap.child;
        return table.getCellContainer(cellIdx);
    }
    updateVisibleCell(cellIdx) {
        var table = this.childrenMap.child;
        return table.updateVisibleCell(cellIdx);
    }
    onPostStep() {
        if (this.resizeControllerFlag) {
            this.resizeController();
            this.resizeControllerFlag = false;
        }
    }
    get startRowIndex() {
        var table = this.childrenMap.child;
        return table.startRowIndex;
    }
}
var methods = {
    setItems: (0, _setItemsJsDefault.default)
};
Object.assign(GridTable.prototype, (0, _scrollMethodsJsDefault.default), methods);
exports.default = GridTable;

},{"../utils/scrollable/Scrollable.js":"aMQwE","../utils/GetScrollMode.js":"jRQgz","../../../plugins/gridtable.js":"hZAD1","./InjectProperties.js":"8sTnx","./TableOnCellVisible.js":"f6WmV","./input/TableSetInteractive.js":"80cWt","../../../plugins/utils/object/NOOP.js":"9NtuG","./SetItems.js":"7N74A","./ScrollMethods.js":"9xWxA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZAD1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gridTableJs = require("./gameobjects/container/gridtable/GridTable.js");
var _gridTableJsDefault = parcelHelpers.interopDefault(_gridTableJs);
exports.default = (0, _gridTableJsDefault.default);

},{"./gameobjects/container/gridtable/GridTable.js":"20VGJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"20VGJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerLiteJs = require("../../container/containerlite/ContainerLite.js");
var _containerLiteJsDefault = parcelHelpers.interopDefault(_containerLiteJs);
var _tableJs = require("./table/Table.js");
var _tableJsDefault = parcelHelpers.interopDefault(_tableJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const Group = Phaser.GameObjects.Group;
const Set = Phaser.Structs.Set;
const GetValue = Phaser.Utils.Objects.GetValue;
class GridTable extends (0, _containerLiteJsDefault.default) {
    constructor(scene, x, y, width, height, config){
        if (config === undefined) config = {};
        super(scene, x, y, width, height);
        this.type = "rexGridTable";
        this._tableOX = 0;
        this._tableOY = 0;
        this.visibleCells = new Set();
        this.preVisibleCells = new Set();
        this.execeedTopState = false;
        this.execeedBottomState = false;
        this.execeedLeftState = false;
        this.execeedRightState = false;
        var reuseCellContainer = GetValue(config, "reuseCellContainer", false);
        if (reuseCellContainer) this.cellContainersPool = new Group(scene); // Don't add Group into update list, I will destroy it manually
        var callback = GetValue(config, "cellVisibleCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "cellVisibleCallbackScope", undefined);
            this.on("cellvisible", callback, scope);
        }
        callback = GetValue(config, "cellInvisibleCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "cellInvisibleCallbackScope", undefined);
            this.on("cellinvisible", callback, scope);
        }
        if (GetValue(config, "enableLayer", false)) this.enableLayer();
        this.setupChildrenMask(GetValue(config, "mask", undefined));
        this.setScrollMode(GetValue(config, "scrollMode", 0));
        this.setClampMode(GetValue(config, "clamplTableOXY", true));
        // Pre-process cell size
        var cellWidth, cellHeight, columns;
        var scrollY = this.scrollMode === 0;
        if (scrollY) {
            cellWidth = config.cellWidth;
            cellHeight = config.cellHeight;
            columns = config.columns;
        } else {
            cellWidth = config.cellHeight;
            cellHeight = config.cellWidth;
            columns = GetValue(config, "rows", config.columns);
        }
        if (!columns) columns = 1; // Default columns
        this.expandCellSize = cellWidth === undefined;
        if (this.expandCellSize) {
            var width = scrollY ? this.width : this.height;
            cellWidth = width / columns;
        }
        config.cellWidth = cellWidth;
        config.cellHeight = cellHeight;
        config.columns = columns;
        this.table = new (0, _tableJsDefault.default)(this, config);
        this.updateTable();
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.destroyChildrenMask();
        this.table.destroy(fromScene);
        this.table = undefined;
        if (this.cellContainersPool) {
            this.cellContainersPool.destroy(true);
            this.cellContainersPool = undefined;
        }
        super.destroy(fromScene);
    }
    setScrollMode(mode) {
        if (typeof mode === "string") mode = SCROLLMODE[mode.toLowerCase()];
        this.scrollMode = mode;
        return this;
    }
    setClampMode(mode) {
        if (mode === undefined) mode = true;
        this.clampTableOXY = mode;
        return this;
    }
    get tableOY() {
        return this._tableOY;
    }
    get tableOX() {
        return this._tableOX;
    }
    set tableOY(oy) {
        this.setTableOY(oy).updateTable();
    }
    set tableOX(ox) {
        this.setTableOX(ox).updateTable();
    }
    setTableOXY(ox, oy) {
        this.setTableOY(oy).setTableOX(ox);
        return this;
    }
    addTableOY(dy) {
        this.setTableOY(this.tableOY + dy);
        return this;
    }
    addTableOX(dx) {
        this.setTableOX(this.tableOX + dx);
        return this;
    }
    addTableOXY(dx, dy) {
        this.addTableOY(dy).addTableOX(dx);
        return this;
    }
    setTableOYByPercentage(percentage) {
        this.setTableOY(-this.tableVisibleHeight * percentage);
        return this;
    }
    getTableOYPercentage() {
        var tableVisibleHeight = this.tableVisibleHeight;
        if (tableVisibleHeight === 0) return 0;
        return this.tableOY / -tableVisibleHeight;
    }
    set t(value) {
        this.setTableOYByPercentage(value).updateTable();
    }
    get t() {
        return this.getTableOYPercentage();
    }
    scrollToBottom() {
        this.t = 1;
        // t will be 0 if table does not exceed visible area
        if (this.t === 0) return this;
        // Table height might be expanded while cells are visible        
        do this.t = 1;
        while (this.t !== 1);
        return this;
    }
    scrollToRow(rowIndex) {
        // To get all height of cells
        this.scrollToBottom();
        var height = this.table.rowIndexToHeight(0, rowIndex - 1);
        this.setTableOY(-height).updateTable();
        return this;
    }
    scrollToNextRow(rowCount) {
        if (rowCount === undefined) rowCount = 1;
        this.scrollToRow(this.startRowIndex + rowCount);
        return this;
    }
    getCell(cellIdx) {
        return this.table.getCell(cellIdx, true);
    }
    getCellContainer(cellIdx) {
        var cell = this.table.getCell(cellIdx, false);
        var container;
        if (cell) container = cell.getContainer();
        return container;
    }
    get cellsCount() {
        return this.table.cellsCount;
    }
    get columnCount() {
        return this.table.colCount;
    }
    setCellHeight(cellIdx, height) {
        var cell;
        if (typeof cellIdx === "number") cell = this.table.getCell(cellIdx, true);
        else cell = cellIdx;
        cell.height = height; // Only worked when scrollMode is 0
        return this;
    }
    setCellWidth(cellIdx, width) {
        var cell;
        if (typeof cellIdx === "number") cell = this.table.getCell(cellIdx, true);
        else cell = cellIdx;
        cell.width = width; // Only worked when scrollMode is 1
        return this;
    }
    get instHeight() {
        return this.scrollMode === 0 ? this.height : this.width;
    }
    get instWidth() {
        return this.scrollMode === 0 ? this.width : this.height;
    }
    get tableHeight() {
        return this.table.totalRowsHeight;
    }
    get tableWidth() {
        return this.table.totalColumnWidth;
    }
    get topTableOY() {
        return 0;
    }
    get bottomTableOY() {
        return -this.tableVisibleHeight;
    }
    get leftTableOX() {
        return 0;
    }
    get rightTableOX() {
        return -this.tableVisibleWidth;
    }
    get tableVisibleHeight() {
        var h = this.tableHeight - this.instHeight;
        if (h < 0) h = 0;
        return h;
    }
    get tableVisibleWidth() {
        var w;
        var tableWidth = this.tableWidth;
        var instWidth = this.instWidth;
        if (tableWidth > instWidth) w = tableWidth - instWidth;
        else w = 0;
        return w;
    }
    get bottomLeftY() {
        return -(this.displayHeight * this.originY) + this.displayHeight;
    }
    get topRightX() {
        return -(this.displayWidth * this.originX) + this.displayWidth;
    }
    get topLeftX() {
        return -(this.displayWidth * this.originX);
    }
    get topLeftY() {
        return -(this.displayHeight * this.originY);
    }
    get bottomBound() {
        if (this.scrollMode === 0) return this.bottomLeftY;
        else return this.topRightX;
    }
    get rightBound() {
        if (this.scrollMode === 0) return this.topRightX;
        else return this.bottomLeftY;
    }
    resize(width, height) {
        if (this.width === width && this.height === height) return this;
        super.resize(width, height);
        if (this.expandCellSize) this.table.setDefaultCellWidth(this.instWidth / this.table.colCount);
        this.updateTable(true);
        // Layout children-mask
        this.layoutChildrenMask();
        // Re-mask children
        this.maskChildren();
        return this;
    }
}
// mixin
Object.assign(GridTable.prototype, (0, _methodsJsDefault.default));
const SCROLLMODE = {
    v: 0,
    vertical: 0,
    h: 1,
    horizontal: 1
};
const MASKUPDATEMODE = {
    update: 0,
    everyTick: 1
};
exports.default = GridTable;

},{"../../container/containerlite/ContainerLite.js":"kyrI6","./table/Table.js":"lqV8u","./methods/Methods.js":"9TCiM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqV8u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cellJs = require("./Cell.js");
var _cellJsDefault = parcelHelpers.interopDefault(_cellJs);
var _poolJs = require("../../../../pool.js");
var _poolJsDefault = parcelHelpers.interopDefault(_poolJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;
class Table {
    constructor(parent, config){
        this.parent = parent; // parent: GridTable game object (Container)
        this.cells = [];
        this.cellPool = new (0, _poolJsDefault.default)();
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        if (o === undefined) o = {};
        this.colCount = undefined;
        this.nonZeroDeltaHeightCount = 0;
        this.resetTotalRowsHeight();
        var cellHeight = o.cellHeight;
        if (cellHeight === undefined) cellHeight = 30;
        var cellWidth = o.cellWidth;
        if (cellWidth === undefined) cellWidth = 30;
        this.setDefaultCellHeight(cellHeight);
        this.setDefaultCellWidth(cellWidth);
        this.initCells(GetValue(o, "cellsCount", 0));
        this.setColumnCount(GetValue(o, "columns", 1));
        return this;
    }
    destroy(fromScene) {
        // GridTable is destroyed, all cell containers will also be destroyed too
        // Don't have to freeCell
        this.cellPool.destroy();
        this.cells = undefined;
        this.parent = undefined;
    }
    get defaultCellHeightMode() {
        return this.nonZeroDeltaHeightCount === 0;
    }
    setDefaultCellHeight(height) {
        this.defaultCellHeight = height;
        return this;
    }
    setDefaultCellWidth(width) {
        this.defaultCellWidth = width;
        return this;
    }
    initCells(size) {
        var cells = this.cells;
        cells.length = size;
        for(var i = 0; i < size; i++)cells[i] = null;
        return this;
    }
    insertNewCells(cellIdx, count) {
        var cells = this.cells;
        if (cellIdx === cells.length) {
            // append at end of array
            var endIdx = cellIdx + count;
            cells.legth = endIdx;
            for(var i = cellIdx; i < endIdx; i++)cells[i] = null;
        } else {
            var newCells = [];
            newCells.length = count;
            for(var i = 0; i < count; i++)newCells[i] = null;
            this.cells.splice(cellIdx, 0, ...newCells);
        }
        this.resetTotalRowsHeight();
        return this;
    }
    removeCells(cellIdx, count) {
        var endIdx = cellIdx + count;
        for(var i = cellIdx; i < endIdx; i++)this.freeCell(i);
        if (endIdx === this.cells.length) // remove until end of array
        this.cells.length = cellIdx;
        else {
            if (count === 1) SpliceOne(this.cells, cellIdx);
            else this.cells.splice(cellIdx, count);
            this.buildCellIndex(cellIdx);
        }
        this.resetTotalRowsHeight();
        return this;
    }
    setColumnCount(cnt) {
        this.colCount = cnt;
        this.resetTotalRowsHeight();
        return this;
    }
    get rowCount() {
        return Math.ceil(this.cells.length / this.colCount);
    }
    get cellsCount() {
        return this.cells.length;
    }
    isValidCellIdx(idx) {
        return idx >= 0 && idx < this.cells.length;
    }
    heightToRowIndex(height, roundMode) {
        if (roundMode === undefined) roundMode = 0;
        /*
        roundMode:
        - 0 : floor
        - 1 : ceil
        - 2 : plus one if rowIdx is an integer, else floor
        */ if (height === 0) return 0;
        // defaultCellHeightMode
        if (this.defaultCellHeightMode) {
            var rowIdx = height / this.defaultCellHeight;
            switch(roundMode){
                case 0:
                    rowIdx = Math.floor(rowIdx);
                    break;
                case 1:
                    rowIdx = Math.ceil(rowIdx);
                    break;
                default:
                    if (Number.isInteger(rowIdx)) rowIdx += 1;
                    else rowIdx = Math.floor(rowIdx);
                    break;
            }
            return rowIdx;
        }
        // count cell height one by one
        var rowCount = this.rowCount;
        var remainder = height, isValidIdx;
        var cell, rowHeight, rowIdx = 0;
        while(true){
            rowHeight = this.getRowHeight(rowIdx);
            remainder -= rowHeight;
            isValidIdx = rowIdx >= 0 && rowIdx < rowCount;
            if (remainder > 0 && isValidIdx) rowIdx += 1;
            else if (remainder === 0) {
                if (roundMode === 2) rowIdx += 1;
                return rowIdx;
            } else {
                if (roundMode === 1) {
                    var preRowIdx = rowIdx;
                    rowIdx += 1;
                    isValidIdx = rowIdx >= 0 && rowIdx < rowCount;
                    if (!isValidIdx) rowIdx = preRowIdx;
                }
                return rowIdx;
            }
        }
    }
    widthToColIndex(width, isCeil) {
        if (width === 0) return 0;
        var colIdx = width / this.defaultCellWidth;
        if (isCeil) colIdx = Math.ceil(colIdx);
        else colIdx = Math.floor(colIdx);
        return colIdx;
    }
    colRowToCellIndex(colIdx, rowIdx) {
        if (colIdx >= this.colCount) return null;
        return rowIdx * this.colCount + colIdx;
    }
    rowIndexToHeight(start, end) {
        // defaultCellHeightMode
        if (this.defaultCellHeightMode) return (end - start + 1) * this.defaultCellHeight;
        var h, sum = 0;
        for(var i = start; i <= end; i++){
            h = this.getRowHeight(i);
            sum += h;
        }
        return sum;
    }
    colIndexToWidth(start, end) {
        return (end - start + 1) * this.defaultCellWidth;
    }
    getRowHeight(rowIdx) {
        var cnt = this.colCount;
        // single column
        if (cnt <= 1) return this.getCellHeight(this.colRowToCellIndex(0, rowIdx));
        // multiple columns, get the maximum height
        var maxHeight = 0, cellHeight;
        for(var i = 0; i < cnt; i++){
            cellHeight = this.getCellHeight(this.colRowToCellIndex(i, rowIdx));
            if (maxHeight < cellHeight) maxHeight = cellHeight;
        }
        return maxHeight;
    }
    getColWidth(idx) {
        return this.defaultCellWidth;
    }
    getCellHeight(cellIdx) {
        if (!this.isValidCellIdx(cellIdx)) return 0;
        var cellHeight;
        if (this.defaultCellHeightMode) cellHeight = this.defaultCellHeight;
        else {
            var cell = this.getCell(cellIdx, false);
            var deltaHeight = cell ? cell.deltaHeight : 0;
            cellHeight = this.defaultCellHeight + deltaHeight;
        }
        return cellHeight;
    }
    resetTotalRowsHeight() {
        this._totalRowsHeight = null;
    }
    get totalRowsHeight() {
        if (this._totalRowsHeight === null) this._totalRowsHeight = this.rowIndexToHeight(0, this.rowCount - 1);
        return this._totalRowsHeight;
    }
    get totalColumnWidth() {
        return this.colCount * this.defaultCellWidth;
    }
    cellIndxeToColIndex(cellIdx) {
        return cellIdx % this.colCount;
    }
    cellIndxeToRowIndex(cellIdx) {
        return Math.floor(cellIdx / this.colCount);
    }
    getCell(cellIdx, createNewCell) {
        if (!this.isValidCellIdx(cellIdx)) return null;
        if (createNewCell === undefined) createNewCell = true;
        if (this.cells[cellIdx] === null && createNewCell) {
            var cell = this.newCell(cellIdx);
            this.cells[cellIdx] = cell;
        }
        return this.cells[cellIdx];
    }
    newCell(cellIdx) {
        var cell = this.cellPool.pop();
        if (cell === null) cell = new (0, _cellJsDefault.default)(this);
        else cell.setParent(this);
        cell.index = cellIdx;
        return cell;
    }
    buildCellIndex(startIdx) {
        if (startIdx === undefined) startIdx = 0;
        var cells = this.cells, cell;
        for(var i = startIdx, len = cells.length; i < len; i++){
            cell = cells[i];
            if (cell) cell.index = i;
        }
        return this;
    }
    getParentContainer() {
        return this.parent;
    }
    freeCell(cell) {
        if (typeof cell === "number") cell = this.cells[cell];
        if (!cell) return this;
        cell.destroy();
        this.cellPool.push(cell);
        return this;
    }
}
exports.default = Table;

},{"./Cell.js":"eCD2t","../../../../pool.js":"lDewQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCD2t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dataMethodsJs = require("../../../../utils/data/DataMethods.js");
var _dataMethodsJsDefault = parcelHelpers.interopDefault(_dataMethodsJs);
var _alignConstJs = require("../../../../utils/actions/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
class Cell {
    constructor(parent, config){
        this.container = null;
        this._deltaHeight = 0;
        this.setParent(parent);
    // this.resetFromJSON(config);
    }
    setParent(parent) {
        this.parent = parent; // parent: table
        this.parentContainer = parent.getParentContainer();
    }
    // resetFromJSON(o) {
    //     return this;
    // }
    destroy(fromScene) {
        if (fromScene === undefined) fromScene = false;
        if (!fromScene) this.destroyContainer();
        this.deltaHeight = 0;
        this.data = undefined;
        this.container = null;
        this.parent = undefined;
        this.parentContainer = undefined;
    }
    get table() {
        return this.parent;
    }
    get scrollMode() {
        return this.parentContainer.scrollMode;
    }
    get colIndx() {
        return this.parent.cellIndxeToColIndex(this.index);
    }
    get rowIndx() {
        return this.parent.cellIndxeToRowIndex(this.index);
    }
    getContainer() {
        return this.container;
    }
    setContainer(container) {
        if (!container) {
            this.destroyContainer();
            return this;
        }
        if (this.container) this.container.destroy();
        this.container = container;
        this.parentContainer.add(container);
        return this;
    }
    destroyContainer() {
        if (this.container) {
            this.container.destroy();
            this.container = null;
        }
        return this;
    }
    popContainer() {
        if (this.container) {
            var container = this.container;
            this.container = null;
            this.parentContainer.remove(container);
            return container;
        } else return null;
    }
    setXY(x, y) {
        if (this.container) this.parentContainer.setChildLocalPosition(this.container, x, y);
        return this;
    }
    setCellContainerAlign(align) {
        if (typeof align === "string") align = (0, _alignConstJsDefault.default)[align];
        this.cellContainerAlign = align;
        return this;
    }
    get deltaHeight() {
        return this._deltaHeight;
    }
    set deltaHeight(deltaHeight) {
        if (deltaHeight == null) deltaHeight = 0;
        var table = this.parent;
        if (this._deltaHeight === 0 && deltaHeight !== 0) table.nonZeroDeltaHeightCount++;
        else if (this._deltaHeight !== 0 && deltaHeight === 0) table.nonZeroDeltaHeightCount--;
        var isTableHeightChanged = this._deltaHeight !== deltaHeight;
        this._deltaHeight = deltaHeight;
        if (isTableHeightChanged) {
            table.resetTotalRowsHeight();
            var eventName = this.scrollMode === 0 ? "cellheightchange" : "cellwidthchange";
            this.parentContainer.emit(eventName, this, this.container, this.parentContainer);
        }
    }
    get deltaWidth() {
        return this.deltaHeight;
    }
    set deltaWidth(deltaWidth) {
        this.deltaHeight = deltaWidth;
    }
    setDeltaHeight(deltaHeight) {
        this.deltaHeight = deltaHeight;
        return this;
    }
    setDeltaWidth(deltaWidth) {
        this.deltaHeight = deltaWidth;
        return this;
    }
    get height() {
        if (this.scrollMode === 0) return this.deltaHeight + this.parent.defaultCellHeight;
        else return this.parent.defaultCellWidth;
    }
    set height(height) {
        // Only worked when scrollMode is 0
        if (this.scrollMode === 1) return;
        this.setDeltaHeight(height - this.parent.defaultCellHeight);
    }
    setHeight(height) {
        // Only worked when scrollMode is 0
        this.height = height;
        return this;
    }
    get width() {
        if (this.scrollMode === 0) return this.parent.defaultCellWidth;
        else return this.deltaHeight + this.parent.defaultCellHeight;
    }
    set width(width) {
        // Only worked when scrollMode is 1
        if (this.scrollMode === 0) return;
        this.setDeltaHeight(width - this.parent.defaultCellHeight);
    }
    setWidth(width) {
        this.width = width;
        return this;
    }
    get scene() {
        return this.parentContainer.scene;
    }
}
Object.assign(Cell.prototype, (0, _dataMethodsJsDefault.default));
exports.default = Cell;

},{"../../../../utils/data/DataMethods.js":"kSQ7j","../../../../utils/actions/AlignConst.js":"16scB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9TCiM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setTableOYJs = require("./SetTableOY.js");
var _setTableOYJsDefault = parcelHelpers.interopDefault(_setTableOYJs);
var _setTableOXJs = require("./SetTableOX.js");
var _setTableOXJsDefault = parcelHelpers.interopDefault(_setTableOXJs);
var _childrenMaskMethodsJs = require("../../../container/containerlite/mask/ChildrenMaskMethods.js");
var _childrenMaskMethodsJsDefault = parcelHelpers.interopDefault(_childrenMaskMethodsJs);
var _showCellsJs = require("./updatetable/ShowCells.js");
var _showCellsJsDefault = parcelHelpers.interopDefault(_showCellsJs);
var _showCellJs = require("./updatetable/ShowCell.js");
var _showCellJsDefault = parcelHelpers.interopDefault(_showCellJs);
var _getCellTLXJs = require("./updatetable/GetCellTLX.js");
var _getCellTLXJsDefault = parcelHelpers.interopDefault(_getCellTLXJs);
var _getCellTLYJs = require("./updatetable/GetCellTLY.js");
var _getCellTLYJsDefault = parcelHelpers.interopDefault(_getCellTLYJs);
var _hideCellsJs = require("./updatetable/HideCells.js");
var _hideCellsJsDefault = parcelHelpers.interopDefault(_hideCellsJs);
var _hideCellJs = require("./updatetable/HideCell.js");
var _hideCellJsDefault = parcelHelpers.interopDefault(_hideCellJs);
var _updateTableJs = require("./updatetable/UpdateTable.js");
var _updateTableJsDefault = parcelHelpers.interopDefault(_updateTableJs);
var _isCellVisibleJs = require("./IsCellVisible.js");
var _isCellVisibleJsDefault = parcelHelpers.interopDefault(_isCellVisibleJs);
var _pointToCellJs = require("./PointToCell.js");
var _eachCellJs = require("./EachCell.js");
var _setCellsCountJs = require("./SetCellsCount.js");
var _setCellsCountJsDefault = parcelHelpers.interopDefault(_setCellsCountJs);
var _insertNewCellsJs = require("./InsertNewCells.js");
var _insertNewCellsJsDefault = parcelHelpers.interopDefault(_insertNewCellsJs);
var _removeCellsJs = require("./RemoveCells.js");
var _removeCellsJsDefault = parcelHelpers.interopDefault(_removeCellsJs);
var _setColumnCountJs = require("./SetColumnCount.js");
var _setColumnCountJsDefault = parcelHelpers.interopDefault(_setColumnCountJs);
var _setGridSizeJs = require("./SetGridSize.js");
var _setGridSizeJsDefault = parcelHelpers.interopDefault(_setGridSizeJs);
var _updateVisibleCell = require("./UpdateVisibleCell");
var _updateVisibleCellDefault = parcelHelpers.interopDefault(_updateVisibleCell);
var methods = {
    setTableOY: (0, _setTableOYJsDefault.default),
    setTableOX: (0, _setTableOXJsDefault.default),
    showCells: (0, _showCellsJsDefault.default),
    showCell: (0, _showCellJsDefault.default),
    getCellTLX: (0, _getCellTLXJsDefault.default),
    getCellTLY: (0, _getCellTLYJsDefault.default),
    hideCells: (0, _hideCellsJsDefault.default),
    hideCell: (0, _hideCellJsDefault.default),
    updateTable: (0, _updateTableJsDefault.default),
    isCellVisible: (0, _isCellVisibleJsDefault.default),
    pointToCellIndex: (0, _pointToCellJs.PointToCellIndex),
    pointToCellContainer: (0, _pointToCellJs.PointToCellContainer),
    eachVisibleCell: (0, _eachCellJs.EachVisibleCell),
    iterateVisibleCell: (0, _eachCellJs.IterateVisibleCell),
    eachCell: (0, _eachCellJs.EachCell),
    iterateCell: (0, _eachCellJs.IterateCell),
    setCellsCount: (0, _setCellsCountJsDefault.default),
    insertNewCells: (0, _insertNewCellsJsDefault.default),
    removeCells: (0, _removeCellsJsDefault.default),
    setColumnCount: (0, _setColumnCountJsDefault.default),
    setGridSize: (0, _setGridSizeJsDefault.default),
    updateVisibleCell: (0, _updateVisibleCellDefault.default)
};
Object.assign(methods, (0, _childrenMaskMethodsJsDefault.default));
exports.default = methods;

},{"./SetTableOY.js":"fdzuC","./SetTableOX.js":"lrxQf","../../../container/containerlite/mask/ChildrenMaskMethods.js":"4OA0c","./updatetable/ShowCells.js":"l2QQh","./updatetable/ShowCell.js":"cZQ3t","./updatetable/GetCellTLX.js":"56b2c","./updatetable/GetCellTLY.js":"6cNyy","./updatetable/HideCells.js":"1EUCV","./updatetable/HideCell.js":"2poE2","./updatetable/UpdateTable.js":"gl3Bl","./IsCellVisible.js":"9275u","./PointToCell.js":"3uhuI","./EachCell.js":"8P3ow","./SetCellsCount.js":"6lnZg","./InsertNewCells.js":"3426b","./RemoveCells.js":"U0XCe","./SetColumnCount.js":"l527U","./SetGridSize.js":"diTrZ","./UpdateVisibleCell":"1xjPY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdzuC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTableOY = function(oy) {
    var table = this.table;
    var topTableOY = this.topTableOY;
    var bottomTableOY = this.bottomTableOY;
    var tableOYExceedTop = oy > this.topTableOY;
    var tableOYExeceedBottom = oy < this.bottomTableOY;
    if (this.clampTableOXY) {
        var rowCount = table.rowCount;
        var visibleRowCount = table.heightToRowIndex(this.instHeight, 1);
        // less then 1 page
        if (rowCount < visibleRowCount) oy = 0;
        else if (tableOYExceedTop) oy = topTableOY;
        else if (tableOYExeceedBottom) oy = bottomTableOY;
    }
    if (this._tableOY !== oy) this._tableOY = oy;
    if (tableOYExceedTop) {
        if (!this.execeedTopState) this.emit("execeedtop", this, oy, topTableOY);
    }
    this.execeedTopState = tableOYExceedTop;
    if (tableOYExeceedBottom) {
        if (!this.execeedBottomState) this.emit("execeedbottom", this, oy, bottomTableOY);
    }
    this.execeedBottomState = tableOYExeceedBottom;
    return this;
};
exports.default = SetTableOY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrxQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetTableOX = function(ox) {
    var table = this.table;
    var leftTableOX = this.leftTableOX;
    var rightTableOX = this.rightTableOX;
    var tableOXExeceedLeft = ox > this.leftTableOX;
    var tableOXExeceedRight = ox < this.rightTableOX;
    if (this.clampTableOXY) {
        var colCount = table.colCount;
        var visibleColCount = table.widthToColIndex(this.instWidth, true);
        // less then 1 page            
        if (colCount < visibleColCount) ox = 0;
        else if (tableOXExeceedLeft) ox = leftTableOX;
        else // var tableVisibleWidth = this.tableVisibleWidth;
        if (tableOXExeceedRight) ox = rightTableOX;
    }
    if (this._tableOX !== ox) this._tableOX = ox;
    if (tableOXExeceedLeft) {
        if (!this.execeedLeftState) this.emit("execeedleft", this, ox, leftTableOX);
    }
    this.execeedLeftState = tableOXExeceedLeft;
    if (tableOXExeceedRight) {
        if (!this.execeedRightState) this.emit("execeedright", this, ox, rightTableOX);
    }
    this.execeedRightState = tableOXExeceedRight;
    return this;
};
exports.default = SetTableOX;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4OA0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _maskChildrenJs = require("./MaskChildren.js");
var _maskChildrenJsDefault = parcelHelpers.interopDefault(_maskChildrenJs);
var _addChildMaskJs = require("./AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
var _maskToGameObjectJs = require("../../../../utils/mask/MaskToGameObject.js");
var _maskToGameObjectJsDefault = parcelHelpers.interopDefault(_maskToGameObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const MASKUPDATEMODE = {
    update: 0,
    everyTick: 1
};
exports.default = {
    setupChildrenMask (config) {
        if (config === false) // No children mask
        return this;
        this.setMaskUpdateMode(GetValue(config, "updateMode", 0));
        this.enableChildrenMask(GetValue(config, "padding", 0));
        this.setMaskLayer(GetValue(config, "layer", undefined));
        this.startMaskUpdate();
        return this;
    },
    destroyChildrenMask () {
        if (!this.childrenMask) return this;
        this.stopMaskUpdate();
        this.childrenMask.destroy();
        this.childrenMask = undefined;
        return this;
    },
    setMaskUpdateMode (mode) {
        if (typeof mode === "string") mode = MASKUPDATEMODE[mode];
        this.maskUpdateMode = mode;
        return this;
    },
    startMaskUpdate () {
        this.scene.game.events.on("poststep", this.maskChildren, this);
    },
    stopMaskUpdate () {
        this.scene.game.events.off("poststep", this.maskChildren, this);
    },
    enableChildrenMask (maskPadding) {
        var maskGameObject = (0, _addChildMaskJsDefault.default).call(this, null, this, 0, maskPadding);
        this.childrenMask = maskGameObject.createGeometryMask();
        // this.childrenMask is a mask object, not a (Graphics) game object
        return this;
    },
    setMaskChildrenFlag (value) {
        if (value === undefined) value = true;
        this.maskChildrenFlag = value;
        return this;
    },
    setMaskLayer (layer) {
        // To reduce amount of masked game object
        this.maskLayer = layer;
        return this;
    },
    maskChildren () {
        if (!this.childrenMask || // No childrenMask
        !this.maskChildrenFlag || // No maskChildrenFlag set
        this.alpha === 0 || !this.visible // Parent is not visible
        ) return this;
        if (this.privateRenderLayer) this.privateRenderLayer.setMask(this.childrenMask);
        else if (this.maskLayer) {
            // 1. Add parent and children into layer
            this.addToLayer(this.maskLayer);
            // 2. Mask this layer
            this.maskLayer.setMask(this.childrenMask);
        } else (0, _maskChildrenJsDefault.default)(this, this.childrenMask);
        if (this.maskUpdateMode === 0) this.maskChildrenFlag = false;
        return this;
    },
    layoutChildrenMask () {
        if (!this.childrenMask) return this;
        var maskGameObject = (0, _maskToGameObjectJsDefault.default)(this.childrenMask);
        maskGameObject.setPosition().resize();
        this.resetChildPositionState(maskGameObject);
        return this;
    }
};

},{"./MaskChildren.js":"kquFU","./AddChildMask.js":"gWrSF","../../../../utils/mask/MaskToGameObject.js":"9MMv6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kquFU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _maskToGameObjectJs = require("../../../../utils/mask/MaskToGameObject.js");
var _maskToGameObjectJsDefault = parcelHelpers.interopDefault(_maskToGameObjectJs);
const Intersects = Phaser.Geom.Intersects.RectangleToRectangle;
const Overlaps = Phaser.Geom.Rectangle.Overlaps;
var MaskChildren = function(parent, mask, children) {
    if (!mask) return;
    if (children === undefined) children = parent.getAllChildren();
    var parentBounds = parent.getBounds();
    var maskGameObject = (0, _maskToGameObjectJsDefault.default)(mask);
    var child, childBounds, visiblePointsNumber;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        child = children[i];
        if (child.hasOwnProperty("isRexContainerLite")) continue;
        if (child === maskGameObject) continue;
        if (!IsVisible(child)) continue;
        if (child.getBounds) {
            childBounds = child.getBounds(childBounds);
            visiblePointsNumber = ContainsPoints(parentBounds, childBounds);
            switch(visiblePointsNumber){
                case 4:
                    ShowAll(parent, child, mask);
                    break;
                case 0:
                    // Parent intersects with child, or parent is inside child, set visible, and apply mask
                    if (Intersects(parentBounds, childBounds) || Overlaps(parentBounds, childBounds)) ShowSome(parent, child, mask);
                    else ShowNone(parent, child, mask);
                    break;
                default:
                    ShowSome(parent, child, mask);
                    break;
            }
        } else ShowSome(parent, child, mask);
    }
};
var IsVisible = function(gameObject) {
    if (!gameObject.displayList) return false;
    while(true){
        var localState = gameObject.rexContainer;
        if (!localState) return gameObject.visible;
        else if (localState.visible) {
            var parent = localState.parent;
            if (parent) {
                gameObject = parent;
                continue;
            } else return true;
        } else return false;
    }
};
var ContainsPoints = function(rectA, rectB) {
    var result = 0;
    var top = rectB.top, bottom = rectB.bottom, left = rectB.left, right = rectB.right;
    result += rectA.contains(left, top) ? 1 : 0;
    result += rectA.contains(left, bottom) ? 1 : 0;
    result += rectA.contains(right, top) ? 1 : 0;
    result += rectA.contains(right, bottom) ? 1 : 0;
    return result;
};
var ShowAll = function(parent, child, mask) {
    parent.setChildMaskVisible(child, true);
    if (child.clearMask) child.clearMask();
};
var ShowSome = function(parent, child, mask) {
    parent.setChildMaskVisible(child, true);
    if (child.setMask) child.setMask(mask);
};
var ShowNone = function(parent, child, mask) {
    parent.setChildMaskVisible(child, false);
    if (child.clearMask) child.clearMask();
};
exports.default = MaskChildren;

},{"../../../../utils/mask/MaskToGameObject.js":"9MMv6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9MMv6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var MaskToGameObject = function(mask) {
    return mask.hasOwnProperty("geometryMask") ? mask.geometryMask : mask.bitmapMask;
};
exports.default = MaskToGameObject;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2QQh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignInJs = require("../../../../../utils/actions/AlignIn.js");
var _alignInJsDefault = parcelHelpers.interopDefault(_alignInJs);
var ShowCells = function() {
    if (this.cellsCount === 0) return;
    var table = this.table;
    this.startRowIndex = Math.max(table.heightToRowIndex(-this.tableOY, 2), 0);
    var rowIndex = this.startRowIndex;
    var startColumnIndex = Math.max(table.widthToColIndex(-this.tableOX), 0);
    var columnIndex = startColumnIndex;
    var cellIdx = table.colRowToCellIndex(columnIndex, rowIndex);
    var bottomBound = this.bottomBound;
    var rightBound = this.rightBound;
    var lastIdx = table.cellsCount - 1;
    var lastColIdx = table.colCount - 1;
    var startCellTLX = this.getCellTLX(columnIndex), cellTLX = startCellTLX;
    var cellTLY = this.getCellTLY(rowIndex);
    while(cellTLY < bottomBound && cellIdx <= lastIdx){
        if (this.table.isValidCellIdx(cellIdx)) {
            var cell = table.getCell(cellIdx, true);
            this.visibleCells.set(cell);
            if (!this.preVisibleCells.contains(cell)) this.showCell(cell);
            var x, y;
            if (this.scrollMode === 0) {
                x = cellTLX;
                y = cellTLY;
            } else {
                x = cellTLY;
                y = cellTLX;
            }
            if (cell.cellContainerAlign == null) cell.setXY(x, y);
            else {
                var cellContainer = cell.getContainer();
                (0, _alignInJsDefault.default)(cellContainer, x, y, cell.width, cell.height, cell.cellContainerAlign);
                cell.setXY(cellContainer.x, cellContainer.y);
            }
        }
        if (cellTLX < rightBound && columnIndex < lastColIdx) {
            cellTLX += table.getColWidth(columnIndex);
            columnIndex += 1;
        } else {
            cellTLX = startCellTLX;
            cellTLY += table.getRowHeight(rowIndex);
            columnIndex = startColumnIndex;
            rowIndex += 1;
        }
        cellIdx = table.colRowToCellIndex(columnIndex, rowIndex);
    }
};
exports.default = ShowCells;

},{"../../../../../utils/actions/AlignIn.js":"7glhd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZQ3t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ShowCell = function(cell) {
    // Attach container to cell by cell.setContainer(container) under this event
    var reusedCellContainer = null;
    var cellContainer = cell.getContainer();
    if (cellContainer) {
        reusedCellContainer = cellContainer;
        cell.popContainer();
    } else if (this.cellContainersPool) {
        reusedCellContainer = this.cellContainersPool.getFirstDead();
        if (reusedCellContainer !== null) reusedCellContainer.setActive(true).setVisible(true);
    }
    this.emit("cellvisible", cell, reusedCellContainer, this);
    if (this.cellContainersPool) {
        var cellContainer = cell.getContainer();
        if (cellContainer) {
            if (reusedCellContainer === null) this.cellContainersPool.add(cellContainer); // New cell container, add to pool
            else if (reusedCellContainer !== cellContainer) {
                // Why reusedCellContainer is not equal to cellContainer?
                this.cellContainersPool.add(cellContainer); // New cell container, add to pool
                this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
            }
        } else if (reusedCellContainer !== null) this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
    }
};
exports.default = ShowCell;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"56b2c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetCellTLX = function(colIdx) {
    var ox = this.scrollMode === 0 ? this.topLeftX : this.topLeftY;
    var x = this.tableOX + this.table.colIndexToWidth(0, colIdx - 1) + ox;
    return x;
};
exports.default = GetCellTLX;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6cNyy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetCellTLY = function(rowIdx) {
    var oy = this.scrollMode === 0 ? this.topLeftY : this.topLeftX;
    var y = this.tableOY + this.table.rowIndexToHeight(0, rowIdx - 1) + oy;
    return y;
};
exports.default = GetCellTLY;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1EUCV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var HideCells = function() {
    var preList = this.preVisibleCells;
    var curList = this.visibleCells;
    preList.iterate(function(cell) {
        if (!curList.contains(cell)) this.hideCell(cell);
    }, this);
};
exports.default = HideCells;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2poE2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var HideCell = function(cell) {
    // Option: pop container of cell by cell.popContainer() under this event 
    this.emit("cellinvisible", cell);
    if (this.cellContainersPool) {
        var cellContainer = cell.popContainer(); // null if already been removed
        if (cellContainer) this.cellContainersPool.killAndHide(cellContainer);
    }
    cell.destroyContainer(); // Destroy container of cell
};
exports.default = HideCell;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gl3Bl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var UpdateTable = function(refresh) {
    if (refresh === undefined) refresh = false;
    if (refresh) {
        ClearVisibleCellIndexes.call(this);
        this.hideCells();
    }
    ClearVisibleCellIndexes.call(this);
    this.showCells();
    this.hideCells();
    this.setMaskChildrenFlag();
    return this;
};
var ClearVisibleCellIndexes = function() {
    var tmp = this.preVisibleCells;
    this.preVisibleCells = this.visibleCells;
    this.visibleCells = tmp;
    this.visibleCells.clear();
};
exports.default = UpdateTable;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9275u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var IsCellVisible = function(cellIdx) {
    var cell = this.table.getCell(cellIdx, false);
    return cell && this.visibleCells.contains(cell);
};
exports.default = IsCellVisible;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3uhuI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PointToCellIndex", ()=>PointToCellIndex);
parcelHelpers.export(exports, "PointToCellContainer", ()=>PointToCellContainer);
var PointToCellIndex = function(x, y) {
    y -= this.y + this.topLeftY;
    x -= this.x + this.topLeftX;
    var offsetTableOY = this.tableOY - (this.scrollMode === 0 ? y : x);
    var offsetTableOX = this.tableOX - (this.scrollMode === 0 ? x : y);
    var table = this.table;
    var rowIdx = table.heightToRowIndex(-offsetTableOY, 0);
    var colIdx = table.widthToColIndex(-offsetTableOX);
    var cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
    if (cellIdx === null) return null;
    if (!this.isCellVisible(cellIdx)) return null;
    return cellIdx;
};
var PointToCellContainer = function(x, y) {
    var cellIdx = PointToCellIndex.call(this, x, y);
    if (cellIdx === null) return undefined;
    return this.getCellContainer(cellIdx);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8P3ow":[function(require,module,exports) {
// For when you know this Set will be modified during the iteration
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EachVisibleCell", ()=>EachVisibleCell);
parcelHelpers.export(exports, "IterateVisibleCell", ()=>IterateVisibleCell);
parcelHelpers.export(exports, "EachCell", ()=>EachCell);
parcelHelpers.export(exports, "IterateCell", ()=>IterateCell);
var EachVisibleCell = function(callback, scope) {
    this.visibleCells.each(callback, scope);
    return this;
};
// For when you absolutely know this Set won't be modified during the iteration
var IterateVisibleCell = function(callback, scope) {
    this.visibleCells.iterate(callback, scope);
    return this;
};
var EachCell = function(callback, scope) {
    this.table.cells.slice().forEach(callback, scope);
    return this;
};
var IterateCell = function(callback, scope) {
    this.table.cells.forEach(callback, scope);
    return this;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lnZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetCellsCount = function(count) {
    var cellsCount = this.cellsCount;
    if (cellsCount === count) return this;
    if (cellsCount > count) this.removeCells(count, cellsCount - count);
    else this.insertNewCells(cellsCount, count - cellsCount);
    return this;
};
exports.default = SetCellsCount;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3426b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Clamp = Phaser.Math.Clamp;
var InsertNewCells = function(cellIdx, count) {
    if (typeof cellIdx === "object") cellIdx = cellIdx.index;
    if (count === undefined) count = 1;
    if (count <= 0) return this;
    cellIdx = Clamp(cellIdx, 0, this.cellsCount);
    this.table.insertNewCells(cellIdx, count);
    return this;
};
exports.default = InsertNewCells;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"U0XCe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hideCellJs = require("./updatetable/HideCell.js");
var _hideCellJsDefault = parcelHelpers.interopDefault(_hideCellJs);
var RemoveCells = function(cellIdx, count) {
    if (typeof cellIdx === "object") cellIdx = cellIdx.index;
    if (count === undefined) count = 1;
    if (cellIdx < 0) {
        count += cellIdx;
        cellIdx = 0;
    }
    if (count <= 0) return this;
    // out-of-range
    if (cellIdx > this.cellsCount) return this;
    var cell;
    for(var i = cellIdx, endIdx = cellIdx + count; i < endIdx; i++){
        cell = this.getCell(i, false);
        if (cell) {
            if (this.visibleCells.contains(cell)) {
                (0, _hideCellJsDefault.default).call(this, cell);
                this.visibleCells.delete(cell);
            }
            this.preVisibleCells.delete(cell);
        }
    }
    this.table.removeCells(cellIdx, count);
    return this;
};
exports.default = RemoveCells;

},{"./updatetable/HideCell.js":"2poE2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l527U":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetColumnCount = function(count) {
    if (this.table.colCount === count) return this;
    this.table.setColumnCount(count);
    return this;
};
exports.default = SetColumnCount;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diTrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetGridSize = function(colCount, rowCount) {
    this.setCellsCount(colCount * rowCount);
    this.table.setColumnCount(colCount);
    return this;
};
exports.default = SetGridSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xjPY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _showCell = require("./updatetable/ShowCell");
var _showCellDefault = parcelHelpers.interopDefault(_showCell);
var UpdateVisibleCell = function(cellIdx) {
    var cell = this.table.getCell(cellIdx, false);
    if (!cell || !cell.container) return this;
    (0, _showCellDefault.default).call(this, cell);
    return this;
};
exports.default = UpdateVisibleCell;

},{"./updatetable/ShowCell":"cZQ3t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sTnx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var InjectProperties = function(table) {
    Object.defineProperty(table, "childOY", {
        configurable: true,
        get: function() {
            return table.tableOY;
        },
        set: function(value) {
            table.tableOY = value;
        }
    });
    Object.defineProperty(table, "topChildOY", {
        get: function() {
            return table.topTableOY;
        }
    });
    Object.defineProperty(table, "bottomChildOY", {
        get: function() {
            return table.bottomTableOY;
        }
    });
    Object.defineProperty(table, "childVisibleHeight", {
        get: function() {
            return table.instHeight;
        }
    });
    Object.defineProperty(table, "childHeight", {
        get: function() {
            return table.tableHeight;
        }
    });
};
exports.default = InjectProperties;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6WmV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var TableOnCellVisible = function(table) {
    table.on("cellvisible", function(cell, cellContainer, table) {
        var callback = this.createCellContainerCallback;
        var scope = this.createCellContainerCallbackScope;
        cell.item = this.items[cell.index];
        cell.items = this.items;
        var cellContainer;
        if (scope) cellContainer = callback.call(scope, cell, cellContainer, table);
        else cellContainer = callback(cell, cellContainer, table);
        if (cellContainer) {
            if (cell.cellContainerAlign == null && cellContainer.setOrigin) cellContainer.setOrigin(0);
            if (cellContainer.isRexSizer) cellContainer.layout(); // Use original size
        }
        cell.item = undefined;
        cell.items = undefined;
        cell.setContainer(cellContainer);
    }, this);
};
exports.default = TableOnCellVisible;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80cWt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pointerUpDownCellJs = require("./PointerUpDownCell.js");
var _pointerUpDownCellJsDefault = parcelHelpers.interopDefault(_pointerUpDownCellJs);
var _overCellJs = require("./OverCell.js");
var _overCellJsDefault = parcelHelpers.interopDefault(_overCellJs);
var _clickCellJs = require("./ClickCell.js");
var _clickCellJsDefault = parcelHelpers.interopDefault(_clickCellJs);
var _tapCellJs = require("./TapCell.js");
var _tapCellJsDefault = parcelHelpers.interopDefault(_tapCellJs);
var _pressCellJs = require("./PressCell.js");
var _pressCellJsDefault = parcelHelpers.interopDefault(_pressCellJs);
var _swipeCellJs = require("./SwipeCell.js");
var _swipeCellJsDefault = parcelHelpers.interopDefault(_swipeCellJs);
var TableSetInteractive = function(table, tableConfig) {
    table.setInteractive();
    (0, _pointerUpDownCellJsDefault.default).call(this, table, tableConfig);
    (0, _overCellJsDefault.default).call(this, table, tableConfig);
    (0, _clickCellJsDefault.default).call(this, table, tableConfig);
    (0, _tapCellJsDefault.default).call(this, table, tableConfig);
    (0, _pressCellJsDefault.default).call(this, table, tableConfig);
    (0, _swipeCellJsDefault.default).call(this, table, tableConfig);
};
exports.default = TableSetInteractive;

},{"./PointerUpDownCell.js":"jAoZg","./OverCell.js":"ldYDn","./ClickCell.js":"hidfS","./TapCell.js":"cW6JB","./PressCell.js":"cjzqJ","./SwipeCell.js":"cKAc9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jAoZg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
var PointerUpDownCell = function(table, tableConfig) {
    table.on("pointerdown", function(pointer, localX, localY, event) {
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.down", table, pointer.worldX, pointer.worldY, pointer, event);
    }, this).on("pointerup", function(pointer, localX, localY, event) {
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.up", table, pointer.worldX, pointer.worldY, pointer, event);
    }, this);
};
exports.default = PointerUpDownCell;

},{"./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f84n2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var EmitCellEvent = function(eventEmitter, eventName, table, x, y, pointer, event) {
    var cellIndex;
    if (y === undefined) cellIndex = x;
    else cellIndex = table.pointToCellIndex(x, y);
    if (cellIndex === null || cellIndex === undefined) return;
    var cellContainer = table.getCellContainer(cellIndex);
    if (cellContainer) eventEmitter.emit(eventName, cellContainer, cellIndex, pointer, event);
};
exports.default = EmitCellEvent;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ldYDn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
var OverCell = function(table, tableConfig) {
    table.on("pointermove", OnMove, this).on("pointerover", OnMove, this).on("pointerout", OnOut, this) // pointer-up is included too
    ;
};
var OnMove = function(pointer, localX, localY, event) {
    var table = this.childrenMap.child;
    var cellIndex = table.pointToCellIndex(pointer.worldX, pointer.worldY);
    if (cellIndex === table.input.lastOverCellIndex) return;
    var preCellIndex = table.input.lastOverCellIndex;
    table.input.lastOverCellIndex = cellIndex;
    (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.out", table, preCellIndex, undefined, pointer, event);
    (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.over", table, cellIndex, undefined, pointer, event);
};
var OnOut = function(pointer, event) {
    var table = this.childrenMap.child;
    var cellIndex = table.input.lastOverCellIndex;
    table.input.lastOverCellIndex = undefined;
    (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.out", table, cellIndex, undefined, pointer, event);
};
exports.default = OverCell;

},{"./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hidfS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonJs = require("../../../../plugins/input/button/Button.js");
var _buttonJsDefault = parcelHelpers.interopDefault(_buttonJs);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var ClickCell = function(table, tableConfig) {
    var buttonConfig = GetValue(tableConfig, "click", undefined);
    if (buttonConfig === false) return;
    else if (buttonConfig === undefined) buttonConfig = {};
    buttonConfig.threshold = 10;
    table._click = new (0, _buttonJsDefault.default)(table, buttonConfig);
    table._click.on("click", function(button, gameObject, pointer, event) {
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.click", gameObject, pointer.worldX, pointer.worldY, pointer, event);
    }, this);
};
exports.default = ClickCell;

},{"../../../../plugins/input/button/Button.js":"k9qbm","./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cW6JB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tapJs = require("../../tap/Tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var TapCell = function(table, tableConfig) {
    var tapConfig = GetValue(tableConfig, "tap", undefined);
    if (tapConfig === false) return;
    table._tap = new (0, _tapJsDefault.default)(table, tapConfig);
    table._tap.on("tap", function(tap, gameObject, lastPointer) {
        var eventName = `cell.${tap.tapsCount}tap`;
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, eventName, tap.gameObject, tap.worldX, tap.worldY, lastPointer);
    }, this);
};
exports.default = TapCell;

},{"../../tap/Tap.js":"18whP","./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjzqJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pressJs = require("../../press/Press.js");
var _pressJsDefault = parcelHelpers.interopDefault(_pressJs);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var PressCell = function(table, tableConfig) {
    var pressConfig = GetValue(tableConfig, "press", undefined);
    if (pressConfig === false) return;
    table._press = new (0, _pressJsDefault.default)(table, pressConfig);
    table._press.on("pressstart", function(press, gameObject, lastPointer) {
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.pressstart", table, press.worldX, press.worldY, lastPointer);
    }, this).on("pressend", function(press, gameObject, lastPointer) {
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, "cell.pressend", table, press.worldX, press.worldY, lastPointer);
    }, this);
};
exports.default = PressCell;

},{"../../press/Press.js":"5quO4","./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKAc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _swipeJs = require("../../swipe/Swipe.js");
var _swipeJsDefault = parcelHelpers.interopDefault(_swipeJs);
var _emitCellEventJs = require("./EmitCellEvent.js");
var _emitCellEventJsDefault = parcelHelpers.interopDefault(_emitCellEventJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var SwipeCell = function(table, tableConfig) {
    var swipeConfig = GetValue(tableConfig, "swipe", undefined);
    if (swipeConfig === false) return;
    else if (swipeConfig === undefined) swipeConfig = {};
    swipeConfig.dir = "4dir";
    table._swipe = new (0, _swipeJsDefault.default)(table, swipeConfig);
    table._swipe.on("swipe", function(swipe, gameObject, lastPointer) {
        var dirName = swipe.left ? "left" : swipe.right ? "right" : swipe.up ? "up" : "down";
        (0, _emitCellEventJsDefault.default)(this.eventEmitter, `cell.swipe${dirName}`, table, swipe.worldX, swipe.worldY, lastPointer);
    }, this);
};
exports.default = SwipeCell;

},{"../../swipe/Swipe.js":"ljpfa","./EmitCellEvent.js":"f84n2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7N74A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetItems = function(items) {
    if (items === undefined) this.items = [];
    else this.items = items;
    var table = this.childrenMap.child;
    table.setCellsCount(this.items.length);
    table.updateTable(true);
    this.resizeController();
    return this;
};
exports.default = SetItems;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xWxA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    scrollToRow (rowIndex) {
        var table = this.childrenMap.child;
        table.scrollToRow(rowIndex);
        return this;
    },
    scrollToNextRow (rowCount) {
        var table = this.childrenMap.child;
        table.scrollToNextRow(rowCount);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dbhqd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _menuJs = require("./Menu.js");
var _menuJsDefault = parcelHelpers.interopDefault(_menuJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("menu", function(config) {
    var gameObject = new (0, _menuJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Menu", (0, _menuJsDefault.default));
exports.default = (0, _menuJsDefault.default);

},{"./Menu.js":"3PjAd","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3PjAd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonsJs = require("../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _createBackgroundJs = require("./methods/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _createButtonsJs = require("./methods/CreateButtons.js");
var _createButtonsJsDefault = parcelHelpers.interopDefault(_createButtonsJs);
var _getViewportJs = require("../../../plugins/utils/system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
var _menuSetInteractiveJs = require("./methods/MenuSetInteractive.js");
var _menuSetInteractiveJsDefault = parcelHelpers.interopDefault(_menuSetInteractiveJs);
var _parseEaseConfigJs = require("./methods/ParseEaseConfig.js");
var _parseEaseConfigJsDefault = parcelHelpers.interopDefault(_parseEaseConfigJs);
var _getEaseConfigJs = require("./methods/GetEaseConfig.js");
var _getEaseConfigJsDefault = parcelHelpers.interopDefault(_getEaseConfigJs);
var _expandJs = require("./methods/Expand.js");
var _expandJsDefault = parcelHelpers.interopDefault(_expandJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Menu extends (0, _buttonsJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Orientation
        if (!config.hasOwnProperty("orientation")) config.orientation = 1; // y
        // Parent
        var rootMenu = config._rootMenu;
        var parentMenu = config._parentMenu;
        var parentButton = config._parentButton;
        // Popup, root menu can be static, sub-menus are always popup.
        var popUp = GetValue(config, "popup", true);
        // Items
        var items = GetValue(config, "items", undefined);
        // Background
        var createBackgroundCallback = GetValue(config, "createBackgroundCallback", undefined);
        var createBackgroundCallbackScope = GetValue(config, "createBackgroundCallbackScope", undefined);
        config.background = (0, _createBackgroundJsDefault.default)(scene, items, createBackgroundCallback, createBackgroundCallbackScope);
        // Buttons
        var createButtonCallback = GetValue(config, "createButtonCallback", undefined);
        var createButtonCallbackScope = GetValue(config, "createButtonCallbackScope", undefined);
        config.buttons = (0, _createButtonsJsDefault.default)(scene, items, createButtonCallback, createButtonCallbackScope);
        super(scene, config);
        this.type = "rexMenu";
        this.items = items;
        this.root = rootMenu === undefined ? this : rootMenu;
        this.isRoot = this.root === this;
        this.parentMenu = parentMenu;
        this.parentButton = parentButton;
        this.timer = undefined;
        // Root menu
        if (this.isRoot) {
            this.isPopUpMode = popUp;
            // Bounds
            var bounds = config.bounds;
            if (bounds === undefined) bounds = (0, _getViewportJsDefault.default)(scene);
            this.bounds = bounds;
            // Side of submenu
            this.subMenuSide = [
                this.y < bounds.centerY ? SUBMENU_DOWN : SUBMENU_UP,
                this.x < bounds.centerX ? SUBMENU_RIGHT : SUBMENU_LEFT
            ];
            // Overwrite subMenuSide value if given
            var subMenuSide = GetValue(config, "subMenuSide", undefined);
            if (subMenuSide !== undefined) {
                if (typeof subMenuSide === "string") subMenuSide = SubMenuSideMode[subMenuSide];
                this.subMenuSide[this.orientation] = subMenuSide;
            }
            // ToggleOrientation mode
            this.toggleOrientation = GetValue(config, "toggleOrientation", false);
            // Expand mode
            this.expandEventName = GetValue(config, "expandEvent", "button.click");
            // Transition
            this.easeIn = (0, _parseEaseConfigJsDefault.default)(this, GetValue(config, "easeIn", 0));
            this.easeOut = (0, _parseEaseConfigJsDefault.default)(this, GetValue(config, "easeOut", 0));
            this.setTransitInCallback(GetValue(config, "transitIn"));
            this.setTransitOutCallback(GetValue(config, "transitOut"));
            // Callbacks
            this.createBackgroundCallback = createBackgroundCallback;
            this.createBackgroundCallbackScope = createBackgroundCallbackScope;
            this.createButtonCallback = createButtonCallback;
            this.createButtonCallbackScope = createButtonCallbackScope;
            // Children key
            this.childrenKey = GetValue(config, "childrenKey", "children");
            // Event flag
            this._isPassedEvent = false;
            // pointerdown-outside-collapse
            this.pointerDownOutsideCollapsing = GetValue(config, "pointerDownOutsideCollapsing", true);
            if (this.pointerDownOutsideCollapsing) scene.input.on("pointerdown", this.onPointerDownOutside, this);
        }
        var originX = 0, originY = 0;
        if (!this.root.easeIn.sameOrientation) {
            var easeOrientation = (0, _getEaseConfigJsDefault.default)(this.root.easeIn, this).orientation;
            var menuOrientation = parentMenu ? parentMenu.orientation : this.orientation;
            var subMenuSide = this.root.subMenuSide[menuOrientation];
            if (easeOrientation === 0 && subMenuSide === SUBMENU_LEFT) originX = 1;
            if (easeOrientation === 1 && subMenuSide === SUBMENU_UP) originY = 1;
        }
        if (popUp) this.setOrigin(originX, originY).layout();
        // Sub-menu: 
        // - scale to root's scale value
        // - align to parent button
        if (!this.isRoot) {
            this.setScale(this.root.scaleX, this.root.scaleY);
            var subMenuSide = this.root.subMenuSide[parentMenu.orientation];
            switch(subMenuSide){
                case SUBMENU_LEFT:
                    this.alignTop(parentButton.top).alignRight(parentButton.left);
                    break;
                case SUBMENU_RIGHT:
                    this.alignTop(parentButton.top).alignLeft(parentButton.right);
                    break;
                case SUBMENU_UP:
                    this.alignLeft(parentButton.left).alignBottom(parentButton.top);
                    break;
                case SUBMENU_DOWN:
                    this.alignLeft(parentButton.left).alignTop(parentButton.bottom);
                    break;
            }
        }
        (0, _menuSetInteractiveJsDefault.default)(this);
        if (popUp) {
            this.pushIntoBounds(this.root.bounds);
            // Expand this menu
            (0, _expandJsDefault.default).call(this);
        }
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        if (this.isRoot && this.pointerDownOutsideCollapsing) this.scene.input.off("pointerdown", this.onPointerDownOutside, this);
        super.destroy(fromScene);
        this.removeDelayCall();
    }
    isInTouching(pointer) {
        if (super.isInTouching(pointer)) return true;
        else if (this.childrenMap.subMenu) return this.childrenMap.subMenu.isInTouching(pointer);
        else return false;
    }
    onPointerDownOutside(pointer) {
        if (this.isInTouching(pointer)) return;
        if (this.isPopUpMode) this.collapse();
        else this.collapseSubMenu();
    }
}
const SUBMENU_LEFT = 2;
const SUBMENU_RIGHT = 0;
const SUBMENU_UP = 3;
const SUBMENU_DOWN = 1;
const SubMenuSideMode = {
    up: SUBMENU_UP,
    down: SUBMENU_DOWN,
    left: SUBMENU_LEFT,
    right: SUBMENU_RIGHT
};
Object.assign(Menu.prototype, (0, _methodsJsDefault.default));
exports.default = Menu;

},{"../buttons/Buttons.js":"9NfMe","./methods/Methods.js":"bJ30p","./methods/CreateBackground.js":"cXUd2","./methods/CreateButtons.js":"fcGq4","../../../plugins/utils/system/GetViewport.js":"2Aw1Q","./methods/MenuSetInteractive.js":"19CIa","./methods/ParseEaseConfig.js":"7IPFO","./methods/GetEaseConfig.js":"Xjlcv","./methods/Expand.js":"cXMGK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJ30p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setTransitCallbackMethodsJs = require("./SetTransitCallbackMethods.js");
var _setTransitCallbackMethodsJsDefault = parcelHelpers.interopDefault(_setTransitCallbackMethodsJs);
var _delayCallMethodsJs = require("./DelayCallMethods.js");
var _delayCallMethodsJsDefault = parcelHelpers.interopDefault(_delayCallMethodsJs);
var _expandSubMenuJs = require("./ExpandSubMenu.js");
var _expandSubMenuJsDefault = parcelHelpers.interopDefault(_expandSubMenuJs);
var _collapseJs = require("./Collapse.js");
var _collapseJsDefault = parcelHelpers.interopDefault(_collapseJs);
var _collapseSubMenuJs = require("./CollapseSubMenu.js");
var _collapseSubMenuJsDefault = parcelHelpers.interopDefault(_collapseSubMenuJs);
var Methods = {
    expandSubMenu: (0, _expandSubMenuJsDefault.default),
    collapse: (0, _collapseJsDefault.default),
    collapseSubMenu: (0, _collapseSubMenuJsDefault.default)
};
Object.assign(Methods, (0, _setTransitCallbackMethodsJsDefault.default), (0, _delayCallMethodsJsDefault.default));
exports.default = Methods;

},{"./SetTransitCallbackMethods.js":"7DBnT","./DelayCallMethods.js":"bXHpX","./ExpandSubMenu.js":"bFB2k","./Collapse.js":"jSbN1","./CollapseSubMenu.js":"hPujQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7DBnT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getEaseConfigJs = require("./GetEaseConfig.js");
var _getEaseConfigJsDefault = parcelHelpers.interopDefault(_getEaseConfigJs);
var PopUp = function(menu, duration) {
    menu.popUp((0, _getEaseConfigJsDefault.default)(menu.root.easeIn, menu));
};
var ScaleDown = function(menu, duration) {
    // Don't destroy here
    menu.scaleDown((0, _getEaseConfigJsDefault.default)(menu.root.easeOut, menu));
};
exports.default = {
    setTransitInCallback (callback) {
        if (callback === undefined) callback = PopUp;
        this.transitInCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    setTransitOutCallback (callback) {
        if (callback === undefined) callback = ScaleDown;
        this.transitOutCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    }
};

},{"./GetEaseConfig.js":"Xjlcv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Xjlcv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetEaseConfig = function(easeConfig, menu) {
    if (easeConfig.sameOrientation) easeConfig.orientation = menu.orientation;
    else easeConfig.orientation = menu.orientation === 0 ? 1 : 0;
    return easeConfig;
};
exports.default = GetEaseConfig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXHpX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _postUpdateDelayCallJs = require("../../../../plugins/utils/time/PostUpdateDelayCall.js");
var _postUpdateDelayCallJsDefault = parcelHelpers.interopDefault(_postUpdateDelayCallJs);
exports.default = {
    delayCall (delay, callback, scope) {
        // Invoke callback under scene's 'postupdate' event
        this.timer = (0, _postUpdateDelayCallJsDefault.default)(this, delay, callback, scope);
        return this;
    },
    removeDelayCall () {
        if (this.timer) {
            this.timer.remove(false);
            this.timer = undefined;
        }
        return this;
    }
};

},{"../../../../plugins/utils/time/PostUpdateDelayCall.js":"dgE1X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dgE1X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getSceneObjectJs = require("../system/GetSceneObject.js");
var _getSceneObjectJsDefault = parcelHelpers.interopDefault(_getSceneObjectJs);
var PostUpdateDelayCall = function(gameObject, delay, callback, scope, args) {
    // Invoke callback under scene's 'postupdate' event
    var scene = (0, _getSceneObjectJsDefault.default)(gameObject);
    var timer = scene.time.delayedCall(delay, function() {
        scene.sys.events.once("postupdate", function() {
            callback.call(scope, args);
        });
    });
    return timer;
};
exports.default = PostUpdateDelayCall;

},{"../system/GetSceneObject.js":"kXtDW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFB2k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ExpandSubMenu = function(parentButton, items) {
    var subMenu = this.childrenMap.subMenu;
    // Submenu already expand
    if (subMenu && subMenu.parentButton === parentButton) return this;
    this.collapseSubMenu();
    var orientation;
    if (this.root.toggleOrientation) orientation = this.orientation === 0 ? 1 : 0;
    else orientation = this.orientation;
    var subMenu = new this.constructor(this.scene, {
        items: items,
        orientation: orientation,
        space: this.space,
        createBackgroundCallback: this.root.createBackgroundCallback,
        createBackgroundCallbackScope: this.root.createBackgroundCallbackScope,
        createButtonCallback: this.root.createButtonCallback,
        createButtonCallbackScope: this.root.createButtonCallbackScope,
        easeIn: this.root.easeIn,
        easeOut: this.root.easeOut,
        _rootMenu: this.root,
        _parentMenu: this,
        _parentButton: parentButton
    });
    this.pin(subMenu);
    this.childrenMap.subMenu = subMenu;
    this.root.emit("expand", subMenu, parentButton, this);
    return this;
};
exports.default = ExpandSubMenu;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jSbN1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Collapse = function() {
    var root = this.root;
    root.emit("collapse", this, this.parentButton, root);
    var duration = root.easeOut.duration;
    // Don't destroy under transitOutCallback
    root.transitOutCallback(this, duration);
    this.collapseSubMenu();
    // Destroy by delayCall
    this.delayCall(duration, this.destroy, this);
    return this;
};
exports.default = Collapse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPujQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CollapseSubMenu = function() {
    var subMenu = this.childrenMap.subMenu;
    if (subMenu === undefined) return this;
    this.childrenMap.subMenu = undefined;
    this.remove(subMenu);
    subMenu.collapse();
    return this;
};
exports.default = CollapseSubMenu;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cXUd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CreateBackground = function(scene, items, callback, scope) {
    var background;
    if (callback) {
        items.scene = scene;
        if (scope) background = callback.call(scope, items);
        else background = callback(items);
        items.scene = undefined;
    }
    return background;
};
exports.default = CreateBackground;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fcGq4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CreateButtons = function(scene, items, callback, scope) {
    var item;
    var buttons = [], button;
    if (items && callback) for(var i = 0, cnt = items.length; i < cnt; i++){
        item = items[i];
        item.scene = scene;
        if (scope) button = callback.call(scope, item, i, items);
        else button = callback(item, i, items);
        item.scene = undefined;
        buttons.push(button);
    }
    return buttons;
};
exports.default = CreateButtons;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"19CIa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var MenuSetInteractive = function(menu) {
    menu// Expand sub event
    .on(menu.root.expandEventName, function(button, index) {
        if (this._isPassedEvent) return;
        var childrenKey = this.root.childrenKey;
        var subItems = this.items[index][childrenKey];
        if (subItems) this.expandSubMenu(button, subItems);
    }, menu)// Click any button
    .on("button.click", function(button, index, pointer, event) {
        // Pass event to root menu object
        if (this !== this.root) {
            this.root._isPassedEvent = true;
            this.root.emit("button.click", button, index, pointer, event);
            this.root._isPassedEvent = false;
        }
    }, menu)//Pointer over any button
    .on("button.over", function(button, index, pointer, event) {
        // Pass event to root menu object
        if (this !== this.root) {
            this.root._isPassedEvent = true;
            this.root.emit("button.over", button, index, pointer, event);
            this.root._isPassedEvent = false;
        }
    }, menu)//Pointer out any button
    .on("button.out", function(button, index, pointer, event) {
        // Pass event to root menu object
        if (this !== this.root) {
            this.root._isPassedEvent = true;
            this.root.emit("button.out", button, index, pointer, event);
            this.root._isPassedEvent = false;
        }
    }, menu);
};
exports.default = MenuSetInteractive;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7IPFO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOrientationModeJs = require("../../utils/GetOrientationMode.js");
var _getOrientationModeJsDefault = parcelHelpers.interopDefault(_getOrientationModeJs);
var ParseEaseConfig = function(menu, easeConfig) {
    if (typeof easeConfig === "number") easeConfig = {
        duration: easeConfig
    };
    if (easeConfig.hasOwnProperty("orientation") && easeConfig.orientation !== undefined) easeConfig.sameOrientation = (0, _getOrientationModeJsDefault.default)(easeConfig.orientation) === menu.orientation;
    else easeConfig.sameOrientation = true;
    easeConfig.destroy = false;
    return easeConfig;
};
exports.default = ParseEaseConfig;

},{"../../utils/GetOrientationMode.js":"hyCKa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cXMGK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Expand = function() {
    var root = this.root;
    var duration = root.easeIn.duration;
    // Ease in menu
    root.transitInCallback(this, duration);
    if (this !== this.root) this.delayCall(duration, function() {
        // Pass event to root menu object
        this.root.emit("popup.complete", this);
    }, this);
};
exports.default = Expand;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"58i2X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dropDownListJs = require("./DropDownList.js");
var _dropDownListJsDefault = parcelHelpers.interopDefault(_dropDownListJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("dropDownList", function(config) {
    var gameObject = new (0, _dropDownListJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.DropDownList", (0, _dropDownListJsDefault.default));
exports.default = (0, _dropDownListJsDefault.default);

},{"./DropDownList.js":"51SDe","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51SDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("../label/Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class DropDownList extends (0, _labelJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexDropDownList";
        this.timer = undefined;
        this.setOptions(GetValue(config, "options"));
        var listConfig = GetValue(config, "list");
        this.setWrapEnable(GetValue(listConfig, "wrap", false));
        this.setCreateButtonCallback(GetValue(listConfig, "createButtonCallback"));
        this.setCreateListBackgroundCallback(GetValue(listConfig, "createBackgroundCallback"));
        this.setButtonClickCallback(GetValue(listConfig, "onButtonClick"));
        this.setButtonOverCallback(GetValue(listConfig, "onButtonOver"));
        this.setButtonOutCallback(GetValue(listConfig, "onButtonOut"));
        this.setListExpandDirection(GetValue(listConfig, "expandDirection"));
        this.setListEaseInDuration(GetValue(listConfig, "easeIn", 500));
        this.setListEaseOutDuration(GetValue(listConfig, "easeOut", 100));
        this.setListTransitInCallback(GetValue(listConfig, "transitIn"));
        this.settListTransitOutCallback(GetValue(listConfig, "transitOut"));
        this.setListSize(GetValue(listConfig, "width"), GetValue(listConfig, "height"));
        this.setListAlignmentMode(GetValue(listConfig, "alignParent", "text"));
        this.setListAlignmentSide(GetValue(listConfig, "alignSide", ""));
        this.setListBounds(GetValue(listConfig, "bounds"));
        this.setListSpace(GetValue(listConfig, "space"));
        this.setListDraggable(GetValue(listConfig, "draggable", false));
        this.setValueChangeCallback(GetValue(config, "setValueCallback"), GetValue(config, "setValueCallbackScope"));
        this.setValue(GetValue(config, "value"));
        this.onClick(this.toggleListPanel, this);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        if (this.listPanel) {
            this.listPanel.destroy(fromScene);
            this.listPanel = undefined;
        }
        super.destroy(fromScene);
    }
    setOptions(options) {
        if (options === undefined) options = [];
        this.options = options;
        return this;
    }
    setValueChangeCallback(callback, scope) {
        this.valueChangeCallback = callback;
        this.valueChangeCallbackScope = scope;
        return this;
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        var previousValue = this._value;
        this._value = value;
        var callback = this.valueChangeCallback, scope = this.valueChangeCallbackScope;
        if (callback) {
            if (scope) callback.call(scope, this, value, previousValue);
            else callback(this, value, previousValue);
        }
        this.emit("valuechange", this, value, previousValue);
    }
    emitButtonClick(index) {
        var option = this.options[index];
        if (!option) return this;
        this.emit("button.click", this, undefined, option, index);
        return this;
    }
}
Object.assign(DropDownList.prototype, (0, _methodsJsDefault.default));
exports.default = DropDownList;

},{"../label/Label.js":"bHkqt","./methods/Methods.js":"P6ytP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"P6ytP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurationMethodsJs = require("./listpanel/ConfigurationMethods.js");
var _configurationMethodsJsDefault = parcelHelpers.interopDefault(_configurationMethodsJs);
var _openListPanelJs = require("./listpanel/OpenListPanel.js");
var _openListPanelJsDefault = parcelHelpers.interopDefault(_openListPanelJs);
var _closeListPanelJs = require("./listpanel/CloseListPanel.js");
var _closeListPanelJsDefault = parcelHelpers.interopDefault(_closeListPanelJs);
var _toggleListPanelJs = require("./listpanel/ToggleListPanel.js");
var _toggleListPanelJsDefault = parcelHelpers.interopDefault(_toggleListPanelJs);
var Methods = {
    openListPanel: (0, _openListPanelJsDefault.default),
    closeListPanel: (0, _closeListPanelJsDefault.default),
    toggleListPanel: (0, _toggleListPanelJsDefault.default)
};
Object.assign(Methods, (0, _configurationMethodsJsDefault.default));
exports.default = Methods;

},{"./listpanel/ConfigurationMethods.js":"8sYsO","./listpanel/OpenListPanel.js":"bwo9z","./listpanel/CloseListPanel.js":"de3aW","./listpanel/ToggleListPanel.js":"eDjK7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sYsO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var methods = {
    setWrapEnable (enable) {
        if (enable === undefined) enable = true;
        this.listWrapEnable = enable;
        return this;
    },
    setCreateButtonCallback (callback) {
        this.listCreateButtonCallback = callback;
        return this;
    },
    setCreateListBackgroundCallback (callback) {
        this.listCreateBackgroundCallback = callback;
        return this;
    },
    setButtonClickCallback (callback) {
        this.listOnButtonClick = callback;
        return this;
    },
    setButtonOverCallback (callback) {
        this.listOnButtonOver = callback;
        return this;
    },
    setButtonOutCallback (callback) {
        this.listOnButtonOut = callback;
        return this;
    },
    setListExpandDirection (direction) {
        if (typeof direction === "string") direction = ListExpandDirections[direction];
        this.listExpandDirection = direction;
        return this;
    },
    setListEaseInDuration (duration) {
        if (duration === undefined) duration = 0;
        this.listEaseInDuration = duration;
        return this;
    },
    setListEaseOutDuration (duration) {
        if (duration === undefined) duration = 0;
        this.listEaseOutDuration = duration;
        return this;
    },
    setListTransitInCallback (callback) {
        this.listTransitInCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    settListTransitOutCallback (callback) {
        this.listTransitOutCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    setListBounds (bounds) {
        this.listBounds = bounds;
        return this;
    },
    setListWidth (width) {
        this.listWidth = width;
        return this;
    },
    setListHeight (height) {
        this.listHeight = height;
        return this;
    },
    setListSize (width, height) {
        this.setListWidth(width).setListHeight(height);
        return this;
    },
    setListAlignmentMode (mode) {
        this.listAlignMode = mode;
        return this;
    },
    setListAlignmentSide (side) {
        if (side === undefined) side = "";
        this.listAlignSide = side;
        return this;
    },
    setListSpace (space) {
        if (space === undefined) space = {};
        this.listSpace = space;
        return this;
    },
    setListDraggable (enable) {
        if (enable === undefined) enable = true;
        this.listDraggable = enable;
        return this;
    }
};
const ListExpandDirections = {
    down: 0,
    up: 1
};
exports.default = methods;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwo9z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createListPanelJs = require("./CreateListPanel.js");
var _createListPanelJsDefault = parcelHelpers.interopDefault(_createListPanelJs);
var _dropDownJs = require("../../../dropdown/DropDown.js");
var _dropDownJsDefault = parcelHelpers.interopDefault(_dropDownJs);
var OpenListPanel = function() {
    if (this.listPanel) return this;
    var listPanel = (0, _createListPanelJsDefault.default).call(this);
    // Button over/out
    listPanel.on("button.over", function(button, index, pointer, event) {
        if (this.listOnButtonOver) this.listOnButtonOver.call(this, button, index, pointer, event);
        this.emit("button.over", this, listPanel, button, index, pointer, event);
    }, this).on("button.out", function(button, index, pointer, event) {
        if (this.listOnButtonOut) this.listOnButtonOut.call(this, button, index, pointer, event);
        this.emit("button.out", this, listPanel, button, index, pointer, event);
    }, this);
    var alignTargetX;
    if (!this.listAlignMode || this.listAlignMode === "label") alignTargetX = this;
    else alignTargetX = this.getElement(this.listAlignMode);
    var dropDownBehavior = new (0, _dropDownJsDefault.default)(listPanel, {
        // Transition
        duration: {
            in: this.listEaseInDuration,
            out: this.listEaseOutDuration
        },
        transitIn: this.listTransitInCallback,
        transitOut: this.listTransitOutCallback,
        // Position
        expandDirection: this.listExpandDirection,
        alignTargetX: alignTargetX,
        alignTargetY: this,
        alignSide: this.listAlignSide,
        bounds: this.listBounds,
        // Close condition
        anyTouchClose: true
    }).on("open", function() {
        // After popping up
        // Can click
        listPanel.on("button.click", function(button, index, pointer, event) {
            if (this.listOnButtonClick) this.listOnButtonClick.call(this, button, index, pointer, event);
            this.emit("button.click", this, listPanel, button, index, pointer, event);
        }, this);
        this.emit("list.open", this, listPanel);
    }, this).on("close", function() {
        this.listPanel = undefined;
        this.dropDownBehavior = undefined;
    }, this);
    this.listPanel = listPanel;
    this.dropDownBehavior = dropDownBehavior;
    this.pin(listPanel);
    return this;
};
exports.default = OpenListPanel;

},{"./CreateListPanel.js":"aAdwa","../../../dropdown/DropDown.js":"huHwu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAdwa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonsJs = require("../../../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _fixWidthButtonsJs = require("../../../fixwidthbuttons/FixWidthButtons.js");
var _fixWidthButtonsJsDefault = parcelHelpers.interopDefault(_fixWidthButtonsJs);
var CreateListPanel = function() {
    var scene = this.scene;
    var background;
    var createBackgroundCallback = this.listCreateBackgroundCallback;
    if (createBackgroundCallback) {
        background = createBackgroundCallback.call(this, scene);
        scene.add.existing(background);
    }
    var buttons = [];
    var createButtonCallback = this.listCreateButtonCallback;
    if (createButtonCallback) {
        var options = this.options;
        for(var i = 0, cnt = options.length; i < cnt; i++){
            var button = createButtonCallback.call(this, scene, options[i], i, options);
            scene.add.existing(button);
            buttons.push(button);
        }
    }
    var width = this.listWidth;
    if (width === undefined) {
        if (this.listAlignMode === "text") width = this.getElement("text").width;
        else width = this.width;
    }
    var height = this.listHeight;
    var listPanel;
    if (!this.listWrapEnable) listPanel = new (0, _buttonsJsDefault.default)(scene, {
        width: width,
        height: height,
        orientation: "y",
        background: background,
        buttons: buttons,
        space: this.listSpace,
        draggable: this.listDraggable
    });
    else listPanel = new (0, _fixWidthButtonsJsDefault.default)(scene, {
        width: width,
        height: height,
        background: background,
        buttons: buttons,
        space: this.listSpace,
        draggable: this.listDraggable
    });
    scene.add.existing(listPanel);
    return listPanel;
};
exports.default = CreateListPanel;

},{"../../../buttons/Buttons.js":"9NfMe","../../../fixwidthbuttons/FixWidthButtons.js":"f4zsx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huHwu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dropdownJs = require("../../../plugins/dropdown.js");
var _dropdownJsDefault = parcelHelpers.interopDefault(_dropdownJs);
exports.default = (0, _dropdownJsDefault.default);

},{"../../../plugins/dropdown.js":"8Jt6Z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Jt6Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dropDownJs = require("./behaviors/dropdown/DropDown.js");
var _dropDownJsDefault = parcelHelpers.interopDefault(_dropDownJs);
exports.default = (0, _dropDownJsDefault.default);

},{"./behaviors/dropdown/DropDown.js":"dtXMU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dtXMU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _openCloseTransitionJs = require("../openclosetransition/OpenCloseTransition.js");
var _openCloseTransitionJsDefault = parcelHelpers.interopDefault(_openCloseTransitionJs);
var _popupJs = require("../../popup.js");
var _popupJsDefault = parcelHelpers.interopDefault(_popupJs);
var _scaleDownJs = require("../scale/ScaleDown.js");
var _scaleDownJsDefault = parcelHelpers.interopDefault(_scaleDownJs);
var _setPositionJs = require("./SetPosition.js");
var _setPositionJsDefault = parcelHelpers.interopDefault(_setPositionJs);
var _isPointInBoundsJs = require("../../utils/bounds/IsPointInBounds.js");
var _isPointInBoundsJsDefault = parcelHelpers.interopDefault(_isPointInBoundsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class DropDown extends (0, _openCloseTransitionJsDefault.default) {
    constructor(gameObject, config){
        if (config === undefined) config = {};
        if (config.transitIn == null) config.transitIn = function(gameObject, duration) {
            (0, _popupJsDefault.default)(gameObject, duration, "y", "Cubic");
        };
        if (config.transitOut == null) config.transitOut = function(gameObject, duration) {
            // Don't destroy here
            (0, _scaleDownJsDefault.default)(gameObject, duration, "y", "Linear");
        };
        config.manualClose = true;
        config.clickOutsideClose = true;
        config.destroy = true;
        super(gameObject, config);
        // this.parent = gameObject;
        // this.scene
        (0, _setPositionJsDefault.default)(gameObject, config);
        if (gameObject.isRexSizer) gameObject.layout();
        // Close conditions:
        var touchOutsideClose = GetValue(config, "touchOutsideClose", false);
        var anyTouchClose = GetValue(config, "anyTouchClose", false);
        if (anyTouchClose) touchOutsideClose = false;
        // Registet touch-close event after opened
        if (anyTouchClose) this.once("open", this.anyTouchClose, this);
        else if (touchOutsideClose) this.once("open", this.touchOutsideClose, this);
        this.requestOpen();
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // Registered in touchOutsideClose()
        this.scene.input.off("pointerup", this.touchCloseCallback, this);
        super.shutdown(fromScene);
    }
    touchOutsideClose() {
        this.scene.input.on("pointerup", this.touchCloseCallback, this);
        this.clickOutsideTest = true;
        return this;
    }
    anyTouchClose() {
        this.scene.input.once("pointerup", this.touchCloseCallback, this);
        return this;
    }
    touchCloseCallback(pointer) {
        if (this.clickOutsideTest && (0, _isPointInBoundsJsDefault.default)(this.parent, pointer.worldX, pointer.worldY)) return;
        this.requestClose();
    }
    onOpen() {
        this.emit("open", this.parent, this);
        super.onOpen();
    }
    onClose() {
        this.emit("close", this.parent, this);
        super.onClose();
    }
}
exports.default = DropDown;

},{"../openclosetransition/OpenCloseTransition.js":"iLdcA","../../popup.js":"fwUSv","../scale/ScaleDown.js":"23zRt","./SetPosition.js":"1yc4i","../../utils/bounds/IsPointInBounds.js":"jJBEI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23zRt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleJs = require("./Scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
var ScaleDown = function(gameObject, duration, orientation, ease, scale) {
    if (ease === undefined) ease = "Linear";
    var config = {};
    config.mode = 0;
    switch(orientation){
        case 0:
        case "x":
            config.end = {
                x: 0
            };
            break;
        case 1:
        case "y":
            config.end = {
                y: 0
            };
            break;
        default:
            config.end = 0;
            break;
    }
    config.duration = duration;
    config.ease = ease;
    if (scale === undefined) scale = new (0, _scaleJsDefault.default)(gameObject, config);
    else scale.resetFromJSON(config);
    scale.restart();
    return scale;
};
exports.default = ScaleDown;

},{"./Scale.js":"ivJli","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yc4i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getValueFromAliasKeysJs = require("../../utils/object/GetValueFromAliasKeys.js");
var _getValueFromAliasKeysJsDefault = parcelHelpers.interopDefault(_getValueFromAliasKeysJs);
var _getViewportJs = require("../../utils/system/GetViewport.js");
var _getViewportJsDefault = parcelHelpers.interopDefault(_getViewportJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var SetPosition = function(gameObject, config) {
    var expandDirection = GetValue(config, "expandDirection", undefined);
    if (typeof expandDirection === "string") expandDirection = ExpandDirections[expandDirection];
    var alignTargetX = (0, _getValueFromAliasKeysJsDefault.default)(config, "alignTarget", "alignTargetX");
    var alignTargetY = GetValue(config, "alignTargetY", alignTargetX);
    var alignOffsetX = GetValue(config, "alignOffsetX", 0);
    var alignOffsetY = GetValue(config, "alignOffsetY", 0);
    var alignSide = GetValue(config, "alignSide", "");
    var alignRight = alignSide.includes("right");
    var positionBounds = GetValue(config, "bounds");
    // Expand direction
    var isExpandDown = expandDirection === 0;
    var isExpandUp = expandDirection === 1;
    var flexExpand = !isExpandDown && !isExpandUp;
    var originX = alignRight ? 1 : 0;
    var originY = isExpandDown || flexExpand ? 0 : 1;
    gameObject.setOrigin(originX, originY);
    var x, y;
    if (alignRight) x = alignTargetX.getTopRight().x;
    else x = alignTargetX.getTopLeft().x;
    y = alignTargetY.getBottomLeft().y;
    gameObject.setPosition(x + alignOffsetX, y + alignOffsetY);
    var bounds = positionBounds;
    if (!bounds) bounds = (0, _getViewportJsDefault.default)(gameObject.scene);
    if (flexExpand && gameObject.getBottomLeft().y > bounds.bottom) {
        // Out of bounds, can't put list-panel below parent
        y = alignTargetY.getTopLeft().y;
        gameObject.setOrigin(0, 1).setPosition(x + alignOffsetX, y + alignOffsetY);
    }
};
const ExpandDirections = {
    down: 0,
    up: 1
};
exports.default = SetPosition;

},{"../../utils/object/GetValueFromAliasKeys.js":"aHMLR","../../utils/system/GetViewport.js":"2Aw1Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aHMLR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hasValueJs = require("./HasValue.js");
var _hasValueJsDefault = parcelHelpers.interopDefault(_hasValueJs);
var _getValueJs = require("./GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var GetValueFromAliasKeys = function(source, key0, key1, key2, defaultValue) {
    if ((0, _hasValueJsDefault.default)(source, key0)) return (0, _getValueJsDefault.default)(source, key0);
    else if (key1 && (0, _hasValueJsDefault.default)(source, key1)) return (0, _getValueJsDefault.default)(source, key1);
    else if (key2 && (0, _hasValueJsDefault.default)(source, key2)) return (0, _getValueJsDefault.default)(source, key2);
    else return defaultValue;
};
exports.default = GetValueFromAliasKeys;

},{"./HasValue.js":"5PX6B","./GetValue.js":"7bT3a","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de3aW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var CloseListPanel = function() {
    if (!this.dropDownBehavior) return this;
    this.dropDownBehavior.requestClose();
    return this;
};
exports.default = CloseListPanel;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eDjK7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ToggleListPanel = function() {
    if (!this.listPanel) this.openListPanel();
    else this.closeListPanel();
    return this;
};
exports.default = ToggleListPanel;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8rbFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _simpleDropDownListJs = require("./SimpleDropDownList.js");
var _simpleDropDownListJsDefault = parcelHelpers.interopDefault(_simpleDropDownListJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("simpleDropDownList", function(config, creators) {
    var gameObject = new (0, _simpleDropDownListJsDefault.default)(this.scene, config, creators);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.SimpleDropDownList", (0, _simpleDropDownListJsDefault.default));
exports.default = (0, _simpleDropDownListJsDefault.default);

},{"./SimpleDropDownList.js":"kpeqR","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpeqR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dropDownListJs = require("../dropdownlist/DropDownList.js");
var _dropDownListJsDefault = parcelHelpers.interopDefault(_dropDownListJs);
var _buildListConfigJs = require("../utils/build/BuildListConfig.js");
var _buildListConfigJsDefault = parcelHelpers.interopDefault(_buildListConfigJs);
class SimpleDropDownList extends (0, _dropDownListJsDefault.default) {
    constructor(scene, config, creators){
        config = (0, _buildListConfigJsDefault.default)(scene, config, creators);
        super(scene, config);
        this.type = "rexSimpleDropDownList";
    }
    setOptions(options) {
        if (options === undefined) options = [];
        for(var i = 0, cnt = options.length; i < cnt; i++){
            var option = options[i];
            if (typeof option === "string") options[i] = {
                text: option,
                value: option
            };
        }
        super.setOptions(options);
        return this;
    }
}
exports.default = SimpleDropDownList;

},{"../dropdownlist/DropDownList.js":"51SDe","../utils/build/BuildListConfig.js":"b3Cd8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3Cd8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deepCloneJs = require("../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var _buildLabelConfigJs = require("./BuildLabelConfig.js");
var _buildLabelConfigJsDefault = parcelHelpers.interopDefault(_buildLabelConfigJs);
var _createLabelJs = require("./CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var BuildListConfig = function(scene, config, creators) {
    config = config ? (0, _deepCloneJsDefault.default)(config) : {};
    if (creators === undefined) creators = {};
    var labelConfig = config.label || config.button;
    var listButtonConfig = config.button || config.label;
    delete config.label;
    delete config.button;
    var labelCreator = creators.label || creators.button || creators;
    var listButtonCreator = creators.button || creators.label || creators;
    var listConfig = (0, _buildLabelConfigJsDefault.default)(scene, labelConfig, labelCreator);
    listConfig.list = config.list || {};
    listConfig.list.createButtonCallback = function(scene, option) {
        var gameObject = (0, _createLabelJsDefault.default)(scene, listButtonConfig, listButtonCreator).resetDisplayContent({
            text: option.text
        });
        if (option.hasOwnProperty("value")) gameObject.value = option.value;
        return gameObject;
    };
    listConfig.list.onButtonOver = function(button, index, pointer, event) {
        if (button.setHoverState) button.setHoverState(true);
    };
    listConfig.list.onButtonOut = function(button, index, pointer, event) {
        if (button.setHoverState) button.setHoverState(false);
    };
    return listConfig;
};
exports.default = BuildListConfig;

},{"../../../../plugins/utils/object/DeepClone.js":"7G9ja","./BuildLabelConfig.js":"fHIED","./CreateLabel.js":"kvGzR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kj1sK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textBoxJs = require("./TextBox.js");
var _textBoxJsDefault = parcelHelpers.interopDefault(_textBoxJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textBox", function(config) {
    var gameObject = new (0, _textBoxJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextBox", (0, _textBoxJsDefault.default));
exports.default = (0, _textBoxJsDefault.default);

},{"./TextBox.js":"aP528","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aP528":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseJs = require("./Base.js");
var _baseJsDefault = parcelHelpers.interopDefault(_baseJs);
var _titleLabelJs = require("../titlelabel/TitleLabel.js");
var _titleLabelJsDefault = parcelHelpers.interopDefault(_titleLabelJs);
class TextBox extends (0, _baseJsDefault.default)((0, _titleLabelJsDefault.default)) {
    constructor(scene, config){
        if (config === undefined) config = {};
        if (!config.hasOwnProperty("layoutMode")) config.layoutMode = 1;
        super(scene, config);
    }
}
exports.default = TextBox;

},{"./Base.js":"2yJdw","../titlelabel/TitleLabel.js":"f6me8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2yJdw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textPageJs = require("../textpage/TextPage.js");
var _textPageJsDefault = parcelHelpers.interopDefault(_textPageJs);
var _textTypingJs = require("../texttyping/TextTyping.js");
var _textTypingJsDefault = parcelHelpers.interopDefault(_textTypingJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var TextBoxBase = function(GOClass, type) {
    if (type === undefined) type = "rexTextBox";
    class TextBox extends GOClass {
        constructor(scene, config){
            super(scene, config);
            this.type = type;
            // childrenMap must have 'text' element
            var text = this.childrenMap.text;
            this.page = new (0, _textPageJsDefault.default)(text, GetValue(config, "page", undefined));
            this.typing = new (0, _textTypingJsDefault.default)(text, GetValue(config, "typing", config.type));
            this.typing.on("complete", this.onPageEnd, this).on("type", this.onType, this);
            this.textWidth = text.width;
            this.textHeight = text.height;
        }
        start(text, speed) {
            this.page.setText(text);
            if (speed !== undefined) this.setTypingSpeed(speed);
            this.emit("start");
            this.typeNextPage();
            return this;
        }
        typeNextPage() {
            if (!this.isLastPage) {
                var txt = this.page.getNextPage();
                this.typing.start(txt);
            } else this.emit("complete");
            return this;
        }
        pause() {
            this.typing.pause();
            return this;
        }
        resume() {
            this.typing.resume();
            return this;
        }
        stop(showAllText) {
            this.typing.stop(showAllText);
            return this;
        }
        setTypeSpeed(speed) {
            this.typing.setTypingSpeed(speed);
            return this;
        }
        setTypingSpeed(speed) {
            this.typing.setTypingSpeed(speed);
            return this;
        }
        get isTyping() {
            return this.typing.isTyping;
        }
        get isLastPage() {
            return this.page.isLastPage;
        }
        get isFirstPage() {
            return this.page.isFirstPage;
        }
        get pageCount() {
            return this.page.pageCount;
        }
        get pageIndex() {
            return this.page.pageIndex;
        }
        onType() {
            var text = this.childrenMap.text;
            if (this.textWidth !== text.width || this.textHeight !== text.height) {
                this.textWidth = text.width;
                this.textHeight = text.height;
                this.getTopmostSizer().layout();
            }
            this.emit("type");
        }
        onPageEnd() {
            this.emit("pageend");
            if (this.isLastPage) this.emit("complete");
        }
    }
    return TextBox;
};
exports.default = TextBoxBase;

},{"../textpage/TextPage.js":"G86r6","../texttyping/TextTyping.js":"h70Mp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"G86r6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textpageJs = require("../../../plugins/textpage.js");
var _textpageJsDefault = parcelHelpers.interopDefault(_textpageJs);
exports.default = (0, _textpageJsDefault.default);

},{"../../../plugins/textpage.js":"g8cRP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8cRP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textPageJs = require("./behaviors/textpage/TextPage.js");
var _textPageJsDefault = parcelHelpers.interopDefault(_textPageJs);
exports.default = (0, _textPageJsDefault.default);

},{"./behaviors/textpage/TextPage.js":"4llxs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4llxs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _getTextObjectTypeJs = require("../../utils/text/GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var _textToLinesJs = require("../../utils/text/TextToLines.js");
var _textToLinesJsDefault = parcelHelpers.interopDefault(_textToLinesJs);
var _textHeightToLineCountJs = require("../../utils/text/TextHeightToLineCount.js");
var _textHeightToLineCountJsDefault = parcelHelpers.interopDefault(_textHeightToLineCountJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
class TextPage extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, {
            eventEmitter: false
        });
        // No event emitter
        // this.parent = gameObject;
        this.textObjectType = (0, _getTextObjectTypeJsDefault.default)(this.parent);
        this.pageStartIndexes = [];
        // Text object : array of string
        // Tag text object : pens-manager
        // Bitmap text object : array of string
        this.lines = (0, _textToLinesJsDefault.default)(this.parent, "");
        this.sections = [];
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        this.setMaxLines(GetValue(o, "maxLines", undefined));
        this.setPageBreak(GetValue(o, "pageBreak", "\f\n"));
        this.setText(GetValue(o, "text", ""));
        this.setStartLineIndex(GetValue(o, "start", 0));
        this.setPageIndex(GetValue(o, "page", -1));
        return this;
    }
    toJSON() {
        return {
            maxLines: this.maxLines,
            text: this.content,
            start: this.startLineIndex,
            page: this.pageIndex,
            pageBreak: this.pageBreak
        };
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        switch(this.textObjectType){
            case 0, _getTextObjectTypeJs.TextType:
                this.lines.length = 0;
                break;
            case 0, _getTextObjectTypeJs.TagTextType:
                this.lines.destroy();
                break;
            case 0, _getTextObjectTypeJs.BitmapTextType:
                this.lines.length = 0;
                break;
        }
        this.pageStartIndexes.length = 0;
        this.sections.length = 0;
        this.lines = undefined;
        this.pageStartIndexes = undefined;
        this.sections = undefined;
        super.shutdown(fromScene);
    }
    setMaxLines(maxLines) {
        this.maxLines = maxLines;
        return this;
    }
    setPageBreak(pageBreak) {
        this.pageBreak = pageBreak;
        return this;
    }
    get pageCount() {
        return this.pageStartIndexes.length;
    }
    get isFirstPage() {
        return this.pageIndex <= 0;
    }
    get isLastPage() {
        return this.pageIndex >= this.pageCount - 1;
    }
    get totalLinesCount() {
        return this.lines ? this.lines.length : 0;
    }
    get startLineIndex() {
        return this._startLineIndex;
    }
    set startLineIndex(value) {
        value = Clamp(value, 0, this.totalLinesCount - 1);
        this._startLineIndex = value;
    }
    setStartLineIndex(idx) {
        this.startLineIndex = idx;
        return this;
    }
    get pageLinesCount() {
        if (this.maxLines !== undefined) return this.maxLines;
        else {
            var count;
            switch(this.textObjectType){
                case 0, _getTextObjectTypeJs.TextType:
                case 0, _getTextObjectTypeJs.TagTextType:
                    var maxLines = this.parent.style.maxLines;
                    if (maxLines > 0) count = maxLines;
                    else count = Math.floor((0, _textHeightToLineCountJsDefault.default)(this.parent));
                    break;
                case 0, _getTextObjectTypeJs.BitmapTextType:
                    count = this.totalLinesCount;
                    break;
            }
            return count;
        }
    }
    get content() {
        return this.sections.join(this.pageBreak);
    }
}
Object.assign(TextPage.prototype, (0, _methodsJsDefault.default));
exports.default = TextPage;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/text/GetTextObjectType.js":"6Cxvv","../../utils/text/TextToLines.js":"gmdV0","../../utils/text/TextHeightToLineCount.js":"aDKyp","./methods/Methods.js":"daJj0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDKyp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("./GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var TextHeightToLinesCount = function(textObject) {
    var textObjectType = (0, _getTextObjectTypeJsDefault.default)(textObject);
    var height, lineSpacing, lineHeight;
    switch(textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
        case 0, _getTextObjectTypeJs.TagTextType:
            height = textObject.height - textObject.padding.top - textObject.padding.bottom;
            lineSpacing = textObject.lineSpacing;
            lineHeight = textObject.style.metrics.fontSize + textObject.style.strokeThickness;
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            height = textObject.height;
            lineSpacing = 0;
            var scale = textObject.fontSize / textObject.fontData.size;
            lineHeight = textObject.fontData.lineHeight * scale;
            break;
    }
    // height = (lines * (lineHeight + lineSpacing)) - lineSpacing
    return (height - lineSpacing) / (lineHeight + lineSpacing);
};
exports.default = TextHeightToLinesCount;

},{"./GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"daJj0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getLinesJs = require("./GetLines.js");
var _getLinesJsDefault = parcelHelpers.interopDefault(_getLinesJs);
var _setContentMethodsJs = require("./SetContentMethods.js");
var _setContentMethodsJsDefault = parcelHelpers.interopDefault(_setContentMethodsJs);
var _getPageMethodsJs = require("./GetPageMethods.js");
var _getPageMethodsJsDefault = parcelHelpers.interopDefault(_getPageMethodsJs);
var _showMethodsJs = require("./ShowMethods.js");
var _showMethodsJsDefault = parcelHelpers.interopDefault(_showMethodsJs);
var Methods = {
    getLines: (0, _getLinesJsDefault.default)
};
Object.assign(Methods, (0, _setContentMethodsJsDefault.default), (0, _getPageMethodsJsDefault.default), (0, _showMethodsJsDefault.default));
exports.default = Methods;

},{"./GetLines.js":"dwHPr","./SetContentMethods.js":"9DRcN","./GetPageMethods.js":"hLSUU","./ShowMethods.js":"hBnep","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwHPr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("../../../utils/text/GetTextObjectType.js");
var GetLines = function(startLineIndex, endLineIdx) {
    if (startLineIndex === undefined) startLineIndex = this.startLineIndex;
    if (endLineIdx === undefined) endLineIdx = startLineIndex + this.pageLinesCount;
    var text;
    switch(this.textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
        case 0, _getTextObjectTypeJs.BitmapTextType:
            text = this.lines.slice(startLineIndex, endLineIdx).join("\n");
            break;
        case 0, _getTextObjectTypeJs.TagTextType:
            var startIdx = this.lines.getLineStartIndex(startLineIndex);
            var endIdx = this.lines.getLineEndIndex(endLineIdx - 1);
            text = this.lines.getSliceTagText(startIdx, endIdx, true);
            break;
    }
    return text;
};
exports.default = GetLines;

},{"../../../utils/text/GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9DRcN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textToLinesJs = require("../../../utils/text/TextToLines.js");
var _textToLinesJsDefault = parcelHelpers.interopDefault(_textToLinesJs);
var GetString = function(text) {
    if (Array.isArray(text)) text = text.join("\n");
    else if (typeof text === "number") text = text.toString();
    return text;
};
exports.default = {
    clearText () {
        this.sections.length = 0;
        this.pageStartIndexes.length = 0;
        this.lines.length = 0;
        return this;
    },
    appendPage (text) {
        var pageStartIndex = this.totalLinesCount;
        this.sections.push(GetString(text));
        var text = this.sections.join("\n");
        this.lines = (0, _textToLinesJsDefault.default)(this.parent, text, this.lines);
        var newLinesCount = this.totalLinesCount - pageStartIndex;
        var pageCount = Math.ceil(newLinesCount / this.pageLinesCount);
        for(var i = 0; i < pageCount; i++)this.pageStartIndexes.push(pageStartIndex + i * this.pageLinesCount);
        return this;
    },
    setText (text, resetPageIdx) {
        if (resetPageIdx === undefined) resetPageIdx = true;
        if (resetPageIdx) this.resetPageIdx();
        this.clearText();
        var sections = GetString(text).split(this.pageBreak);
        // if (sections[sections.length - 1] === '') { // Last section is an empty string
        //     sections.length -= 1;
        // }
        for(var i = 0, cnt = sections.length; i < cnt; i++)this.appendPage(sections[i]);
        return this;
    },
    appendText (text) {
        var content = this.content + GetString(text);
        this.setText(content, false);
        return this;
    }
};

},{"../../../utils/text/TextToLines.js":"gmdV0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hLSUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Clamp = Phaser.Math.Clamp;
exports.default = {
    getPage (idx) {
        if (idx === undefined) idx = this.pageIndex;
        return this.setPageIndex(idx).getLines(this.startLineIndex, this.endLineIndex);
    },
    getNextPage () {
        return this.getPage(this.pageIndex + 1);
    },
    getPreviousPage () {
        return this.getPage(this.pageIndex - 1);
    },
    resetPageIdx () {
        this.pageIndex = -1;
        return this;
    },
    setPageIndex (idx) {
        idx = Clamp(idx, 0, this.pageCount - 1);
        this.pageIndex = idx;
        this.startLineIndex = this.pageStartIndexes[idx];
        this.endLineIndex = this.pageStartIndexes[idx + 1];
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBnep":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setNoWrapTextJs = require("../../../utils/text/SetNoWrapText.js");
var _setNoWrapTextJsDefault = parcelHelpers.interopDefault(_setNoWrapTextJs);
exports.default = {
    showPage (idx) {
        this.displayText(this.getPage(idx));
        return this;
    },
    showNextPage () {
        this.displayText(this.getNextPage());
        return this;
    },
    showPreviousPage () {
        this.displayText(this.getPreviousPage());
        return this;
    },
    show () {
        this.displayText(this.getLines());
        return this;
    },
    showNextLine () {
        this.displayText(this.setStartLineIndex(this.startLineIndex + 1).getLines());
        return this;
    },
    showPreviousLine () {
        this.displayText(this.setStartLineIndex(this.startLineIndex - 1).getLines());
        return this;
    },
    displayText (text) {
        (0, _setNoWrapTextJsDefault.default)(this.parent, text);
    }
};

},{"../../../utils/text/SetNoWrapText.js":"4ltsm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h70Mp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _texttypingJs = require("../../../plugins/texttyping.js");
var _texttypingJsDefault = parcelHelpers.interopDefault(_texttypingJs);
exports.default = (0, _texttypingJsDefault.default);

},{"../../../plugins/texttyping.js":"3o3Vc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3o3Vc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textTypingJs = require("./behaviors/texttyping/TextTyping.js");
var _textTypingJsDefault = parcelHelpers.interopDefault(_textTypingJs);
exports.default = (0, _textTypingJsDefault.default);

},{"./behaviors/texttyping/TextTyping.js":"15CHf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"15CHf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _getWrapTextJs = require("../../utils/text/GetWrapText.js");
var _getWrapTextJsDefault = parcelHelpers.interopDefault(_getWrapTextJs);
var _setNoWrapTextJs = require("../../utils/text/SetNoWrapText.js");
var _setNoWrapTextJsDefault = parcelHelpers.interopDefault(_setNoWrapTextJs);
const GetFastValue = Phaser.Utils.Objects.GetFastValue;
const GetValue = Phaser.Utils.Objects.GetValue;
class TextTyping extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        this.timer = null;
        this.resetFromJSON(config);
    }
    resetFromJSON(o) {
        this.setTextWrapEnable(GetValue(o, "wrap", false));
        this.setTypeMode(GetValue(o, "typeMode", 0));
        this.setTypingSpeed(GetValue(o, "speed", 333));
        this.setTextCallback = GetFastValue(o, "setTextCallback", null);
        this.setTextCallbackScope = GetFastValue(o, "setTextCallbackScope", null);
        this.setTypingContent(GetFastValue(o, "text", ""));
        this.typingIdx = GetFastValue(o, "typingIdx", 0);
        this.insertIdx = GetFastValue(o, "insertIdx", null);
        var elapsed = GetFastValue(o, "elapsed", null);
        if (elapsed !== null) this.start(undefined, undefined, this.typingIdx, elapsed);
        return this;
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.freeTimer();
        super.shutdown(fromScene);
    }
    setTypeMode(m) {
        if (typeof m === "string") m = TYPEMODE[m];
        this.typeMode = m;
        return this;
    }
    setTypeSpeed(speed) {
        this.speed = speed;
        return this;
    }
    setTypingSpeed(speed) {
        this.speed = speed;
        return this;
    }
    setTextWrapEnable(enable) {
        if (enable === undefined) enable = true;
        this.textWrapEnable = enable;
        return this;
    }
    set text(value) {
        var text = TransferText(value);
        if (this.textWrapEnable) text = (0, _getWrapTextJsDefault.default)(this.parent, text);
        this._text = text;
    }
    get text() {
        return this._text;
    }
    get isTyping() {
        return this.getTimer() !== null;
    }
    get isLastChar() {
        return this.typingIdx === this.textLen;
    }
    start(text, speed, startIdx, timerStartAt) {
        if (text !== undefined) this.setTypingContent(text);
        if (speed !== undefined) this.speed = speed;
        if (startIdx === undefined) startIdx = 0;
        this.typingIdx = startIdx + 1;
        if (this.speed === 0) this.stop(true);
        else {
            this.setText("");
            this.startTimer(timerStartAt);
        }
        return this;
    }
    appendText(text) {
        var newText = this.text.concat(TransferText(text));
        if (this.isTyping) this.setTypingContent(newText);
        else this.start(newText, undefined, this.textLen);
        return this;
    }
    stop(showAllText) {
        var timer = this.getTimer();
        if (timer) this.freeTimer();
        if (showAllText) {
            this.typingIdx = this.textLen;
            this.setText(this.text);
            this.emit("type");
            this.emit("complete", this, this.parent);
        }
        return this;
    }
    pause() {
        var timer = this.getTimer();
        if (timer) timer.paused = true;
        return this;
    }
    resume() {
        var timer = this.getTimer();
        if (timer) timer.paused = false;
        return this;
    }
    setTypingContent(text) {
        this.text = text;
        this.textLen = this.getTextLength(this.text);
        return this;
    }
    onTyping() {
        var newText = this.getTypingString(this.text, this.typingIdx, this.textLen, this.typeMode);
        this.setText(newText);
        this.emit("type");
        if (this.isLastChar) {
            this.freeTimer();
            this.emit("complete", this, this.parent);
        } else {
            this.timer.delay = this.speed; // delay of next typing            
            this.typingIdx++;
        }
    }
    getTypingString(text, typeIdx, textLen, typeMode) {
        var result;
        if (typeMode === 0) {
            var startIdx = 0;
            var endIdx = typeIdx;
            this.insertIdx = endIdx;
            result = this.getSubString(text, startIdx, endIdx);
        } else if (typeMode === 1) {
            var endIdx = textLen;
            var startIdx = endIdx - typeIdx;
            this.insertIdx = 0;
            result = this.getSubString(text, startIdx, endIdx);
        } else if (typeMode === 2) {
            var midIdx = textLen / 2;
            var startIdx = Math.floor(midIdx - typeIdx / 2);
            var endIdx = startIdx + typeIdx;
            this.insertIdx = typeIdx % 2 ? typeIdx : 0;
            result = this.getSubString(text, startIdx, endIdx);
        } else if (typeMode === 3) {
            var lowerLen = Math.floor(typeIdx / 2);
            var lowerResult;
            if (lowerLen > 0) {
                var endIdx = textLen;
                var startIdx = endIdx - lowerLen;
                lowerResult = this.getSubString(text, startIdx, endIdx);
            } else lowerResult = "";
            var upperLen = typeIdx - lowerLen;
            var upperResult;
            if (upperLen > 0) {
                var startIdx = 0;
                var endIdx = startIdx + upperLen;
                this.insertIdx = endIdx;
                upperResult = this.getSubString(text, startIdx, endIdx);
            } else {
                upperResult = "";
                this.insertIdx = 0;
            }
            result = upperResult + lowerResult;
        }
        return result;
    }
    startTimer(timerStartAt) {
        if (this.timer) this.freeTimer();
        var delay, startAt;
        if (timerStartAt === undefined) {
            delay = 0;
            startAt = 0;
        } else {
            delay = this.speed;
            startAt = timerStartAt;
        }
        this.timer = this.scene.time.addEvent({
            delay: 0.0001,
            startAt: startAt,
            loop: true,
            callback: this.onTyping,
            callbackScope: this
        });
        // Note: Throw error message if delay is 0 with repeat/loop
        return this;
    }
    getTimer() {
        return this.timer;
    }
    freeTimer() {
        if (this.timer) {
            this.timer.remove();
            this.timer = null;
        }
        return this;
    }
    setText(text) {
        if (this.setTextCallback) {
            if (this.setTextCallbackScope) text = this.setTextCallback.call(this.setTextCallbackScope, text, this.isLastChar, this.insertIdx);
            else text = this.setTextCallback(text, this.isLastChar, this.insertIdx);
        }
        if (this.textWrapEnable) (0, _setNoWrapTextJsDefault.default)(this.parent, text);
        else this.parent.setText(text);
    }
    getTextLength(text) {
        var gameObject = this.parent;
        var len;
        if (gameObject.getPlainText) len = gameObject.getPlainText(text).length;
        else len = text.length;
        return len;
    }
    getSubString(text, startIdx, endIdx) {
        var gameObject = this.parent;
        var result;
        if (gameObject.getSubString) result = gameObject.getSubString(text, startIdx, endIdx);
        else result = text.slice(startIdx, endIdx);
        return result;
    }
}
var TransferText = function(text) {
    if (Array.isArray(text)) text = text.join("\n");
    else if (typeof text === "number") text = text.toString();
    return text;
};
const TYPEMODE = {
    "left-to-right": 0,
    "right-to-left": 1,
    "middle-to-sides": 2,
    "sides-to-middle": 3
};
exports.default = TextTyping;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/text/GetWrapText.js":"iIA5W","../../utils/text/SetNoWrapText.js":"4ltsm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iIA5W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getTextObjectTypeJs = require("./GetTextObjectType.js");
var _getTextObjectTypeJsDefault = parcelHelpers.interopDefault(_getTextObjectTypeJs);
var GetWrapText = function(textObject, text) {
    var textObjectType = (0, _getTextObjectTypeJsDefault.default)(textObject);
    switch(textObjectType){
        case 0, _getTextObjectTypeJs.TextType:
            textObject.style.syncFont(textObject.canvas, textObject.context);
            text = textObject.runWordWrap(text);
            break;
        case 0, _getTextObjectTypeJs.TagTextType:
            text = textObject.getText(text, undefined, undefined, true);
            break;
        case 0, _getTextObjectTypeJs.BitmapTextType:
            text = textObject.setText(text).getTextBounds().wrappedText;
            break;
    }
    return text;
};
exports.default = GetWrapText;

},{"./GetTextObjectType.js":"6Cxvv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b8BGc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _numberBarJs = require("./NumberBar.js");
var _numberBarJsDefault = parcelHelpers.interopDefault(_numberBarJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("numberBar", function(config) {
    var gameObject = new (0, _numberBarJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.NumberBar", (0, _numberBarJsDefault.default));
exports.default = (0, _numberBarJsDefault.default);

},{"./NumberBar.js":"8D8cg","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8D8cg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _addChildMaskJs = require("../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js");
var _addChildMaskJsDefault = parcelHelpers.interopDefault(_addChildMaskJs);
var _sliderJs = require("../slider/Slider.js");
var _sliderJsDefault = parcelHelpers.interopDefault(_sliderJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class NumberBar extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        // Create sizer
        super(scene, config);
        this.type = "rexNumberBar";
        // Add elements
        var background = GetValue(config, "background", undefined);
        var icon = GetValue(config, "icon", undefined);
        var iconMask = GetValue(config, "iconMask", undefined);
        var sliderConfig = GetValue(config, "slider", undefined);
        var text = GetValue(config, "text", undefined);
        // Space
        var iconSpace = GetValue(config, "space.icon", 0);
        var sliderSpace = GetValue(config, "space.slider", 0);
        if (background) this.addBackground(background);
        if (icon) {
            var padding;
            if (this.orientation === 0) {
                if (sliderConfig || text) padding = {
                    right: iconSpace
                };
            } else if (sliderConfig || text) padding = {
                bottom: iconSpace
            };
            this.add(icon, {
                proportion: 0,
                align: "center",
                padding: padding
            });
            if (iconMask) iconMask = (0, _addChildMaskJsDefault.default).call(this, icon, icon, 1); // Circle mask
        }
        var slider;
        if (sliderConfig) {
            sliderConfig.orientation = this.orientation;
            sliderConfig.eventEmitter = this;
            sliderConfig.value = null;
            if (!sliderConfig.hasOwnProperty("input")) sliderConfig.input = -1;
            slider = new (0, _sliderJsDefault.default)(scene, sliderConfig);
            scene.add.existing(slider);
            var padding;
            if (this.orientation === 0) {
                if (text) padding = {
                    right: sliderSpace
                };
            } else if (text) padding = {
                bottom: sliderSpace
            };
            var proportion;
            if (this.orientation === 0) {
                var sliderWidth = GetValue(sliderConfig, "width", undefined);
                proportion = sliderWidth === undefined ? 1 : 0;
            } else {
                var sliderHeight = GetValue(sliderConfig, "height", undefined);
                proportion = sliderHeight === undefined ? 1 : 0;
            }
            this.add(slider, {
                proportion: proportion,
                align: "center",
                padding: padding
            });
        }
        if (text) this.add(text);
        this.addChildrenMap("background", background);
        this.addChildrenMap("icon", icon);
        this.addChildrenMap("iconMask", iconMask);
        this.addChildrenMap("slider", slider);
        this.addChildrenMap("text", text);
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        this.setEnable(GetValue(config, "enable", undefined));
        this.setValue(GetValue(config, "value", 0));
    }
    get enable() {
        if (this.childrenMap.slider) return this.childrenMap.slider.enable;
        else return false;
    }
    set enable(value) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEnable(value);
    }
    setEnable(enable) {
        if (enable === undefined) enable = true;
        this.enable = enable;
        return this;
    }
    get value() {
        if (this.childrenMap.slider) return this.childrenMap.slider.value;
        else return 0;
    }
    set value(value) {
        if (!this.childrenMap.slider) return;
        this.childrenMap.slider.value = value;
    }
    setValue(value, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.setValue(value, min, max);
        return this;
    }
    addValue(inc, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.addValue(inc, min, max);
        return this;
    }
    getValue(min, max) {
        if (this.childrenMap.slider) return this.childrenMap.slider.getValue(min, max);
        else return 0;
    }
    easeValueTo(value, min, max) {
        if (this.childrenMap.slider) this.childrenMap.slider.easeValueTo(value, min, max);
        return this;
    }
    stopEaseValue() {
        if (this.childrenMap.slider) this.childrenMap.slider.stopEaseValue();
        return this;
    }
    setEaseValueDuration(duration) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEaseValueDuration(duration);
        return this;
    }
    setEaseValueFunction(ease) {
        if (this.childrenMap.slider) this.childrenMap.slider.setEaseValueFunction(ease);
        return this;
    }
    get text() {
        var textObject = this.childrenMap.text;
        if (textObject === undefined) return "";
        var value;
        if (textObject.text) value = textObject.text;
        else value = textObject.getData("text");
        return value;
    }
    set text(value) {
        var textObject = this.childrenMap.text;
        if (textObject === undefined) return;
        if (textObject.setText) textObject.setText(value);
        else textObject.setData("text", value);
    }
    setText(value) {
        this.text = value;
        return this;
    }
}
exports.default = NumberBar;

},{"../sizer/Sizer.js":"ayu5S","../../../plugins/gameobjects/container/containerlite/mask/AddChildMask.js":"gWrSF","../slider/Slider.js":"f16Jy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3I3ha":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollBarJs = require("./ScrollBar.js");
var _scrollBarJsDefault = parcelHelpers.interopDefault(_scrollBarJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("scrollBar", function(config) {
    var gameObject = new (0, _scrollBarJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ScrollBar", (0, _scrollBarJsDefault.default));
exports.default = (0, _scrollBarJsDefault.default);

},{"./ScrollBar.js":"2ipw1","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcq2G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _badgeLabelJs = require("./BadgeLabel.js");
var _badgeLabelJsDefault = parcelHelpers.interopDefault(_badgeLabelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("badgeLabel", function(config) {
    var gameObject = new (0, _badgeLabelJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.BadgeLabel", (0, _badgeLabelJsDefault.default));
exports.default = (0, _badgeLabelJsDefault.default);

},{"./BadgeLabel.js":"eT3Bd","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eT3Bd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const BadgeKeys = {
    leftTop: "left-top",
    centerTop: "center-top",
    rightTop: "right-top",
    leftCenter: "left-center",
    center: "center",
    rightCenter: "right-center",
    leftBottom: "left-bottom",
    centerBottom: "center-bottom",
    rightBottom: "right-bottom"
};
class Badge extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        // Create sizer  
        super(scene, config);
        this.type = "rexBadge";
        // Add elements
        var background = GetValue(config, "background", undefined);
        if (background) this.addBackground(background);
        this.addChildrenMap("background", background);
        // Base item
        var main = GetValue(config, "main", undefined);
        if (main) this.add(main, {
            key: "main",
            align: "center",
            expand: false
        });
        this.addChildrenMap("main", main);
        // Badges
        for(var key in BadgeKeys){
            var badge = GetValue(config, key, undefined);
            if (badge) {
                this.add(badge, {
                    key: key,
                    align: BadgeKeys[key],
                    expand: false
                });
                this.addChildrenMap(key, badge);
            }
        }
    }
}
exports.default = Badge;

},{"../overlapsizer/OverlapSizer.js":"gx7j1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fW1NC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pagesJs = require("./Pages.js");
var _pagesJsDefault = parcelHelpers.interopDefault(_pagesJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("pages", function(config) {
    var gameObject = new (0, _pagesJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Pages", (0, _pagesJsDefault.default));
exports.default = (0, _pagesJsDefault.default);

},{"./Pages.js":"jG08b","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jG08b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Pages extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexPages";
        this.childrenMap = this.sizerChildren;
        this._previousKey = undefined;
        this._currentKey = undefined;
        this.setSwapMode(GetValue(config, "swapMode", 0));
        this.setFadeInDuration(GetValue(config, "fadeIn", 0));
    }
    setSwapMode(mode) {
        if (typeof mode === "string") mode = SWAPMODE[mode];
        this.swapMode = mode;
        return this;
    }
    setFadeInDuration(duration) {
        this.fadeInDuration = duration;
        return this;
    }
    get previousKey() {
        return this._previousKey;
    }
    get currentKey() {
        return this._currentKey;
    }
    set currentKey(key) {
        this.swapPage(key);
    }
    get currentPage() {
        return this.getPage(this.currentKey);
    }
    get previousPage() {
        return this.getPage(this.previousKey);
    }
    get keys() {
        return Object.keys(this.sizerChildren);
    }
}
Object.assign(Pages.prototype, (0, _methodsJsDefault.default));
const SWAPMODE = {
    invisible: 0,
    destroy: 1
};
exports.default = Pages;

},{"../overlapsizer/OverlapSizer.js":"gx7j1","./methods/Methods.js":"GaVwW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GaVwW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addChildMethodsJs = require("./AddChildMethods.js");
var _addChildMethodsJsDefault = parcelHelpers.interopDefault(_addChildMethodsJs);
var _getPageJs = require("./GetPage.js");
var _getPageJsDefault = parcelHelpers.interopDefault(_getPageJs);
var _swapPageJs = require("./SwapPage.js");
var _swapPageJsDefault = parcelHelpers.interopDefault(_swapPageJs);
var _hasPageJs = require("./HasPage.js");
var _hasPageJsDefault = parcelHelpers.interopDefault(_hasPageJs);
var methods = {
    getPage: (0, _getPageJsDefault.default),
    swapPage: (0, _swapPageJsDefault.default),
    hasPage: (0, _hasPageJsDefault.default)
};
Object.assign(methods, (0, _addChildMethodsJsDefault.default));
exports.default = methods;

},{"./AddChildMethods.js":"aeoCs","./GetPage.js":"hJOCI","./SwapPage.js":"jjUa3","./HasPage.js":"gUuUI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeoCs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
const OverlapSizerAdd = (0, _overlapSizerJsDefault.default).prototype.add;
var Add = function(gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY) {
    gameObject.setVisible(false); // Default is invisible
    OverlapSizerAdd.call(this, gameObject, childKey, align, padding, expand, minWidth, minHeight, offsetX, offsetY);
    return this;
};
exports.default = {
    add: Add,
    addPage: Add
};

},{"../../overlapsizer/OverlapSizer.js":"gx7j1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJOCI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPage = function(key) {
    if (key === undefined) return null;
    else if (!this.sizerChildren.hasOwnProperty(key)) return null;
    else return this.sizerChildren[key];
};
exports.default = GetPage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjUa3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerJs = require("../../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
const ContainerSetChildVisible = (0, _containerJsDefault.default).prototype.setChildVisible;
var SwapPage = function(key, fadeInDuration) {
    this._previousKey = this._currentKey;
    var prevoiusPage = this.previousPage;
    if (prevoiusPage) {
        if (this.swapMode === 0) {
            ContainerSetChildVisible.call(this, prevoiusPage, false);
            this.emit("pageinvisible", prevoiusPage, this._previousKey, this);
        } else prevoiusPage.destroy();
    }
    if (key && !this.sizerChildren.hasOwnProperty(key)) this.emit("createpage", key, this);
    this._currentKey = key;
    var currentPage = this.currentPage;
    if (currentPage) {
        ContainerSetChildVisible.call(this, currentPage, true);
        this.emit("pagevisible", currentPage, this._currentKey, this);
        if (fadeInDuration === undefined) fadeInDuration = this.fadeInDuration;
        if (fadeInDuration > 0) currentPage.setAlpha(0).fadeIn(fadeInDuration, 1);
    }
    return this;
};
exports.default = SwapPage;

},{"../../container/Container.js":"4qgeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUuUI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var HasPage = function(key) {
    return this.sizerChildren.hasOwnProperty(key);
};
exports.default = HasPage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fzrSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _perspectiveCardJs = require("./PerspectiveCard.js");
var _perspectiveCardJsDefault = parcelHelpers.interopDefault(_perspectiveCardJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("perspectiveCard", function(config) {
    var gameObject = new (0, _perspectiveCardJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.PerspectiveCard", (0, _perspectiveCardJsDefault.default));
exports.default = (0, _perspectiveCardJsDefault.default);

},{"./PerspectiveCard.js":"hBGQf","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBGQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _createPerspectiveCardMeshJs = require("./CreatePerspectiveCardMesh.js");
var _createPerspectiveCardMeshJsDefault = parcelHelpers.interopDefault(_createPerspectiveCardMeshJs);
var _perspectiveMethodsJs = require("./PerspectiveMethods.js");
var _perspectiveMethodsJsDefault = parcelHelpers.interopDefault(_perspectiveMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class PerspectiveCard extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexPerspectiveCard";
        // Layout faces
        var backFace = config.back;
        var backFaceExpand = GetValue(config, "expand.back", true);
        this.add(backFace, {
            key: "back",
            expand: backFaceExpand
        });
        var frontFace = config.front;
        var frontFaceExpand = GetValue(config, "expand.front", true);
        this.add(frontFace, {
            key: "front",
            expand: frontFaceExpand
        });
        // Add PerspectiveCardMesh
        this.perspectiveCard = (0, _createPerspectiveCardMeshJsDefault.default).call(this, config);
        this.pin(this.perspectiveCard);
        this.exitPerspectiveMode(false);
    }
    get flip() {
        return this.perspectiveCard.flip;
    }
    get face() {
        return this.perspectiveCard.face;
    }
    set face(index) {
        // Can't set face during flipping
        if (this.flip && this.flip.isRunning) return;
        this.perspectiveCard.face = index;
        var isFrontFace = index === 0;
        var frontFace = this.childrenMap.front;
        var backFace = this.childrenMap.back;
        this.setChildVisible(frontFace, isFrontFace);
        this.setChildVisible(backFace, !isFrontFace);
    }
    setFace(face) {
        this.face = face;
        return this;
    }
    toggleFace() {
        var newFace = this.face === 0 ? 1 : 0;
        this.setFace(newFace);
        return this;
    }
    get isInPerspectiveMode() {
        return this.perspectiveCard.visible;
    }
    get rotationX() {
        return this.perspectiveCard.rotationX;
    }
    set rotationX(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.rotationX = value;
    }
    get angleX() {
        return this.perspectiveCard.angleX;
    }
    set angleX(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.angleX = value;
    }
    get rotationY() {
        return this.perspectiveCard.rotationY;
    }
    set rotationY(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.rotationY = value;
    }
    get angleY() {
        return this.perspectiveCard.angleY;
    }
    set angleY(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.angleY = value;
    }
    get rotationZ() {
        return this.perspectiveCard.rotationZ;
    }
    set rotationZ(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.rotationZ = value;
    }
    get angleZ() {
        return this.perspectiveCard.angleZ;
    }
    set angleZ(value) {
        this.enterPerspectiveMode();
        this.perspectiveCard.angleZ = value;
    }
    panX(v) {
        this.enterPerspectiveMode();
        this.perspectiveCard.panX(v);
        return this;
    }
    panY(v) {
        this.enterPerspectiveMode();
        this.perspectiveCard.panY(v);
        return this;
    }
    panZ(v) {
        this.enterPerspectiveMode();
        this.perspectiveCard.panZ(v);
        return this;
    }
    transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
        this.enterPerspectiveMode();
        this.perspectiveCard.transformVerts(x, y, z, rotateX, rotateY, rotateZ);
        return this;
    }
    forEachFace(callback, scope, ignoreInvalid) {
        this.enterPerspectiveMode();
        this.perspectiveCard.forEachFace(callback, scope, ignoreInvalid);
        return this;
    }
}
Object.assign(PerspectiveCard.prototype, (0, _perspectiveMethodsJsDefault.default));
exports.default = PerspectiveCard;

},{"../overlapsizer/OverlapSizer.js":"gx7j1","./CreatePerspectiveCardMesh.js":"8XcFL","./PerspectiveMethods.js":"2IeAM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8XcFL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _perspectiveimageJs = require("../../../plugins/perspectiveimage.js");
var _cloneJs = require("../../../plugins/utils/object/Clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreatePerspectiveCardMesh = function(config) {
    var scene = this.scene;
    this.setSnapshotPadding(GetValue(config, "snapshotPadding", 0));
    config = (0, _cloneJsDefault.default)(config);
    // Remove size config
    delete config.width;
    delete config.height;
    // Initial size of render-texture is 1x1
    config.front = {
        width: 1,
        height: 1
    };
    config.back = {
        width: 1,
        height: 1
    };
    // Create PerspectiveCard as card-behavior
    var card = new (0, _perspectiveimageJs.PerspectiveCard)(scene, config);
    scene.add.existing(card);
    var flip = card.flip;
    if (flip) {
        var parent = this;
        flip.on("start", function() {
            // Before flipping
            parent.enterPerspectiveMode();
        }).on("complete", function() {
            // After flipping
            parent.exitPerspectiveMode();
        });
    }
    return card;
};
exports.default = CreatePerspectiveCardMesh;

},{"../../../plugins/perspectiveimage.js":"er5r5","../../../plugins/utils/object/Clone.js":"iFVih","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"er5r5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PerspectiveImage", ()=>(0, _imageJsDefault.default));
parcelHelpers.export(exports, "PerspectiveRenderTexture", ()=>(0, _renderTextureJsDefault.default));
parcelHelpers.export(exports, "PerspectiveSprite", ()=>(0, _spriteJsDefault.default));
parcelHelpers.export(exports, "PerspectiveCard", ()=>(0, _cardJsDefault.default));
parcelHelpers.export(exports, "PerspectiveCarousel", ()=>(0, _carouselJsDefault.default));
parcelHelpers.export(exports, "PerspectiveImageCarousel", ()=>(0, _imageCarouselJsDefault.default));
parcelHelpers.export(exports, "ContainerPerspective", ()=>(0, _containerPerspectiveJsDefault.default));
var _imageJs = require("./gameobjects/mesh/perspective/image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _renderTextureJs = require("./gameobjects/mesh/perspective/rendertexture/RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
var _spriteJs = require("./gameobjects/mesh/perspective/sprite/Sprite.js");
var _spriteJsDefault = parcelHelpers.interopDefault(_spriteJs);
var _cardJs = require("./gameobjects/mesh/perspective/card/Card.js");
var _cardJsDefault = parcelHelpers.interopDefault(_cardJs);
var _carouselJs = require("./gameobjects/mesh/perspective/carousel/Carousel.js");
var _carouselJsDefault = parcelHelpers.interopDefault(_carouselJs);
var _imageCarouselJs = require("./gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js");
var _imageCarouselJsDefault = parcelHelpers.interopDefault(_imageCarouselJs);
var _containerPerspectiveJs = require("./behaviors/containerperspective/ContainerPerspective.js");
var _containerPerspectiveJsDefault = parcelHelpers.interopDefault(_containerPerspectiveJs);

},{"./gameobjects/mesh/perspective/image/Image.js":"datRW","./gameobjects/mesh/perspective/rendertexture/RenderTexture.js":"4B4v1","./gameobjects/mesh/perspective/sprite/Sprite.js":"b0zly","./gameobjects/mesh/perspective/card/Card.js":"8ZARe","./gameobjects/mesh/perspective/carousel/Carousel.js":"kKJNV","./gameobjects/mesh/perspective/imagecarousel/ImageCarousel.js":"jJ9hp","./behaviors/containerperspective/ContainerPerspective.js":"iuk5B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"datRW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _transformVerts = require("../utils/TransformVerts");
var _transformVertsDefault = parcelHelpers.interopDefault(_transformVerts);
const Mesh = Phaser.GameObjects.Mesh;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const GenerateGridVerts = Phaser.Geom.Mesh.GenerateGridVerts;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
const FOV = 45;
const PanZ = 1 + 1 / Math.sin(DegToRad(FOV));
class Image extends Mesh {
    constructor(scene, x, y, key, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            key = GetValue(config, "key", null);
            frame = GetValue(config, "frame", null);
        }
        super(scene, x, y, key, frame);
        this.type = "rexPerspectiveImage";
        this.setSizeToFrame();
        this.resetPerspective();
        this.panZ(PanZ);
        this.hideCCW = GetValue(config, "hideCCW", true);
        var gridWidth = GetValue(config, "gridWidth", 32);
        var gridHeight = GetValue(config, "gridHeight", gridWidth);
        this.resetVerts(gridWidth, gridHeight);
    }
    get originX() {
        return 0.5;
    }
    get originY() {
        return 0.5;
    }
    resetPerspective() {
        this.setPerspective(this.width, this.height, FOV);
        return this;
    }
    resetVerts(gridWidth, gridHeight) {
        if (gridWidth !== undefined) this.gridWidth = gridWidth;
        if (gridHeight !== undefined) this.gridHeight = gridHeight;
        // Clear faces and vertices
        this.clear();
        this.dirtyCache[9] = -1;
        if (this.width === 0 || this.height === 0) return this;
        // Generate faces and vertices
        var frameWidth = this.frame.cutWidth, frameHeight = this.frame.cutHeight;
        GenerateGridVerts({
            mesh: this,
            texture: this.texture.key,
            frame: this.frame.name,
            width: frameWidth / this.height,
            height: frameHeight / this.height,
            widthSegments: Math.ceil(frameWidth / this.gridWidth),
            heightSegments: Math.ceil(frameHeight / this.gridHeight)
        });
        // Recover vertices transform
        var transformInfo = this.transformInfo;
        if (transformInfo) this.transformVerts(transformInfo.x, transformInfo.y, transformInfo.z, transformInfo.rotateX, transformInfo.rotateY, transformInfo.rotateZ);
        return this;
    }
    syncSize() {
        this.setSizeToFrame(); // Reset size
        this.resetPerspective(); // Reset perspective
        this.resetVerts(); // Reset verts
        return this;
    }
    get rotationX() {
        return this.modelRotation.x;
    }
    set rotationX(value) {
        this.modelRotation.x = value;
    }
    get angleX() {
        return RadToDeg(this.rotationX);
    }
    set angleX(value) {
        this.rotationX = DegToRad(value);
    }
    get rotationY() {
        return this.modelRotation.y;
    }
    set rotationY(value) {
        this.modelRotation.y = value;
    }
    get angleY() {
        return RadToDeg(this.rotationY);
    }
    set angleY(value) {
        this.rotationY = DegToRad(value);
    }
    get rotationZ() {
        return this.modelRotation.z;
    }
    set rotationZ(value) {
        this.modelRotation.z = value;
    }
    get angleZ() {
        return RadToDeg(this.rotationZ);
    }
    set angleZ(value) {
        this.rotationZ = DegToRad(value);
    }
    transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (z === undefined) z = 0;
        if (rotateX === undefined) rotateX = 0;
        if (rotateY === undefined) rotateY = 0;
        if (rotateZ === undefined) rotateZ = 0;
        if (!this.transformInfo) this.transformInfo = {};
        this.transformInfo.x = x;
        this.transformInfo.y = y;
        this.transformInfo.rotateX = rotateX;
        this.transformInfo.rotateY = rotateY;
        this.transformInfo.rotateZ = rotateZ;
        (0, _transformVertsDefault.default)(this, x, y, z, rotateX, rotateY, rotateZ);
        return this;
    }
    forceUpdate() {
        this.dirtyCache[10] = 1;
        return this;
    }
    get tint() {
        if (this.vertices.length === 0) return 0xffffff;
        else return this.vertices[0].color;
    }
}
exports.default = Image;

},{"../utils/TransformVerts":"hR4Nw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hR4Nw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Vector3 = Phaser.Math.Vector3;
const Matrix4 = Phaser.Math.Matrix4;
var tempPosition = new Vector3();
var tempRotation = new Vector3();
var tempMatrix = new Matrix4();
var TransformVerts = function(mesh, x, y, z, rotateX, rotateY, rotateZ) {
    if (x === undefined) x = 0;
    if (y === undefined) y = 0;
    if (z === undefined) z = 0;
    if (rotateX === undefined) rotateX = 0;
    if (rotateY === undefined) rotateY = 0;
    if (rotateZ === undefined) rotateZ = 0;
    tempPosition.set(x, y, z);
    tempRotation.set(rotateX, rotateY, rotateZ);
    tempMatrix.fromRotationXYTranslation(tempRotation, tempPosition, true);
    for(var i = 0, cnt = mesh.vertices.length; i < cnt; i++)mesh.vertices[i].transformMat4(tempMatrix);
};
exports.default = TransformVerts;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4B4v1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageJs = require("../image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _createDynamicTextureJs = require("../../../../utils/rendertexture/CreateDynamicTexture.js");
var _createDynamicTextureJsDefault = parcelHelpers.interopDefault(_createDynamicTextureJs);
var _snapshotJs = require("../../../../utils/rendertexture/Snapshot.js");
var _snapshotJsDefault = parcelHelpers.interopDefault(_snapshotJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderTexture extends (0, _imageJsDefault.default) {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 32);
            height = GetValue(config, "height", 32);
        }
        // dynamic-texture -> quad-image
        var texture = (0, _createDynamicTextureJsDefault.default)(scene, width, height);
        super(scene, x, y, texture, null, config);
        this.type = "rexPerspectiveRenderTexture";
        this.rt = this.texture;
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.rt.destroy();
        this.rt = null;
    }
    snapshot(gameObjects, config) {
        if (config === undefined) config = {};
        config.gameObjects = gameObjects;
        config.renderTexture = this.rt;
        (0, _snapshotJsDefault.default)(config);
        if (this.width !== this.frame.realWidth || this.height !== this.frame.realHeight) this.syncSize();
        return this;
    }
}
exports.default = RenderTexture;

},{"../image/Image.js":"datRW","../../../../utils/rendertexture/CreateDynamicTexture.js":"5K58G","../../../../utils/rendertexture/Snapshot.js":"fjgt2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5K58G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const DynamicTexture = Phaser.Textures.DynamicTexture;
var CreateDynamicTexture = function(scene, width, height) {
    if (width === undefined) width = 2;
    if (height === undefined) height = 2;
    var dt = new DynamicTexture(scene.sys.textures, null, width, height);
    return dt;
};
exports.default = CreateDynamicTexture;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0zly":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageJs = require("../image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
const AnimationState = Phaser.Animations.AnimationState;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Sprite extends (0, _imageJsDefault.default) {
    constructor(scene, x, y, key, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            key = GetValue(config, "key", null);
            frame = GetValue(config, "frame", null);
        }
        super(scene, x, y, key, frame, config);
        this.type = "rexPerspectiveSprite";
        this.anims = new AnimationState(this);
    }
    preDestroy() {
        super.preDestroy();
        this.anims.destroy();
        this.anims = undefined;
    }
    preUpdate(time, delta) {
        var prevFrame = this.anims.currentFrame;
        this.anims.update(time, delta);
        if (this.anims.currentFrame !== prevFrame) this.syncSize();
        super.preUpdate(time, delta);
    }
    play(key, ignoreIfPlaying, startFrame) {
        return this.anims.play(key, ignoreIfPlaying, startFrame);
    }
    playReverse(key, ignoreIfPlaying) {
        return this.anims.playReverse(key, ignoreIfPlaying);
    }
    playAfterDelay(key, delay) {
        return this.anims.playAfterDelay(key, delay);
    }
    playAfterRepeat(key, repeatCount) {
        return this.anims.playAfterRepeat(key, repeatCount);
    }
    chain(key) {
        return this.anims.chain(key);
    }
    stop() {
        return this.anims.stop();
    }
    stopAfterDelay(delay) {
        return this.anims.stopAfterDelay(delay);
    }
    stopAfterRepeat(repeatCount) {
        return this.anims.stopAfterRepeat(repeatCount);
    }
    stopOnFrame(frame) {
        return this.anims.stopOnFrame(frame);
    }
}
exports.default = Sprite;

},{"../image/Image.js":"datRW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ZARe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _faceContainerJs = require("../utils/FaceContainer.js");
var _faceContainerJsDefault = parcelHelpers.interopDefault(_faceContainerJs);
var _createFacesJs = require("../utils/CreateFaces.js");
var _createFacesJsDefault = parcelHelpers.interopDefault(_createFacesJs);
var _forEachFaceJs = require("../utils/ForEachFace.js");
var _forEachFaceJsDefault = parcelHelpers.interopDefault(_forEachFaceJs);
var _layoutFacesJs = require("./LayoutFaces.js");
var _layoutFacesJsDefault = parcelHelpers.interopDefault(_layoutFacesJs);
var _flipJs = require("./Flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const FaceNames = [
    "back",
    "front"
];
class Card extends (0, _faceContainerJsDefault.default) {
    constructor(scene, x, y, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
        }
        var faces = (0, _createFacesJsDefault.default)(scene, config, FaceNames);
        var backFace = faces.back;
        var frontFace = faces.front;
        var width = GetValue(config, "width");
        var height = GetValue(config, "height");
        if (width === undefined || height === undefined) {
            if (width === undefined) {
                var frontFaceWidth = frontFace ? frontFace.width : 0;
                var backFaceWidth = backFace ? backFace.width : 0;
                width = Math.max(frontFaceWidth, backFaceWidth);
            }
            if (height === undefined) {
                var frontFaceHeight = frontFace ? frontFace.height : 0;
                var backFaceHeight = backFace ? backFace.height : 0;
                height = Math.max(frontFaceHeight, backFaceHeight);
            }
        }
        super(scene, x, y, width, height, faces);
        this.type = "rexPerspectiveCard";
        this.frontFaceRotationX = 0;
        this.frontFaceRotationY = 0;
        this.frontFaceRotationZ = 0;
        (0, _forEachFaceJsDefault.default)(faces, function(face, name) {
            this[`${name}Face`] = face;
        }, this);
        var flipConfig = GetValue(config, "flip", undefined);
        if (flipConfig !== false) this.flip = new (0, _flipJsDefault.default)(this, flipConfig);
        this.setOrientation(GetValue(config, "orientation", 0));
        (0, _layoutFacesJsDefault.default)(this, faces);
        this.setFace(GetValue(config, "face", 0));
    }
    get rotationX() {
        return this.frontFaceRotationX;
    }
    set rotationX(value) {
        if (this.frontFaceRotationX === value) return;
        this.frontFaceRotationX = value;
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.rotationX = value;
        }, null, true);
    }
    get rotationY() {
        return this.frontFaceRotationY;
    }
    set rotationY(value) {
        if (this.frontFaceRotationY === value) return;
        this.frontFaceRotationY = value;
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.rotationY = value;
        }, null, true);
    }
    get rotationZ() {
        return this.frontFaceRotationZ;
    }
    set rotationZ(value) {
        if (this.frontFaceRotationZ === value) return;
        this.frontFaceRotationZ = value;
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.rotationZ = value;
        }, null, true);
    }
    setOrientation(orientation) {
        if (typeof orientation === "string") orientation = ORIENTATIONMODE[orientation];
        this.orientation = orientation;
        return this;
    }
    get face() {
        return this.currentFaceIndex;
    }
    set face(index) {
        if (typeof index === "string") index = FACEMODE[index];
        this.currentFaceIndex = index;
        var isBackFace = index === 1;
        var angle = isBackFace ? 180 : 0;
        if (this.orientation === 0) this.angleY = angle;
        else this.angleX = angle;
    }
    setFace(face) {
        this.face = face;
        return this;
    }
    toggleFace() {
        var newFace = this.face === 0 ? 1 : 0;
        this.setFace(newFace);
        return this;
    }
}
const ORIENTATIONMODE = {
    x: 0,
    horizontal: 0,
    h: 0,
    y: 1,
    vertical: 1,
    v: 1
};
const FACEMODE = {
    front: 0,
    back: 1
};
exports.default = Card;

},{"../utils/FaceContainer.js":"lTdVR","../utils/CreateFaces.js":"fYulX","../utils/ForEachFace.js":"d7S5Y","./LayoutFaces.js":"frneP","./Flip.js":"01Zwq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTdVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _containerLiteJs = require("../../../container/containerlite/ContainerLite.js");
var _containerLiteJsDefault = parcelHelpers.interopDefault(_containerLiteJs);
var _forEachFaceJs = require("./ForEachFace.js");
var _forEachFaceJsDefault = parcelHelpers.interopDefault(_forEachFaceJs);
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
class FaceContainer extends (0, _containerLiteJsDefault.default) {
    constructor(scene, x, y, width, height, faces){
        super(scene, x, y, width, height);
        this.faces = faces; // Face Dictionary, or array
        (0, _forEachFaceJsDefault.default)(faces, function(face) {
            face.setPosition(x, y);
            this.add(face);
        }, this, true);
    }
    // Override
    get rotationX() {
        return 0;
    }
    // Override
    set rotationX(value) {
    // rad
    }
    get angleX() {
        return RadToDeg(this.rotationX);
    }
    set angleX(value) {
        this.rotationX = DegToRad(value);
    }
    // Override
    get rotationY() {
        return 0;
    }
    // Override
    set rotationY(value) {
    // rad
    }
    get angleY() {
        return RadToDeg(this.rotationY);
    }
    set angleY(value) {
        this.rotationY = DegToRad(value);
    }
    // Override
    get rotationZ() {
        return 0;
    }
    // Override
    set rotationZ(value) {
    // rad
    }
    get angleZ() {
        return RadToDeg(this.rotationZ);
    }
    set angleZ(value) {
        this.rotationZ = DegToRad(value);
    }
    setDebug(graphic, callback) {
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.setDebug(graphic, callback);
        }, null, true);
        return this;
    }
    panX(v) {
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.panX(v);
        }, null, true);
        return this;
    }
    panY(v) {
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.panY(v);
        }, null, true);
        return this;
    }
    panZ(v) {
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.panZ(v);
        }, null, true);
        return this;
    }
    transformVerts(x, y, z, rotateX, rotateY, rotateZ) {
        (0, _forEachFaceJsDefault.default)(this.faces, function(face) {
            face.transformVerts(x, y, z, rotateX, rotateY, rotateZ);
        }, null, true);
        return this;
    }
    forEachFace(callback, scope, ignoreInvalid) {
        (0, _forEachFaceJsDefault.default)(this.faces, callback, scope, ignoreInvalid);
        return this;
    }
}
exports.default = FaceContainer;

},{"../../../container/containerlite/ContainerLite.js":"kyrI6","./ForEachFace.js":"d7S5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d7S5Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ForEachFace = function(faces, callback, scope, ignoreInvalid) {
    if (Array.isArray(faces)) {
        var isBreak = false;
        for(var i = 0, cnt = faces.length; i < cnt; i++){
            var face = faces[i];
            if (ignoreInvalid && !face) continue;
            if (scope) isBreak = callback.call(scope, face, i, faces);
            else isBreak = callback(face, i, faces);
            if (isBreak) return;
        }
    } else {
        var isBreak = false;
        for(var name in faces){
            var face = faces[name];
            if (ignoreInvalid && !face) continue;
            if (scope) isBreak = callback.call(scope, face, name, faces);
            else isBreak = callback(face, name, faces);
            if (isBreak) return;
        }
    }
};
exports.default = ForEachFace;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYulX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createPerspectiveObjectJs = require("./CreatePerspectiveObject.js");
var _createPerspectiveObjectJsDefault = parcelHelpers.interopDefault(_createPerspectiveObjectJs);
var CreateFaces = function(scene, config, faceNames) {
    var faces;
    if (faceNames === undefined) {
        faces = [];
        var face, faceConfig;
        for(var i = 0, cnt = config.length; i < cnt; i++){
            faceConfig = config[i];
            if (faceConfig) face = (0, _createPerspectiveObjectJsDefault.default)(scene, faceConfig);
            else face = null;
            faces.push(face);
        }
    } else {
        faces = {};
        var face, name;
        for(var i = 0, cnt = faceNames.length; i < cnt; i++){
            name = faceNames[i];
            if (config.hasOwnProperty(name)) face = (0, _createPerspectiveObjectJsDefault.default)(scene, config[name]);
            else face = null;
            faces[name] = face;
        }
    }
    return faces;
};
exports.default = CreateFaces;

},{"./CreatePerspectiveObject.js":"eS3Qr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eS3Qr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageJs = require("../image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _renderTextureJs = require("../rendertexture/RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const DefaultImageConfig = {
    key: "__WHITE"
};
const ClassMap = {
    image: (0, _imageJsDefault.default),
    rendertexture: (0, _renderTextureJsDefault.default)
};
var CreatePerspectiveObject = function(scene, config) {
    if (config === undefined) config = DefaultImageConfig;
    var perspectiveObject;
    if (IsPlainObject(config)) {
        if (!config.hasOwnProperty("type")) {
            if (config.hasOwnProperty("key")) config.type = "image";
            else if (config.hasOwnProperty("width")) config.type = "rendertexture";
        }
        perspectiveObject = new ClassMap[config.type](scene, config);
        scene.add.existing(perspectiveObject);
    } else perspectiveObject = config;
    return perspectiveObject;
};
exports.default = CreatePerspectiveObject;

},{"../image/Image.js":"datRW","../rendertexture/RenderTexture.js":"4B4v1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"frneP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const DegToRad = Phaser.Math.DegToRad;
const RAD180 = DegToRad(180);
var LayoutFaces = function(parent, faces) {
    var backFace = faces.back;
    if (backFace) {
        if (parent.orientation === 0) backFace.transformVerts(0, 0, 0, 0, RAD180, 0);
        else backFace.transformVerts(0, 0, 0, RAD180, 0, 0);
    }
};
exports.default = LayoutFaces;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01Zwq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
class Flip extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setEase(GetValue(o, "ease", "Cubic"));
        this.setFrontToBackDirection(GetValue(o, "frontToBack", 0));
        this.setBackToFrontDirection(GetValue(o, "backToFront", 1));
        return this;
    }
    setFrontToBackDirection(direction) {
        if (typeof direction === "string") direction = DIRMODE[direction];
        this.endAngleFB = direction === 0 ? 180 : -180;
        return this;
    }
    setBackToFrontDirection(direction) {
        if (typeof direction === "string") direction = DIRMODE[direction];
        this.endAngleBF = direction === 0 ? -180 : 180;
        return this;
    }
    start(duration, repeat) {
        if (this.timer.isRunning) return this;
        this.timer.setDelay(this.delay).setDuration(duration);
        var loop = repeat + 1;
        var gameObject = this.parent;
        if (gameObject.face === 0) {
            this.startAngle = 0;
            this.endAngle = this.endAngleFB * loop;
        } else {
            this.startAngle = this.endAngleBF;
            this.endAngle = this.startAngle - this.endAngleBF * loop;
        }
        super.start();
        return this;
    }
    flip(duration, repeat) {
        if (this.isRunning) return this;
        if (duration === undefined) duration = this.duration;
        if (repeat === undefined) repeat = 0;
        this.start(duration, repeat);
        this.emit("start", this.parent, this);
        // Set face index
        this.parent.currentFaceIndex = (this.parent.currentFaceIndex + repeat + 1) % 2;
        return this;
    }
    flipRight(duration, repeat) {
        if (this.parent.currentFaceIndex === 0) this.setFrontToBackDirection(0);
        else this.setBackToFrontDirection(0);
        this.flip(duration, repeat);
        return this;
    }
    flipLeft(duration, repeat) {
        if (this.parent.currentFaceIndex === 0) this.setFrontToBackDirection(1);
        else this.setBackToFrontDirection(1);
        this.flip(duration, repeat);
        return this;
    }
    updateGameObject(gameObject, timer) {
        var t = this.easeFn(timer.t);
        var value = Linear(this.startAngle, this.endAngle, t);
        if (gameObject.orientation === 0) gameObject.angleY = value;
        else gameObject.angleX = value;
    }
}
const DIRMODE = {
    "right": 0,
    "left-to-right": 0,
    "left": 1,
    "right-to-left": 1
};
exports.default = Flip;

},{"../../../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kKJNV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _faceContainerJs = require("../utils/FaceContainer.js");
var _faceContainerJsDefault = parcelHelpers.interopDefault(_faceContainerJs);
var _rollJs = require("./Roll.js");
var _rollJsDefault = parcelHelpers.interopDefault(_rollJs);
var _createFacesJs = require("../utils/CreateFaces.js");
var _createFacesJsDefault = parcelHelpers.interopDefault(_createFacesJs);
var _forEachFaceJs = require("../utils/ForEachFace.js");
var _forEachFaceJsDefault = parcelHelpers.interopDefault(_forEachFaceJs);
var _getFirstFaceJs = require("./GetFirstFace.js");
var _getFirstFaceJsDefault = parcelHelpers.interopDefault(_getFirstFaceJs);
var _layoutFacesJs = require("./LayoutFaces.js");
var _layoutFacesJsDefault = parcelHelpers.interopDefault(_layoutFacesJs);
var _faceNameToIndexJs = require("./FaceNameToIndex.js");
var _faceNameToIndexJsDefault = parcelHelpers.interopDefault(_faceNameToIndexJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees;
const Linear = Phaser.Math.Linear;
const Wrap = Phaser.Math.Wrap;
class Carousel extends (0, _faceContainerJsDefault.default) {
    constructor(scene, x, y, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
        }
        var faceConfig = GetValue(config, "faces", undefined);
        if (!faceConfig) faceConfig = [];
        var faces = (0, _createFacesJsDefault.default)(scene, faceConfig);
        var firstFace = (0, _getFirstFaceJsDefault.default)(faces);
        var width = GetValue(config, "width");
        var height = GetValue(config, "height");
        if (width === undefined) width = firstFace ? firstFace.width : 0;
        if (height === undefined) height = firstFace ? firstFace.height : 0;
        super(scene, x, y, width, height, faces);
        this.type = "rexPerspectiveCarousel";
        this.face0RotationY = undefined;
        var faceCount = faces.length;
        // Face angle
        this.faceAngle = faceCount > 0 ? DegToRad(360 / faces.length) : 0;
        // Face width, face radius
        var faceWidth = GetValue(config, "faceWidth", undefined);
        if (faceWidth === undefined) {
            var faceSpace = GetValue(config, "faceSpace", 0);
            faceWidth = firstFace ? firstFace.width + faceSpace : 0;
        }
        this.faceWidth = faceWidth;
        if (faceCount > 2) this.faceRadius = faceWidth / 2 / Math.tan(this.faceAngle / 2);
        else this.faceRadius = faceWidth / 2;
        (0, _layoutFacesJsDefault.default)(this, faces);
        var rollConfig = GetValue(config, "roll", undefined);
        if (rollConfig !== false) {
            var RollClass = GetValue(config, "rollClass", (0, _rollJsDefault.default));
            this.roll = new RollClass(this, rollConfig);
        }
        // Left-To-Right, or Right-To-Left
        this.rtl = GetValue(config, "rtl", false);
        // z-index
        this.zStart = GetValue(config, "z", 1);
        this.zEnd = GetValue(config, "zEnd", this.zStart - 1);
        this.setFace(GetValue(config, "face", 0));
    }
    get rotationY() {
        return this.face0RotationY;
    }
    set rotationY(value) {
        if (this.face0RotationY === value) return;
        this.face0RotationY = value;
        var deltaAngle = this.faceAngle;
        var zStart = this.zStart;
        var zEnd = this.zEnd;
        var sign = this.rtl ? -1 : 1;
        (0, _forEachFaceJsDefault.default)(this.faces, function(face, i) {
            // Set rotationY
            var rotationY = value + sign * deltaAngle * i;
            face.rotationY = rotationY;
            // Set depth
            var angle = Math.abs(WrapDegrees(RadToDeg(rotationY))); // 0~180
            var z = Linear(zStart, zEnd, angle / 180);
            face.setDepth(z);
        }, null, true);
    }
    get face() {
        return this.currentFaceIndex;
    }
    set face(index) {
        if (typeof index === "string") {
            index = (0, _faceNameToIndexJsDefault.default)(this.faces, index);
            if (index === -1) index = 0;
        }
        index = Wrap(index, 0, this.faces.length);
        this.currentFaceIndex = index;
        this.rotationY = (this.rtl ? 1 : -1) * this.faceAngle * index;
    }
    setFace(index) {
        this.face = index;
        return this;
    }
}
exports.default = Carousel;

},{"../utils/FaceContainer.js":"lTdVR","./Roll.js":"92Ma5","../utils/CreateFaces.js":"fYulX","../utils/ForEachFace.js":"d7S5Y","./GetFirstFace.js":"gvDjL","./LayoutFaces.js":"eLDK0","./FaceNameToIndex.js":"k8dCu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92Ma5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
var _faceNameToIndexJs = require("./FaceNameToIndex.js");
var _faceNameToIndexJsDefault = parcelHelpers.interopDefault(_faceNameToIndexJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees;
const ShortestBetween = Phaser.Math.Angle.ShortestBetween;
const Wrap = Phaser.Math.Wrap;
const Linear = Phaser.Math.Linear;
class Roll extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setEase(GetValue(o, "ease", "Cubic"));
        return this;
    }
    start(deltaRotation) {
        if (this.timer.isRunning) return this;
        this.timer.setDelay(this.delay).setDuration(this.duration);
        var gameObject = this.parent;
        this.startRotationY = gameObject.rotationY;
        this.endRotationY = this.startRotationY + deltaRotation;
        super.start();
        return this;
    }
    to(index, duration) {
        if (this.isRunning) return this;
        var carousel = this.parent;
        if (typeof index === "string") {
            index = (0, _faceNameToIndexJsDefault.default)(carousel.faces, index);
            if (index === -1) index = 0;
        }
        index = Wrap(index, 0, carousel.faces.length);
        if (duration !== undefined) this.setDuration(duration);
        var start = WrapDegrees(RadToDeg(carousel.rotationY));
        var end = WrapDegrees(RadToDeg((carousel.rtl ? 1 : -1) * carousel.faceAngle * index));
        var delta = ShortestBetween(start, end); // Degrees
        this.start(DegToRad(delta));
        carousel.currentFaceIndex = index;
        return this;
    }
    toNext(duration) {
        var index = this.parent.currentFaceIndex + 1;
        this.to(index, duration);
        return this;
    }
    toPrevious(duration) {
        var index = this.parent.currentFaceIndex - 1;
        this.to(index, duration);
        return this;
    }
    toRight(duration) {
        if (!this.parent.rtl) this.toNext(duration);
        else this.toPrevious(duration);
        return this;
    }
    toLeft(duration) {
        if (!this.parent.rtl) this.toPrevious(duration);
        else this.toNext(duration);
        return this;
    }
    updateGameObject(gameObject, timer) {
        var t = this.easeFn(timer.t);
        gameObject.rotationY = Linear(this.startRotationY, this.endRotationY, t);
    }
}
exports.default = Roll;

},{"../../../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","./FaceNameToIndex.js":"k8dCu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8dCu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var FaceNameToIndex = function(faces, name) {
    for(var i = 0, cnt = faces.length; i < cnt; i++){
        if (face && face.name === name) return i;
    }
    return -1;
};
exports.default = FaceNameToIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gvDjL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetFirstFace = function(faces) {
    var face;
    for(var i = 0, cnt = faces.length; i < cnt; i++){
        face = faces[i];
        if (face) break;
    }
    return face;
};
exports.default = GetFirstFace;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLDK0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _forEachFaceJs = require("../utils/ForEachFace.js");
var _forEachFaceJsDefault = parcelHelpers.interopDefault(_forEachFaceJs);
var LayoutFaces = function(parent, faces) {
    if (parent.faceWidth === 0) return;
    var radius = parent.faceRadius;
    (0, _forEachFaceJsDefault.default)(faces, function(face) {
        var transferZ = radius / face.height;
        face.transformVerts(0, 0, transferZ).panZ(transferZ);
    }, null, true);
};
exports.default = LayoutFaces;

},{"../utils/ForEachFace.js":"d7S5Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJ9hp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _carouselJs = require("../carousel/Carousel.js");
var _carouselJsDefault = parcelHelpers.interopDefault(_carouselJs);
var _rollJs = require("./Roll.js");
var _rollJsDefault = parcelHelpers.interopDefault(_rollJs);
var _renderTextureJs = require("../rendertexture/RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
var _getFaceSizeJs = require("./GetFaceSize.js");
var _getFaceSizeJsDefault = parcelHelpers.interopDefault(_getFaceSizeJs);
var _getIndexOffsetMapJs = require("./GetIndexOffsetMap.js");
var _getIndexOffsetMapJsDefault = parcelHelpers.interopDefault(_getIndexOffsetMapJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const Wrap = Phaser.Math.Wrap;
class ImageCarousel extends (0, _carouselJsDefault.default) {
    constructor(scene, x, y, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
        }
        if (config === undefined) config = {};
        var faceWidth, faceHeight;
        var images = GetValue(config, "images");
        var faceSize = (0, _getFaceSizeJsDefault.default)(scene, images);
        if (faceSize) {
            faceWidth = faceSize.width;
            faceHeight = faceSize.height;
        } else {
            faceWidth = GetValue(config, "width");
            faceHeight = GetValue(config, "height");
        }
        // Create 4 render-texture faces
        var faceCount = GetValue(config, "faceCount", 4);
        var face, faces = [];
        for(var i = 0; i < faceCount; i++){
            face = new (0, _renderTextureJsDefault.default)(scene, 0, 0, faceWidth, faceHeight, config);
            scene.add.existing(face);
            faces.push(face);
        }
        config.faces = faces;
        config.rollClass = (0, _rollJsDefault.default);
        super(scene, x, y, config);
        this.type = "rexPerspectiveImageCarousel";
        this.images = images;
        this.indexOffsetMap = (0, _getIndexOffsetMapJsDefault.default)(faceCount);
        this.repeat = GetValue(config, "repeat", true);
        this.setImageIndex(GetValue(config, "index", 0)).updateTexture();
    }
    setImageIndex(index) {
        this.currentImageIndex = Wrap(index, 0, this.images.length);
        return this;
    }
    get isFirstImage() {
        return this.images.length === 0 || this.currentImageIndex === 0;
    }
    get isLastImage() {
        return this.images.length === 0 || this.currentImageIndex === this.images.length - 1;
    }
    updateTexture() {
        var totalKeys = this.images.length;
        var totalFaces = this.faces.length;
        this.indexOffsetMap.forEach(function(indexOffset) {
            var textureIndex = Wrap(this.currentImageIndex + indexOffset, 0, totalKeys);
            var faceIndex = Wrap(this.currentFaceIndex + indexOffset, 0, totalFaces);
            var textureKey = this.images[textureIndex];
            this.faces[faceIndex].rt.drawFrame(textureKey.key, textureKey.frame);
        }, this);
        return this;
    }
}
exports.default = ImageCarousel;

},{"../carousel/Carousel.js":"kKJNV","./Roll.js":"ilXCo","../rendertexture/RenderTexture.js":"4B4v1","./GetFaceSize.js":"5Gk0r","./GetIndexOffsetMap.js":"e476f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ilXCo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rollJs = require("../carousel/Roll.js");
var _rollJsDefault = parcelHelpers.interopDefault(_rollJs);
class Roll extends (0, _rollJsDefault.default) {
    toNext(duration) {
        var gameObject = this.parent;
        if (!gameObject.repeat && gameObject.isLastImage) return this;
        if (this.isRunning) return this;
        gameObject.setImageIndex(gameObject.currentImageIndex + 1);
        super.toNext(duration).once("complete", gameObject.updateTexture, gameObject);
        return this;
    }
    toPrevious(duration) {
        var gameObject = this.parent;
        if (!gameObject.repeat && gameObject.isFirstImage) return this;
        if (this.isRunning) return this;
        gameObject.setImageIndex(gameObject.currentImageIndex - 1);
        super.toPrevious(duration).once("complete", gameObject.updateTexture, gameObject);
        return this;
    }
}
exports.default = Roll;

},{"../carousel/Roll.js":"92Ma5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Gk0r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetFaceSize = function(scene, images) {
    if (!images) return null;
    if (Array.isArray(images)) {
        var textureKey = images[0];
        var frame = scene.sys.textures.getFrame(textureKey.key, textureKey.frame);
        result.width = frame.cutWidth;
        result.height = frame.cutHeight;
    } else {
        result.width = images.width;
        result.height = images.height;
    }
    return result;
};
var result = {};
exports.default = GetFaceSize;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e476f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetIndexOffsetMap = function(faceCount) {
    var indexOffsetMap = [
        0
    ];
    for(var i = 1, cnt = Math.floor((faceCount - 1) / 2); i <= cnt; i++){
        indexOffsetMap.push(i);
        indexOffsetMap.push(-i);
    }
    return indexOffsetMap;
};
exports.default = GetIndexOffsetMap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iuk5B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _meshRenderTextureBaseJs = require("../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js");
var _meshRenderTextureBaseJsDefault = parcelHelpers.interopDefault(_meshRenderTextureBaseJs);
var _renderTextureJs = require("../../gameobjects/mesh/perspective/rendertexture/RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
class ContainerPerspective extends (0, _meshRenderTextureBaseJsDefault.default)((0, _renderTextureJsDefault.default)) {
    get perspectiveState() {
        return this.isRunning;
    }
}
exports.default = ContainerPerspective;

},{"../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js":"lWkXU","../../gameobjects/mesh/perspective/rendertexture/RenderTexture.js":"4B4v1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWkXU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _initJs = require("./Init.js");
var _initJsDefault = parcelHelpers.interopDefault(_initJs);
var _enterJs = require("./Enter.js");
var _enterJsDefault = parcelHelpers.interopDefault(_enterJs);
var _exitJs = require("./Exit.js");
var _exitJsDefault = parcelHelpers.interopDefault(_exitJs);
var MeshRenderTextureBase = function(RenderTextureOwnerClass) {
    return class Base extends RenderTextureOwnerClass {
        constructor(parentContainer, config){
            var scene = parentContainer.scene;
            super(scene, 0, 0, 1, 1, config);
            scene.add.existing(this);
            (0, _initJsDefault.default)(parentContainer, this, config);
        }
        destroy(fromScene) {
            if (!this.scene || this.ignoreDestroy) return;
            this.exit();
            super.destroy(fromScene);
        }
        enter() {
            var result = (0, _enterJsDefault.default)(this.rexContainer.parent, this);
            if (result) this.syncSize();
            return this;
        }
        exit() {
            (0, _exitJsDefault.default)(this.rexContainer.parent, this);
            return this;
        }
    };
};
exports.default = MeshRenderTextureBase;

},{"./Init.js":"7ZqGX","./Enter.js":"6mrvb","./Exit.js":"cwW61","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ZqGX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const GetValue = Phaser.Utils.Objects.GetValue;
var Init = function(parentContainer, rtOwner, config) {
    rtOwner.visibleSibling = [];
    rtOwner.isRunning = false;
    rtOwner.useParentBounds = GetValue(config, "useParentBounds", false);
    rtOwner.setPosition(parentContainer.x, parentContainer.y).setVisible(false);
    parentContainer.pin(rtOwner);
};
exports.default = Init;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mrvb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _exitJs = require("./Exit.js");
var _exitJsDefault = parcelHelpers.interopDefault(_exitJs);
var _snapshotJs = require("../../../../utils/rendertexture/Snapshot.js");
var _snapshotJsDefault = parcelHelpers.interopDefault(_snapshotJs);
var Enter = function(parentContainer, rtOwner) {
    if (!parentContainer) return false;
    (0, _exitJsDefault.default)(parentContainer, rtOwner);
    // Get and paste all visible children, which dose not include this render texture
    var useParentBounds = rtOwner.useParentBounds;
    (0, _snapshotJsDefault.default)({
        gameObjects: parentContainer.getAllVisibleChildren(),
        renderTexture: rtOwner.rt,
        x: rtOwner.x,
        y: rtOwner.y,
        width: useParentBounds ? parentContainer.displayWidth : undefined,
        height: useParentBounds ? parentContainer.displayHeighth : undefined,
        originX: useParentBounds ? parentContainer.originX : undefined,
        originY: useParentBounds ? parentContainer.originY : undefined
    });
    // Set rtOwner to be visible
    parentContainer.setChildVisible(rtOwner, true);
    // Set visible sibling to be invisible
    var visibleSibling = rtOwner.visibleSibling;
    var children = parentContainer.children;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.visible && child !== rtOwner) {
            parentContainer.setChildVisible(child, false);
            visibleSibling.push(child);
        }
    }
    rtOwner.isRunning = true;
    return true;
};
exports.default = Enter;

},{"./Exit.js":"cwW61","../../../../utils/rendertexture/Snapshot.js":"fjgt2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwW61":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Exit = function(parentContainer, rtOwner) {
    if (!parentContainer) return false;
    var visibleSibling = rtOwner.visibleSibling;
    // Set all visible children back
    for(var i = 0, cnt = visibleSibling.length; i < cnt; i++)parentContainer.setChildVisible(visibleSibling[i], true);
    visibleSibling.length = 0;
    // Set rtOwner to be invisible
    parentContainer.setChildVisible(rtOwner, false);
    rtOwner.isRunning = false;
    return true;
};
exports.default = Exit;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2IeAM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const FaceIndexMap = [
    "front",
    "back"
];
exports.default = {
    enterPerspectiveMode () {
        if (this.isInPerspectiveMode) return this;
        // Set card's visible to true
        this.setChildVisible(this.perspectiveCard, true);
        // Snapshot front and back children to card's faces
        this.snapshotFace(0);
        this.snapshotFace(1);
        // Set front and back children's visible to false
        this.setChildVisible(this.childrenMap.front, false);
        this.setChildVisible(this.childrenMap.back, false);
        // Reset size of card
        this.perspectiveCard.setSize(this.width, this.height);
        return this;
    },
    exitPerspectiveMode () {
        if (!this.isInPerspectiveMode) return this;
        // Set card's visible to false
        this.setChildVisible(this.perspectiveCard, false);
        // Set front or back children's visible to true, according to card's face
        var isFrontFace = this.perspectiveCard.face === 0;
        this.setChildVisible(this.childrenMap.front, isFrontFace);
        this.setChildVisible(this.childrenMap.back, !isFrontFace);
        return this;
    },
    setSnapshotPadding (padding) {
        this.snapshotPadding = padding;
        return this;
    },
    snapshotFace (face) {
        if (typeof face === "number") face = FaceIndexMap[face];
        var cardFace = this.perspectiveCard.faces[face];
        var faceChild = this.childrenMap[face];
        cardFace.rt.clear();
        var faceChildVisibleSave = faceChild.visible;
        faceChild.visible = true;
        var gameObjects = faceChild.isRexContainerLite ? faceChild.getAllVisibleChildren() : faceChild;
        cardFace.snapshot(gameObjects, {
            padding: this.snapshotPadding
        });
        faceChild.visible = faceChildVisibleSave;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZj4O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tabPagesJs = require("./TabPages.js");
var _tabPagesJsDefault = parcelHelpers.interopDefault(_tabPagesJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("tabPages", function(config) {
    var gameObject = new (0, _tabPagesJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TabPages", (0, _tabPagesJsDefault.default));
exports.default = (0, _tabPagesJsDefault.default);

},{"./TabPages.js":"1IThi","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1IThi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _buttonsJs = require("../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var _fixWidthButtonsJs = require("../fixwidthbuttons/FixWidthButtons.js");
var _fixWidthButtonsJsDefault = parcelHelpers.interopDefault(_fixWidthButtonsJs);
var _pagesJs = require("../pages/Pages.js");
var _pagesJsDefault = parcelHelpers.interopDefault(_pagesJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const SizerAdd = (0, _sizerJsDefault.default).prototype.add;
class TabPages extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        var tabsPosition = GetValue(config, "tabPosition", "top");
        var sizerOrientation = tabsPosition === "left" || tabsPosition === "right" ? "x" : "y";
        config.orientation = sizerOrientation;
        super(scene, config);
        this.type = "rexTabPages";
        // Add elements
        var background = GetValue(config, "background", undefined);
        if (background) this.addBackground(background);
        var pagesConfig = GetValue(config, "pages");
        var pages = new (0, _pagesJsDefault.default)(scene, pagesConfig);
        scene.add.existing(pages);
        var isHorizontalTabs = sizerOrientation === "y";
        var wrapTabs = isHorizontalTabs ? GetValue(config, "wrapTabs", false) : false;
        var tabsConfig = GetValue(config, "tabs", undefined);
        if (tabsConfig === undefined) tabsConfig = {};
        var ButtonsClass = wrapTabs ? (0, _fixWidthButtonsJsDefault.default) : (0, _buttonsJsDefault.default);
        tabsConfig.orientation = isHorizontalTabs ? "x" : "y";
        tabsConfig.buttonsType = "radio";
        var tabs = new ButtonsClass(scene, tabsConfig);
        scene.add.existing(tabs);
        var tabsExpand = wrapTabs ? true : GetValue(config, "expand.tabs", false);
        var tabAlign = GetValue(config, "align.tabs", "left");
        switch(tabsPosition){
            case "top":
            case "left":
                SizerAdd.call(this, tabs, {
                    proportion: 0,
                    expand: tabsExpand,
                    align: tabAlign
                });
                SizerAdd.call(this, pages, {
                    proportion: 1,
                    expand: true
                });
                break;
            case "bottom":
            case "right":
                SizerAdd.call(this, pages, {
                    proportion: 1,
                    expand: true
                });
                SizerAdd.call(this, tabs, {
                    proportion: 0,
                    expand: tabsExpand,
                    align: tabAlign
                });
                break;
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("tabs", tabs);
        this.addChildrenMap("pages", pages);
        // Register events
        tabs.on("button.click", function(tab) {
            var key = tab.name;
            if (pages.hasPage(key)) pages.swapPage(key);
        });
        tabs.on("button.statechange", function(tab, index, value, previousValue) {
            var eventName = value ? "tab.focus" : "tab.blur";
            this.emit(eventName, tab, tab.name);
        }, this);
        pages.on("pagevisible", function(pageObject, key, pages) {
            this.emit("page.focus", pageObject, key);
        });
        pages.on("pageinvisible", function(pageObject, key, pages) {
            this.emit("page.blur", pageObject, key);
        });
    }
    get currentKey() {
        return this.getElement("pages").currentKey;
    }
    set currentKey(key) {
        this.showPage(key);
    }
    get keys() {
        return this.getElement("pages").keys;
    }
    get currentPage() {
        return this.getElement("pages").currentPage;
    }
    get previousPage() {
        return this.getElement("pages").previousPage;
    }
}
Object.assign(TabPages.prototype, (0, _methodsJsDefault.default));
exports.default = TabPages;

},{"../sizer/Sizer.js":"ayu5S","../buttons/Buttons.js":"9NfMe","../fixwidthbuttons/FixWidthButtons.js":"f4zsx","../pages/Pages.js":"jG08b","./methods/Methods.js":"hM2Lr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hM2Lr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getPageKeyByIndexJs = require("./GetPageKeyByIndex.js");
var _getPageKeyByIndexJsDefault = parcelHelpers.interopDefault(_getPageKeyByIndexJs);
var _getPageIndexByKeyJs = require("./GetPageIndexByKey.js");
var _getPageIndexByKeyJsDefault = parcelHelpers.interopDefault(_getPageIndexByKeyJs);
var _addPageJs = require("./AddPage.js");
var _addPageJsDefault = parcelHelpers.interopDefault(_addPageJs);
var _swapPageMethodsJs = require("./SwapPageMethods.js");
var _swapPageMethodsJsDefault = parcelHelpers.interopDefault(_swapPageMethodsJs);
var _removePageMethodsJs = require("./RemovePageMethods.js");
var _removePageMethodsJsDefault = parcelHelpers.interopDefault(_removePageMethodsJs);
var _getPageJs = require("./GetPage.js");
var _getPageJsDefault = parcelHelpers.interopDefault(_getPageJs);
var _getTabJs = require("./GetTab.js");
var _getTabJsDefault = parcelHelpers.interopDefault(_getTabJs);
var methods = {
    getPageKey: (0, _getPageKeyByIndexJsDefault.default),
    getPageIndex: (0, _getPageIndexByKeyJsDefault.default),
    addPage: (0, _addPageJsDefault.default),
    getPage: (0, _getPageJsDefault.default),
    getTab: (0, _getTabJsDefault.default)
};
Object.assign(methods, (0, _swapPageMethodsJsDefault.default), (0, _removePageMethodsJsDefault.default));
exports.default = methods;

},{"./GetPageKeyByIndex.js":"irRNW","./GetPageIndexByKey.js":"jDKNn","./AddPage.js":"5XKDe","./SwapPageMethods.js":"bNKDk","./RemovePageMethods.js":"hFhIl","./GetPage.js":"8T3HB","./GetTab.js":"iHmh8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"irRNW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPageKeyByIndex = function(index) {
    var buttons = this.getElement("tabs.buttons");
    if (index >= buttons.length) return undefined;
    return buttons[index].name;
};
exports.default = GetPageKeyByIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDKNn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPageIndexByKey = function(key) {
    var buttons = this.getElement("tabs.buttons");
    for(var i = 0, cnt = buttons.length; i < cnt; i++){
        if (buttons[i].name === key) return i;
    }
    return undefined;
};
exports.default = GetPageIndexByKey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XKDe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const UUID = Phaser.Utils.String.UUID;
var AddPage = function(key, tabGameObject, pageGameObject) {
    if (IsPlainObject(key)) {
        var config = key;
        key = GetValue(config, "key");
        tabGameObject = GetValue(config, "tab");
        pageGameObject = GetValue(config, "page");
    }
    if (!key) key = UUID();
    tabGameObject.name = key; // For ratio buttons
    this.childrenMap.tabs.addButton(tabGameObject);
    this.childrenMap.pages.addPage(pageGameObject, {
        key: key
    });
    return this;
};
exports.default = AddPage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bNKDk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SwapPage = function(key, fadeInDuration) {
    var index;
    if (typeof key === "number") index = key;
    else index = this.getPageIndex(key);
    if (index != null) {
        // Override fadeInDuration
        var fadeInDurationSave;
        if (fadeInDuration !== undefined) {
            fadeInDurationSave = this.childrenMap.pages.fadeInDuration;
            this.childrenMap.pages.fadeInDuration = fadeInDuration;
        }
        this.childrenMap.tabs.emitButtonClick(index);
        // Restore fadeInDuration
        if (fadeInDurationSave !== undefined) this.childrenMap.pages.fadeInDuration = fadeInDurationSave;
    }
    return this;
};
var SwapFirstPage = function(fadeInDuration) {
    this.swapPage(0, fadeInDuration);
    return this;
};
var SwapLastPage = function(fadeInDuration) {
    var index = this.getElement("tabs.buttons").length - 1;
    this.swapPage(index, fadeInDuration);
    return this;
};
exports.default = {
    swapPage: SwapPage,
    swapFirstPage: SwapFirstPage,
    swapLastPage: SwapLastPage
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hFhIl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var RemovePage = function(key, destroyChild) {
    if (typeof key === "number") key = this.getPageKey(key);
    var tabs = this.childrenMap.tabs;
    var tabGameObject = tabs.getByName(key);
    var pages = this.childrenMap.pages;
    var pageGameObject = pages.getElement(key);
    if (!tabGameObject || !pageGameObject) return this;
    pages.removeChildrenMap(key);
    tabs.removeButton(tabGameObject, destroyChild);
    pages.remove(pageGameObject, destroyChild);
    return this;
};
exports.default = {
    removePage: RemovePage
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8T3HB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPage = function(key) {
    if (typeof key === "number") key = this.getPageKey(key);
    return this.childrenMap.pages.getPage(key);
};
exports.default = GetPage;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iHmh8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetTab = function(key) {
    var index;
    if (typeof key === "number") index = key;
    else index = this.getPageIndex(key);
    return this.getElement("tabs.buttons")[index];
};
exports.default = GetTab;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79rp9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _folderJs = require("./Folder.js");
var _folderJsDefault = parcelHelpers.interopDefault(_folderJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("folder", function(config) {
    var gameObject = new (0, _folderJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Folder", (0, _folderJsDefault.default));
exports.default = (0, _folderJsDefault.default);

},{"./Folder.js":"79II6","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"79II6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizer = require("../sizer/Sizer");
var _sizerDefault = parcelHelpers.interopDefault(_sizer);
var _childTransitionJs = require("./methods/ChildTransition.js");
var _childTransitionJsDefault = parcelHelpers.interopDefault(_childTransitionJs);
var _expandMethodsJs = require("./methods/ExpandMethods.js");
var _expandMethodsJsDefault = parcelHelpers.interopDefault(_expandMethodsJs);
var _clickMethods = require("../basesizer/ClickMethods");
var _clickMethodsDefault = parcelHelpers.interopDefault(_clickMethods);
var _configurationMethodsJs = require("./methods/ConfigurationMethods.js");
var _configurationMethodsJsDefault = parcelHelpers.interopDefault(_configurationMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Folder extends (0, _sizerDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        if (!config.hasOwnProperty("orientation")) config.orientation = 1;
        super(scene, config);
        this.type = "rexFolder";
        this.expanded = undefined;
        this.expandDirection = this.orientation === 1 ? "y" : "x";
        var background = config.background;
        var title = config.title;
        var child = config.child;
        // background
        if (background) this.addBackground(background);
        // title
        var defaultAlign = this.orientation === 1 ? "left" : "top";
        var align = GetValue(config, "align.title", defaultAlign);
        var expand = GetValue(config, "expand.title", true);
        this.add(title, {
            proportion: 0,
            align: align,
            expand: expand
        });
        var toggleByTarget = GetValue(config, "toggleByTarget", undefined);
        var toggleClickConfig = GetValue(config, "toggleClickConfig");
        if (toggleByTarget === undefined) toggleByTarget = title;
        if (toggleByTarget) (0, _clickMethodsDefault.default).onClick.call(toggleByTarget, function() {
            this.toggle();
        }, this, toggleClickConfig);
        // child
        this.childTransition = new (0, _childTransitionJsDefault.default)(child);
        var customOrigin = GetValue(config, "customChildOrigin", false);
        if (!customOrigin) {
            var origin = !this.rtl ? 0 : 1;
            child.setOrigin(origin);
        }
        var align = GetValue(config, "align.child", "left");
        var expand = GetValue(config, "expand.child", true);
        var proportion = expand ? 1 : 0;
        this.add(child, {
            proportion: proportion,
            align: align,
            expand: expand
        });
        this.addChildrenMap("title", title);
        this.addChildrenMap("child", child);
        this.addChildrenMap("background", background);
        var transitionConfig = config.transition;
        this.setTransitionDuration(GetValue(transitionConfig, "duration", 200));
        this.setExpandCallback(GetValue(transitionConfig, "expandCallback", undefined));
        this.setCollapseCallback(GetValue(transitionConfig, "collapseCallback", undefined));
        this.reLayoutTarget = GetValue(config, "reLayoutTarget", undefined);
        var onExpandStart = config.onExpandStart;
        if (onExpandStart) this.on("expand.start", onExpandStart);
        var onExpandComplete = config.onExpandComplete;
        if (onExpandComplete) this.on("expand.complete", onExpandComplete);
        var onCollapseStart = config.onCollapseStart;
        if (onCollapseStart) this.on("collapse.start", onCollapseStart);
        var onCollapseComplete = config.onCollapseComplete;
        if (onCollapseComplete) this.on("collapse.complete", onCollapseComplete);
    }
}
Object.assign(Folder.prototype, (0, _expandMethodsJsDefault.default), (0, _configurationMethodsJsDefault.default));
exports.default = Folder;

},{"../sizer/Sizer":"ayu5S","./methods/ChildTransition.js":"7Whhk","./methods/ExpandMethods.js":"6y5Kh","../basesizer/ClickMethods":"jSQAy","./methods/ConfigurationMethods.js":"91klm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Whhk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _openCloseTransitionJs = require("../../../../plugins/behaviors/openclosetransition/OpenCloseTransition.js");
var _openCloseTransitionJsDefault = parcelHelpers.interopDefault(_openCloseTransitionJs);
class Transition extends (0, _openCloseTransitionJsDefault.default) {
    constructor(gameObject, config){
        if (config === undefined) config = {};
        config.destroy = false;
        super(gameObject, config);
    }
    onOpen() {
        this.emit("open", this.parent, this);
        super.onOpen();
    }
    onClose() {
        this.emit("close", this.parent, this);
        super.onClose();
    }
}
exports.default = Transition;

},{"../../../../plugins/behaviors/openclosetransition/OpenCloseTransition.js":"iLdcA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6y5Kh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    expand (duration) {
        if (this.expanded === true) return this;
        if (duration === undefined) duration = this.transitionDuration;
        this.expanded = true;
        var title = this.childrenMap.title;
        var child = this.childrenMap.child;
        this.show(child);
        var layoutTarget = this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer();
        layoutTarget.layout();
        title.emit("folder.expand", duration, this);
        child.emit("folder.expand", duration, this);
        this.emit("expand.start", this);
        this.childTransition.once("open", function() {
            this.emit("expand.complete", this);
        }, this).requestOpen(null, duration);
        return this;
    },
    collapse (duration) {
        if (this.expanded === false) return this;
        if (duration === undefined) duration = this.transitionDuration;
        this.expanded = false;
        var title = this.childrenMap.title;
        var child = this.childrenMap.child;
        title.emit("folder.collapse", duration, this);
        child.emit("folder.collapse", duration, this);
        this.emit("collapse.start", this);
        this.childTransition.once("close", function() {
            this.setChildScale(child, 1, 1).hide(child);
            var layoutTarget = this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer();
            layoutTarget.layout();
            this.emit("collapse.complete", this);
        }, this).requestClose(null, duration);
        return this;
    },
    toggle (duration) {
        if (this.expanded) this.collapse(duration);
        else this.expand(duration);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"91klm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scaleMethodsJs = require("../../basesizer/ScaleMethods.js");
var _scaleMethodsJsDefault = parcelHelpers.interopDefault(_scaleMethodsJs);
var DefaultExpandCallback = function(gameObject, duration) {
    (0, _scaleMethodsJsDefault.default).popUp.call(gameObject, duration, this.expandDirection);
};
var DefaultCollapseCallback = function(gameObject, duration) {
    (0, _scaleMethodsJsDefault.default).scaleDown.call(gameObject, duration, this.expandDirection);
};
exports.default = {
    setTransitionDuration (duration) {
        this.transitionDuration = duration;
        this.childTransition.setTransitInTime(duration).setTransitOutTime(duration);
        return this;
    },
    setExpandCallback (callback) {
        if (callback === undefined) callback = DefaultExpandCallback.bind(this);
        this.childTransition.setTransitInCallback(callback);
        return this;
    },
    setCollapseCallback (callback) {
        if (callback === undefined) callback = DefaultCollapseCallback.bind(this);
        this.childTransition.setTransitOutCallback(callback);
        return this;
    }
};

},{"../../basesizer/ScaleMethods.js":"8iY6L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sp8c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textAreaJs = require("./TextArea.js");
var _textAreaJsDefault = parcelHelpers.interopDefault(_textAreaJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textArea", function(config) {
    var gameObject = new (0, _textAreaJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextArea", (0, _textAreaJsDefault.default));
exports.default = (0, _textAreaJsDefault.default);

},{"./TextArea.js":"hHstl","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i876g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollablePanelJs = require("./ScrollablePanel.js");
var _scrollablePanelJsDefault = parcelHelpers.interopDefault(_scrollablePanelJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("scrollablePanel", function(config) {
    var gameObject = new (0, _scrollablePanelJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ScrollablePanel", (0, _scrollablePanelJsDefault.default));
exports.default = (0, _scrollablePanelJsDefault.default);

},{"./ScrollablePanel.js":"h73II","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h73II":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _scrollableJs = require("../utils/scrollable/Scrollable.js");
var _scrollableJsDefault = parcelHelpers.interopDefault(_scrollableJs);
var _getScrollModeJs = require("../utils/GetScrollMode.js");
var _getScrollModeJsDefault = parcelHelpers.interopDefault(_getScrollModeJs);
var _scrollableBlockJs = require("./scrollableblock/ScrollableBlock.js");
var _scrollableBlockJsDefault = parcelHelpers.interopDefault(_scrollableBlockJs);
var _setChildrenInteractiveJs = require("../utils/setchildreninteractive/SetChildrenInteractive.js");
var _setChildrenInteractiveJsDefault = parcelHelpers.interopDefault(_setChildrenInteractiveJs);
var _scrollToChildJs = require("./ScrollToChild.js");
var _scrollToChildJsDefault = parcelHelpers.interopDefault(_scrollToChildJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ScrollablePanel extends (0, _scrollableJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        // Create scrollable-block
        var scrollMode = (0, _getScrollModeJsDefault.default)(config);
        var panelConfig = GetValue(config, "panel", undefined);
        if (panelConfig === undefined) panelConfig = {};
        panelConfig.scrollMode = scrollMode;
        panelConfig.clamplChildOY = GetValue(config, "clamplChildOY", false);
        var scrollableBlock = new (0, _scrollableBlockJsDefault.default)(scene, panelConfig);
        scene.add.existing(scrollableBlock); // Important: Add to display list for touch detecting
        var panelWidth = GetValue(panelConfig, "width", undefined);
        var panelHeight = GetValue(panelConfig, "height", undefined);
        var proportion, expand;
        if (scrollMode === 0) {
            proportion = panelWidth === undefined ? 1 : 0;
            expand = panelHeight === undefined;
        } else {
            proportion = panelHeight === undefined ? 1 : 0;
            expand = panelWidth === undefined;
        }
        // Fill config of scrollable
        config.type = "rexScrollablePanel";
        config.child = {
            gameObject: scrollableBlock,
            proportion: proportion,
            expand: expand
        };
        var spaceConfig = GetValue(config, "space", undefined);
        if (spaceConfig) spaceConfig.child = spaceConfig.panel;
        super(scene, config);
        this.addChildrenMap("panel", scrollableBlock.child);
        this.addChildrenMap("panelLayer", scrollableBlock.maskLayer);
        this.addChildrenMap("mask", scrollableBlock.maskGameObject);
    }
    setChildrenInteractive(config) {
        if (config === undefined) config = {};
        if (!config.hasOwnProperty("eventEmitter")) config.eventEmitter = this;
        if (!config.hasOwnProperty("targets")) config.targets = [
            this.childrenMap.panel
        ];
        (0, _setChildrenInteractiveJsDefault.default)(this.childrenMap.child, config);
        return this;
    }
}
var methods = {
    scrollToChild: (0, _scrollToChildJsDefault.default)
};
Object.assign(ScrollablePanel.prototype, methods);
exports.default = ScrollablePanel;

},{"../utils/scrollable/Scrollable.js":"aMQwE","../utils/GetScrollMode.js":"jRQgz","./scrollableblock/ScrollableBlock.js":"2eKLU","../utils/setchildreninteractive/SetChildrenInteractive.js":"1E3PM","./ScrollToChild.js":"jOsKp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2eKLU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _baseSizerJs = require("../../basesizer/BaseSizer.js");
var _baseSizerJsDefault = parcelHelpers.interopDefault(_baseSizerJs);
var _methodsJs = require("./Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _scrollModeConstJs = require("../../utils/ScrollModeConst.js");
var _scrollModeConstJsDefault = parcelHelpers.interopDefault(_scrollModeConstJs);
var _getDisplaySizeJs = require("../../../../plugins/utils/size/GetDisplaySize.js");
var _maskToGameObjectJs = require("../../../../plugins/utils/mask/MaskToGameObject.js");
var _maskToGameObjectJsDefault = parcelHelpers.interopDefault(_maskToGameObjectJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;
class ScrollableBlock extends (0, _baseSizerJsDefault.default) {
    constructor(scene, x, y, minWidth, minHeight, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, "width", undefined);
            minHeight = GetValue(config, "height", undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);
        this.type = "rexScrollableBlock";
        this.child = undefined;
        this.childrenMask = undefined;
        this._childOY = 0;
        this.execeedTopState = false;
        this.execeedBottomState = false;
        this.setScrollMode(GetValue(config, "scrollMode", true));
        this.setClampMode(GetValue(config, "clamplChildOY", true));
        // Add elements
        // No background object, and child does not have padding
        var child = GetValue(config, "child", undefined);
        var expand = GetValue(config, "expand", true);
        if (child.setOrigin) child.setOrigin(0);
        this.add(child);
        this.sizerChildren = [
            child
        ];
        var sizerConfig = this.getSizerConfig(child);
        sizerConfig.align = ALIGN_LEFTTOP;
        sizerConfig.expand = expand;
        this.child = child;
        // Create mask of child object
        this.setupChildrenMask(GetValue(config, "mask", undefined));
        this.maskGameObject = (0, _maskToGameObjectJsDefault.default)(this.childrenMask);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.destroyChildrenMask();
        this.child = undefined;
        super.destroy(fromScene);
    }
    setScrollMode(mode) {
        if (typeof mode === "string") mode = (0, _scrollModeConstJsDefault.default)[mode.toLowerCase()];
        this.scrollMode = mode;
        return this;
    }
    setClampMode(mode) {
        if (mode === undefined) mode = true;
        this.clampChildOY = mode;
        return this;
    }
    get instHeight() {
        return this.scrollMode === 0 ? this.height : this.width;
    }
    get instWidth() {
        return this.scrollMode === 0 ? this.width : this.height;
    }
    get childHeight() {
        return this.scrollMode === 0 ? (0, _getDisplaySizeJs.GetDisplayHeight)(this.child) : (0, _getDisplaySizeJs.GetDisplayWidth)(this.child);
    }
    get childWidth() {
        return this.scrollMode === 0 ? (0, _getDisplaySizeJs.GetDisplayWidth)(this.child) : (0, _getDisplaySizeJs.GetDisplayHeight)(this.child);
    }
    get topChildOY() {
        return 0;
    }
    get bottomChildOY() {
        return -this.visibleHeight;
    }
    get childVisibleHeight() {
        return this.instHeight;
    }
    get visibleHeight() {
        var h = this.childHeight - this.childVisibleHeight;
        if (h < 0) h = 0;
        return h;
    }
    childOYExceedTop(oy) {
        if (oy === undefined) oy = this.childOY;
        return oy > this.topChildOY;
    }
    childOYExeceedBottom(oy) {
        if (oy === undefined) oy = this.childOY;
        return oy < this.bottomChildOY;
    }
    get childOY() {
        return this._childOY;
    }
    set childOY(oy) {
        var topChildOY = this.topChildOY;
        var bottomChildOY = this.bottomChildOY;
        var childOYExceedTop = this.childOYExceedTop(oy);
        var childOYExeceedBottom = this.childOYExeceedBottom(oy);
        if (this.clampChildOY) {
            if (this.childVisibleHeight > this.childHeight) oy = 0;
            else if (childOYExceedTop) oy = topChildOY;
            else if (childOYExeceedBottom) oy = bottomChildOY;
        }
        if (this._childOY !== oy) {
            this._childOY = oy;
            this.resetChildPosition();
        }
        if (childOYExceedTop) {
            if (!this.execeedTopState) this.emit("execeedtop", this, oy, topChildOY);
        }
        this.execeedTopState = childOYExceedTop;
        if (childOYExeceedBottom) {
            if (!this.execeedBottomState) this.emit("execeedbottom", this, oy, bottomChildOY);
        }
        this.execeedBottomState = childOYExeceedBottom;
    }
    setChildOY(oy) {
        this.childOY = oy;
        return this;
    }
    set t(value) {
        this.childOY = -this.visibleHeight * value;
    }
    get t() {
        var visibleHeight = this.visibleHeight;
        if (visibleHeight === 0) return 0;
        return this.childOY / -visibleHeight;
    }
    setChildOYByPercentage(percentage) {
        this.t = percentage;
        return this;
    }
}
Object.assign(ScrollableBlock.prototype, (0, _methodsJsDefault.default));
exports.default = ScrollableBlock;

},{"../../basesizer/BaseSizer.js":"lHNI2","./Methods.js":"bTf0B","../../utils/ScrollModeConst.js":"llsRq","../../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","../../../../plugins/utils/mask/MaskToGameObject.js":"9MMv6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bTf0B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getChildrenWidthJs = require("./GetChildrenWidth.js");
var _getChildrenWidthJsDefault = parcelHelpers.interopDefault(_getChildrenWidthJs);
var _getChildrenHeightJs = require("./GetChildrenHeight.js");
var _getChildrenHeightJsDefault = parcelHelpers.interopDefault(_getChildrenHeightJs);
var _getChildrenSizersJs = require("./GetChildrenSizers.js");
var _getChildrenSizersJsDefault = parcelHelpers.interopDefault(_getChildrenSizersJs);
var _resetChildPositionJs = require("./ResetChildPosition.js");
var _resetChildPositionJsDefault = parcelHelpers.interopDefault(_resetChildPositionJs);
var _layoutChildrenJs = require("./LayoutChildren.js");
var _layoutChildrenJsDefault = parcelHelpers.interopDefault(_layoutChildrenJs);
var _childrenMaskMethodsJs = require("../../../../plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js");
var _childrenMaskMethodsJsDefault = parcelHelpers.interopDefault(_childrenMaskMethodsJs);
var methods = {
    getChildrenWidth: (0, _getChildrenWidthJsDefault.default),
    getChildrenHeight: (0, _getChildrenHeightJsDefault.default),
    getChildrenSizers: (0, _getChildrenSizersJsDefault.default),
    resetChildPosition: (0, _resetChildPositionJsDefault.default),
    layoutChildren: (0, _layoutChildrenJsDefault.default)
};
Object.assign(methods, (0, _childrenMaskMethodsJsDefault.default));
exports.default = methods;

},{"./GetChildrenWidth.js":"3fC5v","./GetChildrenHeight.js":"7yWc9","./GetChildrenSizers.js":"GhjqK","./ResetChildPosition.js":"01Mv0","./LayoutChildren.js":"1pF7e","../../../../plugins/gameobjects/container/containerlite/mask/ChildrenMaskMethods.js":"4OA0c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fC5v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenWidth = function() {
    if (this.rexSizer.hidden) return 0;
    var result;
    var child = this.child, childConfig = child.rexSizer;
    if (childConfig.hidden) result = 0;
    else if (this.scrollMode === 0) result = this.getChildWidth(child);
    else result = 0;
    return result;
};
exports.default = GetChildrenWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7yWc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getDisplaySizeJs = require("../../../../plugins/utils/size/GetDisplaySize.js");
var GetChildrenHeight = function() {
    if (this.rexSizer.hidden) return 0;
    var result;
    var child = this.child, childConfig = child.rexSizer;
    if (childConfig.hidden) result = 0;
    else if (this.scrollMode === 0) result = 0;
    else result = child.isRexSizer ? Math.max(child.minHeight, child.childrenHeight) : child.hasOwnProperty("minHeight") ? child.minHeight : (0, _getDisplaySizeJs.GetDisplayHeight)(child);
    return result;
};
exports.default = GetChildrenHeight;

},{"../../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GhjqK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetChildrenSizers = function(out) {
    if (out === undefined) out = [];
    if (this.child && this.child.isRexSizer) out.push(this.child);
    return out;
};
exports.default = GetChildrenSizers;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01Mv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var ResetChildPosition = function() {
    var x = this.left;
    var y = this.top;
    if (this.scrollMode === 0) y += this.childOY;
    else x += this.childOY;
    this.child.setPosition(x, y);
    this.resetChildPositionState(this.child);
    this.setMaskChildrenFlag();
};
exports.default = ResetChildPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pF7e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resizeGameObjectJs = require("../../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
var LayoutChildren = function() {
    // LayoutChildren child
    var child = this.child;
    var childWidth, childHeight;
    if (!child.rexSizer.hidden) {
        // Set size
        if (this.scrollMode === 0) childWidth = this.width;
        else childHeight = this.height;
        if (child.isRexSizer) child.runLayout(this, childWidth, childHeight);
        else (0, _resizeGameObjectJsDefault.default)(child, childWidth, childHeight);
        // Update local state
        this.resetChildPosition();
        // Layout children-mask
        this.layoutChildrenMask();
        // Re-mask children
        this.maskChildren();
    }
};
exports.default = LayoutChildren;

},{"../../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOsKp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _alignConstJs = require("../utils/AlignConst.js");
var _alignConstJsDefault = parcelHelpers.interopDefault(_alignConstJs);
var ScrollToChild = function(child, align) {
    if (!this.hasChild(child)) return this;
    var dy;
    if (this.scrollMode === 0) switch(align){
        case (0, _alignConstJsDefault.default).top:
        case "top":
            dy = this.top - child.getTopLeft().y;
            break;
        case (0, _alignConstJsDefault.default).bottom:
        case "bottom":
            dy = this.bottom - child.getBottomLeft().y;
            break;
        case (0, _alignConstJsDefault.default).center:
        case "center":
            dy = this.centerY - child.getCenter().y;
            break;
        default:
            var dTop = this.top - child.getTopLeft().y;
            var dBottom = this.bottom - child.getBottomLeft().y;
            if (dTop <= 0 && dBottom >= 0) dy = 0;
            else dy = Math.abs(dTop) <= Math.abs(dBottom) ? dTop : dBottom;
            break;
    }
    else switch(align){
        case (0, _alignConstJsDefault.default).left:
        case "left":
            dy = this.left - child.getTopLeft().x;
            break;
        case (0, _alignConstJsDefault.default).right:
        case "right":
            dy = this.right - child.getTopRight().x;
            break;
        case (0, _alignConstJsDefault.default).center:
        case "center":
            dy = this.centerX - child.getCenter().x;
            break;
        default:
            var dLeft = this.left - child.getTopLeft().x;
            var dRight = this.right - child.getTopRight().x;
            if (dLeft <= 0 && dRight >= 0) dy = 0;
            else dy = Math.abs(dLeft) <= Math.abs(dRight) ? dLeft : dRight;
            break;
    }
    this.childOY += dy;
    return this;
};
exports.default = ScrollToChild;

},{"../utils/AlignConst.js":"8t4Uc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyQWb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toastJs = require("./Toast.js");
var _toastJsDefault = parcelHelpers.interopDefault(_toastJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("toast", function(config) {
    var gameObject = new (0, _toastJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Toast", (0, _toastJsDefault.default));
exports.default = (0, _toastJsDefault.default);

},{"./Toast.js":"cD9TI","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cD9TI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("../label/Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _defaultTransitCallbacksJs = require("./DefaultTransitCallbacks.js");
var _defaultTransitCallbacksJsDefault = parcelHelpers.interopDefault(_defaultTransitCallbacksJs);
var _playerJs = require("../../../plugins/logic/runcommands/tcrp/Player.js");
var _playerJsDefault = parcelHelpers.interopDefault(_playerJs);
var _noopJs = require("../../../plugins/utils/object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Toast extends (0, _labelJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {
            text: createDefaultTextObject(scene)
        };
        super(scene, config);
        this.type = "rexToast";
        this.setTransitInTime(GetValue(config, "duration.in", 200));
        this.setDisplayTime(GetValue(config, "duration.hold", 1200));
        this.setTransitOutTime(GetValue(config, "duration.out", 200));
        this.setTransitInCallback(GetValue(config, "transitIn", TransitionMode.popUp));
        this.setTransitOutCallback(GetValue(config, "transitOut", TransitionMode.scaleDown));
        this.player = new (0, _playerJsDefault.default)(this, {
            dtMode: 1
        });
        this.messages = [];
        this.scaleX0 = undefined;
        this.scaleY0 = undefined;
        this.setVisible(false);
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.player.destroy();
        this.player = undefined;
        this.messages = undefined;
        super.destroy(fromScene);
    }
    setDisplayTime(time) {
        this.displayTime = time;
        return this;
    }
    setTransitOutTime(time) {
        this.transitOutTime = time;
        return this;
    }
    setTransitInTime(time) {
        this.transitInTime = time;
        return this;
    }
    setTransitInCallback(callback) {
        if (typeof callback === "string") callback = TransitionMode[callback];
        switch(callback){
            case TransitionMode.popUp:
                callback = (0, _defaultTransitCallbacksJsDefault.default).popUp;
                break;
            case TransitionMode.fadeIn:
                callback = (0, _defaultTransitCallbacksJsDefault.default).fadeIn;
                break;
        }
        if (!callback) callback = (0, _noopJsDefault.default);
        this.transitInCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    }
    setTransitOutCallback(callback) {
        if (typeof callback === "string") callback = TransitionMode[callback];
        switch(callback){
            case TransitionMode.scaleDown:
                callback = (0, _defaultTransitCallbacksJsDefault.default).scaleDown;
                break;
            case TransitionMode.fadeOut:
                callback = (0, _defaultTransitCallbacksJsDefault.default).fadeOut;
                break;
        }
        if (!callback) callback = (0, _noopJsDefault.default);
        this.transitOutCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    }
    setScale(scaleX, scaleY) {
        if (scaleY === undefined) scaleY = scaleX;
        // Can override initial scale
        this.scaleX0 = scaleX;
        this.scaleY0 = scaleY;
        super.setScale(scaleX, scaleY);
        return this;
    }
    showMessage(callback) {
        // Remember first scaleX, scaleY as initial scale
        if (this.scaleX0 === undefined) this.scaleX0 = this.scaleX;
        if (this.scaleY0 === undefined) this.scaleY0 = this.scaleY;
        if (callback === undefined) {
            // Try pop up a pendding message
            if (this.messages.length === 0) return this;
            callback = this.messages.shift();
        }
        if (this.player.isPlaying) {
            // Pend message
            this.messages.push(callback);
            return this;
        }
        // Recover to initial state
        this.setScale(this.scaleX0, this.scaleY0).setVisible(true);
        if (typeof callback === "string") this.setText(callback);
        else callback(this);
        this.layout();
        var commands = [
            [
                0,
                [
                    this.transitInCallback,
                    this,
                    this.transitInTime
                ] // [callback, param, ...]
            ],
            [
                this.transitInTime,
                [
                    (0, _noopJsDefault.default)
                ]
            ],
            [
                this.displayTime,
                [
                    this.transitOutCallback,
                    this,
                    this.transitOutTime
                ]
            ],
            [
                this.transitOutTime,
                [
                    this.setVisible,
                    false
                ]
            ],
            [
                30,
                [
                    (0, _noopJsDefault.default)
                ]
            ]
        ];
        this.player.load(commands, this).once("complete", function() {
            this.showMessage();
        }, this).start();
        return this;
    }
}
const TransitionMode = {
    popUp: 0,
    fadeIn: 1,
    scaleDown: 0,
    fadeOut: 1
};
exports.default = Toast;

},{"../label/Label.js":"bHkqt","./DefaultTransitCallbacks.js":"fB1Ch","../../../plugins/logic/runcommands/tcrp/Player.js":"fJHdp","../../../plugins/utils/object/NOOP.js":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fB1Ch":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    popUp: function(gameObject, duration) {
        gameObject.popUp(duration);
    },
    scaleDown: function(gameObject, duration) {
        gameObject.scaleDown(duration);
    },
    fadeIn: function(gameObject, duration) {
        gameObject.fadeIn(duration);
    },
    fadeOut: function(gameObject, duration) {
        gameObject.fadeOut(duration);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJHdp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _clockJs = require("../../../clock.js");
var _clockJsDefault = parcelHelpers.interopDefault(_clockJs);
var _copyJs = require("../../../utils/array/Copy.js");
var _copyJsDefault = parcelHelpers.interopDefault(_copyJs);
var _runcommandsJs = require("../../../runcommands.js");
var _runcommandsJsDefault = parcelHelpers.interopDefault(_runcommandsJs);
var _isArrayJs = require("../../../utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Player extends (0, _componentBaseJsDefault.default) {
    constructor(parent, config){
        super(parent, config);
        var clock = GetValue(config, "clock", undefined);
        if (!clock) clock = new (0, _clockJsDefault.default)(parent);
        this.clock = clock;
        this.clock.on("update", this.update, this);
        this.resetFromJSON(config); // this function had been called in super(config)
    }
    resetFromJSON(o) {
        this.clock.resetFromJSON(GetValue(o, "clock", undefined));
        this.state = GetValue(o, "state", 0); // 0=idle, 1=run, 2=completed
        this.commands = GetValue(o, "commands", []); // [[time, cmds], [time, cmds], ...]
        this.scope = GetValue(o, "scope", undefined);
        this.setTimeUnit(GetValue(o, "timeUnit", 0));
        this.setDtMode(GetValue(o, "dtMode", 0));
        this.index = GetValue(o, "index", 0);
        this.nextTime = GetValue(o, "nextTime", 0);
        return this;
    }
    toJSON() {
        return {
            clock: this.clock.toJSON(),
            state: this.state,
            commands: this.commands,
            scope: this.scope,
            timeUnit: this.timeUnit,
            dtMode: this.dtMode,
            index: this.index,
            nextTime: this.nextTime
        };
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.clock.shutdown(fromScene);
        this.commands = undefined;
        super.shutdown(fromScene);
    }
    load(commands, scope, config) {
        this.stop();
        var timeUnit = GetValue(config, "timeUnit", undefined);
        if (timeUnit !== undefined) this.setTimeUnit(timeUnit);
        var dtMode = GetValue(config, "dtMode", undefined);
        if (dtMode !== undefined) this.setDtMode(dtMode);
        commands = commands.filter(function(item) {
            var dt = item[0];
            return !isNaN(dt);
        }).map(function(item) {
            var dt = item[0];
            if (typeof dt === "string") item[0] = parseFloat(item[0]);
            return item;
        });
        if (this.dtMode === 0) commands.sort(function(itemA, itemB) {
            var dtA = itemA[0], dtB = itemB[0];
            return dtA > dtB ? 1 : dtA < dtB ? -1 : 0;
        });
        this.commands = commands;
        this.scope = scope;
        return this;
    }
    start(startAt) {
        if (startAt === undefined) startAt = 0;
        this.stop();
        this.index = 0;
        this.state = 1;
        this.nextTime = this.getNextDt(0);
        this.clock.start(startAt);
        this.update(startAt);
        this.emit("start", this.parent, this);
        return this;
    }
    pause() {
        this.clock.pause();
        this.emit("pause", this.parent, this);
        return this;
    }
    resume() {
        this.clock.resume();
        this.emit("resume", this.parent, this);
        return this;
    }
    stop() {
        this.clock.stop();
        this.state = 0;
        this.emit("stop", this.parent, this);
        return this;
    }
    seek(time) {
        this.clock.seek(time);
        return this;
    }
    seekToNext() {
        this.seek(this.nextTime);
        return this;
    }
    get isPlaying() {
        return this.clock.isRunning;
    }
    get completed() {
        return this.state === 2;
    }
    get timeScale() {
        return this.clock.timeScale;
    }
    set timeScale(timeScale) {
        this.clock.timeScale = timeScale;
    }
    setTimeScale(timeScale) {
        this.timeScale = timeScale;
        return this;
    }
    get now() {
        return this.clock.now;
    }
    update(now) {
        if (this.nextTime > now) return this;
        var lastCommandIndex = this.commands.length - 1;
        while(true){
            // Execute a command
            var item = this.commands[this.index];
            var command = item[1];
            if (!(0, _isArrayJsDefault.default)(command)) command = (0, _copyJsDefault.default)(CMD, item, 1);
            (0, _runcommandsJsDefault.default)(command, this.scope);
            this.emit("runcommand", command, this.scope);
            // Execute a command
            if (this.index === lastCommandIndex) {
                this.complete();
                return this;
            } else {
                // Get next time
                this.index++; // Point to next command
                this.nextTime = this.getNextDt(this.nextTime);
                if (this.nextTime > now) return this;
            // Get next time
            }
        }
    }
    complete() {
        this.clock.stop();
        this.state = 2;
        this.emit("complete", this.parent, this);
    }
    getNextDt(currentDt) {
        var time = this.commands[this.index][0];
        if (this.timeUnit === 1) time = time * 1000;
        if (this.dtMode === 1) time += currentDt;
        return time;
    }
    setDtMode(dtMode) {
        if (typeof dtMode === "string") dtMode = DTMODE[dtMode];
        this.dtMode = dtMode;
        return this;
    }
    setTimeUnit(timeUnit) {
        if (typeof timeUnit === "string") timeUnit = TIMEUNITMODE[timeUnit];
        this.timeUnit = timeUnit;
        return this;
    }
}
var CMD = []; // reuse this array
const TIMEUNITMODE = {
    ms: 0,
    s: 1,
    sec: 1
};
const DTMODE = {
    abs: 0,
    absolute: 0,
    inc: 1,
    increment: 1
};
exports.default = Player;

},{"../../../utils/componentbase/ComponentBase.js":"2RQZy","../../../clock.js":"384zh","../../../utils/array/Copy.js":"hiamy","../../../runcommands.js":"arDrN","../../../utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"384zh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clockJs = require("./time/clock/Clock.js");
var _clockJsDefault = parcelHelpers.interopDefault(_clockJs);
exports.default = (0, _clockJsDefault.default);

},{"./time/clock/Clock.js":"863mO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"arDrN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runCommandsJs = require("./logic/runcommands/RunCommands.js");
var _runCommandsJsDefault = parcelHelpers.interopDefault(_runCommandsJs);
exports.default = (0, _runCommandsJsDefault.default);

},{"./logic/runcommands/RunCommands.js":"acrjc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acrjc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getValueJs = require("../../utils/object/GetValue.js");
var _getValueJsDefault = parcelHelpers.interopDefault(_getValueJs);
var _copyJs = require("../../utils/array/Copy.js");
var _copyJsDefault = parcelHelpers.interopDefault(_copyJs);
var _typeConvertJs = require("../../utils/string/TypeConvert.js");
var _typeConvertJsDefault = parcelHelpers.interopDefault(_typeConvertJs);
var _isArrayJs = require("../../utils/object/IsArray.js");
var _isArrayJsDefault = parcelHelpers.interopDefault(_isArrayJs);
var RunCommands = function(queue, scope, config) {
    var reverse = (0, _getValueJsDefault.default)(config, "reverse", false);
    var retVal;
    if ((0, _isArrayJsDefault.default)(queue[0])) {
        if (!reverse) for(var i = 0, len = queue.length; i < len; i++)retVal = RunCommands(queue[i], scope, config);
        else for(var len = queue.length, i = len - 1; i >= 0; i--)retVal = RunCommands(queue[i], scope, config);
    } else retVal = RunCommand(queue, scope, config);
    return retVal;
};
var RunCommand = function(cmd, scope, config) {
    var argsConvert = (0, _getValueJsDefault.default)(config, "argsConvert", undefined);
    var argsConvertScope = (0, _getValueJsDefault.default)(config, "argsConvertScope", undefined);
    var fnName = cmd[0];
    ARGS = (0, _copyJsDefault.default)(ARGS, cmd, 1);
    if (argsConvert) {
        // convert string to floating number, boolean, null, or string        
        if (argsConvert === true) {
            argsConvert = (0, _typeConvertJsDefault.default);
            argsConvertScope = undefined;
        }
        for(var i = 0, len = ARGS.length; i < len; i++)if (argsConvertScope) ARGS[i] = argsConvert.call(argsConvertScope, ARGS[i], cmd);
        else ARGS[i] = argsConvert(ARGS[i], cmd);
    }
    var fn;
    if (typeof fnName === "string") {
        fn = scope[fnName];
        if (fn == null) fn = (0, _getValueJsDefault.default)(scope, fnName, null);
    } else fn = fnName;
    var retValue = fn.apply(scope, ARGS);
    return retValue;
};
var ARGS = []; // reuse this array
exports.default = RunCommands;

},{"../../utils/object/GetValue.js":"7bT3a","../../utils/array/Copy.js":"hiamy","../../utils/string/TypeConvert.js":"3MFGu","../../utils/object/IsArray.js":"2k7ne","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kOCHz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorInputJs = require("./ColorInput.js");
var _colorInputJsDefault = parcelHelpers.interopDefault(_colorInputJs);
var _objectFactoryJs = require("../../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("colorInput", function(config) {
    var gameObject = new (0, _colorInputJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ColorInput", (0, _colorInputJsDefault.default));
exports.default = (0, _colorInputJsDefault.default);

},{"./ColorInput.js":"jpoc3","../../ObjectFactory.js":"g2ISQ","../../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jpoc3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorInputBaseJs = require("../colorinputbase/ColorInputBase.js");
var _colorInputBaseJsDefault = parcelHelpers.interopDefault(_colorInputBaseJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _createBackgroundJs = require("../../utils/build/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorInput extends (0, _colorInputBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene, config);
        this.type = "rexColorInput";
        if (!config.hasOwnProperty("colorPicker")) config.colorPicker = {
            background: {
                color: 0x0
            }
        };
        var colorPickerConfig = config.colorPicker;
        var hasColorPicker = colorPickerConfig !== false && colorPickerConfig !== null;
        if (hasColorPicker) {
            this.setColorPickerSize(GetValue(colorPickerConfig, "width", 160), GetValue(colorPickerConfig, "height", 170));
            var createBackgroundCallback;
            var background = GetValue(colorPickerConfig, "background");
            if (background) createBackgroundCallback = function(scene) {
                return (0, _createBackgroundJsDefault.default)(scene, background);
            };
            else createBackgroundCallback = GetValue(colorPickerConfig, "createBackgroundCallback");
            this.setCreateColorPickerBackgroundCallback(createBackgroundCallback);
            this.setColorPickerHPalettePosition(GetValue(colorPickerConfig, "hPalettePosition", 0));
            this.setColorPickerExpandDirection(GetValue(colorPickerConfig, "expandDirection"));
            this.setColorPickerEaseInDuration(GetValue(colorPickerConfig, "easeIn", 200));
            this.setColorPickerEaseOutDuration(GetValue(colorPickerConfig, "easeOut", 200));
            this.setColorPickerTransitInCallback(GetValue(colorPickerConfig, "transitIn"));
            this.setColorPickerTransitOutCallback(GetValue(colorPickerConfig, "transitOut"));
            this.setColorPickerBounds(GetValue(colorPickerConfig, "bounds"));
            var colorPickerSpaceConfig = GetValue(colorPickerConfig, "space");
            if (colorPickerSpaceConfig === undefined) colorPickerSpaceConfig = {
                left: 10,
                right: 10,
                top: 10,
                bottom: 10,
                item: 8
            };
            this.setColorPickerSpace(colorPickerSpaceConfig);
        }
        var colorComponentsConfig = config.colorComponents;
        var hasColorComponents = colorComponentsConfig !== false && colorComponentsConfig !== null;
        if (hasColorPicker && hasColorComponents) {
            this.setColorComponentsHeight(GetValue(colorComponentsConfig, "height", 30));
            this.setColorComponentsFormatLabelConfig(GetValue(colorComponentsConfig, "formatLabel"));
            var colorComponentsInputTextConfig = GetValue(colorComponentsConfig, "inputText");
            if (!colorComponentsInputTextConfig) colorComponentsInputTextConfig = GetValue(config, "inputText");
            this.setColorComponentsInputTextConfig(colorComponentsInputTextConfig);
            var colorComponentsSpace = GetValue(colorComponentsConfig, "space");
            if (colorComponentsSpace === undefined) colorComponentsSpace = {
                item: 8
            };
            this.setColorComponentsSpace(colorComponentsSpace);
        }
        var swatch = this.childrenMap.swatch;
        if (swatch && hasColorPicker) this.onClick(swatch, this.openColorPicker, this);
    }
}
Object.assign(ColorInput.prototype, (0, _methodsJsDefault.default));
exports.default = ColorInput;

},{"../colorinputbase/ColorInputBase.js":"guUMC","./methods/Methods.js":"fkLfG","../../utils/build/CreateBackground.js":"aOfVE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"guUMC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _createSwatchJs = require("./methods/CreateSwatch.js");
var _createSwatchJsDefault = parcelHelpers.interopDefault(_createSwatchJs);
var _createInputTextJs = require("../../utils/build/CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
var _colorStringToIntegerJs = require("../../../../plugins/utils/color/ColorStringToInteger.js");
var _colorStringToIntegerJsDefault = parcelHelpers.interopDefault(_colorStringToIntegerJs);
var _getHexColorStringJs = require("../../../../plugins/utils/color/GetHexColorString.js");
var _getHexColorStringJsDefault = parcelHelpers.interopDefault(_getHexColorStringJs);
var _setSwatchColorJs = require("./methods/SetSwatchColor.js");
var _setSwatchColorJsDefault = parcelHelpers.interopDefault(_setSwatchColorJs);
var _resizeGameObjectJs = require("../../../../plugins/utils/size/ResizeGameObject.js");
var _resizeGameObjectJsDefault = parcelHelpers.interopDefault(_resizeGameObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const Clamp = Phaser.Math.Clamp;
class ColorInput extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        config.orientation = 0;
        super(scene, config);
        this.type = "rexColorInputLite";
        // Add elements
        var background = GetValue(config, "background", undefined);
        var swatchConfig = GetValue(config, "swatch");
        var swatchSize;
        if (IsPlainObject(swatchConfig)) swatchSize = GetValue(swatchConfig, "size");
        var swatch = (0, _createSwatchJsDefault.default)(scene, GetValue(config, "swatch"));
        var inputTextConfig = GetValue(config, "inputText", true);
        var inputText;
        if (inputTextConfig) inputText = (0, _createInputTextJsDefault.default)(scene, inputTextConfig);
        if (background) this.addBackground(background);
        if (swatch) {
            swatchSize = GetValue(config, "swatchSize", swatchSize);
            var squareExpandSwatch;
            if (swatchSize !== undefined) {
                (0, _resizeGameObjectJsDefault.default)(swatch, swatchSize, swatchSize);
                squareExpandSwatch = false;
            } else squareExpandSwatch = GetValue(config, "squareExpandSwatch", true);
            var fitRatio = squareExpandSwatch ? 1 : 0;
            this.add(swatch, {
                proportion: 0,
                expand: false,
                fitRatio: fitRatio
            });
        }
        if (inputText) {
            var proportion = GetValue(inputTextConfig, "width") === undefined ? 1 : 0;
            var expand = GetValue(inputTextConfig, "height") === undefined ? true : false;
            this.add(inputText, {
                proportion: proportion,
                expand: expand
            });
        }
        this.addChildrenMap("background", background);
        this.addChildrenMap("swatch", swatch);
        this.addChildrenMap("inputText", inputText);
        if (inputText) inputText.on("close", function() {
            this.setValue(inputText.value);
        }, this);
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        this.setValue(GetValue(config, "value", 0x0));
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (typeof value === "string") {
            value = (0, _colorStringToIntegerJsDefault.default)(value);
            if (value == null) {
                var inputText = this.childrenMap.inputText;
                if (inputText) inputText.setText((0, _getHexColorStringJsDefault.default)(this._value));
                return;
            }
        } else value = Clamp(Math.floor(value), 0, 0xffffff);
        if (this._value === value) return;
        this._value = value;
        var swatch = this.childrenMap.swatch;
        if (swatch) (0, _setSwatchColorJsDefault.default)(swatch, value);
        var inputText = this.childrenMap.inputText;
        if (inputText) inputText.setText((0, _getHexColorStringJsDefault.default)(value));
        this.emit("valuechange", this._value);
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    get color() {
        return this._value;
    }
    set color(color) {
        this.value = color;
    }
    setColor(color) {
        this.color = color;
        return this;
    }
}
exports.default = ColorInput;

},{"../../sizer/Sizer.js":"ayu5S","./methods/CreateSwatch.js":"loBum","../../utils/build/CreateInputText.js":"6hgZA","../../../../plugins/utils/color/ColorStringToInteger.js":"ffg84","../../../../plugins/utils/color/GetHexColorString.js":"83gpo","./methods/SetSwatchColor.js":"3vmts","../../../../plugins/utils/size/ResizeGameObject.js":"9D5SO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"loBum":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("../../../roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _isGameObjectJs = require("../../../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var CreateSwatch = function(scene, config) {
    if (config === false) return null;
    else if ((0, _isGameObjectJsDefault.default)(config)) return config;
    var swatch = new (0, _roundRectangleJsDefault.default)(scene, config);
    scene.add.existing(swatch);
    return swatch;
};
exports.default = CreateSwatch;

},{"../../../roundrectangle/RoundRectangle.js":"9fgJM","../../../../../plugins/utils/system/IsGameObject.js":"cLBuU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hgZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasInputJs = require("../../canvasinput/CanvasInput.js");
var _canvasInputJsDefault = parcelHelpers.interopDefault(_canvasInputJs);
var _deepCloneJs = require("../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var CreateInputText = function(scene, config, deepCloneConfig) {
    if (deepCloneConfig === undefined) deepCloneConfig = true;
    if (deepCloneConfig) config = config ? (0, _deepCloneJsDefault.default)(config) : {};
    else if (!config) config = {};
    var inputText = new (0, _canvasInputJsDefault.default)(scene, config);
    scene.add.existing(inputText);
    return inputText;
};
exports.default = CreateInputText;

},{"../../canvasinput/CanvasInput.js":"lDkTr","../../../../plugins/utils/object/DeepClone.js":"7G9ja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffg84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorNameToInteger = require("./ColorNameToInteger");
var ColorStringToInteger = function(value) {
    if (typeof value !== "string") return value;
    if (value.startsWith("#")) value = parseInt(value.substring(1), 16);
    else if (value.startsWith("0x")) value = parseInt(value.substring(2), 16);
    else value = (0, _colorNameToInteger.ColorNameToInteger)(value);
    return value;
};
exports.default = ColorStringToInteger;

},{"./ColorNameToInteger":"dqNws","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqNws":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorNames", ()=>ColorNames);
parcelHelpers.export(exports, "ColorNameToInteger", ()=>ColorNameToInteger);
parcelHelpers.export(exports, "IntegerToColorName", ()=>IntegerToColorName);
const ColorNames = [
    "AliceBlue",
    "AntiqueWhite",
    "Aqua",
    "Aquamarine",
    "Azure",
    "Beige",
    "Bisque",
    "Black",
    "BlanchedAlmond",
    "Blue",
    "BlueViolet",
    "Brown",
    "BurlyWood",
    "CadetBlue",
    "Chartreuse",
    "Chocolate",
    "Coral",
    "CornflowerBlue",
    "Cornsilk",
    "Crimson",
    "Cyan",
    "DarkBlue",
    "DarkCyan",
    "DarkGoldenRod",
    "DarkGray",
    "DarkGrey",
    "DarkGreen",
    "DarkKhaki",
    "DarkMagenta",
    "DarkOliveGreen",
    "DarkOrange",
    "DarkOrchid",
    "DarkRed",
    "DarkSalmon",
    "DarkSeaGreen",
    "DarkSlateBlue",
    "DarkSlateGray",
    "DarkSlateGrey",
    "DarkTurquoise",
    "DarkViolet",
    "DeepPink",
    "DeepSkyBlue",
    "DimGray",
    "DimGrey",
    "DodgerBlue",
    "FireBrick",
    "FloralWhite",
    "ForestGreen",
    "Fuchsia",
    "Gainsboro",
    "GhostWhite",
    "Gold",
    "GoldenRod",
    "Gray",
    "Grey",
    "Green",
    "GreenYellow",
    "HoneyDew",
    "HotPink",
    "IndianRed",
    "Indigo",
    "Ivory",
    "Khaki",
    "Lavender",
    "LavenderBlush",
    "LawnGreen",
    "LemonChiffon",
    "LightBlue",
    "LightCoral",
    "LightCyan",
    "LightGoldenRodYellow",
    "LightGray",
    "LightGrey",
    "LightGreen",
    "LightPink",
    "LightSalmon",
    "LightSeaGreen",
    "LightSkyBlue",
    "LightSlateGray",
    "LightSlateGrey",
    "LightSteelBlue",
    "LightYellow",
    "Lime",
    "LimeGreen",
    "Linen",
    "Magenta",
    "Maroon",
    "MediumAquaMarine",
    "MediumBlue",
    "MediumOrchid",
    "MediumPurple",
    "MediumSeaGreen",
    "MediumSlateBlue",
    "MediumSpringGreen",
    "MediumTurquoise",
    "MediumVioletRed",
    "MidnightBlue",
    "MintCream",
    "MistyRose",
    "Moccasin",
    "NavajoWhite",
    "Navy",
    "OldLace",
    "Olive",
    "OliveDrab",
    "Orange",
    "OrangeRed",
    "Orchid",
    "PaleGoldenRod",
    "PaleGreen",
    "PaleTurquoise",
    "PaleVioletRed",
    "PapayaWhip",
    "PeachPuff",
    "Peru",
    "Pink",
    "Plum",
    "PowderBlue",
    "Purple",
    "RebeccaPurple",
    "Red",
    "RosyBrown",
    "RoyalBlue",
    "SaddleBrown",
    "Salmon",
    "SandyBrown",
    "SeaGreen",
    "SeaShell",
    "Sienna",
    "Silver",
    "SkyBlue",
    "SlateBlue",
    "SlateGray",
    "SlateGrey",
    "Snow",
    "SpringGreen",
    "SteelBlue",
    "Tan",
    "Teal",
    "Thistle",
    "Tomato",
    "Turquoise",
    "Violet",
    "Wheat",
    "White",
    "WhiteSmoke",
    "Yellow",
    "YellowGreen"
];
const ColorValues = [
    0xf0f8ff,
    0xfaebd7,
    0x00ffff,
    0x7fffd4,
    0xf0ffff,
    0xf5f5dc,
    0xffe4c4,
    0x000000,
    0xffebcd,
    0x0000ff,
    0x8a2be2,
    0xa52a2a,
    0xdeb887,
    0x5f9ea0,
    0x7fff00,
    0xd2691e,
    0xff7f50,
    0x6495ed,
    0xfff8dc,
    0xdc143c,
    0x00ffff,
    0x00008b,
    0x008b8b,
    0xb8860b,
    0xa9a9a9,
    0xa9a9a9,
    0x006400,
    0xbdb76b,
    0x8b008b,
    0x556b2f,
    0xff8c00,
    0x9932cc,
    0x8b0000,
    0xe9967a,
    0x8fbc8f,
    0x483d8b,
    0x2f4f4f,
    0x2f4f4f,
    0x00ced1,
    0x9400d3,
    0xff1493,
    0x00bfff,
    0x696969,
    0x696969,
    0x1e90ff,
    0xb22222,
    0xfffaf0,
    0x228b22,
    0xff00ff,
    0xdcdcdc,
    0xf8f8ff,
    0xffd700,
    0xdaa520,
    0x808080,
    0x808080,
    0x008000,
    0xadff2f,
    0xf0fff0,
    0xff69b4,
    0xcd5c5c,
    0x4b0082,
    0xfffff0,
    0xf0e68c,
    0xe6e6fa,
    0xfff0f5,
    0x7cfc00,
    0xfffacd,
    0xadd8e6,
    0xf08080,
    0xe0ffff,
    0xfafad2,
    0xd3d3d3,
    0xd3d3d3,
    0x90ee90,
    0xffb6c1,
    0xffa07a,
    0x20b2aa,
    0x87cefa,
    0x778899,
    0x778899,
    0xb0c4de,
    0xffffe0,
    0x00ff00,
    0x32cd32,
    0xfaf0e6,
    0xff00ff,
    0x800000,
    0x66cdaa,
    0x0000cd,
    0xba55d3,
    0x9370db,
    0x3cb371,
    0x7b68ee,
    0x00fa9a,
    0x48d1cc,
    0xc71585,
    0x191970,
    0xf5fffa,
    0xffe4e1,
    0xffe4b5,
    0xffdead,
    0x000080,
    0xfdf5e6,
    0x808000,
    0x6b8e23,
    0xffa500,
    0xff4500,
    0xda70d6,
    0xeee8aa,
    0x98fb98,
    0xafeeee,
    0xdb7093,
    0xffefd5,
    0xffdab9,
    0xcd853f,
    0xffc0cb,
    0xdda0dd,
    0xb0e0e6,
    0x800080,
    0x663399,
    0xff0000,
    0xbc8f8f,
    0x4169e1,
    0x8b4513,
    0xfa8072,
    0xf4a460,
    0x2e8b57,
    0xfff5ee,
    0xa0522d,
    0xc0c0c0,
    0x87ceeb,
    0x6a5acd,
    0x708090,
    0x708090,
    0xfffafa,
    0x00ff7f,
    0x4682b4,
    0xd2b48c,
    0x008080,
    0xd8bfd8,
    0xff6347,
    0x40e0d0,
    0xee82ee,
    0xf5deb3,
    0xffffff,
    0xf5f5f5,
    0xffff00,
    0x9acd32
];
var ColorNameToIntegerDict = {}, name;
for(var i = 0, cnt = ColorNames.length; i < cnt; i++){
    name = ColorNames[i].toLowerCase();
    ColorNameToIntegerDict[name] = ColorValues[i];
}
var ColorNameToInteger = function(colorName) {
    colorName = colorName.toLowerCase();
    if (ColorNameToIntegerDict.hasOwnProperty(colorName)) return ColorNameToIntegerDict[colorName];
    else return null;
};
var IntegerToColorName = function(colorValue) {
    var idx = ColorValues.indexOf(colorValue);
    if (idx === -1) return "";
    else return ColorNames[idx];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83gpo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const Pad = Phaser.Utils.String.Pad;
var GetHexColorString = function(value, prefix) {
    if (prefix === undefined) prefix = "0x";
    var colorString = value.toString(16).toUpperCase();
    colorString = Pad(colorString, 6, 0, 1);
    colorString = prefix + colorString;
    return colorString;
};
exports.default = GetHexColorString;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3vmts":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetSwatchColor = function(swatch, color) {
    if (!swatch) return;
    if (swatch.setTint) swatch.setTint(color);
    else if (swatch.setFillStyle) swatch.setFillStyle(color);
};
exports.default = SetSwatchColor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkLfG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurationMethodsJs = require("./ConfigurationMethods.js");
var _configurationMethodsJsDefault = parcelHelpers.interopDefault(_configurationMethodsJs);
var _openColorPickerJs = require("./OpenColorPicker.js");
var _openColorPickerJsDefault = parcelHelpers.interopDefault(_openColorPickerJs);
var methods = {
    openColorPicker: (0, _openColorPickerJsDefault.default)
};
Object.assign(methods, (0, _configurationMethodsJsDefault.default));
exports.default = methods;

},{"./ConfigurationMethods.js":"kklJK","./OpenColorPicker.js":"3P8C6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kklJK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var methods = {
    // Color picker
    setCreateColorPickerBackgroundCallback (callback) {
        this.colorPickerCreateBackgroundCallback = callback;
        return this;
    },
    setColorPickerHPalettePosition (position) {
        this.colorPickerHPalettePosition = position;
        return this;
    },
    setColorPickerExpandDirection (direction) {
        if (typeof direction === "string") direction = ColorPickerExpandDirections[direction];
        this.colorPickerExpandDirection = direction;
        return this;
    },
    setColorPickerEaseInDuration (duration) {
        if (duration === undefined) duration = 0;
        this.colorPickerEaseInDuration = duration;
        return this;
    },
    setColorPickerEaseOutDuration (duration) {
        if (duration === undefined) duration = 0;
        this.colorPickerEaseOutDuration = duration;
        return this;
    },
    setColorPickerTransitInCallback (callback) {
        this.colorPickerTransitInCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    setColorPickerTransitOutCallback (callback) {
        this.colorPickerTransitOutCallback = callback;
        // callback = function(gameObject, duration) {}
        return this;
    },
    setColorPickerBounds (bounds) {
        this.colorPickerBounds = bounds;
        return this;
    },
    setColorPickerWidth (width) {
        this.colorPickerWidth = width;
        return this;
    },
    setColorPickerHeight (height) {
        this.colorPickerHeight = height;
        return this;
    },
    setColorPickerSize (width, height) {
        this.setColorPickerWidth(width).setColorPickerHeight(height);
        return this;
    },
    setColorPickerSpace (space) {
        if (space === undefined) space = {};
        this.colorPickerSpace = space;
        return this;
    },
    // Color components
    setColorComponentsHeight (height) {
        this.colorComponentsHeight = height;
        return this;
    },
    setColorComponentsFormatLabelConfig (config) {
        this.colorComponentsFormatLabelConfig = config;
        return this;
    },
    setColorComponentsInputTextConfig (config) {
        this.colorComponentsInputTextConfig = config;
        return this;
    },
    setColorComponentsSpace (space) {
        if (space === undefined) space = {};
        this.colorComponentsSpace = space;
        return this;
    }
};
const ColorPickerExpandDirections = {
    down: 0,
    up: 1
};
exports.default = methods;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3P8C6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createColorPickerJs = require("./CreateColorPicker.js");
var _createColorPickerJsDefault = parcelHelpers.interopDefault(_createColorPickerJs);
var _dropDownJs = require("../../../dropdown/DropDown.js");
var _dropDownJsDefault = parcelHelpers.interopDefault(_dropDownJs);
var OpenColorPicker = function() {
    if (this.colorPicker) return;
    // Layout it to get full height
    var colorPicker = (0, _createColorPickerJsDefault.default).call(this).layout();
    var dropDownBehavior = new (0, _dropDownJsDefault.default)(colorPicker, {
        // Transition
        duration: {
            in: this.colorPickerEaseInDuration,
            out: this.colorPickerEaseOutDuration
        },
        transitIn: this.colorPickerTransitInCallback,
        transitOut: this.colorPickerTransitOutCallback,
        // Position
        expandDirection: this.colorPickerExpandDirection,
        alignTargetX: this,
        alignTargetY: this,
        bounds: this.colorPickerBounds,
        // Close condition
        touchOutsideClose: true
    }).on("open", function() {
        // After popping up
        // Can click
        colorPicker.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
    }, this).on("close", function() {
        this.colorPicker = undefined;
        this.dropDownBehavior = undefined;
    }, this);
    this.colorPicker = colorPicker;
    this.dropDownBehavior = dropDownBehavior;
    this.pin(colorPicker);
    return this;
};
exports.default = OpenColorPicker;

},{"./CreateColorPicker.js":"95oG6","../../../dropdown/DropDown.js":"huHwu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95oG6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorPickerJs = require("./ColorPicker.js");
var _colorPickerJsDefault = parcelHelpers.interopDefault(_colorPickerJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateColorPicker = function(scene) {
    var scene = this.scene;
    var background;
    var createBackgroundCallback = this.colorPickerCreateBackgroundCallback;
    if (createBackgroundCallback) {
        background = createBackgroundCallback.call(this, scene);
        scene.add.existing(background);
    }
    var width = this.colorPickerWidth;
    if (width === undefined) width = this.width;
    var height = this.colorPickerHeight;
    if (height === undefined) height = width;
    var colorComponentsConfig;
    if (this.colorComponentsHeight > 0) colorComponentsConfig = {
        height: this.colorComponentsHeight,
        formatLabel: this.colorComponentsFormatLabelConfig,
        inputText: this.colorComponentsInputTextConfig,
        space: this.colorComponentsSpace
    };
    else colorComponentsConfig = false;
    var colorPicker = new (0, _colorPickerJsDefault.default)(scene, {
        width: width,
        height: height,
        background: background,
        space: this.colorPickerSpace,
        hPalette: {
            position: this.colorPickerHPalettePosition
        },
        colorComponents: colorComponentsConfig,
        value: this.value
    });
    scene.add.existing(colorPicker);
    return colorPicker;
};
exports.default = CreateColorPicker;

},{"./ColorPicker.js":"hqSgc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqSgc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _colorPickerJs = require("../../colorpicker/ColorPicker.js");
var _colorPickerJsDefault = parcelHelpers.interopDefault(_colorPickerJs);
var _colorComponentsJs = require("../../colorcomponents/ColorComponents.js");
var _colorComponentsJsDefault = parcelHelpers.interopDefault(_colorComponentsJs);
var _touchEventStopJs = require("../../../toucheventstop/TouchEventStop.js");
var _touchEventStopJsDefault = parcelHelpers.interopDefault(_touchEventStopJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorPickerPanel extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        config.orientation = 1;
        super(scene, config);
        this.type = "rexColorInput.ColorPickerPanel";
        // Add elements
        var background = GetValue(config, "background", undefined);
        var colorPicker = new (0, _colorPickerJsDefault.default)(scene, {
            hPalette: config.hPalette || {},
            svPalette: config.svPalette || {},
            space: {
                item: GetValue(config, "space.hPalette", 8)
            }
        });
        scene.add.existing(colorPicker);
        var colorComponents;
        if (config.colorComponents) {
            colorComponents = new (0, _colorComponentsJsDefault.default)(scene, config.colorComponents);
            scene.add.existing(colorComponents);
        }
        if (background) {
            this.addBackground(background);
            var touchEventStop = new (0, _touchEventStopJsDefault.default)(background, {
                stopAllLevels: false
            });
        }
        this.add(colorPicker, {
            proportion: 1,
            expand: true
        });
        if (colorComponents) this.add(colorComponents, {
            proportion: 0,
            expand: true
        });
        this.addChildrenMap("background", background);
        this.addChildrenMap("colorPicker", colorPicker);
        this.addChildrenMap("colorComponents", colorComponents);
        colorPicker.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
        if (colorComponents) colorComponents.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
        this.setValue(GetValue(config, "value", 0xffffff));
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        this._value = value;
        var colorPicker = this.childrenMap.colorPicker;
        colorPicker.setValue(value);
        var colorComponents = this.childrenMap.colorComponents;
        if (colorComponents) colorComponents.setValue(value);
        this.emit("valuechange", value);
    }
    setValue(value) {
        this.value = value;
        return this;
    }
}
exports.default = ColorPickerPanel;

},{"../../../sizer/Sizer.js":"ayu5S","../../colorpicker/ColorPicker.js":"jxtLL","../../colorcomponents/ColorComponents.js":"fSJKg","../../../toucheventstop/TouchEventStop.js":"aRcpE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jxtLL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _hpaletteJs = require("./methods/HPalette.js");
var _hpaletteJsDefault = parcelHelpers.interopDefault(_hpaletteJs);
var _svpaletteJs = require("./methods/SVPalette.js");
var _svpaletteJsDefault = parcelHelpers.interopDefault(_svpaletteJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ColorPicker extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexColorPicker";
        this.freezePalettes = false;
        // orientation
        var hPalettePosition = GetValue(config, "hPalette.position", 0);
        if (typeof hPalettePosition === "string") hPalettePosition = HPalettePositionNamesMap[hPalettePosition];
        var orientation = hPalettePosition === 0 || // bottom
        hPalettePosition === 2 // top
         ? 1 : 0; // x
        this.setOrientation(orientation);
        // Add elements
        var background = GetValue(config, "background", undefined);
        var hPaletteWidth, hPaletteHeight;
        if (this.orientation === 0) {
            var hPaletteWidth = GetValue(config, "hPalette.width", undefined);
            if (hPaletteWidth === undefined) hPaletteWidth = GetValue(config, "hPalette.size", 10);
        } else {
            hPaletteHeight = GetValue(config, "hPalette.height", undefined);
            if (hPaletteHeight === undefined) hPaletteHeight = GetValue(config, "hPalette.size", 10);
        }
        var hPalette = new (0, _hpaletteJsDefault.default)(scene, {
            width: hPaletteWidth,
            height: hPaletteHeight
        });
        scene.add.existing(hPalette);
        var svPaletteWidth = GetValue(config, "svPalette.width", undefined);
        var svPaletteHeight = GetValue(config, "svPalette.height", undefined);
        var svPalette = new (0, _svpaletteJsDefault.default)(scene, {
            width: svPaletteWidth,
            height: svPaletteHeight
        });
        scene.add.existing(svPalette);
        if (background) this.addBackground(background);
        var hPaletteAddConfig = {
            proportion: 0,
            expand: true
        };
        var svPaletteProportion, svPaletteExpand;
        if (this.orientation === 0) {
            svPaletteProportion = svPaletteWidth === undefined ? 1 : 0;
            svPaletteExpand = svPaletteHeight === undefined ? true : false;
        } else {
            svPaletteProportion = svPaletteHeight === undefined ? 1 : 0;
            svPaletteExpand = svPaletteWidth === undefined ? true : false;
        }
        var svPaletteAddConfig = {
            proportion: svPaletteProportion,
            expand: svPaletteExpand
        };
        if (hPalettePosition === 0 || hPalettePosition === 3) this.add(svPalette, svPaletteAddConfig).add(hPalette, hPaletteAddConfig);
        else this.add(hPalette, hPaletteAddConfig).add(svPalette, svPaletteAddConfig);
        hPalette.on("input", function() {
            svPalette.setHue(hPalette.getHue());
            this.setValue(svPalette.color, true);
        }, this);
        svPalette.on("input", function() {
            this.setValue(svPalette.color, true);
        }, this);
        this.addChildrenMap("background", background);
        this.addChildrenMap("hPalette", hPalette);
        this.addChildrenMap("svPalette", svPalette);
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        this.setValue(GetValue(config, "value", 0xffffff));
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        var oldValue = this._value;
        this._value = value;
        if (!this.freezePalettes) this.updatePalettes();
        this.emit("valuechange", value, oldValue, this);
    }
    setValue(value, freezePalettes) {
        this.freezePalettes = !!freezePalettes;
        this.value = value;
        this.freezePalettes = false;
        return this;
    }
    get color() {
        return this._value;
    }
    set color(color) {
        this.value = color;
    }
    setColor(color) {
        this.color = color;
        return this;
    }
    updatePalettes() {
        this.childrenMap.hPalette.setColor(this.color);
        this.childrenMap.svPalette.setColor(this.color);
        return this;
    }
    runLayout(parent, newWidth, newHeight) {
        if (this.ignoreLayout) return this;
        super.runLayout(parent, newWidth, newHeight);
        this.childrenMap.hPalette.setMarkerPosition(this.value);
        this.childrenMap.svPalette.setMarkerPosition(this.value);
        return this;
    }
}
var HPalettePositionNamesMap = {
    bottom: 0,
    left: 1,
    top: 2,
    right: 3
};
exports.default = ColorPicker;

},{"../../sizer/Sizer.js":"ayu5S","./methods/HPalette.js":"9xK1z","./methods/SVPalette.js":"16bRX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9xK1z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../../../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _hpaletteCanvasJs = require("./HPaletteCanvas.js");
var _hpaletteCanvasJsDefault = parcelHelpers.interopDefault(_hpaletteCanvasJs);
var _roundRectangleJs = require("../../../roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _transformJs = require("./Transform.js");
class HPalette extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene, config);
        var orientation = config.width != null ? 1 : 0;
        var paletteCanvas = new (0, _hpaletteCanvasJsDefault.default)(scene).setOrientation(orientation);
        scene.add.existing(paletteCanvas);
        this.type = "rexColorPicker.HPalette";
        paletteCanvas.setInteractive().on("pointerdown", this.onPaletteCanvasPointerDown, this).on("pointermove", this.onPaletteCanvasPointerDown, this);
        var marker = new (0, _roundRectangleJsDefault.default)(scene, {
            strokeColor: 0xffffff,
            strokeWidth: 2
        });
        scene.add.existing(marker);
        this.add(paletteCanvas, {
            key: "paletteCanvas",
            expand: true
        }).add(marker, {
            key: "marker",
            expand: false
        });
    }
    resize(width, height) {
        if (this.width === width && this.height === height) return this;
        super.resize(width, height);
        var size = Math.min(width, height);
        this.childrenMap.marker.setSize(size, size);
        return this;
    }
    onPaletteCanvasPointerDown(pointer, localX, localY, event) {
        if (!pointer.isDown) return;
        var paletteCanvas = this.childrenMap.paletteCanvas;
        var color = paletteCanvas.getColor(localX, localY);
        this.setMarkerPosition(color);
        this.emit("input", color);
    }
    get color() {
        return this.childrenMap.paletteCanvas.color;
    }
    setColor(color) {
        if (this.color === color) return this;
        var paletteCanvas = this.childrenMap.paletteCanvas;
        paletteCanvas.setColor(color);
        this.setMarkerPosition(color);
        return this;
    }
    setMarkerPosition(color) {
        var paletteCanvas = this.childrenMap.paletteCanvas;
        var marker = this.childrenMap.marker;
        var localXY = paletteCanvas.colorToLocalPosition(color, true);
        (0, _transformJs.LocalToWorld)(paletteCanvas, localXY.x, localXY.y, marker);
        this.resetChildPositionState(marker);
        return this;
    }
    getHue(localX, localY) {
        var paletteCanvas = this.childrenMap.paletteCanvas;
        return paletteCanvas.getHue(localX, localY);
    }
}
exports.default = HPalette;

},{"../../../overlapsizer/OverlapSizer.js":"gx7j1","./HPaletteCanvas.js":"84oXs","../../../roundrectangle/RoundRectangle.js":"9fgJM","./Transform.js":"anYiV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84oXs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../../../canvas/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _getOrientationModeJs = require("../../../utils/GetOrientationMode.js");
var _getOrientationModeJsDefault = parcelHelpers.interopDefault(_getOrientationModeJs);
var _drawHSVPaletteJs = require("../../../../../plugins/utils/canvas/DrawHSVPalette.js");
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
class HPaletteCanvas extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, width, height, orientation){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 2;
        if (height === undefined) height = 2;
        super(scene, x, y, width, height);
        this.type = "rexColorPicker.HPaletteCanvas";
        this.colorObject = new Color();
        this.setOrientation(orientation);
        this.setSize(width, height);
    }
    setOrientation(orientation) {
        this.orientation = (0, _getOrientationModeJsDefault.default)(orientation);
        return this;
    }
    updateTexture() {
        (0, _drawHSVPaletteJs.DrawHPalette)(this.canvas, this.context, this.orientation);
        super.updateTexture();
        return this;
    }
    get color() {
        return this.colorObject.color;
    }
    get hue() {
        return this._hue;
    }
    set hue(value) {
        this._hue = value;
    }
    getHue(localX, localY) {
        if (localX === undefined) return this.hue;
        if (this.orientation === 0) this.hue = Percent(localX, 0, this.width);
        else this.hue = Percent(localY, 0, this.height);
        return this.hue;
    }
    getColor(localX, localY) {
        if (localX === undefined) return this.color;
        var h = this.getHue(localX, localY);
        this.colorObject.setFromRGB(HSVToRGB(h, 1, 1));
        return this.colorObject.color;
    }
    setColor(color) {
        if (this.color === color) return this;
        return this;
    }
    colorToLocalPosition(color, out) {
        if (out === undefined) out = {};
        else if (out === true) {
            if (LocalXY === undefined) LocalXY = {};
            out = LocalXY;
        }
        this.colorObject.setFromRGB(ColorToRGBA(color));
        if (this.orientation === 0) {
            out.x = this.width * this.colorObject.h;
            out.y = this.height / 2;
        } else {
            out.x = this.width / 2;
            out.y = this.height * this.colorObject.h;
        }
        return out;
    }
}
var LocalXY = undefined;
exports.default = HPaletteCanvas;

},{"../../../canvas/Canvas.js":"h0Okn","../../../utils/GetOrientationMode.js":"hyCKa","../../../../../plugins/utils/canvas/DrawHSVPalette.js":"gUuUa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUuUa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DrawHPalette", ()=>DrawHPalette);
parcelHelpers.export(exports, "DrawSVPalette", ()=>DrawSVPalette);
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
var DrawHPalette = function(canvas, context, verticalMode) {
    if (verticalMode === undefined) verticalMode = false;
    var width = canvas.width;
    var height = canvas.height;
    var color = new Color();
    if (verticalMode) for(var iy = 0; iy < height; iy++){
        var h = Percent(iy, 0, height);
        color.setFromHSV(h, 1, 1);
        context.fillStyle = color.rgba;
        context.fillRect(0, iy, width, 1);
    }
    else for(var ix = 0; ix < width; ix++){
        var h = Percent(ix, 0, width);
        color.setFromHSV(h, 1, 1);
        context.fillStyle = color.rgba;
        context.fillRect(ix, 0, 1, height);
    }
};
var DrawSVPalette = function(canvas, context, h) {
    var width = canvas.width;
    var height = canvas.height;
    var imgData = context.getImageData(0, 0, width, height);
    var data = imgData.data;
    var color = new Color();
    for(var iy = 0; iy < height; iy++)for(var ix = 0; ix < width; ix++){
        var s = Percent(ix, 0, width);
        var v = 1 - Percent(iy, 0, height);
        color.setFromHSV(h, s, v);
        var i = (iy * width + ix) * 4;
        data[i] = color.red;
        data[i + 1] = color.green;
        data[i + 2] = color.blue;
        data[i + 3] = 255;
    }
    context.putImageData(imgData, 0, 0);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anYiV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LocalToWorld", ()=>LocalToWorld);
var RotateAround = Phaser.Math.RotateAround;
var LocalToWorld = function(gameObject, localX, localY, out) {
    if (out === undefined) out = {};
    else if (out === true) {
        if (GlobOut === undefined) GlobOut = {};
        out = GlobOut;
    }
    localX -= gameObject.width * gameObject.originX;
    localY -= gameObject.height * gameObject.originY;
    var point = {
        x: localX * gameObject.scaleX,
        y: localY * gameObject.scaleY
    };
    RotateAround(point, 0, 0, -gameObject.rotation);
    out.x = gameObject.x + localX;
    out.y = gameObject.y + localY;
    return out;
};
var GlobOut;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"16bRX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../../../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _svpaletteCanvasJs = require("./SVPaletteCanvas.js");
var _svpaletteCanvasJsDefault = parcelHelpers.interopDefault(_svpaletteCanvasJs);
var _roundRectangleJs = require("../../../roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var _transformJs = require("./Transform.js");
class SVPalette extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        var paletteCanvas = new (0, _svpaletteCanvasJsDefault.default)(scene);
        scene.add.existing(paletteCanvas);
        this.type = "rexColorPicker.SVPalette";
        paletteCanvas.setInteractive().on("pointerdown", this.onPaletteCanvasPointerDown, this).on("pointermove", this.onPaletteCanvasPointerDown, this);
        var marker = new (0, _roundRectangleJsDefault.default)(scene, {
            radius: 5,
            strokeColor: 0xffffff,
            strokeWidth: 2
        });
        scene.add.existing(marker);
        this.add(paletteCanvas, {
            key: "paletteCanvas",
            expand: true
        }).add(marker, {
            key: "marker",
            expand: false
        });
    }
    onPaletteCanvasPointerDown(pointer, localX, localY, event) {
        if (!pointer.isDown) return;
        var paletteCanvas = this.childrenMap.paletteCanvas;
        var color = paletteCanvas.getColor(localX, localY);
        this.setMarkerPosition(color);
        this.emit("input", color);
    }
    get color() {
        return this.childrenMap.paletteCanvas.color;
    }
    setHue(hue) {
        var paletteCanvas = this.childrenMap.paletteCanvas;
        paletteCanvas.setHue(hue); // Redraw paletteCanvas
        // Position of marker does not change
        return this;
    }
    setColor(color) {
        if (this.color === color) return this;
        var paletteCanvas = this.childrenMap.paletteCanvas;
        paletteCanvas.setColor(color); // Redraw paletteCanvas
        this.setMarkerPosition(color);
        return this;
    }
    setMarkerPosition(color) {
        var paletteCanvas = this.childrenMap.paletteCanvas;
        var marker = this.childrenMap.marker;
        var localXY = paletteCanvas.colorToLocalPosition(color, true);
        (0, _transformJs.LocalToWorld)(paletteCanvas, localXY.x, localXY.y, marker);
        this.resetChildPositionState(marker);
        return this;
    }
}
exports.default = SVPalette;

},{"../../../overlapsizer/OverlapSizer.js":"gx7j1","./SVPaletteCanvas.js":"lkTBV","../../../roundrectangle/RoundRectangle.js":"9fgJM","./Transform.js":"anYiV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkTBV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _canvasJs = require("../../../canvas/Canvas.js");
var _canvasJsDefault = parcelHelpers.interopDefault(_canvasJs);
var _drawHSVPaletteJs = require("../../../../../plugins/utils/canvas/DrawHSVPalette.js");
const Color = Phaser.Display.Color;
const Percent = Phaser.Math.Percent;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
class SVPaletteCanvas extends (0, _canvasJsDefault.default) {
    constructor(scene, x, y, width, height, hue){
        if (x === undefined) x = 0;
        if (y === undefined) y = 0;
        if (width === undefined) width = 2;
        if (height === undefined) height = 2;
        super(scene, x, y, width, height);
        this.type = "rexColorPicker.SVPaletteCanvas";
        if (hue === undefined) hue = 1;
        this.colorObject = new Color();
        this.setHue(hue);
        this.setSize(width, height);
    }
    get color() {
        return this.colorObject.color;
    }
    get hue() {
        return this._hue;
    }
    set hue(hue) {
        if (this._hue === hue) return;
        this._hue = hue;
        this.colorObject.h = hue;
        this.dirty = true;
    }
    setHue(hue) {
        this.hue = hue;
        return this;
    }
    updateTexture() {
        (0, _drawHSVPaletteJs.DrawSVPalette)(this.canvas, this.context, this.hue);
        super.updateTexture();
        return this;
    }
    getColor(localX, localY) {
        if (localX === undefined) return this.colorObject.color;
        var s = Percent(localX, 0, this.width);
        var v = 1 - Percent(localY, 0, this.height);
        this.colorObject.setFromRGB(HSVToRGB(this.hue, s, v));
        return this.colorObject.color;
    }
    setColor(color) {
        if (this.color === color) return this;
        this.colorObject.setFromRGB(ColorToRGBA(color));
        this.setHue(this.colorObject.h);
        return this;
    }
    colorToLocalPosition(color, out) {
        if (out === undefined) out = {};
        else if (out === true) {
            if (LocalXY === undefined) LocalXY = {};
            out = LocalXY;
        }
        this.colorObject.setFromRGB(ColorToRGBA(color));
        out.x = this.width * this.colorObject.s;
        out.y = this.height * (1 - this.colorObject.v);
        return out;
    }
}
var LocalXY = undefined;
exports.default = SVPaletteCanvas;

},{"../../../canvas/Canvas.js":"h0Okn","../../../../../plugins/utils/canvas/DrawHSVPalette.js":"gUuUa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSJKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _isGameObjectJs = require("../../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var _createLabelJs = require("../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _createInputTextJs = require("../../utils/build/CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Color = Phaser.Display.Color;
const ColorToRGBA = Phaser.Display.Color.ColorToRGBA;
const HSVToRGB = Phaser.Display.Color.HSVToRGB;
const Clamp = Phaser.Math.Clamp;
class ColorComponents extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        config.orientation = 0;
        super(scene, config);
        this.type = "rexColorComponents";
        this.colorObject = new Color();
        // Add elements
        var background = GetValue(config, "background", undefined);
        var formatLabel = GetValue(config, "formatLabel", undefined);
        if (!(0, _isGameObjectJsDefault.default)(formatLabel)) formatLabel = (0, _createLabelJsDefault.default)(scene, formatLabel).resetDisplayContent();
        var components = [];
        if (config.inputText0 && config.inputText1 && config.inputText2) {
            components.push(config.inputText0);
            components.push(config.inputText1);
            components.push(config.inputText2);
        } else {
            var inputTextConfig = GetValue(config, "inputText");
            for(var i = 0; i < 3; i++){
                var inputText = (0, _createInputTextJsDefault.default)(scene, inputTextConfig).setMaxLength(3).setNumberInput();
                components.push(inputText);
            }
        }
        if (background) this.addBackground(background);
        var proportion = GetValue(config, "proportion.formatLabel", 0);
        var defaultExpand = formatLabel.isRexContainerLite ? true : false;
        var expand = GetValue(config, "expand.formatLabel", defaultExpand);
        this.add(formatLabel, {
            proportion: proportion,
            expand: expand
        });
        var proportion = GetValue(inputTextConfig, "width") === undefined ? 1 : 0;
        var expand = GetValue(inputTextConfig, "height") === undefined ? true : false;
        for(var i = 0, cnt = components.length; i < cnt; i++)this.add(components[i], {
            proportion: proportion,
            expand: expand
        });
        this.addChildrenMap("background", background);
        this.addChildrenMap("formatLabel", formatLabel);
        this.addChildrenMap("components", components);
        this.onClick(formatLabel, this.toggleColorFormat, this);
        for(var i = 0, cnt = components.length; i < cnt; i++)components[i].on("close", function() {
            this.updateColorObject();
            this.setValue(this.colorObject.color);
        }, this);
        var callback = GetValue(config, "valuechangeCallback", null);
        if (callback !== null) {
            var scope = GetValue(config, "valuechangeCallbackScope", undefined);
            this.on("valuechange", callback, scope);
        }
        formatLabel.setText("RGB");
        this.setValue(GetValue(config, "value", 0xffffff));
    }
    get value() {
        return this._value;
    }
    set value(value) {
        value = Clamp(Math.floor(value), 0, 0xffffff);
        if (this._value === value) return;
        this._value = value;
        this.colorObject.setFromRGB(ColorToRGBA(value));
        this.updateComponents();
        this.emit("valuechange", this._value);
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    get color() {
        return this._value;
    }
    set color(color) {
        this.value = color;
    }
    setColor(color) {
        this.color = color;
        return this;
    }
    get colorFormat() {
        return this.childrenMap.formatLabel.text;
    }
    set colorFormat(value) {
        if (this.colorFormat === value) return;
        this.childrenMap.formatLabel.setText(value);
        this.updateComponents();
    }
    setColorFormat(colrType) {
        this.colorFormat = colrType;
        return this;
    }
    toggleColorFormat() {
        this.colorFormat = this.colorFormat === "RGB" ? "HSV" : "RGB";
        return this;
    }
    updateComponents() {
        var components = this.childrenMap.components;
        var value0, value1, value2;
        if (this.colorFormat === "RGB") {
            value0 = this.colorObject.red;
            value1 = this.colorObject.green;
            value2 = this.colorObject.blue;
        } else {
            value0 = Math.floor(this.colorObject.h * 360);
            value1 = Math.floor(this.colorObject.s * 100);
            value2 = Math.floor(this.colorObject.v * 100);
        }
        components[0].setValue(value0);
        components[1].setValue(value1);
        components[2].setValue(value2);
        return this;
    }
    updateColorObject() {
        var components = this.childrenMap.components;
        if (this.colorFormat === "RGB") {
            var red = Clamp(components[0].value, 0, 255);
            var green = Clamp(components[1].value, 0, 255);
            var blue = Clamp(components[2].value, 0, 255);
            this.colorObject.setTo(red, green, blue);
        } else {
            var h = Clamp(components[0].value, 0, 359) / 360;
            var s = Clamp(components[1].value, 0, 100) / 100;
            var v = Clamp(components[2].value, 0, 100) / 100;
            this.colorObject.setFromRGB(HSVToRGB(h, s, v));
        }
        return this;
    }
}
exports.default = ColorComponents;

},{"../../sizer/Sizer.js":"ayu5S","../../../../plugins/utils/system/IsGameObject.js":"cLBuU","../../utils/build/CreateLabel.js":"kvGzR","../../utils/build/CreateInputText.js":"6hgZA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aRcpE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toucheventstopJs = require("../../../plugins/toucheventstop.js");
var _toucheventstopJsDefault = parcelHelpers.interopDefault(_toucheventstopJs);
exports.default = (0, _toucheventstopJsDefault.default);

},{"../../../plugins/toucheventstop.js":"3Cvsx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Cvsx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _touchEventStopJs = require("./input/toucheventstop/TouchEventStop.js");
var _touchEventStopJsDefault = parcelHelpers.interopDefault(_touchEventStopJs);
exports.default = (0, _touchEventStopJsDefault.default);

},{"./input/toucheventstop/TouchEventStop.js":"fbMGp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2ZXu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorInputBaseJs = require("./ColorInputBase.js");
var _colorInputBaseJsDefault = parcelHelpers.interopDefault(_colorInputBaseJs);
var _objectFactoryJs = require("../../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("colorInputLite", function(config) {
    var gameObject = new (0, _colorInputBaseJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ColorInputBase", (0, _colorInputBaseJsDefault.default));
exports.default = (0, _colorInputBaseJsDefault.default);

},{"./ColorInputBase.js":"guUMC","../../ObjectFactory.js":"g2ISQ","../../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"IFy7Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorPickerJs = require("./ColorPicker.js");
var _colorPickerJsDefault = parcelHelpers.interopDefault(_colorPickerJs);
var _objectFactoryJs = require("../../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("colorPicker", function(config) {
    var gameObject = new (0, _colorPickerJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ColorPicker", (0, _colorPickerJsDefault.default));
exports.default = (0, _colorPickerJsDefault.default);

},{"./ColorPicker.js":"jxtLL","../../ObjectFactory.js":"g2ISQ","../../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9BAs9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorComponentsJs = require("./ColorComponents.js");
var _colorComponentsJsDefault = parcelHelpers.interopDefault(_colorComponentsJs);
var _objectFactoryJs = require("../../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("colorComponents", function(config) {
    var gameObject = new (0, _colorComponentsJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ColorComponents", (0, _colorComponentsJsDefault.default));
exports.default = (0, _colorComponentsJsDefault.default);

},{"./ColorComponents.js":"fSJKg","../../ObjectFactory.js":"g2ISQ","../../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqHm6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sidesJs = require("./Sides.js");
var _sidesJsDefault = parcelHelpers.interopDefault(_sidesJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("sides", function(config) {
    var gameObject = new (0, _sidesJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Sides", (0, _sidesJsDefault.default));
exports.default = (0, _sidesJsDefault.default);

},{"./Sides.js":"hy5rf","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hy5rf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _overlapSizerJs = require("../overlapsizer/OverlapSizer.js");
var _overlapSizerJsDefault = parcelHelpers.interopDefault(_overlapSizerJs);
var _isFunctionJs = require("../../../plugins/utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _getDefaultCallbacksJs = require("./defaultcallbacks/GetDefaultCallbacks.js");
var _getDefaultCallbacksJsDefault = parcelHelpers.interopDefault(_getDefaultCallbacksJs);
var _showChildMethodsJs = require("./ShowChildMethods.js");
var _showChildMethodsJsDefault = parcelHelpers.interopDefault(_showChildMethodsJs);
var _indexJs = require("./childbehaviors/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class Sides extends (0, _overlapSizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexSides";
        this.childrenMap = this.sizerChildren;
        this.previousChildKey = undefined;
        this.currentChildKey = undefined;
        // Callbacks
        var showChildCallback = GetValue(config, "showChildCallback", undefined);
        if (showChildCallback) {
            if ((0, _isFunctionJsDefault.default)(showChildCallback)) {
                var showChildCallbackScope = GetValue(config, "showChildCallbackScope", undefined);
                this.on("showchild", showChildCallback, showChildCallbackScope);
                var hideChildCallback = GetValue(config, "hideChildCallback", undefined);
                var hideChildCallbackScope = GetValue(config, "hideChildCallbackScope", undefined);
                this.on("hidechild", hideChildCallback, hideChildCallbackScope);
            } else {
                var defaultCallbacks = (0, _getDefaultCallbacksJsDefault.default)(showChildCallback);
                this.on("showchild", defaultCallbacks.show);
                this.on("hidechild", defaultCallbacks.hide);
            }
        }
        // Add elements
        var background = GetValue(config, "background", undefined);
        var panel = GetValue(config, "panel", undefined);
        var leftSide = GetValue(config, "leftSide", undefined);
        var rightSide = GetValue(config, "rightSide", undefined);
        var topSide = GetValue(config, "topSide", undefined);
        var bottomSide = GetValue(config, "bottomSide", undefined);
        if (background) this.addBackground(background);
        if (panel) this.add(panel, "panel", "center", 0, true);
        if (leftSide) {
            var expand = GetValue(config, "expand.left", true);
            this.add(leftSide, "leftSide", "left-top", 0, {
                height: expand
            });
        }
        if (rightSide) {
            var expand = GetValue(config, "expand.right", true);
            this.add(rightSide, "rightSide", "right-top", 0, {
                height: expand
            });
        }
        if (topSide) {
            var expand = GetValue(config, "expand.top", true);
            this.add(topSide, "topSide", "left-top", 0, {
                width: expand
            });
        }
        if (bottomSide) {
            var expand = GetValue(config, "expand.bottom", true);
            this.add(bottomSide, "bottomSide", "left-bottom", 0, {
                width: expand
            });
        }
    }
    reset() {
        this.previousChildKey = undefined;
        this.currentChildKey = "panel";
        this.showChild("panel", true);
        this.hideChild("leftSide", true);
        this.hideChild("rightSide", true);
        this.hideChild("topSide", true);
        this.hideChild("bottomSide", true);
        return this;
    }
}
Object.assign(Sides.prototype, (0, _showChildMethodsJsDefault.default), (0, _indexJsDefault.default));
exports.default = Sides;

},{"../overlapsizer/OverlapSizer.js":"gx7j1","../../../plugins/utils/object/IsFunction.js":"5hi03","./defaultcallbacks/GetDefaultCallbacks.js":"4JSga","./ShowChildMethods.js":"1AbDt","./childbehaviors/index.js":"kzQG1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4JSga":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _visibleCallbacksJs = require("./VisibleCallbacks.js");
var _visibleCallbacksJsDefault = parcelHelpers.interopDefault(_visibleCallbacksJs);
var _fadeCallbacksJs = require("./FadeCallbacks.js");
var _fadeCallbacksJsDefault = parcelHelpers.interopDefault(_fadeCallbacksJs);
var _moveCallbacksJs = require("./MoveCallbacks.js");
var _moveCallbacksJsDefault = parcelHelpers.interopDefault(_moveCallbacksJs);
var _movePanelCallbacksJs = require("./MovePanelCallbacks.js");
var _movePanelCallbacksJsDefault = parcelHelpers.interopDefault(_movePanelCallbacksJs);
var _noopJs = require("../../../../plugins/utils/object/NOOP.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
const DefaultCallbacks = {
    visible: (0, _visibleCallbacksJsDefault.default),
    fade: (0, _fadeCallbacksJsDefault.default),
    move: (0, _moveCallbacksJsDefault.default),
    "move-panel": (0, _movePanelCallbacksJsDefault.default)
};
var GetDefaultCallbacks = function(config) {
    var callbackType, callbackParams;
    [callbackType, ...callbackParams] = typeof config === "string" ? [
        config
    ] : config;
    var showCallback, hideCallback;
    if (DefaultCallbacks.hasOwnProperty(callbackType)) {
        showCallback = DefaultCallbacks[callbackType].show.apply(null, callbackParams);
        hideCallback = DefaultCallbacks[callbackType].hide.apply(null, callbackParams);
    } else {
        showCallback = (0, _noopJsDefault.default);
        hideCallback = (0, _noopJsDefault.default);
    }
    return {
        show: showCallback,
        hide: hideCallback
    };
};
exports.default = GetDefaultCallbacks;

},{"./VisibleCallbacks.js":"k7iIS","./FadeCallbacks.js":"j6288","./MoveCallbacks.js":"e8Fqe","./MovePanelCallbacks.js":"b8T1Y","../../../../plugins/utils/object/NOOP.js":"9NtuG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k7iIS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetShowCallback = function() {
    return function(child, key, sides, reset) {
        if (key !== "panel") sides.setChildVisible(child, true);
    };
};
var GetHideCallback = function() {
    return function(child, key, sides, reset) {
        if (key !== "panel") sides.setChildVisible(child, false);
    };
};
exports.default = {
    show: GetShowCallback,
    hide: GetHideCallback
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6288":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetShowCallback = function(duration, alpha) {
    if (alpha === undefined) alpha = 1;
    return function(child, key, sides, reset) {
        if (key !== "panel") sides.fadeChild(child, reset ? 0 : duration, alpha);
    };
};
var GetHideCallback = function(duration, alpha) {
    if (alpha === undefined) alpha = 0;
    return function(child, key, sides, reset) {
        if (key !== "panel") sides.fadeChild(child, reset ? 0 : duration, alpha);
    };
};
exports.default = {
    show: GetShowCallback,
    hide: GetHideCallback
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e8Fqe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetCallback = function(duration, ease) {
    return function(child, key, sides, reset) {
        if (key !== "panel") sides.moveChild(child, reset ? 0 : duration, ease);
    };
};
exports.default = {
    show: GetCallback,
    hide: GetCallback
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b8T1Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetCallback = function(duration, ease) {
    return function(child, key, sides, reset) {
        if (key === "panel") sides.moveChild(child, reset ? 0 : duration, ease);
    };
};
exports.default = {
    show: GetCallback,
    hide: GetCallback
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AbDt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    showChild (key, reset) {
        var child = this.sizerChildren[key];
        if (child) {
            this.emit("showchild", child, key, this, reset);
            this.resetChildState(child);
        }
        return this;
    },
    hideChild (key, reset) {
        var child = this.sizerChildren[key];
        if (child) {
            this.emit("hidechild", child, key, this, reset);
            this.resetChildState(child);
        }
        return this;
    },
    swapChild (key, reset) {
        if (this.currentChildKey === key) ;
        else if (this.currentChildKey === "panel" || key === "panel") {
            this.previousChildKey = this.currentChildKey;
            this.currentChildKey = key;
            this.hideChild(this.previousChildKey, reset);
            this.showChild(this.currentChildKey, reset);
        } else {
            this.swapChild("panel", reset);
            this.swapChild(key, reset);
        }
        return this;
    },
    showPanel (reset) {
        this.swapChild("panel", reset);
        return this;
    },
    showLeftSide () {
        this.swapChild("leftSide");
        return this;
    },
    showRightSide () {
        this.swapChild("rightSide");
        return this;
    },
    showTopSide () {
        this.swapChild("topSide");
        return this;
    },
    showBottomSide () {
        this.swapChild("bottomSide");
        return this;
    },
    hideLeftSide () {
        if (this.currentChildKey == "leftSide") this.showPanel();
        return this;
    },
    hideRightSide () {
        if (this.currentChildKey == "rightSide") this.showPanel();
        return this;
    },
    hideTopSide () {
        if (this.currentChildKey == "topSide") this.showPanel();
        return this;
    },
    hideBottomSide () {
        if (this.currentChildKey == "bottomSide") this.showPanel();
        return this;
    },
    toggleLeftSide () {
        var key = this.currentChildKey !== "panel" ? "panel" : "leftSide";
        this.swapChild(key);
        return this;
    },
    toggleRightSide () {
        var key = this.currentChildKey !== "panel" ? "panel" : "rightSide";
        this.swapChild(key);
        return this;
    },
    toggleTopSide () {
        var key = this.currentChildKey !== "panel" ? "panel" : "topSide";
        this.swapChild(key);
        return this;
    },
    toggleBottomSide () {
        var key = this.currentChildKey !== "panel" ? "panel" : "bottomSide";
        this.swapChild(key);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kzQG1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _visibleJs = require("./Visible.js");
var _visibleJsDefault = parcelHelpers.interopDefault(_visibleJs);
var _fadeJs = require("./Fade.js");
var _fadeJsDefault = parcelHelpers.interopDefault(_fadeJs);
var _moveJs = require("./Move.js");
var _moveJsDefault = parcelHelpers.interopDefault(_moveJs);
var methods = {};
Object.assign(methods, (0, _visibleJsDefault.default), (0, _fadeJsDefault.default), (0, _moveJsDefault.default));
exports.default = methods;

},{"./Visible.js":"fFku5","./Fade.js":"aC67H","./Move.js":"kCLDV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fFku5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexOfJs = require("../../../../plugins/utils/object/IndexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _containerJs = require("../../container/Container.js");
var _containerJsDefault = parcelHelpers.interopDefault(_containerJs);
const ContainerSetChildVisible = (0, _containerJsDefault.default).prototype.setChildVisible;
exports.default = {
    setChildVisible (child, visible) {
        var key;
        if (typeof child === "string") {
            var key = child;
            child = this.sizerChildren[key];
        } else key = (0, _indexOfJsDefault.default)(this.sizerChildren, child);
        if (visible === undefined) visible = this.currentChildKey === key ? true : false;
        ContainerSetChildVisible.call(this, child, visible);
        return this;
    }
};

},{"../../../../plugins/utils/object/IndexOf.js":"hLBen","../../container/Container.js":"4qgeZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aC67H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexOfJs = require("../../../../plugins/utils/object/IndexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _waitEventJs = require("../../utils/WaitEvent.js");
exports.default = {
    fadeChild (child, duration, alpha) {
        var key1;
        if (typeof child === "string") {
            key1 = child;
            child = this.sizerChildren[key1];
        } else key1 = (0, _indexOfJsDefault.default)(this.sizerChildren, child);
        if (duration === undefined) duration = 500;
        if (alpha === undefined) alpha = this.currentChildKey === key1 ? 1 : 0;
        child.fadeIn(duration, {
            start: child.alpha,
            end: alpha
        });
        return this;
    },
    fadeChildPromise (child, duration, alpha) {
        if (typeof child === "string") child = this.sizerChildren[key];
        this.fadeChild(child, duration, alpha);
        if (child._fade) return (0, _waitEventJs.WaitComplete)(child._fade);
        else return Promise.resolve();
    }
};

},{"../../../../plugins/utils/object/IndexOf.js":"hLBen","../../utils/WaitEvent.js":"39jq1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCLDV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexOfJs = require("../../../../plugins/utils/object/IndexOf.js");
var _indexOfJsDefault = parcelHelpers.interopDefault(_indexOfJs);
var _getDisplaySizeJs = require("../../../../plugins/utils/size/GetDisplaySize.js");
var _waitEventJs = require("../../utils/WaitEvent.js");
exports.default = {
    moveChild (child, duration, ease, distance) {
        var key1;
        if (typeof child === "string") {
            key1 = child;
            child = this.sizerChildren[key1];
        } else key1 = (0, _indexOfJsDefault.default)(this.sizerChildren, child);
        if (duration === undefined) duration = 500;
        var isShownChild = this.currentChildKey === key1;
        if (distance === undefined) switch(key1){
            case "leftSide":
            case "rightSide":
                distance = (0, _getDisplaySizeJs.GetDisplayWidth)(child);
                break;
            case "topSide":
            case "bottomSide":
                distance = (0, _getDisplaySizeJs.GetDisplayHeight)(child);
                break;
            default:
                if (isShownChild) switch(this.previousChildKey){
                    case "leftSide":
                    case "rightSide":
                        distance = (0, _getDisplaySizeJs.GetDisplayWidth)(this.sizerChildren[this.previousChildKey]);
                        break;
                    case "topSide":
                    case "bottomSide":
                        distance = (0, _getDisplaySizeJs.GetDisplayHeight)(this.sizerChildren[this.previousChildKey]);
                        break;
                    default:
                        distance = 0;
                        break;
                }
                else switch(this.currentChildKey){
                    case "leftSide":
                    case "rightSide":
                        distance = (0, _getDisplaySizeJs.GetDisplayWidth)(this.sizerChildren[this.currentChildKey]);
                        break;
                    case "topSide":
                    case "bottomSide":
                        distance = (0, _getDisplaySizeJs.GetDisplayHeight)(this.sizerChildren[this.currentChildKey]);
                        break;
                    default:
                        distance = 0;
                        break;
                }
                break;
        }
        var moveLeft, moveRight, moveUp, moveDown;
        if (isShownChild) switch(key1){
            case "panel":
                switch(this.previousChildKey){
                    case "leftSide":
                        moveLeft = true;
                        break;
                    case "rightSide":
                        moveRight = true;
                        break;
                    case "topSide":
                        moveUp = true;
                        break;
                    case "bottomSide":
                        moveDown = true;
                        break;
                }
                break;
            case "leftSide":
                moveRight = true;
                break;
            case "rightSide":
                moveLeft = true;
                break;
            case "topSide":
                moveDown = true;
                break;
            case "bottomSide":
                moveUp = true;
                break;
        }
        else switch(key1){
            case "panel":
                switch(this.currentChildKey){
                    case "leftSide":
                        moveRight = true;
                        break;
                    case "rightSide":
                        moveLeft = true;
                        break;
                    case "topSide":
                        moveDown = true;
                        break;
                    case "bottomSide":
                        moveUp = true;
                        break;
                }
                break;
            case "leftSide":
                moveLeft = true;
                break;
            case "rightSide":
                moveRight = true;
                break;
            case "topSide":
                moveUp = true;
                break;
            case "bottomSide":
                moveDown = true;
                break;
        }
        if (moveLeft) child.moveTo(duration, `-=${distance}`, undefined, ease);
        else if (moveRight) child.moveTo(duration, `+=${distance}`, undefined, ease);
        else if (moveUp) child.moveTo(duration, undefined, `-=${distance}`, ease);
        else if (moveDown) child.moveTo(duration, undefined, `+=${distance}`, ease);
        else child.moveTo(0);
        return this;
    },
    moveChildPromise (child, duration, ease, distance) {
        if (typeof child === "string") child = this.sizerChildren[key];
        this.moveChild(child, duration, ease, distance);
        if (child._easeMove) return (0, _waitEventJs.WaitComplete)(child._easeMove);
        else return Promise.resolve();
    }
};

},{"../../../../plugins/utils/object/IndexOf.js":"hLBen","../../../../plugins/utils/size/GetDisplaySize.js":"2ndUj","../../utils/WaitEvent.js":"39jq1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eGVrd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tweakerJs = require("./Tweaker.js");
var _tweakerJsDefault = parcelHelpers.interopDefault(_tweakerJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("tweaker", function(config) {
    var gameObject = new (0, _tweakerJsDefault.default)(this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Tweaker", (0, _tweakerJsDefault.default));
exports.default = (0, _tweakerJsDefault.default);

},{"./Tweaker.js":"5gxwN","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gxwN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tweakerShellJs = require("./TweakerShell.js");
var _tweakerShellJsDefault = parcelHelpers.interopDefault(_tweakerShellJs);
class Tweaker extends (0, _tweakerShellJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        if (config.styles === undefined) config.styles = {}; // TODO: Default styles
        config.background = config.styles.background || {};
        config.space = config.styles.space || {};
        // Create sizer
        super(scene, config);
        this.type = "rexTweaker";
    }
}
exports.default = Tweaker;

},{"./TweakerShell.js":"cdAhH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdAhH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
var _createBackgroundJs = require("./builders/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TweakerShell extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        if (config.orientation === undefined) config.orientation = 1;
        // Create sizer
        super(scene, config);
        this.type = "rexTweakerShell";
        this.root = config.root || this;
        this.styles = GetValue(config, "styles") || {};
        this.styles.orientation = this.orientation;
        this.itemWidth = GetValue(this.styles, "itemWidth", 0);
        if (this.root === this && this.orientation === 1) {
            var alignTitle = GetValue(config, "inputRow.alignTitle");
            if (alignTitle === undefined) {
                var titleProportion = GetValue(this.styles, "inputRow.proportion.title");
                alignTitle = !titleProportion;
            } else if (alignTitle) (0, _setValueJsDefault.default)(this.styles, "inputRow.proportion.title", 0);
            this.alignInputRowTitle = alignTitle;
        } else this.alignInputRowTitle = false;
        var background = (0, _createBackgroundJsDefault.default)(scene, undefined, config.background);
        if (background) this.addBackground(background);
    }
    preLayout() {
        super.preLayout();
        if (this.alignInputRowTitle) this.setInputRowTitleWidth(this.getMaxInputRowTitleWidth());
    }
}
Object.assign(TweakerShell.prototype, (0, _methodsJsDefault.default));
exports.default = TweakerShell;

},{"../sizer/Sizer.js":"ayu5S","./methods/Methods.js":"bR3nW","./builders/CreateBackground.js":"9GaPZ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bR3nW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _addFolderJs = require("./AddFolder.js");
var _addFolderJsDefault = parcelHelpers.interopDefault(_addFolderJs);
var _addTabJs = require("./AddTab.js");
var _addTabJsDefault = parcelHelpers.interopDefault(_addTabJs);
var _addInputJs = require("./AddInput.js");
var _addInputJsDefault = parcelHelpers.interopDefault(_addInputJs);
var _addButtonsJs = require("./AddButtons.js");
var _addButtonsJsDefault = parcelHelpers.interopDefault(_addButtonsJs);
var _addSeparatorJs = require("./AddSeparator.js");
var _addSeparatorJsDefault = parcelHelpers.interopDefault(_addSeparatorJs);
var _setBindingTargetJs = require("./SetBindingTarget.js");
var _setBindingTargetJsDefault = parcelHelpers.interopDefault(_setBindingTargetJs);
var _getMaxInputRowTitleWidthJs = require("./GetMaxInputRowTitleWidth.js");
var _getMaxInputRowTitleWidthJsDefault = parcelHelpers.interopDefault(_getMaxInputRowTitleWidthJs);
var _setInputRowTitleWidthJs = require("./SetInputRowTitleWidth.js");
var _setInputRowTitleWidthJsDefault = parcelHelpers.interopDefault(_setInputRowTitleWidthJs);
var methods = {
    addFolder: (0, _addFolderJsDefault.default),
    addTab: (0, _addTabJsDefault.default),
    addInput: (0, _addInputJsDefault.default),
    addButton: (0, _addButtonsJsDefault.default),
    addButtons: (0, _addButtonsJsDefault.default),
    addSeparator: (0, _addSeparatorJsDefault.default),
    setBindingTarget: (0, _setBindingTargetJsDefault.default),
    getMaxInputRowTitleWidth: (0, _getMaxInputRowTitleWidthJsDefault.default),
    setInputRowTitleWidth: (0, _setInputRowTitleWidthJsDefault.default)
};
exports.default = methods;

},{"./AddFolder.js":"eZcsc","./AddTab.js":"8tgIQ","./AddInput.js":"lkA9D","./AddButtons.js":"hOhfS","./AddSeparator.js":"2Wa7Q","./SetBindingTarget.js":"5AczD","./GetMaxInputRowTitleWidth.js":"hB3ef","./SetInputRowTitleWidth.js":"3XnFT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZcsc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createFolderJs = require("../builders/CreateFolder.js");
var _createFolderJsDefault = parcelHelpers.interopDefault(_createFolderJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var AddFolder = function(config) {
    var scene = this.scene;
    // Create folder
    var folderStyle = GetValue(this.styles, "folder") || {};
    folderStyle.tweaker = this.styles;
    folderStyle.root = this.root;
    var folder = (0, _createFolderJsDefault.default)(scene, config, folderStyle);
    delete folderStyle.tweaker;
    delete folderStyle.root;
    // Add folder
    this.add(folder, {
        expand: true
    });
    // Set content
    folder.setTitle(config);
    var expanded = GetValue(config, "expanded", true);
    if (expanded) folder.expand(0);
    else folder.collapse(0);
    var childTweaker = folder.getElement("child");
    if (config.key) this.root.addChildrenMap(config.key, childTweaker);
    return childTweaker;
};
exports.default = AddFolder;

},{"../builders/CreateFolder.js":"jCVWX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jCVWX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _folderTitleJs = require("../gameobjects/label/FolderTitle.js");
var _folderTitleJsDefault = parcelHelpers.interopDefault(_folderTitleJs);
var _createTweakerJs = require("../gameobjects/utils/CreateTweaker.js");
var _createTweakerJsDefault = parcelHelpers.interopDefault(_createTweakerJs);
var _createBackgroundJs = require("./CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _folderJs = require("../gameobjects/folder/Folder.js");
var _folderJsDefault = parcelHelpers.interopDefault(_folderJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateFolder = function(scene, config, style) {
    // Create Folder-title
    var titleStyle = GetValue(style, "title") || {};
    var title = new (0, _folderTitleJsDefault.default)(scene, titleStyle);
    scene.add.existing(title);
    title.on("folder.expand", function() {
        title.setExpandedState(true);
    }).on("folder.collapse", function() {
        title.setExpandedState(false);
    });
    var tweakerConfig = {
        root: GetValue(style, "root"),
        styles: GetValue(style, "tweaker"),
        space: GetValue(style, "space") || {}
    };
    var child = (0, _createTweakerJsDefault.default)(scene, tweakerConfig);
    var backgroundStyle = GetValue(style, "background");
    var background = (0, _createBackgroundJsDefault.default)(scene, config, backgroundStyle);
    var folder = new (0, _folderJsDefault.default)(scene, {
        orientation: 1,
        title: title,
        child: child,
        background: background,
        transition: {
            duration: GetValue(style, "transition.duration", 200)
        }
    });
    scene.add.existing(folder);
    return folder;
};
exports.default = CreateFolder;

},{"../gameobjects/label/FolderTitle.js":"elDlY","../gameobjects/utils/CreateTweaker.js":"irUPs","./CreateBackground.js":"9GaPZ","../gameobjects/folder/Folder.js":"iukKP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"elDlY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _titleJs = require("./Title.js");
var _titleJsDefault = parcelHelpers.interopDefault(_titleJs);
var _triangleJs = require("../../../triangle/Triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
class FolderTitle extends (0, _titleJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene, config);
        this.type = "rexTweaker.FolderTitle";
        var expandedIcon = new (0, _triangleJsDefault.default)(scene, config.expandedIcon);
        scene.add.existing(expandedIcon);
        this.addSpace().add(expandedIcon, {
            proportion: 0,
            expand: false,
            padding: 1,
            fitRatio: 1
        });
        this.addChildrenMap("expandedIcon", expandedIcon);
    }
    setExpandedState(expanded) {
        if (expanded === undefined) expanded = true;
        var direction = expanded ? "down" : "right";
        var expandedIcon = this.childrenMap.expandedIcon;
        expandedIcon.setDirection(direction);
        return this;
    }
}
exports.default = FolderTitle;

},{"./Title.js":"6lyip","../../../triangle/Triangle.js":"dCKra","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lyip":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labelJs = require("../../../label/Label.js");
var _labelJsDefault = parcelHelpers.interopDefault(_labelJs);
var _buildLabelConfigJs = require("../../../utils/build/BuildLabelConfig.js");
var _buildLabelConfigJsDefault = parcelHelpers.interopDefault(_buildLabelConfigJs);
var _deepCloneJs = require("../../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
class Title extends (0, _labelJsDefault.default) {
    constructor(scene, config){
        config = (0, _buildLabelConfigJsDefault.default)(scene, config);
        super(scene, config);
        this.type = "rexTweaker.Title";
    }
    setTitle(config) {
        config = config ? (0, _deepCloneJsDefault.default)(config) : {};
        if (config.hasOwnProperty("text")) ;
        else if (config.hasOwnProperty("title")) config.text = config.title;
        else config.text = "";
        this.resetDisplayContent(config);
        return this;
    }
}
exports.default = Title;

},{"../../../label/Label.js":"bHkqt","../../../utils/build/BuildLabelConfig.js":"fHIED","../../../../../plugins/utils/object/DeepClone.js":"7G9ja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"irUPs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tweakerShell = require("../../TweakerShell");
var _tweakerShellDefault = parcelHelpers.interopDefault(_tweakerShell);
var CreateTweaker = function(scene, config) {
    var tweaker = new (0, _tweakerShellDefault.default)(scene, config);
    scene.add.existing(tweaker);
    return tweaker;
};
exports.default = CreateTweaker;

},{"../../TweakerShell":"cdAhH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9GaPZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createBackgroundJs = require("../../utils/build/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var CreateBackground = function(scene, config, style) {
    // TODO: Might create nine-slice as background
    return (0, _createBackgroundJsDefault.default)(scene, style);
};
exports.default = CreateBackground;

},{"../../utils/build/CreateBackground.js":"aOfVE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iukKP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _folderJs = require("../../../folder/Folder.js");
var _folderJsDefault = parcelHelpers.interopDefault(_folderJs);
var _bindingTargetMethodsJs = require("./BindingTargetMethods.js");
var _bindingTargetMethodsJsDefault = parcelHelpers.interopDefault(_bindingTargetMethodsJs);
var _inputRowTitleWidthMethodsJs = require("./InputRowTitleWidthMethods.js");
var _inputRowTitleWidthMethodsJsDefault = parcelHelpers.interopDefault(_inputRowTitleWidthMethodsJs);
class Folder extends (0, _folderJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexTweaker.Folder";
    }
    setTitle(config) {
        var title = this.childrenMap.title;
        title.setTitle(config);
        return this;
    }
}
Object.assign(Folder.prototype, (0, _bindingTargetMethodsJsDefault.default), (0, _inputRowTitleWidthMethodsJsDefault.default));
exports.default = Folder;

},{"../../../folder/Folder.js":"79II6","./BindingTargetMethods.js":"3R8po","./InputRowTitleWidthMethods.js":"97BhA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3R8po":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setBindingTarget (target) {
        var child = this.childrenMap.child; // tweaker
        child.setBindingTarget(target);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97BhA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getMaxInputRowTitleWidth () {
        var child = this.childrenMap.child; // tweaker
        var titleWidth = child.getMaxInputRowTitleWidth();
        return titleWidth + this.getInnerPadding("left");
    },
    setInputRowTitleWidth (width) {
        width -= this.getInnerPadding("left");
        var child = this.childrenMap.child; // tweaker
        child.setInputRowTitleWidth(width);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8tgIQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createTabJs = require("../builders/CreateTab.js");
var _createTabJsDefault = parcelHelpers.interopDefault(_createTabJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var AddTab = function(config) {
    var scene = this.scene;
    // Create tab
    var tabStyle = GetValue(this.styles, "tab") || {};
    tabStyle.tweaker = this.styles;
    tabStyle.root = this.root;
    var tab = (0, _createTabJsDefault.default)(scene, config, tabStyle);
    delete tabStyle.tweaker;
    delete tabStyle.root;
    // Add tab
    this.add(tab, {
        expand: true
    });
    var pagesConfig = GetValue(config, "pages") || [];
    var pages = [];
    var shownPageIndex = 0;
    for(var i = 0, cnt = pagesConfig.length; i < cnt; i++){
        var childTweaker = tab.getPage(i);
        var isPageShown = pagesConfig[i].show;
        if (isPageShown) shownPageIndex = i;
        var key = pagesConfig[i].key;
        if (key) this.root.addChildrenMap(key, childTweaker);
        pages.push(childTweaker);
    }
    tab.swapPage(shownPageIndex, 0);
    return pages;
};
exports.default = AddTab;

},{"../builders/CreateTab.js":"e03rg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e03rg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tabPagesJs = require("../gameobjects/tabpages/TabPages.js");
var _tabPagesJsDefault = parcelHelpers.interopDefault(_tabPagesJs);
var _createLabelJs = require("../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _createTweaker = require("../gameobjects/utils/CreateTweaker");
var _createTweakerDefault = parcelHelpers.interopDefault(_createTweaker);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateTab = function(scene, config, style) {
    var tabPages = new (0, _tabPagesJsDefault.default)(scene, style);
    scene.add.existing(tabPages);
    var tabConfig = GetValue(style, "tab");
    var tweakerConfig = {
        root: GetValue(style, "root"),
        styles: GetValue(style, "tweaker")
    };
    var pages = GetValue(config, "pages") || [];
    for(var i = 0, cnt = pages.length; i < cnt; i++){
        var page = pages[i];
        tabPages.addPage({
            key: page.title,
            tab: (0, _createLabelJsDefault.default)(scene, tabConfig).setActiveState(false).resetDisplayContent({
                text: page.title
            }),
            page: (0, _createTweakerDefault.default)(scene, tweakerConfig)
        });
    }
    tabPages.on("tab.focus", function(tab, key) {
        tab.setActiveState(true);
    }).on("tab.blur", function(tab, key) {
        tab.setActiveState(false);
    });
    return tabPages;
};
exports.default = CreateTab;

},{"../gameobjects/tabpages/TabPages.js":"7mF0d","../../utils/build/CreateLabel.js":"kvGzR","../gameobjects/utils/CreateTweaker":"irUPs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mF0d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tabPagesJs = require("../../../tabpages/TabPages.js");
var _tabPagesJsDefault = parcelHelpers.interopDefault(_tabPagesJs);
var _bindingTargetMethodsJs = require("./BindingTargetMethods.js");
var _bindingTargetMethodsJsDefault = parcelHelpers.interopDefault(_bindingTargetMethodsJs);
var _inputRowTitleWidthMethodsJs = require("./InputRowTitleWidthMethods.js");
var _inputRowTitleWidthMethodsJsDefault = parcelHelpers.interopDefault(_inputRowTitleWidthMethodsJs);
class TabPages extends (0, _tabPagesJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexTweaker.TabPages";
    }
}
Object.assign(TabPages.prototype, (0, _bindingTargetMethodsJsDefault.default), (0, _inputRowTitleWidthMethodsJsDefault.default));
exports.default = TabPages;

},{"../../../tabpages/TabPages.js":"1IThi","./BindingTargetMethods.js":"7trpn","./InputRowTitleWidthMethods.js":"hsKhQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7trpn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setBindingTarget (target) {
        var children = this.childrenMap.pages.children;
        for(var i = 0, cnt = children.length; i < cnt; i++)children[i].setBindingTarget(target);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hsKhQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getMaxInputRowTitleWidth () {
        var maxTitleWidth = 0;
        var children = this.childrenMap.pages.children; // tweaker array
        for(var i = 0, cnt = children.length; i < cnt; i++)maxTitleWidth = Math.max(maxTitleWidth, children[i].getMaxInputRowTitleWidth());
        return maxTitleWidth + this.getInnerPadding("left");
    },
    setInputRowTitleWidth (width) {
        width -= this.getInnerPadding("left");
        var children = this.childrenMap.pages.children; // tweaker array
        for(var i = 0, cnt = children.length; i < cnt; i++)children[i].setInputRowTitleWidth(width);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkA9D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getInputTypeJs = require("../utils/inputs/GetInputType.js");
var _getInputTypeJsDefault = parcelHelpers.interopDefault(_getInputTypeJs);
var _createInputRowJs = require("../builders/CreateInputRow.js");
var _createInputRowJsDefault = parcelHelpers.interopDefault(_createInputRowJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var AddInput = function(object, key, config) {
    if (arguments.length === 1) {
        config = object;
        object = config.bindingTarget;
        key = config.bindingKey;
    } else if (config === undefined) config = {};
    if (!config.title) config.title = key;
    if (!config.view) config.view = (0, _getInputTypeJsDefault.default)(object, key, config);
    // Create InputRow
    var inputRowStyle = this.styles.inputRow || {};
    inputRowStyle.parentOrientation = this.styles.orientation;
    var inputSizer = (0, _createInputRowJsDefault.default)(this.scene, config, inputRowStyle);
    var inputField = inputSizer.childrenMap.inputField;
    var proportion;
    if (this.orientation === 1) proportion = 0;
    else {
        proportion = this.itemWidth > 0 ? 0 : 1;
        inputSizer.setMinWidth(this.itemWidth);
    }
    // Add InputRow to Tweaker
    this.add(inputSizer, {
        proportion: proportion,
        expand: true
    });
    if (config.onValueChange) inputField.on("valuechange", config.onValueChange);
    if (config.onValidate) inputField.setValidateCallback(config.onValidate);
    // Bind target
    inputSizer.setAutoUpdateEnable(config.autoUpdate);
    inputSizer.setBindingTarget(object, key);
    if (config.monitor) inputSizer.startMonitorTarget();
    if (config.key) this.root.addChildrenMap(config.key, inputSizer);
    return this;
};
exports.default = AddInput;

},{"../utils/inputs/GetInputType.js":"36GmM","../builders/CreateInputRow.js":"kYABp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"36GmM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTypesJs = require("./InputTypes.js");
var GetInputType = function(object, key, config) {
    // Force input type to view
    if (config.view) return config.view;
    if (config.options) return 0, _inputTypesJs.ListType;
    if (!object) return 0, _inputTypesJs.StringType;
    var value = object[key];
    switch(typeof value){
        case "number":
            if (HasProperties(config, "min", "max")) return 0, _inputTypesJs.RangeType;
            return 0, _inputTypesJs.NumberType;
        case "string":
            return 0, _inputTypesJs.StringType;
        case "boolean":
            return 0, _inputTypesJs.BooleanType;
        default:
            return 0, _inputTypesJs.StringType;
    }
};
var HasProperties = function(object, ...keys) {
    for(var i = 0, cnt = keys.length; i < cnt; i++){
        if (object[keys[i]] === undefined) return false;
    }
    return true;
};
exports.default = GetInputType;

},{"./InputTypes.js":"faZVO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"faZVO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringType", ()=>StringType);
parcelHelpers.export(exports, "NumberType", ()=>NumberType);
parcelHelpers.export(exports, "RangeType", ()=>RangeType);
parcelHelpers.export(exports, "ListType", ()=>ListType);
parcelHelpers.export(exports, "ButtonsType", ()=>ButtonsType);
parcelHelpers.export(exports, "BooleanType", ()=>BooleanType);
parcelHelpers.export(exports, "ToggleSwitchType", ()=>ToggleSwitchType);
parcelHelpers.export(exports, "ColorType", ()=>ColorType);
const StringType = "string";
const NumberType = "number";
const RangeType = "range";
const ListType = "list";
const ButtonsType = "buttons";
const BooleanType = "boolean";
const ToggleSwitchType = "toggleSwitch";
const ColorType = "color";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kYABp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputRowJs = require("../gameobjects/inputrow/InputRow.js");
var _inputRowJsDefault = parcelHelpers.interopDefault(_inputRowJs);
var _createBackgroundJs = require("../../utils/build/CreateBackground.js");
var _createBackgroundJsDefault = parcelHelpers.interopDefault(_createBackgroundJs);
var _createTitleLabelJs = require("./CreateTitleLabel.js");
var _createTitleLabelJsDefault = parcelHelpers.interopDefault(_createTitleLabelJs);
var _createInputFieldJs = require("./CreateInputField.js");
var _createInputFieldJsDefault = parcelHelpers.interopDefault(_createInputFieldJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateInputRow = function(scene, config, style) {
    // Title
    var titleStyle = GetValue(style, "title") || {};
    var inputTitle = (0, _createTitleLabelJsDefault.default)(scene, config, titleStyle);
    // InputField
    var inputField = (0, _createInputFieldJsDefault.default)(scene, config, style);
    // Background
    var backgroundStyle = GetValue(style, "background") || {};
    var background = (0, _createBackgroundJsDefault.default)(scene, backgroundStyle);
    var inputRow = new (0, _inputRowJsDefault.default)(scene, {
        ...config,
        ...style,
        inputTitle: inputTitle,
        inputField: inputField,
        background: background
    });
    scene.add.existing(inputRow);
    inputRow.setTitle(config);
    return inputRow;
};
exports.default = CreateInputRow;

},{"../gameobjects/inputrow/InputRow.js":"bU0pY","../../utils/build/CreateBackground.js":"aOfVE","./CreateTitleLabel.js":"hZqPN","./CreateInputField.js":"7a5bi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bU0pY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
var _bindingTargetMethodsJs = require("./BindingTargetMethods.js");
var _bindingTargetMethodsJsDefault = parcelHelpers.interopDefault(_bindingTargetMethodsJs);
var _monitorTargetMethodsJs = require("./MonitorTargetMethods.js");
var _monitorTargetMethodsJsDefault = parcelHelpers.interopDefault(_monitorTargetMethodsJs);
var _minTitleWidthMethodsJs = require("./MinTitleWidthMethods.js");
var _minTitleWidthMethodsJsDefault = parcelHelpers.interopDefault(_minTitleWidthMethodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class InputRow extends (0, _sizerJsDefault.default) {
    constructor(scene, config){
        super(scene, config);
        this.type = "rexTweaker.InputRow";
        this.bindingTarget = undefined;
        this.bindTargetKey = undefined;
        this.autoUpdateEnable = true;
        var inputTitle = config.inputTitle;
        var inputField = config.inputField;
        var background = config.background;
        var proportion = GetValue(config, "proportion.title", 0);
        var titleSpace = GetValue(config, "space.title", 0);
        var padding;
        if (this.orientation === 0) padding = {
            right: titleSpace
        };
        else padding = {
            bottom: titleSpace
        };
        this.add(inputTitle, {
            proportion: proportion,
            expand: true,
            padding: padding
        });
        var defaultProportion = config.parentOrientation === 1 ? 1 : 0;
        var proportion = GetValue(config, "proportion.inputField", defaultProportion);
        this.add(inputField, {
            proportion: proportion,
            expand: true
        });
        if (background) this.addBackground(background);
        this.addChildrenMap("title", inputTitle);
        this.addChildrenMap("inputField", inputField);
        this.addChildrenMap("background", background);
        this.setupBinding();
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        this.stopMonitorTarget();
        super.destroy(fromScene);
    }
    setTitle(config) {
        var title = this.childrenMap.title;
        title.setTitle(config);
        return this;
    }
    preLayout() {
        var title = this.childrenMap.title;
        if (title) title.minWidth = 0;
        super.preLayout();
    }
}
Object.assign(InputRow.prototype, (0, _bindingTargetMethodsJsDefault.default), (0, _monitorTargetMethodsJsDefault.default), (0, _minTitleWidthMethodsJsDefault.default));
exports.default = InputRow;

},{"../../../sizer/Sizer.js":"ayu5S","./BindingTargetMethods.js":"6yHwI","./MonitorTargetMethods.js":"7zpHN","./MinTitleWidthMethods.js":"3lALB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yHwI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    setupBinding () {
        var inputField = this.childrenMap.inputField;
        inputField// Set text value to object when closing editor
        .on("valuechange", function(value) {
            if (!this.bindingTarget || !this.autoUpdateEnable) return;
            this.bindingTarget[this.bindTargetKey] = value;
        }, this);
        return this;
    },
    setAutoUpdateEnable (enable) {
        if (enable === undefined) enable = true;
        this.autoUpdateEnable = enable;
        return this;
    },
    setBindingTarget (target, key) {
        this.bindingTarget = target;
        if (key !== undefined) this.setBindingTargetKey(key);
        this.syncTargetValue();
        return this;
    },
    setBindingTargetKey (key) {
        this.bindTargetKey = key;
        return this;
    },
    syncTargetValue () {
        if (!this.bindingTarget || !this.bindTargetKey) return this;
        var inputField = this.childrenMap.inputField;
        inputField.syncValue(this.bindingTarget[this.bindTargetKey]);
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7zpHN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    startMonitorTarget () {
        if (this.isMonitoring) return this;
        this.isMonitoring = true;
        this.scene.events.on("postupdate", this.onMonitorTarget, this);
        return this;
    },
    stopMonitorTarget () {
        if (!this.isMonitoring) return this;
        this.isMonitoring = false;
        this.scene.events.off("postupdate", this.onMonitorTarget, this);
        return this;
    },
    onMonitorTarget () {
        if (!this.bindingTarget) return;
        var newValue = this.bindingTarget[this.bindTargetKey];
        var inputField = this.childrenMap.inputField;
        if (inputField.value === newValue) return;
        // Sync new value
        inputField.syncValue(newValue);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lALB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    getMinTitleWidth () {
        var title = this.childrenMap.title;
        if (!title) return 0;
        var padding = title.rexSizer.padding;
        var titleWidth = this.getChildWidth(this.childrenMap.title) + padding.left + padding.right;
        return titleWidth + this.getInnerPadding("left");
    },
    setMinTitleWidth (width) {
        var title = this.childrenMap.title;
        if (!title) return this;
        var padding = title.rexSizer.padding;
        width -= padding.left + padding.right;
        title.minWidth = width;
        return this;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZqPN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _titleJs = require("../gameobjects/label/Title.js");
var _titleJsDefault = parcelHelpers.interopDefault(_titleJs);
var CreateTitleLabel = function(scene, config, style) {
    var gameObject = new (0, _titleJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateTitleLabel;

},{"../gameobjects/label/Title.js":"6lyip","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7a5bi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTypesJs = require("../utils/inputs/InputTypes.js");
var _createTextInputJs = require("./CreateTextInput.js");
var _createTextInputJsDefault = parcelHelpers.interopDefault(_createTextInputJs);
var _createNumberInputJs = require("./CreateNumberInput.js");
var _createNumberInputJsDefault = parcelHelpers.interopDefault(_createNumberInputJs);
var _createRangeInputJs = require("./CreateRangeInput.js");
var _createRangeInputJsDefault = parcelHelpers.interopDefault(_createRangeInputJs);
var _createListInputJs = require("./CreateListInput.js");
var _createListInputJsDefault = parcelHelpers.interopDefault(_createListInputJs);
var _createButtonsInputJs = require("./CreateButtonsInput.js");
var _createButtonsInputJsDefault = parcelHelpers.interopDefault(_createButtonsInputJs);
var _createCheckboxInputJs = require("./CreateCheckboxInput.js");
var _createCheckboxInputJsDefault = parcelHelpers.interopDefault(_createCheckboxInputJs);
var _createToggleSwitchInputJs = require("./CreateToggleSwitchInput.js");
var _createToggleSwitchInputJsDefault = parcelHelpers.interopDefault(_createToggleSwitchInputJs);
var _createColorInputJs = require("./CreateColorInput.js");
var _createColorInputJsDefault = parcelHelpers.interopDefault(_createColorInputJs);
var _isFunctionJs = require("../../../../plugins/utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var CreateInputField = function(scene, config, style) {
    var viewType = config.view;
    var callback;
    switch(viewType){
        case 0, _inputTypesJs.StringType:
            callback = (0, _createTextInputJsDefault.default);
            break;
        case 0, _inputTypesJs.NumberType:
            callback = (0, _createNumberInputJsDefault.default);
            break;
        case 0, _inputTypesJs.RangeType:
            callback = (0, _createRangeInputJsDefault.default);
            break;
        case 0, _inputTypesJs.ListType:
            callback = (0, _createListInputJsDefault.default);
            break;
        case 0, _inputTypesJs.ButtonsType:
            callback = (0, _createButtonsInputJsDefault.default);
            break;
        case 0, _inputTypesJs.BooleanType:
            callback = (0, _createCheckboxInputJsDefault.default);
            break;
        case 0, _inputTypesJs.ToggleSwitchType:
            callback = (0, _createToggleSwitchInputJsDefault.default);
            break;
        case 0, _inputTypesJs.ColorType:
            callback = (0, _createColorInputJsDefault.default);
            break;
        default:
            callback = (0, _isFunctionJsDefault.default)(viewType) ? viewType : (0, _createTextInputJsDefault.default);
            break;
    }
    var gameObject = callback(scene, config, style, gameObject);
    // Extra settings
    gameObject.setTextFormatCallback(config.format);
    return gameObject;
};
exports.default = CreateInputField;

},{"../utils/inputs/InputTypes.js":"faZVO","./CreateTextInput.js":"aGBVq","./CreateNumberInput.js":"ltr85","./CreateRangeInput.js":"5MUJh","./CreateListInput.js":"7AYlr","./CreateButtonsInput.js":"hkyux","./CreateCheckboxInput.js":"8FJKp","./CreateToggleSwitchInput.js":"j7A5z","./CreateColorInput.js":"dad8u","../../../../plugins/utils/object/IsFunction.js":"5hi03","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aGBVq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textInputJs = require("../gameobjects/inputfield/TextInput.js");
var _textInputJsDefault = parcelHelpers.interopDefault(_textInputJs);
var CreateTextInput = function(scene, config, style) {
    var gameObject = new (0, _textInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
    return gameObject;
};
exports.default = CreateTextInput;

},{"../gameobjects/inputfield/TextInput.js":"8PTtZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8PTtZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createInputTextJs = require("../../../utils/build/CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
class TextInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.TextInput";
        var inputTextConfig = config.inputText;
        var inputText = (0, _createInputTextJsDefault.default)(scene, inputTextConfig);
        this.add(inputText, {
            proportion: 1,
            expand: true
        });
        this.addChildrenMap("inputText", inputText);
        inputText.on("close", function() {
            this.setValue(inputText.value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
        this.childrenMap.inputText.setText(text);
        super.value = value; // Fire 'valuechange' event
    }
    setInputTextReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.childrenMap.inputText.setReadOnly(enable);
        return this;
    }
}
exports.default = TextInput;

},{"./InputFieldBase.js":"gowRk","../../../utils/build/CreateInputText.js":"6hgZA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gowRk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sizerJs = require("../../../sizer/Sizer.js");
var _sizerJsDefault = parcelHelpers.interopDefault(_sizerJs);
class InputFiledBase extends (0, _sizerJsDefault.default) {
    get bindingTarget() {
        return this.getParentSizer().bindingTarget;
    }
    get bindingKey() {
        return this.getParentSizer().bindTargetKey;
    }
    get value() {
        return this._value;
    }
    validate(newValue) {
        if (this.syncValueFlag || !this.validateCallback) return true;
        return this.validateCallback(newValue, this._value, this.bindingTarget, this.bindingKey);
    }
    // Override
    set value(value) {
        if (this._value === value) return;
        var oldValue = this._value;
        this._value = value;
        if (!this.syncValueFlag) this.emit("valuechange", value, oldValue, this.bindingTarget, this.bindingKey);
    }
    getValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        return this;
    }
    /* 
    Internal method invoked when 
    - inputRow.setBindingTarget(target), or 
    - inputRow.syncTargetValue()
    */ syncValue(value) {
        this.syncValueFlag = true;
        this.value = value;
        this.syncValueFlag = false;
        return this;
    }
    // Override
    get readOnly() {
        return this._readOnly;
    }
    // Override
    set readOnly(value) {
        this._readOnly = value;
    }
    setReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.readOnly = enable;
        return true;
    }
    setTextFormatCallback(callback) {
        this.textFormatCallback = callback;
        return this;
    }
    setValidateCallback(callback) {
        this.validateCallback = callback;
        return this;
    }
}
exports.default = InputFiledBase;

},{"../../../sizer/Sizer.js":"ayu5S","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltr85":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _numberInputJs = require("../gameobjects/inputfield/NumberInput.js");
var _numberInputJsDefault = parcelHelpers.interopDefault(_numberInputJs);
var CreateNumberInput = function(scene, config, style) {
    var gameObject = new (0, _numberInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
    return gameObject;
};
exports.default = CreateNumberInput;

},{"../gameobjects/inputfield/NumberInput.js":"dRlL5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dRlL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createInputTextJs = require("../../../utils/build/CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
class NumberInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.NumberInput";
        var inputTextConfig = config.inputNumber || config.inputText;
        var inputText = (0, _createInputTextJsDefault.default)(scene, inputTextConfig).setNumberInput();
        this.add(inputText, {
            proportion: 1,
            expand: true
        });
        this.addChildrenMap("inputText", inputText);
        inputText.on("close", function() {
            this.setValue(inputText.value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
        this.childrenMap.inputText.setText(text);
        super.value = value; // Fire 'valuechange' event
    }
    setInputTextReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.childrenMap.inputText.setReadOnly(enable);
        return this;
    }
}
exports.default = NumberInput;

},{"./InputFieldBase.js":"gowRk","../../../utils/build/CreateInputText.js":"6hgZA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MUJh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rangeInputJs = require("../gameobjects/inputfield/RangeInput.js");
var _rangeInputJsDefault = parcelHelpers.interopDefault(_rangeInputJs);
var CreateRangeInput = function(scene, config, style) {
    var gameObject = new (0, _rangeInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    gameObject.setRange(config.min, config.max, config.step);
    gameObject.setInputTextReadOnly(!!config.inputTextReadOnly);
    return gameObject;
};
exports.default = CreateRangeInput;

},{"../gameobjects/inputfield/RangeInput.js":"2krcV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2krcV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createSliderJs = require("../utils/CreateSlider.js");
var _createSliderJsDefault = parcelHelpers.interopDefault(_createSliderJs);
var _createInputTextJs = require("../../../utils/build/CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Linear = Phaser.Math.Linear;
const SnapFloor = Phaser.Math.Snap.Floor;
class RangeInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.RangeInput";
        var sliderConfig = config.slider;
        var trackSizeKey = this.orientation === 0 ? "track.height" : "track.width";
        var trackSize = GetValue(sliderConfig, trackSizeKey);
        var slider = (0, _createSliderJsDefault.default)(scene, sliderConfig);
        var defaultProportion = config.parentOrientation === 1 ? 2 : 0;
        var proportion = GetValue(config, "proportion.range.slider", defaultProportion);
        var expand = trackSize === undefined;
        this.add(slider, {
            proportion: proportion,
            expand: expand
        });
        var inputTextConfig = config.inputNumber || config.inputText;
        var inputText = (0, _createInputTextJsDefault.default)(scene, inputTextConfig).setNumberInput();
        var defaultProportion = config.parentOrientation === 1 ? 1 : 0;
        var proportion = GetValue(config, "proportion.range.inputText", defaultProportion);
        this.add(inputText, {
            proportion: proportion,
            expand: true
        });
        this.addChildrenMap("slider", slider);
        this.addChildrenMap("inputText", inputText);
        inputText.on("close", function() {
            this.setValue(inputText.value);
        }, this);
        slider.on("valuechange", function() {
            var value = Linear(this.minValue, this.maxValue, slider.value);
            if (this.step) value = SnapFloor(value, this.step, this.minValue);
            this.setValue(value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        var text = this.textFormatCallback ? this.textFormatCallback(value) : value;
        this.childrenMap.inputText.setText("").setText(text);
        this.childrenMap.slider.setValue(value, this.minValue, this.maxValue);
        super.value = value; // Fire 'valuechange' event
    }
    setRange(min, max, step) {
        this.minValue = min;
        this.maxValue = max;
        this.step = step;
        this.childrenMap.slider.setGap(step, min, max);
        return this;
    }
    setInputTextReadOnly(enable) {
        if (enable === undefined) enable = true;
        this.childrenMap.inputText.setReadOnly(enable);
        return this;
    }
}
exports.default = RangeInput;

},{"./InputFieldBase.js":"gowRk","../utils/CreateSlider.js":"l3YjQ","../../../utils/build/CreateInputText.js":"6hgZA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3YjQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sliderJs = require("../../../slider/Slider.js");
var _sliderJsDefault = parcelHelpers.interopDefault(_sliderJs);
var CreateSlider = function(scene, config) {
    var gameObject = new (0, _sliderJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateSlider;

},{"../../../slider/Slider.js":"f16Jy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7AYlr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _listInputJs = require("../gameobjects/inputfield/ListInput.js");
var _listInputJsDefault = parcelHelpers.interopDefault(_listInputJs);
var CreateListInput = function(scene, config, style) {
    var gameObject = new (0, _listInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    gameObject.setOptions(config.options);
    return gameObject;
};
exports.default = CreateListInput;

},{"../gameobjects/inputfield/ListInput.js":"025nx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"025nx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createDropDownListJs = require("../../../utils/build/CreateDropDownList.js");
var _createDropDownListJsDefault = parcelHelpers.interopDefault(_createDropDownListJs);
var _optionsMethodsJs = require("../../utils/OptionsMethods.js");
class ListInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.ListInput";
        var list = (0, _createDropDownListJsDefault.default)(scene, config.list);
        this.add(list, {
            proportion: 1,
            expand: true
        });
        this.addChildrenMap("list", list);
        list.on("button.click", function(dropDownList, listPanel, button, index, pointer, event) {
            this.setValue(button.value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        var list = this.childrenMap.list;
        var text = (0, _optionsMethodsJs.GetOptionText)(list.options, value);
        list.resetDisplayContent({
            text: text
        });
        super.value = value; // Fire 'valuechange' event
    }
    setOptions(options) {
        this.childrenMap.list.setOptions(options);
        return this;
    }
}
exports.default = ListInput;

},{"./InputFieldBase.js":"gowRk","../../../utils/build/CreateDropDownList.js":"5z0G7","../../utils/OptionsMethods.js":"dGotB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5z0G7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buildListConfigJs = require("./BuildListConfig.js");
var _buildListConfigJsDefault = parcelHelpers.interopDefault(_buildListConfigJs);
var _dropDownListJs = require("../../dropdownlist/DropDownList.js");
var _dropDownListJsDefault = parcelHelpers.interopDefault(_dropDownListJs);
var CreateDropDownList = function(scene, config) {
    config = (0, _buildListConfigJsDefault.default)(scene, config);
    var gameObject = new (0, _dropDownListJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateDropDownList;

},{"./BuildListConfig.js":"b3Cd8","../../dropdownlist/DropDownList.js":"51SDe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dGotB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetOptionIndex", ()=>GetOptionIndex);
parcelHelpers.export(exports, "GetOptionText", ()=>GetOptionText);
var GetOptionIndex = function(options, value) {
    for(var i = 0, cnt = options.length; i < cnt; i++){
        var option = options[i];
        if (option.value === value) return i;
    }
    return undefined;
};
var GetOptionText = function(options, value) {
    var index = GetOptionIndex(options, value);
    if (index == null) return undefined;
    return options[index].text;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hkyux":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonsInputJs = require("../gameobjects/inputfield/ButtonsInput.js");
var _buttonsInputJsDefault = parcelHelpers.interopDefault(_buttonsInputJs);
var CreateButtonsInput = function(scene, config, style) {
    var gameObject = new (0, _buttonsInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    gameObject.setOptions(config.options);
    return gameObject;
};
exports.default = CreateButtonsInput;

},{"../gameobjects/inputfield/ButtonsInput.js":"3ViyD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ViyD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createButtonsJs = require("../utils/CreateButtons.js");
var _createButtonsJsDefault = parcelHelpers.interopDefault(_createButtonsJs);
var _deepCloneJs = require("../../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var _createLabelJs = require("../../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _optionsMethodsJs = require("../../utils/OptionsMethods.js");
var _setButtonsActiveStateJs = require("../utils/SetButtonsActiveState.js");
var _setButtonsActiveStateJsDefault = parcelHelpers.interopDefault(_setButtonsActiveStateJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ButtonsInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.ButtonsInput";
        var buttonConfig = config.button ? (0, _deepCloneJsDefault.default)(config.button) : {};
        var buttonExpand = GetValue(buttonConfig, "expand", true);
        if (buttonExpand) buttonConfig.align = "center";
        delete buttonConfig.expand;
        var list = (0, _createButtonsJsDefault.default)(scene, {
            expand: buttonExpand
        });
        list.buttonConfig = buttonConfig;
        this.add(list, {
            proportion: 1,
            expand: true
        });
        this.addChildrenMap("list", list);
        list.on("button.click", function(button, index, pointer, event) {
            var option = list.options[index];
            if (!option) return; // ??
            this._selectedIndex = index;
            this.setValue(option.value);
            this._selectedIndex = undefined;
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        var list = this.childrenMap.list;
        var index = this._selectedIndex; // See list's 'button.click' event
        if (index === undefined) index = (0, _optionsMethodsJs.GetOptionIndex)(list.options, value);
        (0, _setButtonsActiveStateJsDefault.default)(list.childrenMap.buttons, index);
        super.value = value; // Fire 'valuechange' event
    }
    setOptions(options) {
        var list = this.childrenMap.list;
        list.options = options;
        var scene = this.scene;
        var buttonConfig = list.buttonConfig;
        list.clearButtons(true);
        for(var i = 0, cnt = options.length; i < cnt; i++){
            var option = options[i];
            var button = (0, _createLabelJsDefault.default)(scene, buttonConfig).setActiveState(false).resetDisplayContent({
                text: option.text
            });
            list.addButton(button);
        }
        return this;
    }
}
exports.default = ButtonsInput;

},{"./InputFieldBase.js":"gowRk","../utils/CreateButtons.js":"jjDec","../../../../../plugins/utils/object/DeepClone.js":"7G9ja","../../../utils/build/CreateLabel.js":"kvGzR","../../utils/OptionsMethods.js":"dGotB","../utils/SetButtonsActiveState.js":"b8oCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjDec":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buttonsJs = require("../../../buttons/Buttons.js");
var _buttonsJsDefault = parcelHelpers.interopDefault(_buttonsJs);
var CreateButtons = function(scene, config) {
    var gameObject = new (0, _buttonsJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateButtons;

},{"../../../buttons/Buttons.js":"9NfMe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b8oCf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetButtonsActiveStateByIndex = function(buttons, index) {
    for(var i = 0, cnt = buttons.length; i < cnt; i++){
        var button = buttons[i];
        if (!button) continue;
        button.setActiveState(i === index);
    }
};
exports.default = SetButtonsActiveStateByIndex;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8FJKp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxInputJs = require("../gameobjects/inputfield/CheckboxInput.js");
var _checkboxInputJsDefault = parcelHelpers.interopDefault(_checkboxInputJs);
var CreateCheckboxInput = function(scene, config, style) {
    var gameObject = new (0, _checkboxInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateCheckboxInput;

},{"../gameobjects/inputfield/CheckboxInput.js":"1MCFM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1MCFM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createCheckboxJs = require("../utils/CreateCheckbox.js");
var _createCheckboxJsDefault = parcelHelpers.interopDefault(_createCheckboxJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class CheckboxInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.CheckboxInput";
        var checkboxConfig = config.checkbox;
        var checkbox = (0, _createCheckboxJsDefault.default)(scene, checkboxConfig);
        var size = GetValue(checkboxConfig, "size");
        if (size !== undefined) checkbox.setSize(size, size);
        var fitRatio = size !== undefined ? 0 : 1;
        this.add(checkbox, {
            proportion: 0,
            expand: false,
            fitRatio: fitRatio
        });
        this.addChildrenMap("checkbox", checkbox);
        checkbox.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        this.childrenMap.checkbox.setValue(value);
        super.value = value; // Fire 'valuechange' event
    }
}
exports.default = CheckboxInput;

},{"./InputFieldBase.js":"gowRk","../utils/CreateCheckbox.js":"411fc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"411fc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _checkboxJs = require("../../../checkbox/Checkbox.js");
var _checkboxJsDefault = parcelHelpers.interopDefault(_checkboxJs);
var CreateCheckbox = function(scene, config) {
    var gameObject = new (0, _checkboxJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateCheckbox;

},{"../../../checkbox/Checkbox.js":"3gDN4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7A5z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleSwitchInputJs = require("../gameobjects/inputfield/ToggleSwitchInput.js");
var _toggleSwitchInputJsDefault = parcelHelpers.interopDefault(_toggleSwitchInputJs);
var CreateToggleSwitchInput = function(scene, config, style) {
    var gameObject = new (0, _toggleSwitchInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateToggleSwitchInput;

},{"../gameobjects/inputfield/ToggleSwitchInput.js":"6tQE9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6tQE9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createToggleSwitchJs = require("../utils/CreateToggleSwitch.js");
var _createToggleSwitchJsDefault = parcelHelpers.interopDefault(_createToggleSwitchJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class ToggleSwitchInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.ToggleSwitchInput";
        var toggleSwitchConfig = config.toggleSwitch;
        var toggleSwitch = (0, _createToggleSwitchJsDefault.default)(scene, toggleSwitchConfig);
        var size = GetValue(toggleSwitchConfig, "size");
        if (size !== undefined) toggleSwitch.setSize(size, size);
        var fitRatio = size !== undefined ? 0 : 1;
        this.addSpace().add(toggleSwitch, {
            proportion: 0,
            expand: false,
            fitRatio: fitRatio
        });
        this.addChildrenMap("toggleSwitch", toggleSwitch);
        toggleSwitch.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        this.childrenMap.toggleSwitch.setValue(value);
        super.value = value; // Fire 'valuechange' event
    }
}
exports.default = ToggleSwitchInput;

},{"./InputFieldBase.js":"gowRk","../utils/CreateToggleSwitch.js":"i6E8w","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6E8w":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _toggleSwitchJs = require("../../../toggleswitch/ToggleSwitch.js");
var _toggleSwitchJsDefault = parcelHelpers.interopDefault(_toggleSwitchJs);
var CreateToggleSwitch = function(scene, config) {
    var gameObject = new (0, _toggleSwitchJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateToggleSwitch;

},{"../../../toggleswitch/ToggleSwitch.js":"fDqWl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dad8u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorInputJs = require("../gameobjects/inputfield/ColorInput.js");
var _colorInputJsDefault = parcelHelpers.interopDefault(_colorInputJs);
var CreateColorInput = function(scene, config, style) {
    var gameObject = new (0, _colorInputJsDefault.default)(scene, style);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateColorInput;

},{"../gameobjects/inputfield/ColorInput.js":"3PY32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3PY32":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputFieldBaseJs = require("./InputFieldBase.js");
var _inputFieldBaseJsDefault = parcelHelpers.interopDefault(_inputFieldBaseJs);
var _createColorInputJs = require("../../../utils/build/CreateColorInput.js");
var _createColorInputJsDefault = parcelHelpers.interopDefault(_createColorInputJs);
class ColorInput extends (0, _inputFieldBaseJsDefault.default) {
    constructor(scene, config){
        if (config === undefined) config = {};
        super(scene);
        this.type = "rexTweaker.ColorInput";
        var colorInputConfig = config.colorInput;
        var colorInput = (0, _createColorInputJsDefault.default)(scene, colorInputConfig);
        this.add(colorInput, {
            proportion: 1,
            expand: true
        });
        this.addChildrenMap("colorInput", colorInput);
        colorInput.on("valuechange", function(value) {
            this.setValue(value);
        }, this);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value === value) return;
        if (!this.validate(value)) value = this._value; // Back to previous value
        this.childrenMap.colorInput.setValue(value);
        super.value = value; // Fire 'valuechange' event
    }
}
exports.default = ColorInput;

},{"./InputFieldBase.js":"gowRk","../../../utils/build/CreateColorInput.js":"gcf8b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gcf8b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorInputJs = require("../../colorinput/colorinput/ColorInput.js");
var _colorInputJsDefault = parcelHelpers.interopDefault(_colorInputJs);
var _deepCloneJs = require("../../../../plugins/utils/object/DeepClone.js");
var _deepCloneJsDefault = parcelHelpers.interopDefault(_deepCloneJs);
var CreateColorInput = function(scene, config, deepCloneConfig) {
    if (deepCloneConfig === undefined) deepCloneConfig = true;
    if (deepCloneConfig) config = config ? (0, _deepCloneJsDefault.default)(config) : {};
    else if (!config) config = {};
    var inputText = new (0, _colorInputJsDefault.default)(scene, config);
    scene.add.existing(inputText);
    return inputText;
};
exports.default = CreateColorInput;

},{"../../colorinput/colorinput/ColorInput.js":"jpoc3","../../../../plugins/utils/object/DeepClone.js":"7G9ja","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hOhfS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createButtonsJs = require("../builders/CreateButtons.js");
var _createButtonsJsDefault = parcelHelpers.interopDefault(_createButtonsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var AddButtons = function(config) {
    var scene = this.scene;
    if (config === undefined) config = {};
    if (config.hasOwnProperty("label")) {
        config.buttons = [
            {
                label: config.label,
                callback: config.callback
            }
        ];
        delete config.label;
        delete config.callback;
    }
    var target = config.bindingTarget;
    delete config.bindingTarget;
    // Create buttons
    var buttonsStyle = GetValue(this.styles, "inputRow") || {};
    var buttons = (0, _createButtonsJsDefault.default)(scene, config, buttonsStyle);
    // Add buttons
    this.add(buttons, {
        expand: true
    });
    // Set binding target
    if (target) buttons.setBindingTarget(target);
    if (config.key) this.root.addChildrenMap(config.key, buttons);
    return this;
};
exports.default = AddButtons;

},{"../builders/CreateButtons.js":"f6HmL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f6HmL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createRoundRectangleJs = require("../../utils/build/CreateRoundRectangle.js");
var _createRoundRectangleJsDefault = parcelHelpers.interopDefault(_createRoundRectangleJs);
var _createTitleLabelJs = require("./CreateTitleLabel.js");
var _createTitleLabelJsDefault = parcelHelpers.interopDefault(_createTitleLabelJs);
var _createLabelJs = require("../../utils/build/CreateLabel.js");
var _createLabelJsDefault = parcelHelpers.interopDefault(_createLabelJs);
var _createButtonsJs = require("../gameobjects/utils/CreateButtons.js");
var _createButtonsJsDefault = parcelHelpers.interopDefault(_createButtonsJs);
var _inputRowJs = require("../gameobjects/inputrow/InputRow.js");
var _inputRowJsDefault = parcelHelpers.interopDefault(_inputRowJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var CreateButtons = function(scene, config, style) {
    // Title
    var titleStyle = GetValue(style, "title") || {};
    var title = (0, _createTitleLabelJsDefault.default)(scene, config, titleStyle);
    // Buttons
    var buttonsConfig = config.buttons;
    var buttonStyle = GetValue(style, "button") || {};
    var buttons = [];
    for(var i = 0, cnt = buttonsConfig.length; i < cnt; i++){
        var button = (0, _createLabelJsDefault.default)(scene, buttonStyle);
        buttons.push(button);
        var buttonConfig = buttonsConfig[i];
        button.resetDisplayContent({
            text: buttonConfig.label
        });
        button.callback = buttonConfig.callback;
    }
    var buttonsSizer = (0, _createButtonsJsDefault.default)(scene, {
        buttons: buttons,
        expand: buttons.length === 1
    });
    // Background
    var backgroundStyle = GetValue(style, "background") || {};
    var background = (0, _createRoundRectangleJsDefault.default)(scene, backgroundStyle);
    // InputRow
    var inputRow = new (0, _inputRowJsDefault.default)(scene, {
        ...style,
        inputTitle: title,
        inputField: buttonsSizer,
        background: background
    });
    scene.add.existing(inputRow);
    inputRow.setTitle(config);
    buttonsSizer.on("button.click", function(button) {
        button.callback(inputRow.bindingTarget);
    });
    return inputRow;
};
exports.default = CreateButtons;

},{"../../utils/build/CreateRoundRectangle.js":"1yAeR","./CreateTitleLabel.js":"hZqPN","../../utils/build/CreateLabel.js":"kvGzR","../gameobjects/utils/CreateButtons.js":"jjDec","../gameobjects/inputrow/InputRow.js":"bU0pY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yAeR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _roundRectangleJs = require("../../roundrectangle/RoundRectangle.js");
var _roundRectangleJsDefault = parcelHelpers.interopDefault(_roundRectangleJs);
var CreateRoundRectangle = function(scene, config) {
    var gameObject = new (0, _roundRectangleJsDefault.default)(scene, config);
    scene.add.existing(gameObject);
    return gameObject;
};
exports.default = CreateRoundRectangle;

},{"../../roundrectangle/RoundRectangle.js":"9fgJM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Wa7Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createBackground = require("../builders/CreateBackground");
var _createBackgroundDefault = parcelHelpers.interopDefault(_createBackground);
const GetValue = Phaser.Utils.Objects.GetValue;
var AddSeparator = function(config) {
    var scene = this.scene;
    // Create separator
    var separatorStyle = GetValue(this.styles, "separator");
    var separator = (0, _createBackgroundDefault.default)(scene, config, separatorStyle);
    // Add separator
    this.add(separator, {
        expand: true
    });
    return this;
};
exports.default = AddSeparator;

},{"../builders/CreateBackground":"9GaPZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5AczD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetBindingTarget = function(target) {
    var children = this.sizerChildren;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (!child.setBindingTarget) continue;
        child.setBindingTarget(target);
    }
    return this;
};
exports.default = SetBindingTarget;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hB3ef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetMaxInputRowTitleWidth = function() {
    var maxTitleWidth = 0;
    var children = this.sizerChildren;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.rexSizer.hidden) continue;
        if (child.getMinTitleWidth) maxTitleWidth = Math.max(maxTitleWidth, child.getMinTitleWidth());
        else if (child.getMaxInputRowTitleWidth) maxTitleWidth = Math.max(maxTitleWidth, child.getMaxInputRowTitleWidth());
    }
    return maxTitleWidth + this.getInnerPadding("left");
};
exports.default = GetMaxInputRowTitleWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XnFT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var SetInputRowTitleWidth = function(width) {
    width -= this.getInnerPadding("left");
    var children = this.sizerChildren;
    for(var i = 0, cnt = children.length; i < cnt; i++){
        var child = children[i];
        if (child.rexSizer.hidden) continue;
        if (child.setMinTitleWidth) child.setMinTitleWidth(width);
        else if (child.setInputRowTitleWidth) child.setInputRowTitleWidth(width);
    }
    return this;
};
exports.default = SetInputRowTitleWidth;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lTB47":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickJs = require("./Click.js");
var _clickJsDefault = parcelHelpers.interopDefault(_clickJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("click", function(gameObject, config) {
    return new (0, _clickJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Click", (0, _clickJsDefault.default));
exports.default = (0, _clickJsDefault.default);

},{"./Click.js":"1KCLI","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ichqZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clickOutsideJs = require("./ClickOutside.js");
var _clickOutsideJsDefault = parcelHelpers.interopDefault(_clickOutsideJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("clickOutside", function(gameObject, config) {
    return new (0, _clickOutsideJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.ClickOutside", (0, _clickOutsideJsDefault.default));
exports.default = (0, _clickOutsideJsDefault.default);

},{"./ClickOutside.js":"7gsz8","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lfp9C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inTouchingJs = require("./InTouching.js");
var _inTouchingJsDefault = parcelHelpers.interopDefault(_inTouchingJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("inTouching", function(gameObject, config) {
    return new (0, _inTouchingJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.InTouching", (0, _inTouchingJsDefault.default));
exports.default = (0, _inTouchingJsDefault.default);

},{"./InTouching.js":"1HeWv","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dvT6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tapJs = require("./Tap.js");
var _tapJsDefault = parcelHelpers.interopDefault(_tapJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _isGameObjectJs = require("../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("tap", function(gameObject, config) {
    if (!(0, _isGameObjectJsDefault.default)(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new (0, _tapJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Tap", (0, _tapJsDefault.default));
exports.default = (0, _tapJsDefault.default);

},{"./Tap.js":"18whP","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/system/IsGameObject.js":"cLBuU","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7C3oa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pressJs = require("./Press.js");
var _pressJsDefault = parcelHelpers.interopDefault(_pressJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _isGameObjectJs = require("../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("press", function(gameObject, config) {
    if (!(0, _isGameObjectJsDefault.default)(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new (0, _pressJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Press", (0, _pressJsDefault.default));
exports.default = (0, _pressJsDefault.default);

},{"./Press.js":"5quO4","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/system/IsGameObject.js":"cLBuU","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"662sF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _swipeJs = require("./Swipe.js");
var _swipeJsDefault = parcelHelpers.interopDefault(_swipeJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _isGameObjectJs = require("../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("swipe", function(gameObject, config) {
    if (!(0, _isGameObjectJsDefault.default)(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new (0, _swipeJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Swipe", (0, _swipeJsDefault.default));
exports.default = (0, _swipeJsDefault.default);

},{"./Swipe.js":"ljpfa","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/system/IsGameObject.js":"cLBuU","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3N66S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _panJs = require("./Pan.js");
var _panJsDefault = parcelHelpers.interopDefault(_panJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _isGameObjectJs = require("../../../plugins/utils/system/IsGameObject.js");
var _isGameObjectJsDefault = parcelHelpers.interopDefault(_isGameObjectJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("pan", function(gameObject, config) {
    if (!(0, _isGameObjectJsDefault.default)(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new (0, _panJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Pan", (0, _panJsDefault.default));
exports.default = (0, _panJsDefault.default);

},{"./Pan.js":"egVIi","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/system/IsGameObject.js":"cLBuU","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egVIi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gestures = require("../../../plugins/gestures");
exports.default = (0, _gestures.Pan);

},{"../../../plugins/gestures":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83TDr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dragJs = require("./Drag.js");
var _dragJsDefault = parcelHelpers.interopDefault(_dragJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("drag", function(gameObject, config) {
    return new (0, _dragJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Drag", (0, _dragJsDefault.default));
exports.default = (0, _dragJsDefault.default);

},{"./Drag.js":"lYhQ1","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lYhQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dragJs = require("../../../plugins/drag.js");
var _dragJsDefault = parcelHelpers.interopDefault(_dragJs);
exports.default = (0, _dragJsDefault.default);

},{"../../../plugins/drag.js":"8CM5F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8CM5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _dragJs = require("./input/drag/Drag.js");
var _dragJsDefault = parcelHelpers.interopDefault(_dragJs);
exports.default = (0, _dragJsDefault.default);

},{"./input/drag/Drag.js":"6inol","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6inol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _requestDragJs = require("../../utils/input/RequestDrag.js");
var _requestDragJsDefault = parcelHelpers.interopDefault(_requestDragJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;
const RotateAroundDistance = Phaser.Math.RotateAroundDistance;
class Drag extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, {
            eventEmitter: false
        });
        // No event emitter
        // this.parent = gameObject;
        this._enable = undefined;
        gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        this.pointer = undefined;
        this.setEnable(GetValue(o, "enable", true));
        this.setAxisMode(GetValue(o, "axis", 0));
        this.setAxisRotation(GetValue(o, "rotation", 0));
        return this;
    }
    toJSON() {
        return {
            enable: this.enable,
            axis: this.axisMode,
            rotation: this.axisRotation
        };
    }
    boot() {
        var gameObject = this.parent;
        gameObject.on("dragstart", this.onDragStart, this);
        gameObject.on("drag", this.onDrag, this);
        gameObject.on("dragend", this.onDragEnd, this);
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        // GameObject events will be removed when this gameObject destroyed 
        // this.parent.on('dragstart', this.onDragStart, this);
        // this.parent.on('drag', this.onDrag, this);
        // this.parent.on('dragend', this.onDragEnd, this);
        this.pointer = undefined;
        super.shutdown(fromScene);
    }
    get enable() {
        return this._enable;
    }
    set enable(e) {
        if (this._enable === e) return;
        if (!e) this.dragend();
        this._enable = e;
        this.scene.input.setDraggable(this.parent, e);
        return this;
    }
    setEnable(e) {
        if (e === undefined) e = true;
        this.enable = e;
        return this;
    }
    toggleEnable() {
        this.setEnable(!this.enable);
        return this;
    }
    setAxisMode(m) {
        if (typeof m === "string") m = DIRECTIONNODE[m];
        this.axisMode = m;
        return this;
    }
    setAxisRotation(a) {
        this.axisRotation = a;
        return this;
    }
    drag() {
        (0, _requestDragJsDefault.default)(this.parent);
        return this;
    }
    dragend() {
        if (!this.isDragging) return;
        this.scene.input.setDragState(this.pointer, 5);
        return this;
    }
    onDragStart(pointer, dragX, dragY) {
        if (this.isDragging) return;
        this.pointer = pointer;
    }
    onDrag(pointer, dragX, dragY) {
        if (this.pointer !== pointer) return;
        var gameObject = this.parent;
        if (this.axisMode === 0) {
            gameObject.x = dragX;
            gameObject.y = dragY;
        } else if (this.axisRotation === 0) {
            if (this.axisMode === 1) gameObject.x = dragX;
            else if (this.axisMode === 2) gameObject.y = dragY;
        } else {
            var dist;
            var p1 = {
                x: dragX,
                y: dragY
            };
            dist = DistanceBetween(p1.x, p1.y, gameObject.x, gameObject.y);
            p1 = RotateAroundDistance(p1, gameObject.x, gameObject.y, -this.axisRotation, dist);
            if (this.axisMode === 1) p1.y = gameObject.y;
            else if (this.axisMode === 2) p1.x = gameObject.x;
            dist = DistanceBetween(p1.x, p1.y, gameObject.x, gameObject.y);
            p1 = RotateAroundDistance(p1, gameObject.x, gameObject.y, this.axisRotation, dist);
            gameObject.x = p1.x;
            gameObject.y = p1.y;
        }
    }
    onDragEnd(pointer, dragX, dragY, dropped) {
        if (this.pointer !== pointer) return;
        this.pointer = undefined;
    }
    get isDragging() {
        return this.pointer !== undefined;
    }
}
const DIRECTIONNODE = {
    "both": 0,
    "h&v": 0,
    "x&y": 0,
    "horizontal": 1,
    "h": 1,
    "x": 1,
    "vertical": 2,
    "v": 2,
    "y": 2
};
exports.default = Drag;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","../../utils/input/RequestDrag.js":"9XOwp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9XOwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isPointerInHitAreaJs = require("./IsPointerInHitArea.js");
var _isPointerInHitAreaJsDefault = parcelHelpers.interopDefault(_isPointerInHitAreaJs);
var RequestDrag = function(gameObject) {
    var inputPlugin = gameObject.scene.input;
    var inputManager = inputPlugin.manager;
    var pointersTotal = inputManager.pointersTotal;
    var pointers = inputManager.pointers, pointer;
    for(var i = 0; i < pointersTotal; i++){
        pointer = pointers[i];
        if (!pointer.primaryDown || inputPlugin.getDragState(pointer) !== 0 || !(0, _isPointerInHitAreaJsDefault.default)(gameObject, pointer)) continue;
        // For 3.18.0
        inputPlugin.setDragState(pointer, 1);
        inputPlugin._drag[pointer.id] = [
            gameObject
        ];
        if (inputPlugin.dragDistanceThreshold === 0 || inputPlugin.dragTimeThreshold === 0) {
            //  No drag criteria, so snap immediately to mode 3
            inputPlugin.setDragState(pointer, 3);
            inputPlugin.processDragStartList(pointer);
        } else //  Check the distance / time on the next event
        inputPlugin.setDragState(pointer, 2);
        // For 3.18.0
        return true;
    }
    return false;
};
exports.default = RequestDrag;

},{"./IsPointerInHitArea.js":"4yv3N","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8rFT9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pinchJs = require("./Pinch.js");
var _pinchJsDefault = parcelHelpers.interopDefault(_pinchJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("pinch", function(config) {
    return new (0, _pinchJsDefault.default)(this.scene, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Pinch", (0, _pinchJsDefault.default));
exports.default = (0, _pinchJsDefault.default);

},{"./Pinch.js":"13b6P","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"13b6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gesturesJs = require("../../../plugins/gestures.js");
exports.default = (0, _gesturesJs.Pinch);

},{"../../../plugins/gestures.js":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0L1m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rotateJs = require("./Rotate.js");
var _rotateJsDefault = parcelHelpers.interopDefault(_rotateJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("rotate", function(config) {
    return new (0, _rotateJsDefault.default)(this.scene, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Rotate", (0, _rotateJsDefault.default));
exports.default = (0, _rotateJsDefault.default);

},{"./Rotate.js":"eOyUs","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOyUs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _gesturesJs = require("../../../plugins/gestures.js");
exports.default = (0, _gesturesJs.Rotate);

},{"../../../plugins/gestures.js":"7vo1R","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvrWA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _flipJs = require("./Flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("flip", function(gameObject, config) {
    return new (0, _flipJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Flip", (0, _flipJsDefault.default));
exports.default = (0, _flipJsDefault.default);

},{"./Flip.js":"8IdoU","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IdoU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _flipJs = require("../../../plugins/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
exports.default = (0, _flipJsDefault.default);

},{"../../../plugins/flip.js":"7FnmX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7FnmX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _flipJs = require("./behaviors/flip/Flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
exports.default = (0, _flipJsDefault.default);

},{"./behaviors/flip/Flip.js":"1WwWx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WwWx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _easeValueTaskBaseJs = require("../../utils/componentbase/tweentask/EaseValueTaskBase.js");
var _easeValueTaskBaseJsDefault = parcelHelpers.interopDefault(_easeValueTaskBaseJs);
var _getFaceUpdatingCallbackJs = require("./GetFaceUpdatingCallback.js");
var _getFaceUpdatingCallbackJsDefault = parcelHelpers.interopDefault(_getFaceUpdatingCallbackJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const Linear = Phaser.Math.Linear;
class Flip extends (0, _easeValueTaskBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject, config);
        // this.parent = gameObject;
        // this.timer
        this.resetFromJSON(config);
        this.boot();
    }
    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDuration(GetAdvancedValue(o, "duration", 500));
        this.setEase(GetValue(o, "ease", "Sine"));
        this.setOrientation(GetValue(o, "orientation", 0));
        this.setFrontFace(GetValue(o, "front", undefined));
        this.setBackFace(GetValue(o, "back", undefined));
        this.setFace(GetValue(o, "face", 0));
        return this;
    }
    setOrientation(orientation) {
        if (typeof orientation === "string") orientation = ORIENTATIONMODE[orientation];
        this.orientation = orientation;
        return this;
    }
    get face() {
        return this._face;
    }
    set face(face) {
        if (typeof face === "string") face = FACEMODE[face];
        this._face = face;
        if (face === 0 && this.frontFaceCallback) this.frontFaceCallback(this.parent);
        else if (face === 1 && this.backFaceCallback) this.backFaceCallback(this.parent);
    }
    setFace(face) {
        this.face = face;
        return this;
    }
    toggleFace() {
        var newFace = this.face === 0 ? 1 : 0;
        this.setFace(newFace);
        return this;
    }
    setFrontFace(key, frame) {
        this.frontFaceCallback = (0, _getFaceUpdatingCallbackJsDefault.default)(key, frame, this.parent);
        return this;
    }
    setBackFace(key, frame) {
        this.backFaceCallback = (0, _getFaceUpdatingCallbackJsDefault.default)(key, frame, this.parent);
        return this;
    }
    start() {
        if (this.timer.isRunning) return this;
        var gameObject = this.parent;
        if (this.orientation === 0) this.scale0 = gameObject.scaleX;
        else this.scale0 = gameObject.scaleY;
        this.timer.setDelay(this.delay).setDuration(this.duration / 2).setRepeat(1); // 2 times
        super.start();
        return this;
    }
    flip(duration) {
        if (this.isRunning) return this;
        if (duration !== undefined) this.setDuration(duration);
        this.start();
        return this;
    }
    updateGameObject(gameObject, timer) {
        if (timer.justRestart) this.toggleFace();
        var t = timer.t;
        if (timer.isOddIteration) t = 1 - t;
        t = this.easeFn(t);
        var value = Linear(this.scale0, 0, t);
        if (this.orientation === 0) gameObject.scaleX = value;
        else gameObject.scaleY = value;
    }
}
const ORIENTATIONMODE = {
    x: 0,
    horizontal: 0,
    y: 1,
    vertical: 1
};
const FACEMODE = {
    front: 0,
    back: 1
};
exports.default = Flip;

},{"../../utils/componentbase/tweentask/EaseValueTaskBase.js":"9S4hR","./GetFaceUpdatingCallback.js":"b2pUJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b2pUJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
var GetFrameUpdatingCallback = function(key, frame, gameObject) {
    var callback;
    if (key === undefined) {
        key = gameObject.texture.key;
        frame = gameObject.frame.name;
    } else if (IsPlainObject(key)) {
        var config = key;
        key = GetValue(config, "key", gameObject.texture.key);
        frame = GetValue(config, "frame", gameObject.frame.name);
    } else if (typeof key === "string") ;
    else callback = key;
    if (callback === undefined) callback = function(gameObject) {
        gameObject.setTexture(key, frame);
    };
    return callback;
};
exports.default = GetFrameUpdatingCallback;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hB7ZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _shakeJs = require("./Shake.js");
var _shakeJsDefault = parcelHelpers.interopDefault(_shakeJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("shake", function(gameObject, config) {
    return new (0, _shakeJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Shake", (0, _shakeJsDefault.default));
exports.default = (0, _shakeJsDefault.default);

},{"./Shake.js":"cKF0q","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kkAsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _touchEventStopJs = require("./TouchEventStop.js");
var _touchEventStopJsDefault = parcelHelpers.interopDefault(_touchEventStopJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("touchEventStop", function(gameObject, config) {
    return new (0, _touchEventStopJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TouchEventStop", (0, _touchEventStopJsDefault.default));
exports.default = (0, _touchEventStopJsDefault.default);

},{"./TouchEventStop.js":"aRcpE","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bcbzI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _perspectiveJs = require("./Perspective.js");
var _perspectiveJsDefault = parcelHelpers.interopDefault(_perspectiveJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("perspective", function(gameObject, config) {
    return new (0, _perspectiveJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Perspective", (0, _perspectiveJsDefault.default));
exports.default = (0, _perspectiveJsDefault.default);

},{"./Perspective.js":"cBQql","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBQql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _perspectiveimageJs = require("../../../plugins/perspectiveimage.js");
exports.default = (0, _perspectiveimageJs.ContainerPerspective);

},{"../../../plugins/perspectiveimage.js":"er5r5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"btSwg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _skewJs = require("./Skew.js");
var _skewJsDefault = parcelHelpers.interopDefault(_skewJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("skew", function(gameObject, config) {
    return new (0, _skewJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Skew", (0, _skewJsDefault.default));
exports.default = (0, _skewJsDefault.default);

},{"./Skew.js":"9cGtL","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cGtL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _quadimageJs = require("../../../plugins/quadimage.js");
exports.default = (0, _quadimageJs.ContainerSkew);

},{"../../../plugins/quadimage.js":"wFtqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wFtqI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QuadImage", ()=>(0, _imageJsDefault.default));
parcelHelpers.export(exports, "QuadRenderTexture", ()=>(0, _renderTextureJsDefault.default));
parcelHelpers.export(exports, "SkewImage", ()=>(0, _skewImageJsDefault.default));
parcelHelpers.export(exports, "SkewRenderTexture", ()=>(0, _skewRenderTextureJsDefault.default));
parcelHelpers.export(exports, "ContainerSkew", ()=>(0, _containerSkewJsDefault.default));
var _imageJs = require("./gameobjects/mesh/quad/image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _renderTextureJs = require("./gameobjects/mesh/quad/rendertexture/RenderTexture.js");
var _renderTextureJsDefault = parcelHelpers.interopDefault(_renderTextureJs);
var _skewImageJs = require("./gameobjects/mesh/quad/skewimage/SkewImage.js");
var _skewImageJsDefault = parcelHelpers.interopDefault(_skewImageJs);
var _skewRenderTextureJs = require("./gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js");
var _skewRenderTextureJsDefault = parcelHelpers.interopDefault(_skewRenderTextureJs);
var _containerSkewJs = require("./behaviors/containerskew/ContainerSkew.js");
var _containerSkewJsDefault = parcelHelpers.interopDefault(_containerSkewJs);

},{"./gameobjects/mesh/quad/image/Image.js":"jvvFQ","./gameobjects/mesh/quad/rendertexture/RenderTexture.js":"fkQT3","./gameobjects/mesh/quad/skewimage/SkewImage.js":"fVskI","./gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js":"9i7EY","./behaviors/containerskew/ContainerSkew.js":"48Q8l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvvFQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _initFacesJs = require("./methods/InitFaces.js");
var _initFacesJsDefault = parcelHelpers.interopDefault(_initFacesJs);
var _getPointPositionJs = require("./methods/GetPointPosition.js");
var _getPointPositionJsDefault = parcelHelpers.interopDefault(_getPointPositionJs);
const Mesh = Phaser.GameObjects.Mesh;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class Image extends Mesh {
    constructor(scene, x, y, key, frame, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            key = GetValue(config, "key", null);
            frame = GetValue(config, "frame", null);
        }
        super(scene, x, y, key, frame);
        this.type = "rexQuadImage";
        this.isNinePointMode = GetValue(config, "ninePointMode", false);
        this.fourPointsModeRTL = GetValue(config, "rtl", false);
        this.controlPoints = [];
        (0, _initFacesJsDefault.default)(this);
        this.hideCCW = false;
        this.syncSize();
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        for(var i = 0, cnt = this.controlPoints.length; i < cnt; i++)this.controlPoints[i].destroy();
        this.controlPoints = undefined;
    }
    resetVerts() {
        // Clear faces and vertices        
        this.dirtyCache[9] = -1;
        var points = (0, _getPointPositionJsDefault.default)(this);
        // Calculate vertex data
        var srcWidth = this.width;
        var srcHeight = this.height;
        var vHalfWidth = this.frame.cutWidth / srcHeight / 2;
        var vHalfHeight = this.frame.cutHeight / srcHeight / 2;
        var frameU0 = this.frame.u0;
        var frameU1 = this.frame.u1;
        var frameV0 = this.frame.v0;
        var frameV1 = this.frame.v1;
        var frameU = frameU1 - frameU0;
        var frameV = frameV1 - frameV0;
        // Update vertex
        var controlPoints = this.controlPoints;
        for(var i = 0, cnt = points.length; i < cnt; i += 2){
            var px = points[i + 0];
            var py = points[i + 1];
            var vertexIndex = i / 2;
            var x = px / srcHeight - vHalfWidth;
            var y = py / srcHeight - vHalfHeight;
            var u = frameU0 + frameU * (px / srcWidth);
            var v = frameV0 + frameV * (py / srcHeight);
            this.vertices[vertexIndex].set(x, -y, 0).setUVs(u, v);
            controlPoints[vertexIndex].resetLocalXY(px, py);
        }
        return this;
    }
    syncSize() {
        this.setSizeToFrame(); // Reset size
        this.setOrtho(this.width / this.height, 1);
        this.resetVerts(); // Reset verts
        return this;
    }
    forceUpdate() {
        this.dirtyCache[10] = 1;
        return this;
    }
    get tint() {
        if (this.vertices.length === 0) return 0xffffff;
        else return this.vertices[0].color;
    }
}
exports.default = Image;

},{"./methods/InitFaces.js":"dGtCE","./methods/GetPointPosition.js":"9CiZO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dGtCE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _controlPointJs = require("./ControlPoint.js");
var _controlPointJsDefault = parcelHelpers.interopDefault(_controlPointJs);
const Vertex = Phaser.Geom.Mesh.Vertex;
const Face = Phaser.Geom.Mesh.Face;
var InitFaces = function(quad) {
    var isNinePointMode = quad.isNinePointMode;
    var pointCount = isNinePointMode ? 9 : 4;
    var vertices = quad.vertices;
    var faces = quad.faces;
    var controlPoints = quad.controlPoints;
    for(var i = 0; i < pointCount; i++){
        var vertex = new Vertex();
        vertices.push(vertex);
        controlPoints.push(new (0, _controlPointJsDefault.default)(quad, vertex));
    }
    var indices;
    if (isNinePointMode) indices = NinePointsIndices;
    else if (!quad.fourPointsModeRTL) indices = FourPointsIndices;
    else indices = FourPointsIndicesRTL;
    for(var i = 0, cnt = indices.length; i < cnt; i += 3){
        var vert1 = vertices[indices[i + 0]];
        var vert2 = vertices[indices[i + 1]];
        var vert3 = vertices[indices[i + 2]];
        faces.push(new Face(vert1, vert2, vert3));
    }
    if (isNinePointMode) {
        quad.topLeft = controlPoints[0];
        quad.topCenter = controlPoints[1];
        quad.topRight = controlPoints[2];
        quad.centerLeft = controlPoints[3];
        quad.center = controlPoints[4];
        quad.centerRight = controlPoints[5];
        quad.bottomLeft = controlPoints[6];
        quad.bottomCenter = controlPoints[7];
        quad.bottomRight = controlPoints[8];
    } else {
        quad.topLeft = controlPoints[0];
        quad.topRight = controlPoints[1];
        quad.bottomLeft = controlPoints[2];
        quad.bottomRight = controlPoints[3];
    }
};
/*
0, 1,
2, 3,
*/ const FourPointsIndices = [
    0,
    2,
    3,
    0,
    3,
    1
];
const FourPointsIndicesRTL = [
    1,
    3,
    2,
    1,
    2,
    0
];
/*
0, 1, 2,
3, 4, 5,
6, 7, 8
*/ const NinePointsIndices = [
    0,
    3,
    4,
    0,
    4,
    1,
    1,
    4,
    2,
    4,
    5,
    2,
    3,
    6,
    4,
    6,
    7,
    4,
    4,
    7,
    8,
    4,
    8,
    5
];
exports.default = InitFaces;

},{"./ControlPoint.js":"fByfJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fByfJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _localXYJs = require("../../../utils/LocalXY.js");
class ControlPoint {
    constructor(parent, vertex){
        this.parent = parent;
        this.vertex = vertex;
        this._localX = undefined;
        this._localY = undefined;
    }
    destroy() {
        this.parent = undefined;
        this.vertex = undefined;
    }
    updateVertexPosition(x, y) {
        var gameObject = this.parent;
        var srcHeight = gameObject.height;
        var vHalfWidth = gameObject.frame.cutWidth / srcHeight / 2;
        var vHalfHeight = gameObject.frame.cutHeight / srcHeight / 2;
        var vx = x / srcHeight - vHalfWidth;
        var vy = y / srcHeight - vHalfHeight;
        var vertex = this.vertex;
        vertex.x = vx;
        vertex.y = -vy;
        gameObject.forceUpdate();
        return this;
    }
    get localX() {
        return this._localX;
    }
    set localX(x) {
        this.setLocalXY(x, this._localY);
    }
    get localY() {
        return this._localY;
    }
    set localY(y) {
        this.setLocalXY(this._localX, y);
    }
    get localXOrigin() {
        return this._localXOrigin;
    }
    get localYOrigin() {
        return this._localYOrigin;
    }
    resetLocalXY(x, y) {
        this._localXOrigin = x;
        this._localYOrigin = y;
        this._localX = x;
        this._localY = y;
        return this;
    }
    setLocalXY(x, y, ignoreUpdateVertex) {
        if (this._localX === x && this._localY === y) return this;
        this._localX = x;
        this._localY = y;
        if (!ignoreUpdateVertex) this.updateVertexPosition(x, y);
        return this;
    }
    setWorldXY(x, y) {
        if (this._worldX === x && this._worldY === y) return this;
        var localXY = (0, _localXYJs.WorldXYToLocalXY)(this.parent, x, y);
        this.setLocalXY(localXY.x, localXY.y);
        return this;
    }
    setPosition(x, y) {
        this.setWorldXY(x, y);
        return this;
    }
    getWorldXY() {
        return (0, _localXYJs.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
    }
    get x() {
        var worldXY = (0, _localXYJs.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
        return worldXY.x;
    }
    set x(x) {
        this.setWorldXY(x, this.y);
    }
    get y() {
        var worldXY = (0, _localXYJs.LocalXYToWorldXY)(this.parent, this._localX, this._localY);
        return worldXY.y;
    }
    set y(y) {
        this.setWorldXY(this.x, y);
    }
}
exports.default = ControlPoint;

},{"../../../utils/LocalXY.js":"TtDD6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"TtDD6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LocalXYToWorldXY", ()=>LocalXYToWorldXY);
parcelHelpers.export(exports, "WorldXYToLocalXY", ()=>WorldXYToLocalXY);
const RotateAround = Phaser.Math.RotateAround;
var LocalXYToWorldXY = function(gameObject, localX, localY) {
    var ox = gameObject.width / 2;
    var oy = gameObject.height / 2;
    out.x = localX - ox;
    out.y = localY - oy;
    RotateAround(out, 0, 0, gameObject.rotation);
    out.x *= gameObject.scaleX;
    out.y *= gameObject.scaleY;
    out.x += gameObject.x;
    out.y += gameObject.y;
    return out;
};
var WorldXYToLocalXY = function(gameObject, worldX, worldY) {
    var ox = gameObject.width / 2;
    var oy = gameObject.height / 2;
    out.x = worldX - gameObject.x;
    out.y = worldY - gameObject.y;
    out.x /= gameObject.scaleX;
    out.y /= gameObject.scaleY;
    RotateAround(out, 0, 0, -gameObject.rotation);
    out.x += ox;
    out.y += oy;
    return out;
};
var out = {
    x: 0,
    y: 0
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CiZO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var GetPointPosition = function(quad) {
    var points;
    var top = 0, bottom = quad.height, left = 0, right = quad.width;
    if (quad.isNinePointMode) {
        var centerX = (left + right) / 2;
        var centerY = (top + bottom) / 2;
        points = [
            left,
            top,
            centerX,
            top,
            right,
            top,
            left,
            centerY,
            centerX,
            centerY,
            right,
            centerY,
            left,
            bottom,
            centerX,
            bottom,
            right,
            bottom // bottom-right
        ];
    } else points = [
        left,
        top,
        right,
        top,
        left,
        bottom,
        right,
        bottom // bottom-right
    ];
    return points;
};
exports.default = GetPointPosition;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkQT3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageJs = require("../image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _createDynamicTextureJs = require("../../../../utils/rendertexture/CreateDynamicTexture.js");
var _createDynamicTextureJsDefault = parcelHelpers.interopDefault(_createDynamicTextureJs);
var _snapshotJs = require("../../../../utils/rendertexture/Snapshot.js");
var _snapshotJsDefault = parcelHelpers.interopDefault(_snapshotJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class RenderTexture extends (0, _imageJsDefault.default) {
    constructor(scene, x, y, width, height, config){
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 32);
            height = GetValue(config, "height", 32);
        }
        // dynamic-texture -> quad-image
        var texture = (0, _createDynamicTextureJsDefault.default)(scene, width, height);
        super(scene, x, y, texture, null, config);
        this.type = "rexQuadRenderTexture";
        this.rt = this.texture;
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.rt.destroy();
        this.rt = null;
    }
    snapshot(gameObjects, config) {
        if (config === undefined) config = {};
        config.gameObjects = gameObjects;
        config.renderTexture = this.rt;
        (0, _snapshotJsDefault.default)(config);
        if (this.width !== this.frame.realWidth || this.height !== this.frame.realHeight) this.syncSize();
        return this;
    }
}
exports.default = RenderTexture;

},{"../image/Image.js":"jvvFQ","../../../../utils/rendertexture/CreateDynamicTexture.js":"5K58G","../../../../utils/rendertexture/Snapshot.js":"fjgt2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fVskI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _imageJs = require("../image/Image.js");
var _imageJsDefault = parcelHelpers.interopDefault(_imageJs);
var _skewJs = require("./Skew.js");
var _skewJsDefault = parcelHelpers.interopDefault(_skewJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const DegToRad = Phaser.Math.DegToRad;
const RadToDeg = Phaser.Math.RadToDeg;
class SkewImage extends (0, _imageJsDefault.default) {
    constructor(scene, x, y, key, frame){
        if (IsPlainObject(x)) {
            var config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            key = GetValue(config, "key", null);
            frame = GetValue(config, "frame", null);
        }
        super(scene, x, y, key, frame);
        this.type = "rexSkewmage";
        this._skewX = 0;
        this._skewY = 0;
    }
    get skewX() {
        return this._skewX;
    }
    set skewX(value) {
        this._skewX = value;
        (0, _skewJsDefault.default)(this, this._skewX, this._skewY);
    }
    get skewXDeg() {
        return RadToDeg(this._skewX);
    }
    set skewXDeg(value) {
        this.skewX = DegToRad(value);
    }
    get skewY() {
        return this._skewY;
    }
    set skewY(value) {
        this._skewY = value;
        (0, _skewJsDefault.default)(this, this._skewX, this._skewY);
    }
    get skewYDeg() {
        return RadToDeg(this._skewY);
    }
    set skewYDeg(value) {
        this.skewY = DegToRad(value);
    }
    setSkewX(skewX) {
        this.skewX = skewX;
        return this;
    }
    setSkewY(skewY) {
        this.skewY = skewY;
        return this;
    }
    setSkew(skewX, skewY) {
        if (skewY === undefined) skewY = skewX;
        this.skewX = skewX;
        this.skewY = skewY;
        return this;
    }
    setSkewXDeg(skewX) {
        this.skewXDeg = skewX;
        return this;
    }
    setSkewYDeg(skewY) {
        this.skewYDeg = skewY;
        return this;
    }
    setSkewDeg(skewX, skewY) {
        if (skewY === undefined) skewY = skewX;
        this.skewXDeg = skewX;
        this.skewYDeg = skewY;
        return this;
    }
}
exports.default = SkewImage;

},{"../image/Image.js":"jvvFQ","./Skew.js":"2uZ4I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2uZ4I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var Skew = function(gameObject, skewX, skewY) {
    if (skewX === undefined) skewX = 0;
    if (skewY === undefined) skewY = 0;
    var width = gameObject.width, height = gameObject.height;
    var ox = width * 0.5;
    var oy = height * 0.5;
    var xOffset = Math.tan(skewX) * oy;
    var yOffset = Math.tan(skewY) * ox;
    var controlPoints = gameObject.controlPoints;
    for(var i = 0, cnt = controlPoints.length; i < cnt; i++){
        var controlPoint = controlPoints[i];
        var x = controlPoint.localXOrigin;
        var y = controlPoint.localYOrigin;
        controlPoint.localX = x + (y > oy ? xOffset : -xOffset);
        controlPoint.localY = y + (x > ox ? yOffset : -yOffset);
    }
};
exports.default = Skew;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9i7EY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _skewImageJs = require("../skewimage/SkewImage.js");
var _skewImageJsDefault = parcelHelpers.interopDefault(_skewImageJs);
var _createDynamicTextureJs = require("../../../../utils/rendertexture/CreateDynamicTexture.js");
var _createDynamicTextureJsDefault = parcelHelpers.interopDefault(_createDynamicTextureJs);
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
class SkewRenderTexture extends (0, _skewImageJsDefault.default) {
    constructor(scene, x, y, width, height){
        if (IsPlainObject(x)) {
            var config = x;
            x = GetValue(config, "x", 0);
            y = GetValue(config, "y", 0);
            width = GetValue(config, "width", 32);
            height = GetValue(config, "height", 32);
        }
        // dynamic-texture -> quad-image
        var texture = (0, _createDynamicTextureJsDefault.default)(scene, width, height);
        super(scene, x, y, texture, null);
        this.type = "rexSkewRenderTexture";
        this.rt = this.texture;
    }
    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene || this.ignoreDestroy) return;
        super.destroy(fromScene);
        this.rt.destroy();
        this.rt = null;
    }
}
exports.default = SkewRenderTexture;

},{"../skewimage/SkewImage.js":"fVskI","../../../../utils/rendertexture/CreateDynamicTexture.js":"5K58G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"48Q8l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _meshRenderTextureBaseJs = require("../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js");
var _meshRenderTextureBaseJsDefault = parcelHelpers.interopDefault(_meshRenderTextureBaseJs);
var _skewRenderTextureJs = require("../../gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js");
var _skewRenderTextureJsDefault = parcelHelpers.interopDefault(_skewRenderTextureJs);
class ContainerSkew extends (0, _meshRenderTextureBaseJsDefault.default)((0, _skewRenderTextureJsDefault.default)) {
    get skewState() {
        return this.isRunning;
    }
}
exports.default = ContainerSkew;

},{"../../gameobjects/container/containerlite/rendertexture/MeshRenderTextureBase.js":"lWkXU","../../gameobjects/mesh/quad/skewrendertexture/SkewRenderTexture.js":"9i7EY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zGh8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _anchorJs = require("./Anchor.js");
var _anchorJsDefault = parcelHelpers.interopDefault(_anchorJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("anchor", function(gameObject, config) {
    return new (0, _anchorJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.Anchor", (0, _anchorJsDefault.default));
exports.default = (0, _anchorJsDefault.default);

},{"./Anchor.js":"1nc3X","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ji7B5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textTypingJs = require("./TextTyping.js");
var _textTypingJsDefault = parcelHelpers.interopDefault(_textTypingJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textTyping", function(gameObject, config) {
    return new (0, _textTypingJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextTyping", (0, _textTypingJsDefault.default));
exports.default = (0, _textTypingJsDefault.default);

},{"./TextTyping.js":"h70Mp","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJoPs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textPageJs = require("./TextPage.js");
var _textPageJsDefault = parcelHelpers.interopDefault(_textPageJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textPage", function(gameObject, config) {
    return new (0, _textPageJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextPage", (0, _textPageJsDefault.default));
exports.default = (0, _textPageJsDefault.default);

},{"./TextPage.js":"G86r6","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31ljd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textEditJs = require("./TextEdit.js");
var _textEditJsDefault = parcelHelpers.interopDefault(_textEditJs);
var _objectFactoryJs = require("../ObjectFactory.js");
var _objectFactoryJsDefault = parcelHelpers.interopDefault(_objectFactoryJs);
var _setValueJs = require("../../../plugins/utils/object/SetValue.js");
var _setValueJsDefault = parcelHelpers.interopDefault(_setValueJs);
(0, _objectFactoryJsDefault.default).register("textEdit", function(gameObject, config) {
    return new (0, _textEditJsDefault.default)(gameObject, config);
});
(0, _setValueJsDefault.default)(window, "RexPlugins.UI.TextEdit", (0, _textEditJsDefault.default));
exports.default = (0, _textEditJsDefault.default);

},{"./TextEdit.js":"gH7x5","../ObjectFactory.js":"g2ISQ","../../../plugins/utils/object/SetValue.js":"eUEYa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gH7x5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _texteditJs = require("../../../plugins/textedit.js");
exports.default = (0, _texteditJs.TextEdit);

},{"../../../plugins/textedit.js":"7bgfF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7bgfF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TextEdit", ()=>(0, _textEditJsDefault.default));
parcelHelpers.export(exports, "Edit", ()=>(0, _editJsDefault.default));
var _textEditJs = require("./behaviors/textedit/TextEdit.js");
var _textEditJsDefault = parcelHelpers.interopDefault(_textEditJs);
var _editJs = require("./behaviors/textedit/Edit.js");
var _editJsDefault = parcelHelpers.interopDefault(_editJs);

},{"./behaviors/textedit/TextEdit.js":"dYirI","./behaviors/textedit/Edit.js":"3HkzE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYirI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _componentBaseJs = require("../../utils/componentbase/ComponentBase.js");
var _componentBaseJsDefault = parcelHelpers.interopDefault(_componentBaseJs);
var _methodsJs = require("./methods/Methods.js");
var _methodsJsDefault = parcelHelpers.interopDefault(_methodsJs);
const GetValue = Phaser.Utils.Objects.GetValue;
class TextEdit extends (0, _componentBaseJsDefault.default) {
    constructor(gameObject, config){
        super(gameObject);
        // this.parent = gameObject;
        this.inputText = undefined;
        this.onClose = undefined;
        this.delayCall = undefined;
        this.setOpenConfig(config);
        var clickEnable = GetValue(config, "clickEnable", true);
        if (clickEnable) gameObject.on("pointerdown", function() {
            this.open();
        }, this).setInteractive();
    }
    shutdown(fromScene) {
        // Already shutdown
        if (this.isShutdown) return;
        this.close();
        super.shutdown(fromScene);
    }
    setOpenConfig(config) {
        if (config === undefined) config = {};
        this.openConfig = config;
        return this;
    }
    get isOpened() {
        return this.inputText !== undefined;
    }
    get text() {
        return this.isOpened ? this.inputText.text : this.parent.text;
    }
}
Object.assign(TextEdit.prototype, (0, _methodsJsDefault.default));
exports.default = TextEdit;

},{"../../utils/componentbase/ComponentBase.js":"2RQZy","./methods/Methods.js":"f0KL9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f0KL9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _openJs = require("./Open.js");
var _openJsDefault = parcelHelpers.interopDefault(_openJs);
var _closeJs = require("./Close.js");
var _closeJsDefault = parcelHelpers.interopDefault(_closeJs);
var Methods = {
    open: (0, _openJsDefault.default),
    close: (0, _closeJsDefault.default)
};
exports.default = Methods;

},{"./Open.js":"hmBMh","./Close.js":"jT0Xg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmBMh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lastOpenedEditorJs = require("./LastOpenedEditor.js");
var _isFunctionJs = require("../../../utils/object/IsFunction.js");
var _isFunctionJsDefault = parcelHelpers.interopDefault(_isFunctionJs);
var _createInputTextJs = require("./CreateInputText.js");
var _createInputTextJsDefault = parcelHelpers.interopDefault(_createInputTextJs);
var _nextTickJs = require("../../../utils/time/NextTick.js");
var _nextTickJsDefault = parcelHelpers.interopDefault(_nextTickJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Merge = Phaser.Utils.Objects.Merge;
var Open = function(config, onCloseCallback) {
    if (config === undefined) config = {};
    config = Merge(config, this.openConfig);
    (0, _lastOpenedEditorJs.SetLastOpenedEditor)(this);
    if ((0, _isFunctionJsDefault.default)(config)) {
        onCloseCallback = config;
        config = undefined;
    }
    if (onCloseCallback === undefined) onCloseCallback = GetValue(config, "onClose", undefined);
    var onOpenCallback = GetValue(config, "onOpen", undefined);
    var customOnTextChanged = GetValue(config, "onTextChanged", undefined);
    this.inputText = (0, _createInputTextJsDefault.default)(this.parent, config).on("textchange", function(inputText) {
        var text = inputText.text;
        if (customOnTextChanged) customOnTextChanged(this.parent, text);
        else this.parent.text = text;
    }, this).setFocus();
    this.parent.setVisible(false); // Set parent text invisible
    // Attach close event
    this.onClose = onCloseCallback;
    if (GetValue(config, "enterClose", true)) this.scene.input.keyboard.once("keydown-ENTER", this.close, this);
    // Attach pointerdown (outside of input-text) event, at next tick
    this.delayCall = (0, _nextTickJsDefault.default)(this.scene, function() {
        this.scene.input.once("pointerdown", this.close, this);
        // Open editor completly, invoke onOpenCallback
        if (onOpenCallback) onOpenCallback(this.parent);
        this.emit("open", this.parent);
    }, this);
    return this;
};
exports.default = Open;

},{"./LastOpenedEditor.js":"bPJix","../../../utils/object/IsFunction.js":"5hi03","./CreateInputText.js":"5nFFA","../../../utils/time/NextTick.js":"66Itx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bPJix":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetLastOpenedEditor", ()=>SetLastOpenedEditor);
parcelHelpers.export(exports, "CloseLastOpenEditor", ()=>CloseLastOpenEditor);
var LastOpenedEditor = undefined;
var SetLastOpenedEditor = function(editor) {
    if (editor === LastOpenedEditor) return;
    if (LastOpenedEditor !== undefined) LastOpenedEditor.close();
    LastOpenedEditor = editor;
};
var CloseLastOpenEditor = function(editor) {
    if (editor !== LastOpenedEditor) return;
    // Don't call `LastOpenedEditor.close()`
    LastOpenedEditor = undefined;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5nFFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _inputTextJs = require("../../../gameobjects/dom/inputtext/InputText.js");
var _inputTextJsDefault = parcelHelpers.interopDefault(_inputTextJs);
var _isTextGameObjectJs = require("../../../utils/text/IsTextGameObject.js");
var _isTextGameObjectJsDefault = parcelHelpers.interopDefault(_isTextGameObjectJs);
const GetValue = Phaser.Utils.Objects.GetValue;
const Clone = Phaser.Utils.Objects.Clone;
var CreateInputText = function(text, config) {
    if (config === undefined) config = {};
    config = Clone(config);
    var scene = text.scene;
    var style = text.style;
    var backgroundColor = GetValue(config, "backgroundColor", style.backgroundColor);
    if (backgroundColor === null) backgroundColor = "transparent";
    config.text = GetValue(config, "text", text.text);
    config.fontFamily = GetValue(config, "fontFamily", style.fontFamily);
    config.fontSize = GetValue(config, "fontSize", style.fontSize);
    config.color = GetValue(config, "color", style.color);
    config.backgroundColor = backgroundColor;
    config.direction = GetValue(config, "rtl", style.rtl) ? "rtl" : "ltr";
    config.align = GetValue(config, "align", GetHAlign(style));
    // Built-in text game object with RTL only has 'right' align
    if (config.direction === "rtl" && (0, _isTextGameObjectJsDefault.default)(text)) config.align = "right";
    // config.paddingLeft = 0;
    // config.paddingRight = 0;
    // config.paddingTop = 0;
    // config.paddingBottom = 0;
    // var valign = GetVAlign(style);
    // switch (valign) {
    //     case 'top':
    //         break;
    //     case 'bottom':
    //         break;
    // }
    var inputText = new (0, _inputTextJsDefault.default)(scene, text.x, text.y, GetValue(config, "width", text.width), GetValue(config, "height", text.height), config);
    inputText// Sync origin
    .setOrigin(text.originX, text.originY)// Sync scrollFactor
    .setScrollFactor(text.scrollFactorX, text.scrollFactorY);
    var textParentContainer = text.parentContainer;
    if (!textParentContainer) scene.add.existing(inputText);
    else textParentContainer.add(inputText);
    return inputText;
};
var GetHAlign = function(style) {
    if (style.hasOwnProperty("align")) return style.align;
    else if (style.hasOwnProperty("halign")) return style.halign;
    else return "left";
};
var GetVAlign = function(style) {
    if (style.hasOwnProperty("halign")) return style.halign;
    else return "top";
};
exports.default = CreateInputText;

},{"../../../gameobjects/dom/inputtext/InputText.js":"gLRVR","../../../utils/text/IsTextGameObject.js":"7s4wi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66Itx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var NextTick = function(scene, callback, scope) {
    return scene.time.delayedCall(0, callback, [], scope);
};
exports.default = NextTick;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jT0Xg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _lastOpenedEditorJs = require("./LastOpenedEditor.js");
var Close = function() {
    (0, _lastOpenedEditorJs.CloseLastOpenEditor)(this);
    this.parent.setVisible(true); // Set parent text visible
    if (this.inputText) {
        this.inputText.destroy();
        this.inputText = undefined;
    }
    if (this.delayCall) {
        this.delayCall.remove();
        this.delayCall = undefined;
    }
    // Remove close event
    this.scene.input.keyboard.off("keydown-ENTER", this.close, this);
    this.scene.input.off("pointerdown", this.close, this);
    if (this.onClose) this.onClose(this.parent);
    this.emit("close", this.parent);
    return this;
};
exports.default = Close;

},{"./LastOpenedEditor.js":"bPJix","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3HkzE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _textEditJs = require("./TextEdit.js");
var _textEditJsDefault = parcelHelpers.interopDefault(_textEditJs);
var Edit = function(gameObject, config, onCloseCallback) {
    if (!gameObject._edit) gameObject._edit = new (0, _textEditJsDefault.default)(gameObject, {
        clickEnable: false
    });
    gameObject._edit.open(config, onCloseCallback);
    return gameObject._edit;
};
exports.default = Edit;

},{"./TextEdit.js":"dYirI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nvis":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetParentSizer", ()=>(0, _getParentJs.GetParent));
parcelHelpers.export(exports, "GetTopmostSizer", ()=>(0, _getParentJs.GetTopmostParent));
var _getParentJs = require("../../../plugins/gameobjects/container/containerlite/GetParent.js");

},{"../../../plugins/gameobjects/container/containerlite/GetParent.js":"02YdQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMqpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _texteditJs = require("../../../plugins/textedit.js");
exports.default = (0, _texteditJs.Edit);

},{"../../../plugins/textedit.js":"7bgfF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7QedL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fontSizeFitJs = require("../../../../plugins/utils/text/fontsizefit/FontSizeFit.js");
var _fontSizeFitJsDefault = parcelHelpers.interopDefault(_fontSizeFitJs);
const GetValue = Phaser.Utils.Objects.GetValue;
var FontSizeExpandText = function(textObject, config) {
    if (typeof config === "number") config = {
        minWidth: config
    };
    var minWidth = GetValue(config, "minWidth", 0);
    var minHeight = GetValue(config, "minHeight", 0);
    var fitHeight = GetValue(config, "fitHeight", false);
    textObject._minWidth = minWidth;
    textObject._minHeight = minHeight;
    if (!fitHeight) {
        // Set font size to fit width only
        textObject.runWidthWrap = function(width) {
            if (textObject.setFixedSize) textObject.setFixedSize(0, 0);
            (0, _fontSizeFitJsDefault.default)(textObject, width, undefined);
            return textObject;
        };
        textObject.resize = function(width, height) {
            if (textObject.width === width && textObject.height === height) return textObject;
            // Font size is set under runWidthWrap/FontSizeFit
            textObject.setFixedSize(width, height);
            return textObject;
        };
    } else {
        // Set font size to fit width and height
        textObject.runWidthWrap = function(width) {
            // Minimun text size
            if (textObject.setFixedSize) textObject.setFixedSize(0, 0);
            textObject.setFontSize(1);
            return textObject;
        };
        textObject.resize = function(width, height) {
            (0, _fontSizeFitJsDefault.default)(textObject, width, height);
            return textObject;
        };
    }
    return textObject;
};
exports.default = FontSizeExpandText;

},{"../../../../plugins/utils/text/fontsizefit/FontSizeFit.js":"jOvZH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOvZH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const MaxTestCount = 65535;
var FontSizeFit = function(textObject, width, height) {
    if (width == null) // Do nothing if invalid width input
    return textObject;
    if (width === 0) {
        SetTextWidth(textObject, 0, height);
        return textObject;
    }
    var textLength = textObject.text.length;
    if (textLength === 0) {
        SetTextWidth(textObject, width, height);
        return textObject;
    }
    var fontSize = Math.floor(width * 1.5 / textLength);
    if (height !== undefined) {
        if (fontSize > height) fontSize = Math.floor(height);
    }
    var sizeData = {};
    var testResult = TestFontSize(textObject, fontSize, width, height, sizeData);
    for(var i = 0; i <= MaxTestCount; i++){
        if (testResult === 0) break;
        else {
            fontSize += testResult;
            if (fontSize < 0) {
                fontSize = 0;
                break;
            }
        }
        testResult = TestFontSize(textObject, fontSize, width, height, sizeData);
    // console.log(fontSize, testResult)
    }
    if (i === MaxTestCount) console.warn(`FontSizeFit: Test count exceeds ${MaxTestCount}`);
    textObject.setFontSize(fontSize);
    SetTextWidth(textObject, width, height);
    return textObject;
};
var GetTextSize = function(textObject, fontSize, sizeData) {
    if (sizeData[fontSize] === undefined) {
        textObject.setFontSize(fontSize);
        sizeData[fontSize] = {
            width: textObject.width,
            height: textObject.height
        };
    }
    return sizeData[fontSize];
};
var TestFontSize = function(textObject, fontSize, width, height, sizeData) {
    var textSize = GetTextSize(textObject, fontSize, sizeData);
    var textSize1 = GetTextSize(textObject, fontSize + 1, sizeData);
    var deltaHeight;
    if (height !== undefined) {
        // Clamp by height
        if (textSize.height <= height && textSize1.height > height) deltaHeight = 0;
        else if (textSize.height > height) return -1;
        else // Increase font size
        deltaHeight = Math.floor(height - textSize.height);
    }
    // Clamp by width
    var deltaWidth;
    if (textSize.width <= width && textSize1.width > width) return 0;
    else if (textSize.width > width) return -1;
    else {
        // Increase font size
        var deltaWidth = Math.floor(width - textSize.width);
        if (deltaHeight === undefined) return deltaWidth;
        else return Math.min(deltaWidth, deltaHeight);
    }
};
var SetTextWidth = function(textObject, width, height) {
    var style = textObject.style;
    if (!style) // BitmapText game object does not have style property
    return;
    style.fixedWidth = width;
    style.parent.width = width;
    if (height !== undefined) {
        style.fixedHeight = height;
        style.parent.height = height;
    }
    style.update(false);
};
exports.default = FontSizeFit;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lW6qc":[function() {},{}]},["fjhts","5JiMD"], "5JiMD", "parcelRequirecd09")

//# sourceMappingURL=game.905f6534.js.map
